# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   3 ', 'PHE', 0.016953480811275047, (83.941, -16.916000000000007, 25.499)), ('A', '   4 ', 'ARG', 0.04195808228618853, (83.22100000000003, -13.288999999999996, 24.366)), ('A', '  49 ', 'MET', 0.008511633541385967, (95.694, 14.413, 0.786)), ('A', ' 118 ', 'TYR', 0.049528685798581516, (83.349, 10.995, 14.917)), ('A', ' 141 ', 'LEU', 0.013309974733561474, (82.44000000000003, 5.152, 10.086999999999996)), ('A', ' 154 ', 'TYR', 0.01631745552014851, (94.94700000000002, -1.507, 36.898999999999994)), ('A', ' 192 ', 'GLN', 0.0005092767540987971, (101.147, 1.0689999999999997, -0.879)), ('A', ' 197 ', 'ASP', 0.012212617071406159, (96.77600000000001, -10.747, 6.023999999999998)), ('A', ' 224 ', 'THR', 0.005842284227268211, (102.663, -35.054000000000016, 18.898999999999994)), ('A', ' 300 ', 'CYS', 0.0005145447411121101, (91.74400000000003, -16.227, 34.535)), ('B', '  46 ', 'ALA', 0.027956220644347718, (73.213, -22.066000000000003, 47.857)), ('B', ' 154 ', 'TYR', 0.04685739687075749, (71.69300000000001, 10.201, 21.698)), ('B', ' 168 ', 'PRO', 0.07267185021094318, (72.78899999999999, -25.636, 32.817)), ('B', ' 187 ', 'ASP', 0.016240815381925407, (64.952, -17.325999999999997, 40.326)), ('B', ' 257 ', 'THR', 0.023009785904984297, (70.42700000000002, -0.966, -2.208)), ('B', ' 278 ', 'GLY', 0.007719419999999999, (86.30800000000004, -20.897, 2.121))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.010403683154955988, (83.22100000000003, -13.288999999999996, 24.366)), ('A', '   5 ', 'LYS', 0.11356771983411756, (86.01800000000003, -11.061, 23.389)), ('A', '  22 ', 'CYS', 0.15907335199142802, (91.04600000000002, 22.956, 11.105)), ('A', '  26 ', 'THR', 0.13465977240251134, (87.11100000000002, 17.773, 11.913)), ('A', '  30 ', 'LEU', 0.0, (93.30000000000001, 12.839000000000002, 22.674)), ('A', '  45 ', 'THR', 0.1447787183713889, (92.35000000000002, 19.837, 2.749)), ('A', '  48 ', 'ASP', 0.005657548535964452, (96.21900000000002, 17.991, -0.559)), ('A', '  49 ', 'MET', 0.0, (95.694, 14.413, 0.786)), ('A', '  53 ', 'ASN', 0.27116282350800286, (103.47000000000003, 19.452, 2.185)), ('A', '  56 ', 'ASP', 0.20257097967006055, (104.35500000000005, 24.375, 4.954)), ('A', '  64 ', 'HIS', 0.03008943098594323, (93.903, 30.558000000000007, 16.045)), ('A', '  77 ', 'VAL', 0.004294372705886355, (95.13600000000001, 26.51, 21.664)), ('A', ' 118 ', 'TYR', 0.012099743471560715, (83.349, 10.995, 14.917)), ('A', ' 121 ', 'SER', 0.055471482763118495, (82.241, 12.138000000000002, 19.897)), ('A', ' 130 ', 'MET', 0.008094409557874185, (97.211, -5.555, 15.387)), ('A', ' 131 ', 'ARG', 0.004448154701507895, (97.393, -7.900999999999999, 12.402)), ('A', ' 136 ', 'ILE', 0.2346794831767236, (93.918, -3.301, 11.87)), ('A', ' 153 ', 'ASP', 0.12239579753044824, (96.63300000000001, -2.071, 33.499)), ('A', ' 167 ', 'LEU', 0.042534852506677344, (94.158, 1.405, 2.875)), ('A', ' 226 ', 'THR', 0.021471996356139535, (107.985, -31.144999999999996, 15.652999999999997)), ('A', ' 227 ', 'LEU', 0.045248407438087127, (107.94600000000004, -27.21299999999999, 15.56)), ('A', ' 228 ', 'ASN', 0.2469852323680337, (109.266, -27.511999999999997, 12.108)), ('A', ' 256 ', 'GLN', 0.027494692404371947, (99.31, -23.955999999999992, 34.113)), ('A', ' 268 ', 'LEU', 0.0, (95.995, -27.249999999999996, 16.184)), ('A', ' 280 ', 'THR', 0.10983460102727263, (82.22300000000001, -26.383, 18.968)), ('A', ' 285 ', 'THR', 0.10890012216843198, (82.66900000000003, -23.092, 15.076999999999996)), ('A', ' 286 ', 'ILE', 0.0, (85.666, -21.014, 14.207)), ('A', ' 298 ', 'ARG', 0.010516255898374391, (94.51200000000003, -11.749, 32.938)), ('A', ' 300 ', 'CYS', 0.02440959360683337, (91.74400000000003, -16.227, 34.535)), ('B', '   3 ', 'PHE', 0.11428391227357024, (82.675, -3.9919999999999995, 9.290999999999997)), ('B', '  22 ', 'CYS', 0.07322877645492554, (74.59, -9.721, 52.027)), ('B', '  28 ', 'ASN', 0.20125179745961683, (76.96200000000002, -5.870000000000002, 41.252)), ('B', '  30 ', 'LEU', 0.0, (73.004, -0.331, 39.555)), ('B', '  49 ', 'MET', 0.11719068423707626, (68.77600000000001, -21.568, 46.17199999999998)), ('B', '  64 ', 'HIS', 0.0002325770299902673, (71.97600000000003, -2.679, 58.007)), ('B', '  65 ', 'SER', 0.05334483780185926, (72.32900000000002, -6.235000000000001, 56.664999999999985)), ('B', '  68 ', 'VAL', 0.09468820702638518, (76.80700000000002, -1.176, 49.352)), ('B', '  77 ', 'VAL', 0.021754647150769663, (70.709, 1.915, 52.905)), ('B', '  87 ', 'LEU', 0.11865823481940242, (65.716, -5.788, 45.045)), ('B', '  92 ', 'ASP', 0.17707916457650769, (70.86200000000001, 8.013, 51.667)), ('B', ' 131 ', 'ARG', 0.07334691795412061, (69.008, -14.919, 21.398)), ('B', ' 139 ', 'SER', 0.12663117000835647, (79.97300000000003, -16.325, 28.203)), ('B', ' 165 ', 'MET', 0.005299211548376295, (72.182, -16.732, 36.392)), ('B', ' 167 ', 'LEU', 0.02595554321432408, (71.573, -21.973000000000003, 32.653)), ('B', ' 175 ', 'THR', 0.05847714492119849, (65.808, -9.638, 33.737)), ('B', ' 178 ', 'GLU', 0.026314960884293963, (61.418000000000006, -3.982, 36.274)), ('B', ' 187 ', 'ASP', 0.19197199200627557, (64.952, -17.325999999999997, 40.326)), ('B', ' 188 ', 'ARG', 0.08307438043749019, (65.75500000000001, -20.911999999999995, 41.511)), ('B', ' 200 ', 'ILE', 0.04880308054163849, (68.73000000000002, -14.844000000000001, 14.162)), ('B', ' 216 ', 'ASP', 0.1318934417038315, (80.674, -7.084999999999999, -1.066)), ('B', ' 232 ', 'LEU', 0.0697685864273082, (61.49699999999999, -24.34, 4.948)), ('B', ' 235 ', 'MET', 0.2592582868685032, (64.54, -24.148000000000007, 9.6)), ('B', ' 238 ', 'ASN', 0.0412150496216287, (68.49300000000002, -23.997, 12.582)), ('B', ' 247 ', 'VAL', 0.11315519524141536, (60.347, -8.657, 6.333)), ('B', ' 268 ', 'LEU', 0.000220674332575627, (70.94, -16.689, 1.8619999999999997)), ('B', ' 274 ', 'ASN', 0.05205558924222793, (76.27100000000003, -24.577, -0.354)), ('B', ' 282 ', 'LEU', 0.0, (82.69800000000002, -8.225000000000003, 5.264)), ('B', ' 286 ', 'ILE', 0.03072023986484541, (80.941, -17.035000000000007, 8.938)), ('B', ' 287 ', 'LEU', 0.0, (77.566, -15.268, 8.916)), ('B', ' 293 ', 'PRO', 0.011211889792552249, (68.43900000000001, -3.8970000000000002, 10.705)), ('B', ' 301 ', 'SER', 0.004019992775283754, (73.837, 5.079, 6.007))]
data['cbeta'] = [('A', '  44 ', 'CYS', ' ', 0.2668581581123292, (95.696, 17.689, 4.66)), ('A', ' 140 ', 'PHE', ' ', 0.25077951171390217, (86.36400000000003, 3.0570000000000013, 10.269)), ('A', ' 198 ', 'THR', ' ', 0.252752031095448, (98.96500000000003, -14.473999999999995, 7.874)), ('A', ' 224 ', 'THR', ' ', 0.338950525078835, (103.76100000000001, -34.95000000000002, 20.098)), ('B', ' 140 ', 'PHE', ' ', 0.3121589122223274, (80.20400000000001, -14.388, 32.233))]
data['probe'] = [(' A 226  THR HG22', ' A 229  ASP  H  ', -1.102, (107.667, -30.682, 12.564)), (' A   4  ARG HH11', ' B 138  GLY  HA2', -1.08, (79.035, -13.092, 25.501)), (' A 139  SER  HB2', ' B   4  ARG  H  ', -1.035, (83.375, -2.484, 11.621)), (' A 139  SER  HB2', ' B   4  ARG  N  ', -1.019, (82.977, -3.502, 11.972)), (' A  45  THR HG23', ' A  48  ASP  H  ', -0.932, (93.782, 19.595, 0.054)), (' A  22  CYS  SG ', ' A  61  LYS  NZ ', -0.904, (94.378, 24.485, 10.431)), (' A 139  SER  CB ', ' B   4  ARG  HB3', -0.854, (84.1, -2.323, 12.46)), (' A   4  ARG  NH1', ' B 138  GLY  HA2', -0.85, (77.869, -13.259, 24.846)), (' A   1  SER  HB3', ' A 331  HOH  O  ', -0.839, (83.045, -26.093, 28.294)), (' A   2  GLY  O  ', ' A 282  LEU HD22', -0.838, (84.892, -20.095, 25.484)), (' A 152  ILE HD12', ' A 157  VAL HG22', -0.834, (92.934, 3.502, 30.537)), (' B 229  ASP  OD2', ' B 269  LYS  NZ ', -0.821, (63.4, -21.473, -2.564)), (' A   4  ARG  HG3', ' B 138  GLY  HA2', -0.812, (79.338, -12.9, 25.033)), (' A   4  ARG HH11', ' B 138  GLY  CA ', -0.809, (78.195, -14.012, 25.461)), (' B 109  GLY  HA2', ' B 200  ILE HD12', -0.778, (67.852, -11.558, 17.107)), (' B 139  SER  HA ', ' B 172  HIS  HE1', -0.772, (78.063, -16.768, 28.915)), (' A 108  PRO  HA ', ' A 130  MET  HG2', -0.767, (100.843, -6.423, 14.782)), (' B  64  HIS  CD2', ' B  64  HIS  H  ', -0.758, (69.979, -2.1, 58.335)), (' B 269  LYS  HD3', ' B 343  HOH  O  ', -0.752, (66.165, -22.735, -2.972)), (' A 226  THR  CG2', ' A 229  ASP  H  ', -0.75, (108.838, -30.218, 12.338)), (' B  68  VAL  CG2', ' B  75  LEU  HB2', -0.732, (75.817, 2.644, 48.745)), (' A   4  ARG  NH1', ' B 138  GLY  CA ', -0.72, (77.936, -14.124, 25.399)), (' B   3  PHE  HB2', ' B 282  LEU  HG ', -0.719, (81.493, -4.797, 7.092)), (' A 118  TYR  HA ', ' A 143  GLY  O  ', -0.705, (84.661, 11.025, 13.165)), (' B 140  PHE  C  ', ' B 142  ASN  H  ', -0.701, (81.976, -16.203, 32.369)), (' A 139  SER  HB3', ' B   4  ARG  HB3', -0.699, (83.845, -1.74, 13.224)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.696, (102.054, 4.729, 3.493)), (' B 164  HIS  CD2', ' B 175  THR  HB ', -0.694, (67.794, -10.198, 35.741)), (' A 139  SER  HB2', ' B   4  ARG  CB ', -0.689, (84.045, -2.891, 12.094)), (' B 164  HIS  NE2', ' B 175  THR  HB ', -0.684, (67.565, -9.966, 36.441)), (' A 139  SER  HB2', ' B   4  ARG  HB3', -0.681, (83.642, -2.635, 12.574)), (' A 137  LYS  NZ ', ' A 197  ASP  OD1', -0.68, (92.393, -10.178, 7.989)), (' A 118  TYR  CG ', ' A 118  TYR  O  ', -0.667, (81.605, 11.873, 15.137)), (' A 139  SER  O  ', ' A 140  PHE  HD1', -0.658, (86.015, 1.008, 12.62)), (' A 224  THR HG22', ' A 329  HOH  O  ', -0.657, (104.592, -36.942, 18.632)), (' B  64  HIS  CD2', ' B  64  HIS  N  ', -0.656, (70.566, -1.59, 58.227)), (' A  55  GLU  O  ', ' A  59  ILE HG12', -0.655, (105.923, 25.001, 7.491)), (' A 300  CYS  O  ', ' A 300  CYS  SG ', -0.655, (93.582, -17.32, 34.898)), (' A 224  THR  CG2', ' A 329  HOH  O  ', -0.643, (104.628, -36.418, 18.331)), (' A  22  CYS  SG ', ' A  61  LYS  CE ', -0.639, (94.618, 23.772, 10.064)), (' A 295  ASP  OD1', ' A 298  ARG  NH2', -0.636, (94.476, -8.486, 26.793)), (' A 118  TYR  CD1', ' A 118  TYR  O  ', -0.634, (81.685, 13.118, 15.265)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.633, (64.012, -7.325, 38.088)), (' A 139  SER  C  ', ' A 140  PHE  HD1', -0.631, (85.782, 1.003, 11.504)), (' A 277  ASN  H  ', ' A 277  ASN HD22', -0.629, (84.76, -29.719, 10.972)), (' A 144  SER  O  ', ' A 147  SER  HB3', -0.628, (88.842, 7.189, 14.672)), (' A  52  PRO  O  ', ' A 188  ARG  NH2', -0.625, (103.055, 16.018, 1.402)), (' B 277  ASN  O  ', ' B 278  GLY  O  ', -0.62, (85.937, -20.488, -0.419)), (' A  28  ASN  ND2', ' A 117  CYS  HB2', -0.609, (86.936, 9.512, 16.906)), (' A 139  SER  HB2', ' B   4  ARG  CA ', -0.607, (83.684, -3.523, 12.476)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.605, (80.715, -14.641, 2.791)), (' A   4  ARG  NH1', ' B 138  GLY  N  ', -0.603, (76.866, -13.53, 25.285)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.603, (63.763, -20.476, 35.28)), (' A 226  THR HG21', ' A 229  ASP  OD1', -0.603, (109.376, -31.572, 11.593)), (' A 286  ILE HD13', ' A 322  HOH  O  ', -0.6, (88.45, -20.43, 11.621)), (' B 286  ILE  N  ', ' B 286  ILE HD13', -0.599, (82.635, -16.086, 9.379)), (' A 299  GLN  HB3', ' B 141  LEU  CD1', -0.594, (88.655, -13.194, 30.78)), (' A 102  LYS  HE3', ' A 156  CYS  SG ', -0.593, (100.574, 2.608, 33.078)), (' A 131  ARG HH11', ' A 137  LYS  HZ2', -0.588, (92.692, -10.617, 9.759)), (' B 175  THR  CG2', ' B 176  ASP  O  ', -0.587, (64.928, -6.974, 34.784)), (' B 135  THR  C  ', ' B 136  ILE HD12', -0.585, (70.306, -14.178, 26.398)), (' A 152  ILE  CD1', ' A 157  VAL HG22', -0.583, (93.167, 3.008, 30.136)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.582, (102.044, 10.187, 15.532)), (' A 139  SER  O  ', ' A 140  PHE  CD1', -0.578, (85.749, 1.756, 12.14)), (' B  22  CYS  SG ', ' B  61  LYS  CE ', -0.577, (70.653, -9.184, 52.297)), (' A 277  ASN  N  ', ' A 277  ASN HD22', -0.573, (85.045, -30.672, 10.844)), (' B  43  ILE HG22', ' B  61  LYS  HE2', -0.571, (69.63, -9.707, 51.809)), (' A 226  THR HG22', ' A 229  ASP  N  ', -0.568, (107.396, -29.827, 12.478)), (' A   4  ARG HH12', ' B 138  GLY  N  ', -0.565, (77.083, -14.305, 25.082)), (' A 126  TYR  HH ', ' A 140  PHE  HE1', -0.563, (88.245, 0.584, 14.616)), (' B   8  PHE  HB3', ' B 152  ILE HD12', -0.56, (76.829, 3.32, 24.278)), (' A   4  ARG HH12', ' B 137  LYS  C  ', -0.556, (77.075, -14.774, 24.503)), (' A 191  ALA  O  ', ' A 192  GLN  O  ', -0.551, (99.149, 0.74, -0.848)), (' B  22  CYS  SG ', ' B  61  LYS  HE2', -0.551, (70.576, -9.332, 51.972)), (' B 132  PRO  HD3', ' B 200  ILE HD11', -0.545, (68.821, -15.066, 18.427)), (' B  68  VAL HG23', ' B  75  LEU  HB2', -0.544, (76.337, 1.874, 48.984)), (' A  22  CYS  SG ', ' A  61  LYS  HE3', -0.543, (94.958, 23.272, 10.196)), (' B 286  ILE  H  ', ' B 286  ILE HD13', -0.542, (82.997, -15.868, 9.309)), (' B  22  CYS  SG ', ' B  61  LYS  NZ ', -0.54, (71.046, -10.096, 53.102)), (' B 175  THR HG22', ' B 176  ASP  O  ', -0.537, (65.398, -6.76, 34.892)), (' B  78  ILE  O  ', ' B  78  ILE HG22', -0.536, (65.562, 4.509, 54.363)), (' A 135  THR  C  ', ' A 136  ILE HD12', -0.535, (96.413, -2.978, 11.908)), (' A 302  GLY  O  ', ' B 118  TYR  CZ ', -0.533, (87.996, -10.721, 39.327)), (' A  19  GLN  HB3', ' A 120  GLY  HA3', -0.528, (85.401, 15.809, 19.091)), (' A  53  ASN  C  ', ' A  53  ASN HD22', -0.528, (104.04, 20.28, 3.604)), (' A 130  MET  HE1', ' A 182  TYR  CD1', -0.525, (102.31, -1.819, 15.404)), (' A 139  SER  CB ', ' B   4  ARG  H  ', -0.524, (82.937, -2.206, 11.633)), (' B 167  LEU HD21', ' B 173  ALA  HB2', -0.521, (68.523, -18.585, 31.3)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.519, (96.567, -0.595, 36.545)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.517, (97.901, 18.62, 9.039)), (' A 151  ASN  O  ', ' A 152  ILE HD13', -0.516, (94.622, 1.327, 29.027)), (' B 288  GLU  OE1', ' B 290  GLU  HB2', -0.514, (76.656, -10.303, 15.717)), (' B 140  PHE  C  ', ' B 142  ASN  N  ', -0.514, (82.439, -16.034, 33.131)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.513, (97.088, 13.748, 2.102)), (' A  48  ASP  O  ', ' A  50  LEU  N  ', -0.512, (97.12, 14.736, -1.332)), (' B 139  SER  HA ', ' B 172  HIS  CE1', -0.511, (78.08, -16.142, 29.192)), (' A   4  ARG  NH1', ' B 137  LYS  C  ', -0.508, (77.422, -14.348, 24.352)), (' B 119  ASN  H  ', ' B 144  SER  CB ', -0.505, (81.614, -9.304, 39.961)), (' B 178  GLU  HG2', ' B 180  LYS  NZ ', -0.505, (57.353, -4.637, 34.92)), (' A 140  PHE  O  ', ' B   1  SER  OG ', -0.505, (83.752, 1.861, 7.666)), (' B 136  ILE  N  ', ' B 136  ILE HD12', -0.504, (70.552, -14.444, 26.764)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.503, (63.736, -6.896, 38.106)), (' A 139  SER  CB ', ' B   4  ARG  CB ', -0.501, (84.498, -2.751, 12.785)), (' A 131  ARG  NH2', ' A 289  ASP  OD1', -0.498, (94.766, -13.502, 13.121)), (' B 277  ASN  O  ', ' B 278  GLY  C  ', -0.498, (85.624, -20.012, 0.477)), (' A 277  ASN  N  ', ' A 277  ASN  ND2', -0.496, (84.851, -30.839, 10.836)), (' A   3  PHE  CZ ', ' A 288  GLU  HG2', -0.495, (88.402, -14.95, 20.868)), (' A 131  ARG HH21', ' A 200  ILE HG13', -0.493, (96.398, -12.568, 13.132)), (' A  51  ASN HD22', ' A 188  ARG  HE ', -0.491, (102.943, 13.078, -0.14)), (' A 226  THR  CG2', ' A 229  ASP  OD1', -0.486, (108.826, -31.042, 12.211)), (' A   3  PHE  N  ', ' B 139  SER  HB3', -0.485, (81.704, -18.021, 26.88)), (' A  28  ASN  CG ', ' A 117  CYS  HB2', -0.477, (86.881, 10.486, 16.995)), (' A 139  SER  OG ', ' B 299  GLN  NE2', -0.475, (81.296, -0.285, 11.12)), (' A   2  GLY  HA3', ' B 139  SER  CB ', -0.474, (80.84, -18.758, 27.12)), (' B  63  ASN  O  ', ' B  77  VAL  CG1', -0.473, (71.261, -1.687, 54.618)), (' A 131  ARG HH11', ' A 137  LYS  NZ ', -0.472, (92.441, -10.627, 9.789)), (' A  44  CYS  SG ', ' A  54  TYR  CE2', -0.472, (98.486, 16.642, 5.41)), (' A 142  ASN  HB2', ' A 338  HOH  O  ', -0.467, (84.081, 10.553, 7.059)), (' A 140  PHE  HB2', ' A 172  HIS  CE1', -0.465, (87.833, 1.829, 9.45)), (' B 255  ALA  C  ', ' B 256  GLN  O  ', -0.465, (67.132, -0.069, -1.369)), (' A  43  ILE HG22', ' A  61  LYS  HE3', -0.465, (95.899, 22.829, 10.223)), (' A  28  ASN  OD1', ' A 117  CYS  HB3', -0.46, (85.616, 11.29, 17.424)), (' B 175  THR HG23', ' B 176  ASP  O  ', -0.46, (64.721, -7.329, 35.185)), (' A 270  GLU  HG3', ' A 274  ASN  OD1', -0.457, (93.43, -34.281, 12.88)), (' B  68  VAL HG22', ' B  75  LEU  HB2', -0.456, (75.829, 1.84, 49.737)), (' B 276  MET  CE ', ' B 281  ILE HG13', -0.456, (81.108, -15.075, 3.433)), (' B 132  PRO  HD3', ' B 200  ILE  CD1', -0.455, (68.398, -14.737, 17.978)), (' B 136  ILE HG22', ' B 138  GLY  H  ', -0.452, (75.554, -13.639, 26.542)), (' A  28  ASN  OD1', ' A 120  GLY  N  ', -0.451, (85.471, 13.237, 17.677)), (' A  44  CYS  SG ', ' A  54  TYR  HE2', -0.451, (98.499, 16.571, 6.222)), (' B 251  GLY  O  ', ' B 254  SER  N  ', -0.448, (64.89, -2.039, 2.176)), (' A 128  CYS  HA ', ' A 290  GLU  OE1', -0.447, (90.626, -7.706, 16.929)), (' B  63  ASN  HB3', ' B  77  VAL  O  ', -0.447, (69.457, 1.162, 55.464)), (' B 253  LEU HD21', ' B 296  VAL HG12', -0.447, (71.98, -1.524, 6.666)), (' A  51  ASN  ND2', ' A 188  ARG HH21', -0.446, (103.506, 14.31, -0.177)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.444, (102.442, 10.326, 16.021)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.444, (93.711, 15.625, 31.043)), (' A 131  ARG  NH1', ' A 137  LYS  HZ2', -0.444, (93.014, -10.85, 10.157)), (' B 131  ARG HH22', ' B 289  ASP  CG ', -0.443, (73.223, -14.674, 16.083)), (' A   3  PHE  H  ', ' B 139  SER  HB3', -0.441, (81.569, -17.532, 26.803)), (' B  19  GLN  O  ', ' B  68  VAL  HA ', -0.437, (77.2, -2.253, 48.144)), (' A 221  ASN  HB3', ' A 270  GLU  OE1', -0.435, (94.122, -35.166, 17.677)), (' B 117  CYS  O  ', ' B 144  SER  HB3', -0.434, (81.312, -9.102, 37.734)), (' B 127  GLN  HA ', ' B 127  GLN HE21', -0.433, (77.192, -4.449, 22.396)), (' B 140  PHE  O  ', ' B 142  ASN  N  ', -0.433, (82.327, -16.757, 33.006)), (' A  66  PHE  HB2', ' A  77  VAL HG11', -0.428, (94.01, 25.842, 17.55)), (' A   4  ARG  CG ', ' A   4  ARG HH11', -0.427, (79.396, -13.045, 24.59)), (' A 148  VAL HG21', ' A 159  PHE  CD1', -0.426, (94.617, 6.488, 23.866)), (' B  31  TRP  CZ2', ' B  75  LEU HD21', -0.421, (75.607, 6.143, 46.017)), (' B  21  THR  HA ', ' B  25  THR  O  ', -0.421, (76.959, -9.089, 49.173)), (' B 108  PRO  CD ', ' B 130  MET  HE3', -0.419, (63.677, -11.249, 23.012)), (' B 211  ALA  HA ', ' B 282  LEU HD13', -0.419, (79.782, -6.262, 3.675)), (' A   4  ARG  HG3', ' A   4  ARG HH11', -0.418, (79.334, -13.071, 25.088)), (' A 177  LEU  HA ', ' A 177  LEU HD13', -0.415, (99.671, 9.101, 19.609)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.415, (92.032, 1.004, 21.539)), (' A 296  VAL  O  ', ' A 300  CYS  HB3', -0.414, (92.96, -16.467, 32.176)), (' B 186  VAL  N  ', ' B 192  GLN HE22', -0.414, (63.223, -20.074, 35.795)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.414, (74.335, -4.091, 28.0)), (' A   2  GLY  HA3', ' B 139  SER  HB3', -0.413, (81.332, -18.571, 27.384)), (' B 108  PRO  N  ', ' B 130  MET  HE3', -0.409, (64.268, -11.045, 23.078)), (' B  41  HIS  HE1', ' B 164  HIS  O  ', -0.408, (71.832, -14.33, 39.156)), (' B 167  LEU  O  ', ' B 169  THR  N  ', -0.407, (73.351, -23.845, 31.367)), (' A 226  THR  CG2', ' A 228  ASN  HB3', -0.407, (109.641, -30.038, 12.518)), (' B 253  LEU HD21', ' B 296  VAL  CG1', -0.406, (71.98, -2.049, 6.643)), (' A 118  TYR  C  ', ' A 118  TYR  CD1', -0.406, (82.167, 12.4, 14.781)), (' B 137  LYS  O  ', ' B 139  SER  N  ', -0.405, (78.575, -15.742, 25.957)), (' B 232  LEU  O  ', ' B 232  LEU HD12', -0.404, (62.69, -26.085, 5.534)), (' A 139  SER  C  ', ' A 140  PHE  CD1', -0.404, (85.842, 1.516, 11.964)), (' B 126  TYR  HH ', ' B 140  PHE  HE1', -0.404, (78.461, -10.77, 29.713)), (' B 207  TRP  CE2', ' B 288  GLU  HB3', -0.403, (77.893, -10.35, 9.6)), (' B 167  LEU  CD2', ' B 173  ALA  HB2', -0.403, (69.017, -18.458, 31.561)), (' A 187  ASP  C  ', ' A 188  ARG  CG ', -0.403, (100.993, 10.351, 3.298)), (' A  60  ARG  HD3', ' A  60  ARG HH11', -0.401, (101.797, 27.293, 2.901)), (' B  40  ARG  NE ', ' B 187  ASP  OD1', -0.401, (63.171, -13.584, 42.308)), (' A   3  PHE  CE2', ' A 288  GLU  HG2', -0.4, (87.85, -15.28, 21.002)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.4, (95.825, 0.148, 2.077))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
