# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.044245107524229985, (-13.711999999999998, -13.640999999999998, -16.838)), ('A', '  47 ', 'GLU', 0.15549752570423467, (-1.5150000000000041, 21.492999999999995, 18.608)), ('A', '  59 ', 'ILE', 0.0005740707302031493, (9.540999999999995, 10.739999999999997, 27.894)), ('A', '  60 ', 'ARG', 0.12501579009420186, (6.576999999999996, 12.513999999999994, 29.322)), ('A', '  72 ', 'ASN', 0.01846712606899311, (-13.878, -5.443000000000001, 24.973)), ('A', '  74 ', 'GLN', 0.001386719240065872, (-8.338000000000006, -4.101000000000003, 27.607999999999993)), ('A', '  87 ', 'LEU', 0.07181083180354249, (5.292999999999999, 3.323000000000001, 18.754)), ('A', '  90 ', 'LYS', 0.2677656561673176, (4.615999999999996, -4.395000000000001, 24.769)), ('A', '  92 ', 'ASP', 0.07368690755323531, (0.7999999999999954, -8.464000000000004, 28.80999999999999)), ('A', '  94 ', 'SER', 0.23839930843777116, (-0.04100000000000392, -12.435999999999996, 23.254)), ('A', ' 106 ', 'ILE', 0.023772452463880555, (7.018, -2.2339999999999995, -0.8289999999999997)), ('A', ' 107 ', 'GLN', 0.019544640110820986, (8.404, -0.7189999999999998, -4.033)), ('A', ' 127 ', 'GLN', 0.07815507790380125, (-6.841, -2.408, -3.080999999999999)), ('A', ' 141 ', 'LEU', 0.17147010552731315, (-11.456000000000001, 9.512, 7.493999999999998)), ('A', ' 142 ', 'ASN', 0.2249034644537024, (-10.622, 10.899999999999999, 10.841)), ('A', ' 154 ', 'TYR', 0.0019722892830031924, (-0.31199999999999983, -18.606, 1.27)), ('A', ' 169 ', 'THR', 0.07142138796789663, (-4.101, 17.76, -1.6089999999999995)), ('A', ' 214 ', 'ASN', 0.1966440652143189, (-10.416, -11.279, -21.492)), ('A', ' 217 ', 'ARG', 0.08221862035882671, (-8.332, -6.670999999999999, -28.445)), ('A', ' 222 ', 'ARG', 0.024163118989515488, (0.41000000000000725, -4.622, -36.751)), ('A', ' 224 ', 'THR', 0.08310408019588957, (6.291000000000006, -2.9719999999999978, -33.27)), ('A', ' 262 ', 'LEU', 0.15266153549992553, (7.125000000000002, -4.649, -27.826999999999995)), ('A', ' 272 ', 'LEU', 0.0, (-1.4129999999999967, 7.389000000000001, -25.973)), ('A', ' 286 ', 'ILE', 0.017237459989698996, (-8.957, 5.2909999999999995, -19.09)), ('B', '   1 ', 'SER', 0.01071998049155809, (-10.913000000000004, 12.129, 2.73)), ('B', '   4 ', 'ARG', 0.019746724048922436, (-13.013999999999996, 4.380999999999997, -2.942)), ('B', '  41 ', 'HIS', 0.26987500508705753, (-25.527000000000008, -27.940999999999995, -10.536)), ('B', '  49 ', 'MET', 0.0, (-25.66, -29.072, -18.222)), ('B', '  55 ', 'GLU', 0.027570464922557974, (-35.11, -33.978999999999985, -9.922)), ('B', '  59 ', 'ILE', 0.0, (-32.83299999999999, -39.066999999999986, -6.857999999999998)), ('B', '  76 ', 'ARG', 0.1763208082656901, (-20.379, -35.90799999999999, 6.913)), ('B', '  90 ', 'LYS', 0.20478041320212936, (-27.395, -31.409, 6.187)), ('B', ' 100 ', 'LYS', 0.00016164148309272974, (-25.16100000000001, -13.894999999999996, 13.018999999999997)), ('B', ' 106 ', 'ILE', 0.02643838082003892, (-31.394, -7.724, -3.227)), ('B', ' 180 ', 'LYS', 0.003746728272473748, (-33.895, -18.198, -6.858999999999998)), ('B', ' 212 ', 'VAL', 0.11707435320546869, (-20.308000000000003, 17.668, -2.656)), ('B', ' 220 ', 'LEU', 0.0, (-23.598, 22.134, -9.933)), ('B', ' 222 ', 'ARG', 0.0, (-28.516, 27.307000000000002, -11.377)), ('B', ' 232 ', 'LEU', 0.027182495443672232, (-36.743, 12.445999999999998, -20.986)), ('B', ' 262 ', 'LEU', 0.0, (-34.326000000000015, 17.760000000000005, -8.724)), ('B', ' 272 ', 'LEU', 0.0, (-24.895999999999994, 14.248000000000001, -19.666999999999998)), ('B', ' 277 ', 'ASN', 0.2133880832954781, (-14.800999999999998, 18.790999999999997, -19.881999999999994)), ('B', ' 286 ', 'ILE', 0.009037693447610939, (-16.921999999999997, 9.051999999999998, -15.761999999999999))]
data['cbeta'] = [('A', '  41 ', 'HIS', ' ', 0.3199853245891096, (1.336999999999998, 11.436999999999998, 15.428)), ('A', '  73 ', 'VAL', ' ', 0.2532549483964012, (-10.116000000000001, -7.997000000000002, 26.250999999999994)), ('A', ' 290 ', 'GLU', ' ', 0.2880949964779816, (-4.001999999999998, 0.6110000000000002, -9.428999999999997)), ('B', ' 177 ', 'LEU', ' ', 0.25629897556954856, (-29.003000000000007, -17.248, 0.4029999999999999)), ('B', ' 212 ', 'VAL', ' ', 0.3177439001930036, (-21.613999999999997, 18.490999999999993, -2.934)), ('B', ' 290 ', 'GLU', ' ', 0.3181237129978448, (-21.000000000000007, 0.2669999999999999, -8.884999999999996))]
data['probe'] = [(' B  49  MET  HA ', ' B  49  MET  HE2', -1.161, (-26.957, -29.131, -16.483)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.973, (-10.271, -8.252, -11.55)), (' B  49  MET  CE ', ' B  49  MET  HA ', -0.917, (-25.818, -29.245, -16.36)), (' B 231  ASN HD21', ' B 242  LEU  H  ', -0.884, (-36.326, 8.99, -14.533)), (' A 165  MET  HE3', ' A 187  ASP  CB ', -0.859, (3.109, 11.994, 10.614)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.859, (-14.121, 4.856, -0.669)), (' B 222  ARG  HG2', ' B 222  ARG HH11', -0.855, (-28.936, 31.077, -11.511)), (' B 222  ARG  CG ', ' B 222  ARG HH11', -0.835, (-29.355, 30.748, -12.025)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.828, (-0.202, 16.289, 0.628)), (' B  74  GLN  HG2', ' B 364  HOH  O  ', -0.812, (-14.805, -37.442, 3.686)), (' A 132  PRO  HD2', ' A 197  ASP  OD1', -0.801, (2.307, 8.322, -8.802)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.761, (-1.177, -1.418, -7.475)), (' B 190  THR HG23', ' B 192  GLN  H  ', -0.747, (-29.427, -20.096, -23.262)), (' A 165  MET  HE3', ' A 187  ASP  HB3', -0.74, (3.537, 11.072, 10.686)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.739, (-30.945, -19.025, -17.793)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.737, (-5.463, 7.786, -0.717)), (' B 231  ASN  ND2', ' B 242  LEU  H  ', -0.736, (-36.027, 8.474, -14.979)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.735, (-10.69, -8.581, -12.064)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.72, (8.779, -6.512, -23.444)), (' B 222  ARG  HG2', ' B 222  ARG  NH1', -0.717, (-29.272, 31.768, -11.686)), (' B 138  GLY  H  ', ' B 172  HIS  HD2', -0.707, (-19.499, -10.392, -13.415)), (' A 153  ASP  O  ', ' A 154  TYR  CD2', -0.681, (1.804, -17.531, 1.546)), (' A 132  PRO  HG2', ' A 198  THR  O  ', -0.678, (3.994, 7.099, -11.256)), (' A  83  GLN  NE2', ' A  88  ARG HH11', -0.672, (10.132, -2.548, 16.119)), (' B 284  SER  OG ', ' B 286  ILE HD13', -0.634, (-15.843, 7.851, -13.77)), (' B 270  GLU  HG3', ' B 367  HOH  O  ', -0.621, (-25.043, 21.293, -19.831)), (' B 189  GLN  HG2', ' B 189  GLN  O  ', -0.62, (-25.283, -24.934, -23.107)), (' B  19  GLN HE21', ' B  26  THR HG21', -0.614, (-12.589, -29.096, -5.043)), (' A 213  ILE  O  ', ' A 213  ILE HG22', -0.613, (-7.711, -13.897, -20.681)), (' B  92  ASP  C  ', ' B  92  ASP  OD2', -0.601, (-21.804, -33.324, 11.742)), (' A 168  PRO  N  ', ' A 312  HOH  O  ', -0.6, (-2.03, 18.616, 3.303)), (' A  83  GLN HE22', ' A  88  ARG HH11', -0.587, (10.243, -2.439, 15.506)), (' A   5  LYS  HZ1', ' B   4  ARG HH12', -0.583, (-7.196, 2.27, -7.86)), (' A 138  GLY  H  ', ' A 172  HIS  CD2', -0.579, (-6.175, 8.311, -0.153)), (' A 131  ARG  HB3', ' A 132  PRO  HD2', -0.576, (2.41, 7.525, -8.226)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.567, (-14.483, 5.786, -0.818)), (' A  41  HIS  CD2', ' A 165  MET  HE2', -0.549, (1.132, 10.725, 11.693)), (' A 168  PRO  CA ', ' A 312  HOH  O  ', -0.544, (-2.421, 18.552, 3.369)), (' A 131  ARG  NE ', ' A 197  ASP  OD2', -0.543, (-0.073, 7.644, -9.05)), (' A 220  LEU HD11', ' A 259  ILE  CD1', -0.531, (-2.755, -8.844, -28.672)), (' A 167  LEU  HB3', ' A 168  PRO  CD ', -0.531, (-0.918, 16.821, 1.513)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.53, (-0.414, 13.053, -0.957)), (' A 220  LEU HD11', ' A 259  ILE HD11', -0.522, (-3.238, -9.25, -28.456)), (' B 180  LYS  HE2', ' B 181  PHE  O  ', -0.517, (-34.67, -15.925, -10.118)), (' A 111  THR HG22', ' A 129  ALA  CB ', -0.513, (-1.016, -0.659, -6.902)), (' B  44  CYS  CB ', ' B  49  MET  HE3', -0.512, (-25.564, -30.454, -14.854)), (' A  87  LEU HD13', ' A  89  LEU HD21', -0.512, (2.607, 2.878, 22.309)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.504, (-2.546, -9.713, 20.095)), (' B  62  SER  O  ', ' B  65  SER  HB2', -0.503, (-25.453, -38.627, -2.572)), (' A  47  GLU  HG3', ' A  47  GLU  O  ', -0.495, (0.219, 22.479, 18.889)), (' B  63  ASN  ND2', ' B  80  HIS  ND1', -0.488, (-28.657, -37.061, 1.014)), (' A 131  ARG  HB3', ' A 132  PRO  CD ', -0.487, (2.677, 7.022, -7.95)), (' B 133  ASN  O  ', ' B 134  HIS  HB2', -0.485, (-30.595, -9.586, -15.126)), (' B  49  MET  HE1', ' B  54  TYR  OH ', -0.483, (-27.875, -27.765, -14.212)), (' B  52  PRO  HD2', ' B 188  ILE HG12', -0.482, (-30.773, -27.454, -18.133)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.482, (7.953, 7.844, 14.632)), (' A 117  CYS  SG ', ' A 122  PRO  HA ', -0.478, (-10.761, -2.091, 10.233)), (' A 165  MET  CE ', ' A 187  ASP  CB ', -0.478, (2.748, 12.083, 11.552)), (' A 100  LYS  HD2', ' A 156  CYS  SG ', -0.475, (4.167, -16.272, 6.709)), (' B 225  THR  O  ', ' B 262  LEU  HG ', -0.472, (-36.79, 18.379, -10.877)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.469, (-7.772, 7.415, 6.954)), (' A 200  ILE HG22', ' A 203  ASN  H  ', -0.467, (2.936, 0.04, -14.32)), (' A 128  CYS  SG ', ' B   4  ARG  NE ', -0.467, (-7.002, 2.806, -3.247)), (' B 284  SER  OG ', ' B 286  ILE  CD1', -0.462, (-15.294, 7.338, -13.792)), (' B  13  VAL HG21', ' B 150  PHE  CZ ', -0.461, (-18.8, -11.474, 2.832)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.46, (-35.451, -32.184, -11.487)), (' A  41  HIS  CD2', ' A 165  MET  CE ', -0.459, (0.914, 11.305, 11.85)), (' A 213  ILE  CG2', ' A 213  ILE  O  ', -0.459, (-7.569, -13.874, -20.9)), (' A   5  LYS  NZ ', ' B   4  ARG  NH1', -0.453, (-7.669, 2.148, -7.155)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.452, (-30.524, 15.876, -19.902)), (' B 155  ASP  N  ', ' B 155  ASP  OD1', -0.449, (-23.368, -7.077, 14.313)), (' B 222  ARG  CG ', ' B 222  ARG  NH1', -0.448, (-30.156, 31.186, -11.271)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.441, (-24.928, -5.294, 12.458)), (' A 165  MET  HE3', ' A 187  ASP  CA ', -0.437, (3.527, 12.539, 10.75)), (' A 124  GLY  HA3', ' B   6  MET  HG2', -0.434, (-14.463, -1.018, 3.065)), (' B  76  ARG  HB3', ' B  92  ASP  OD1', -0.434, (-20.739, -36.235, 9.878)), (' B  17  MET  HG3', ' B 117  CYS  SG ', -0.431, (-15.241, -18.584, -0.021)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.43, (6.914, 2.604, 12.021)), (' B  44  CYS  SG ', ' B  54  TYR  CE1', -0.429, (-27.897, -30.213, -12.585)), (' A  56  ASP  O  ', ' A  60  ARG  HG3', -0.427, (7.834, 14.554, 26.879)), (' A 165  MET  CE ', ' A 187  ASP  HB2', -0.427, (2.716, 12.036, 11.724)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.426, (-3.019, -9.34, 20.116)), (' A 200  ILE  O  ', ' A 204  VAL HG23', -0.425, (0.455, 2.295, -16.484)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.422, (-23.165, -1.876, -7.028)), (' A 165  MET  HE3', ' A 187  ASP  HA ', -0.421, (3.33, 12.548, 10.267)), (' B  13  VAL HG21', ' B 150  PHE  CE2', -0.42, (-18.849, -12.017, 2.914)), (' A  57  LEU  HA ', ' A  57  LEU HD23', -0.42, (5.848, 15.24, 24.868)), (' A  83  GLN HE22', ' A  88  ARG  NH1', -0.42, (9.896, -2.918, 15.805)), (' B  44  CYS  HB3', ' B  48  ASP  CB ', -0.418, (-25.625, -32.047, -15.41)), (' A 234  ALA  HB3', ' A 333  HOH  O  ', -0.412, (7.528, 5.765, -21.503)), (' B 167  LEU  HB3', ' B 168  PRO  CD ', -0.41, (-24.151, -14.985, -21.218)), (' B 286  ILE  C  ', ' B 286  ILE HD13', -0.408, (-16.85, 7.901, -14.176)), (' B   6  MET  HB2', ' B   6  MET  HE3', -0.406, (-14.37, 1.893, 0.122)), (' A  49  MET  O  ', ' A  52  PRO  HD3', -0.406, (3.56, 18.747, 14.436)), (' B  49  MET  CA ', ' B  49  MET  CE ', -0.406, (-25.69, -29.231, -16.938)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.404, (-21.117, -15.328, -12.188))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
