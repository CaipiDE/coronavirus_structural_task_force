# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  46 ', 'ALA', 0.011912395050471649, (-32.52, 34.429, 0.10999999999999999)), ('A', ' 154 ', 'TYR', 0.021506224692351684, (5.904000000000001, 25.448, 13.855)), ('B', '  46 ', 'ALA', 0.015756702939385872, (20.068999999999996, 31.781, 48.866)), ('B', '  73 ', 'VAL', 0.047874524610438784, (2.524999999999997, 9.815, 52.40499999999999)), ('B', ' 154 ', 'TYR', 0.010681388933954707, (-18.684, 22.96600000000001, 34.39))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.18235448204973476, (-20.24900000000001, 27.251, 0.153)), ('A', '  30 ', 'LEU', 0.03102275651494081, (-13.363, 23.035000000000004, 6.904)), ('A', '  59 ', 'ILE', 0.010342995823603188, (-35.028, 21.26000000000001, 12.843)), ('A', '  65 ', 'SER', 0.004019992775283754, (-29.961, 17.285, 3.508999999999999)), ('A', '  68 ', 'VAL', 0.057392935592093415, (-20.44900000000001, 17.567, 1.0229999999999997)), ('A', '  74 ', 'GLN', 0.1371105006903817, (-18.508, 12.475, -1.748)), ('A', '  76 ', 'ARG', 0.2609972835056347, (-21.415, 10.896000000000003, 3.871999999999999)), ('A', '  77 ', 'VAL', 0.006301065150182694, (-22.717, 13.013000000000005, 6.732)), ('A', '  88 ', 'ARG', 0.22002270831459944, (-20.673, 20.69900000000001, 12.834)), ('A', '  94 ', 'SER', 0.1544834588382354, (-11.566000000000003, 11.024, 8.827)), ('A', ' 104 ', 'VAL', 0.050298151055861266, (-7.9079999999999995, 30.205, 18.716)), ('A', ' 106 ', 'ILE', 0.010822813249385551, (-7.498999999999997, 36.166, 17.705999999999996)), ('A', ' 127 ', 'GLN', 0.003874887027028709, (-2.5859999999999994, 38.214, 4.675999999999999)), ('A', ' 165 ', 'MET', 0.00024819703263683477, (-21.002, 38.085, 5.736)), ('A', ' 167 ', 'LEU', 0.0, (-21.093, 44.534, 5.31)), ('A', ' 171 ', 'VAL', 0.011551952047739178, (-15.754999999999994, 45.103, 4.426)), ('A', ' 180 ', 'LYS', 0.11583842472941734, (-18.585, 33.13499999999999, 17.788)), ('A', ' 244 ', 'GLN', 0.2662164248793715, (3.240999999999997, 50.955, 28.481)), ('A', ' 279 ', 'ARG', 0.29479533184645884, (8.09, 61.114, 0.423)), ('A', ' 280 ', 'THR', 0.20573198301300266, (7.576000000000002, 57.349, 0.787)), ('A', ' 287 ', 'LEU', 0.0, (1.5630000000000002, 54.408000000000015, 7.154)), ('B', '   5 ', 'LYS', 0.20545115781242176, (-16.429, 38.874, 44.441)), ('B', '  24 ', 'THR', 0.10395266592558086, (17.059000000000005, 23.117, 52.164)), ('B', '  30 ', 'LEU', 0.07859170056861492, (0.40499999999999936, 20.434999999999995, 41.465999999999994)), ('B', '  47 ', 'GLU', 0.017595960454368825, (22.678999999999988, 33.035, 46.41399999999999)), ('B', '  49 ', 'MET', 0.07520957820614484, (18.823, 32.864, 43.267999999999994)), ('B', '  56 ', 'ASP', 0.162400186680667, (23.71499999999999, 23.613000000000007, 35.199)), ('B', '  59 ', 'ILE', 0.019727064790010525, (22.083, 18.459, 35.655)), ('B', '  65 ', 'SER', 0.17788827408726826, (17.009999999999998, 14.591000000000001, 45.003)), ('B', '  68 ', 'VAL', 0.050408521201461554, (7.397999999999998, 14.863000000000003, 47.265)), ('B', '  76 ', 'ARG', 0.12556025165369059, (8.599000000000004, 8.153, 44.532999999999994)), ('B', '  77 ', 'VAL', 0.003150532575091347, (9.745000000000003, 10.48, 41.77799999999999)), ('B', '  88 ', 'ARG', 0.2940727084392944, (7.843999999999996, 18.156, 35.572)), ('B', '  91 ', 'VAL', 0.29325058979492735, (5.884, 9.808000000000003, 39.91)), ('B', ' 123 ', 'SER', 0.14252355483003648, (-4.412000000000004, 27.579, 53.66499999999999)), ('B', ' 127 ', 'GLN', 0.0007671288847897947, (-10.384, 35.677, 43.995)), ('B', ' 141 ', 'LEU', 0.056705408978233694, (4.1200000000000045, 34.439, 52.22099999999998)), ('B', ' 142 ', 'ASN', 0.24747954471970585, (7.289000000000005, 32.338, 52.11299999999999)), ('B', ' 165 ', 'MET', 0.16649140759045544, (7.949000000000007, 35.176, 43.564)), ('B', ' 167 ', 'LEU', 0.0, (8.324000000000005, 41.806, 43.667)), ('B', ' 171 ', 'VAL', 0.04247272216429605, (2.979999999999997, 42.442, 44.380999999999986)), ('B', ' 240 ', 'GLU', 0.18607194532543353, (-6.940999999999998, 51.697, 31.185999999999996)), ('B', ' 270 ', 'GLU', 0.21892893771641078, (-18.662, 61.81000000000001, 36.148)), ('B', ' 276 ', 'MET', 0.11666799761226976, (-17.988, 59.446, 45.141999999999996))]
data['cbeta'] = [('B', ' 187 ', 'ASP', ' ', 0.2940201719199586, (12.543000000000003, 32.128, 38.49499999999999))]
data['probe'] = [(' A  41  HIS  HB2', ' A  49  MET  HE1', -1.125, (-27.115, 31.607, 5.845)), (' A 247  VAL HG13', ' A 261  VAL HG21', -1.053, (7.855, 51.88, 23.629)), (' B  19  GLN HE21', ' B  26  THR HG21', -1.034, (7.761, 21.857, 51.994)), (' B  73  VAL HG12', ' B  74  GLN  H  ', -1.008, (2.964, 8.722, 49.797)), (' B  45  THR  H  ', ' B  48  ASP  HB2', -0.919, (20.085, 28.939, 44.756)), (' B 276  MET  HE1', ' B 286  ALA  HA ', -0.901, (-14.701, 54.209, 44.877)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.901, (7.818, 41.443, 3.215)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.891, (8.958, 41.595, 3.689)), (' B  51  ASN  HA ', ' B 188  ARG  NH1', -0.829, (21.167, 34.843, 37.625)), (' B  51  ASN  HA ', ' B 188  ARG HH12', -0.82, (21.173, 35.277, 37.723)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.783, (-20.401, 23.929, -4.536)), (' A 298  ARG  HG2', ' A 298  ARG  O  ', -0.773, (10.625, 35.39, 9.605)), (' B  73  VAL HG12', ' B  74  GLN  N  ', -0.763, (3.304, 9.354, 50.115)), (' B 247  VAL HG13', ' B 261  VAL HG21', -0.761, (-20.841, 49.903, 23.746)), (' A  51  ASN  HA ', ' A 188  ARG  NH1', -0.719, (-33.471, 38.562, 9.983)), (' B 294  PHE  O  ', ' B 298  ARG  HB2', -0.717, (-20.281, 34.953, 34.628)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.715, (-32.758, 31.858, 3.448)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.685, (-24.393, 40.775, 12.388)), (' B  19  GLN  NE2', ' B  26  THR HG21', -0.682, (7.672, 20.869, 52.364)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.681, (-2.884, 25.166, 1.001)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.676, (-24.589, 29.492, 13.269)), (' A 294  PHE  HE2', ' A 298  ARG HH12', -0.669, (4.835, 35.018, 12.522)), (' A 131  ARG HH22', ' A 289  ASP  CG ', -0.653, (-4.263, 49.547, 10.097)), (' B  73  VAL  CG1', ' B  74  GLN  H  ', -0.647, (2.968, 8.318, 50.75)), (' A   4  ARG  N  ', ' A 299  GLN HE22', -0.644, (7.318, 41.798, 3.654)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.643, (-31.504, 37.0, 10.243)), (' B 287  LEU  H  ', ' B 287  LEU HD12', -0.636, (-14.016, 53.473, 42.725)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.62, (-1.567, 12.285, 41.431)), (' A  41  HIS  CB ', ' A  49  MET  HE1', -0.618, (-26.582, 32.169, 5.869)), (' B  67  LEU HD11', ' B  74  GLN  NE2', -0.617, (9.327, 11.178, 50.611)), (' A   3  PHE  HA ', ' A 299  GLN HE21', -0.617, (9.427, 42.281, 3.958)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.613, (-10.891, 15.226, 6.198)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.606, (-16.423, 39.534, 4.707)), (' A  45  THR HG22', ' A  48  ASP  OD2', -0.605, (-34.056, 29.648, 3.153)), (' B  19  GLN HE21', ' B  26  THR  CG2', -0.597, (7.496, 21.811, 51.848)), (' B  30  LEU HD13', ' B  32  LEU  HG ', -0.59, (-1.963, 19.574, 38.41)), (' B  45  THR HG22', ' B  48  ASP  OD2', -0.589, (22.133, 27.4, 45.389)), (' B  56  ASP  O  ', ' B  59  ILE HG22', -0.585, (23.527, 21.391, 36.168)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.578, (-8.228, 15.713, 8.241)), (' A  68  VAL HG22', ' A  75  LEU  HB2', -0.577, (-18.968, 15.017, 2.403)), (' B 118  TYR  CE1', ' B 144  SER  HB3', -0.571, (2.575, 30.838, 50.889)), (' A  44  CYS  HB2', ' A  49  MET  HE2', -0.567, (-29.228, 32.102, 4.364)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.56, (-17.273, 22.535, 32.395)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.557, (-10.238, 26.32, 0.45)), (' A  34  ASP  O  ', ' A  91  VAL HG22', -0.552, (-16.716, 14.351, 9.817)), (' B 276  MET  CE ', ' B 286  ALA  HA ', -0.551, (-15.846, 54.641, 45.442)), (' A 200  ILE HD12', ' A 289  ASP  O  ', -0.55, (-2.824, 47.269, 11.481)), (' B 247  VAL  CG1', ' B 261  VAL HG21', -0.548, (-20.35, 49.859, 23.415)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.544, (4.004, 25.103, 15.169)), (' A 133  ASN  O  ', ' A 134  HIS  HB2', -0.542, (-15.684, 45.086, 14.536)), (' B  56  ASP  O  ', ' B  60  ARG  HG3', -0.542, (23.884, 21.167, 37.327)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.542, (-36.764, 23.809, 11.777)), (' A 135  THR  HB ', ' A 171  VAL HG13', -0.54, (-15.272, 44.437, 7.7)), (' B  45  THR  H  ', ' B  48  ASP  CB ', -0.534, (20.205, 28.562, 44.596)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.531, (-18.723, 35.546, 14.494)), (' B 287  LEU  N  ', ' B 287  LEU HD12', -0.527, (-14.123, 53.018, 42.944)), (' A 294  PHE  CE2', ' A 298  ARG  NH1', -0.526, (5.641, 35.453, 12.684)), (' B 245  ASP  O  ', ' B 249  ILE HG12', -0.524, (-15.569, 43.821, 23.895)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.523, (-16.039, 38.747, 4.567)), (' A 270  GLU  HG2', ' A 274  ASN  ND2', -0.521, (6.801, 67.014, 12.009)), (' B  87  LEU HD13', ' B  89  LEU HD21', -0.521, (11.309, 18.7, 39.516)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.521, (12.257, 27.125, 34.652)), (' B  88  ARG  HB3', ' B  88  ARG HH11', -0.52, (6.85, 16.959, 32.811)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.519, (11.509, 38.791, 36.018)), (' A 235  MET  HE1', ' B 232  LEU  HG ', -0.519, (-8.319, 61.466, 24.671)), (' A   3  PHE  HA ', ' A 299  GLN  NE2', -0.516, (9.118, 41.858, 4.158)), (' B 212  VAL HG21', ' B 264  MET  HE1', -0.516, (-25.596, 50.957, 34.95)), (' A  45  THR  O  ', ' A  45  THR HG23', -0.515, (-34.422, 31.48, 1.043)), (' A  93  THR HG22', ' A  94  SER  O  ', -0.502, (-11.325, 10.389, 5.579)), (' B  45  THR  O  ', ' B  45  THR HG23', -0.497, (21.869, 28.933, 47.283)), (' B 232  LEU  O  ', ' B 236  LYS  HG2', -0.497, (-7.304, 62.444, 30.598)), (' B  52  PRO  HD2', ' B 188  ARG  HG2', -0.496, (18.255, 33.643, 37.636)), (' B  21  THR HG23', ' B  26  THR  OG1', -0.496, (11.73, 21.145, 51.417)), (' A  68  VAL  CG2', ' A  75  LEU  HB2', -0.495, (-18.546, 15.329, 2.65)), (' B  47  GLU  HA ', ' B  50  LEU  HG ', -0.494, (22.12, 34.834, 45.573)), (' A   4  ARG  N  ', ' A 299  GLN  NE2', -0.494, (8.123, 42.194, 3.816)), (' B  51  ASN  OD1', ' B 188  ARG  NH1', -0.492, (21.511, 35.105, 36.879)), (' A   1  SER  OG ', ' A   2  GLY  N  ', -0.491, (14.776, 41.93, 2.399)), (' A  51  ASN  HA ', ' A 188  ARG HH12', -0.49, (-33.714, 38.659, 9.987)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.49, (-6.779, 32.595, 7.251)), (' A 276  MET  HE1', ' A 286  ALA  HA ', -0.489, (1.734, 57.326, 4.479)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.488, (-11.461, 48.921, 25.521)), (' B 260  ALA  O  ', ' B 263  ASP  HB2', -0.486, (-25.318, 54.068, 28.056)), (' A  76  ARG  HB3', ' A  76  ARG  NH1', -0.485, (-21.629, 8.287, 4.888)), (' B 136  ILE HD11', ' B 140  PHE  CE2', -0.482, (-0.176, 35.45, 43.687)), (' B 131  ARG  HD3', ' B 197  ASP  OD1', -0.474, (-2.846, 46.63, 38.878)), (' A 188  ARG  CZ ', ' A 190  THR HG21', -0.473, (-31.595, 41.173, 10.68)), (' B  45  THR  N  ', ' B  48  ASP  HB2', -0.47, (19.669, 28.857, 45.641)), (' B 111  THR HG23', ' B 292  THR HG23', -0.469, (-11.852, 39.428, 35.995)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.467, (-20.608, 23.513, -4.321)), (' A  45  THR  H  ', ' A  48  ASP  CB ', -0.466, (-33.336, 31.183, 3.889)), (' A 276  MET  HB2', ' A 276  MET  HE3', -0.465, (2.343, 60.663, 4.951)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.464, (5.883, 26.918, 34.227)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.458, (-18.927, 29.448, 14.385)), (' A 188  ARG  NH2', ' A 190  THR HG21', -0.458, (-32.058, 41.568, 10.988)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.456, (-15.507, 33.921, -2.759)), (' A  83  GLN  HB2', ' A  88  ARG  HD2', -0.456, (-20.619, 23.093, 17.068)), (' A 225  THR  O  ', ' A 262  LEU HD13', -0.452, (8.047, 59.645, 25.425)), (' B 188  ARG  HE ', ' B 190  THR HG21', -0.451, (18.334, 38.09, 37.447)), (' A 204  VAL HG23', ' A 289  ASP  HB3', -0.45, (-0.889, 51.239, 11.202)), (' B  45  THR  O  ', ' B  47  GLU  N  ', -0.449, (21.46, 30.918, 47.025)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.449, (-6.336, 30.387, 41.384)), (' B  76  ARG  HB3', ' B  76  ARG  NH1', -0.441, (8.884, 5.222, 43.128)), (' B 243  THR  H  ', ' B 246  HIS  HD2', -0.44, (-11.271, 49.032, 26.239)), (' B 185  PHE  HA ', ' B 192  GLN HE22', -0.44, (11.415, 39.385, 35.717)), (' A 204  VAL  O  ', ' A 208  LEU  HG ', -0.44, (5.557, 53.079, 11.857)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.439, (-20.651, 24.133, -3.584)), (' B 239  TYR  CZ ', ' B 272  LEU HD21', -0.436, (-11.971, 55.249, 37.482)), (' B   6  MET  HB2', ' B   6  MET  HE3', -0.432, (-17.847, 33.243, 43.736)), (' B  45  THR  CG2', ' B  45  THR  O  ', -0.431, (21.647, 28.806, 47.277)), (' A  32  LEU HD13', ' A 101  TYR  CE1', -0.43, (-9.153, 21.415, 13.312)), (' A  95  ASN  HA ', ' A  96  PRO  HD2', -0.429, (-9.648, 12.563, 5.287)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.428, (-21.376, 38.462, 44.24)), (' A 233  VAL HG21', ' A 269  LYS  HD3', -0.428, (2.422, 65.114, 19.316)), (' B 260  ALA  HB3', ' B 263  ASP  OD2', -0.427, (-26.962, 54.893, 26.413)), (' B 127  GLN  HB3', ' B 127  GLN HE21', -0.426, (-12.196, 37.534, 43.281)), (' A 100  LYS  HD2', ' A 155  ASP  OD2', -0.422, (3.015, 19.298, 14.505)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.421, (-24.628, 26.034, 9.402)), (' B 260  ALA  O  ', ' B 263  ASP  N  ', -0.42, (-23.661, 54.393, 27.811)), (' B  88  ARG  CB ', ' B  88  ARG HH11', -0.42, (7.031, 17.16, 33.194)), (' B 276  MET  HB2', ' B 276  MET  HE2', -0.42, (-16.195, 57.648, 44.317)), (' B 136  ILE HD11', ' B 140  PHE  HE2', -0.413, (-0.419, 35.958, 43.837)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.413, (3.478, 36.05, 44.032)), (' A 270  GLU  HG2', ' A 274  ASN HD21', -0.412, (6.854, 67.578, 12.332)), (' A 142  ASN  N  ', ' A 142  ASN  OD1', -0.411, (-19.794, 36.939, -4.315)), (' A 131  ARG HH21', ' A 290  GLU  HG2', -0.411, (-4.736, 46.949, 9.494)), (' B  17  MET  HG3', ' B 117  CYS  SG ', -0.411, (-2.693, 23.928, 47.697)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.409, (-7.91, 43.159, 34.464)), (' A 227  LEU  HA ', ' A 227  LEU HD12', -0.408, (3.85, 57.609, 25.087)), (' A 235  MET  CE ', ' B 232  LEU  HG ', -0.408, (-8.469, 61.496, 24.439)), (' A 131  ARG  HD3', ' A 197  ASP  OD2', -0.408, (-9.608, 48.994, 10.858)), (' B  73  VAL  O  ', ' B  74  GLN  HG2', -0.407, (5.588, 11.184, 51.991)), (' A  59  ILE  HA ', ' A  59  ILE HD12', -0.407, (-34.157, 20.062, 13.807)), (' B  45  THR  O  ', ' B  46  ALA  C  ', -0.406, (20.896, 31.361, 47.389)), (' A 282  LEU  HA ', ' A 282  LEU HD23', -0.404, (10.749, 50.697, 2.491)), (' A  45  THR  O  ', ' A  47  GLU  N  ', -0.404, (-34.318, 33.862, 1.389)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.404, (-20.434, 27.497, 4.614)), (' A 135  THR  HB ', ' A 171  VAL  CG1', -0.403, (-15.281, 45.246, 7.863)), (' A 177  LEU  HA ', ' A 177  LEU HD13', -0.403, (-14.423, 28.276, 13.225)), (' B 106  ILE HG22', ' B 182  TYR  CZ ', -0.403, (-2.57, 33.782, 33.073)), (' A  40  ARG  HG3', ' A  54  TYR  CE2', -0.403, (-27.555, 30.012, 10.494)), (' A  45  THR  CG2', ' A  45  THR  O  ', -0.4, (-33.999, 31.196, 1.526))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
