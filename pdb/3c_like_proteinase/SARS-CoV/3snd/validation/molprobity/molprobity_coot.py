# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  48 ', 'ASP', 0.001374439936328254, (-23.331, -33.096000000000004, 17.186)), ('B', '  48 ', 'ASP', 0.03735009538347293, (3.205000000000001, 8.584, -33.873)), ('B', ' 218 ', 'TRP', 0.004502390685607804, (-1.712000000000002, -44.104, -10.391))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.22262230962888122, (-7.981000000000001, -17.042, -19.501)), ('A', '  27 ', 'LEU', 0.22435112441772956, (-14.002000000000006, -20.761000000000003, 10.412000000000003)), ('A', '  49 ', 'MET', 0.11796885303932036, (-21.82100000000001, -33.548, 13.677)), ('A', '  93 ', 'THR', 0.003239584386188023, (-18.358000000000004, -1.964, 15.467)), ('A', ' 132 ', 'PRO', 0.11766175213410218, (-25.94599999999999, -27.926, -13.205)), ('A', ' 268 ', 'LEU', 0.014004556607664963, (-20.431, -28.319, -31.825)), ('B', '   6 ', 'MET', 0.0054824692688449205, (-5.35, -19.790999999999997, -7.929)), ('B', '  22 ', 'CYS', 0.2796645851957401, (-1.173, 12.177, -22.264)), ('B', '  24 ', 'THR', 0.015543066379432972, (-5.260000000000004, 11.301999999999998, -26.461)), ('B', '  50 ', 'LEU', 0.16884009691151622, (6.321999999999998, 3.4019999999999992, -34.981)), ('B', '  55 ', 'GLU', 0.0723172044414766, (14.185000000000002, 11.163, -25.202)), ('B', '  90 ', 'LYS', 0.0, (6.397000000000001, 12.357, -9.042)), ('B', ' 153 ', 'ASP', 0.0021312778432106016, (5.204, -13.136999999999999, 0.3680000000000001)), ('B', ' 177 ', 'LEU', 0.29508576421706106, (9.544999999999998, -2.52, -12.575)), ('B', ' 188 ', 'ARG', 0.00326777031039313, (8.112, 0.284, -30.837)), ('B', ' 268 ', 'LEU', 0.005502856563158492, (6.798, -38.579, -16.405)), ('B', ' 276 ', 'MET', 0.07464168665423103, (-2.949, -41.249999999999986, -19.822)), ('B', ' 306 ', 'GLN', 0.0009194579616394808, (-2.0089999999999995, -10.539999999999996, 5.977))]
data['cbeta'] = [('A', ' 290 ', 'GLU', ' ', 0.38684089730742066, (-16.007, -22.976, -16.076)), ('B', ' 102 ', 'LYS', ' ', 0.2926599002343797, (10.138000000000003, -6.354000000000001, -3.315)), ('B', ' 177 ', 'LEU', ' ', 0.36513009006816405, (8.765, -2.553, -11.269)), ('B', ' 235 ', 'MET', ' ', 0.288729998682043, (14.941000000000003, -32.845, -25.699)), ('B', ' 290 ', 'GLU', ' ', 0.29535851636704874, (0.9429999999999996, -22.291, -15.743)), ('B', ' 301 ', 'SER', ' ', 0.2543668106332364, (0.5700000000000004, -26.072999999999997, 3.163))]
data['probe'] = [(' B   4  ARG  H  ', ' B 299  GLN HE22', -0.95, (-6.103, -25.444, -7.68)), (' B 165  MET  HE2', ' D   4  LEU HD23', -0.874, (4.718, -1.67, -28.494)), (' B 165  MET  CE ', ' D   4  LEU HD23', -0.872, (5.632, -1.828, -28.133)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.835, (-9.494, -14.878, -20.91)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.792, (10.339, -4.794, -28.898)), (' A 103  PHE  CE1', ' A 177  LEU HD23', -0.745, (-24.791, -11.456, 1.099)), (' B 165  MET  HE1', ' B 187  ASP  HA ', -0.713, (7.455, -1.62, -27.953)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.712, (14.574, 9.025, -26.783)), (' B  19  GLN HE21', ' B  26  THR HG21', -0.69, (-8.365, 6.549, -19.048)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.683, (-30.257, -28.302, -26.282)), (' A  47  GLU  O  ', ' A  49  MET  N  ', -0.68, (-22.247, -34.431, 15.188)), (' A 108  PRO  O  ', ' A 307  MRD H1C1', -0.662, (-26.929, -22.745, -15.191)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.641, (-6.017, -25.921, -6.698)), (' B   5  LYS  HD3', ' B 425  HOH  O  ', -0.621, (-2.141, -20.561, -15.263)), (' B 295  ASP  OD1', ' B 298 AARG  NH2', -0.592, (2.478, -19.218, -6.396)), (' B 165  MET  CE ', ' D   4  LEU  CD2', -0.592, (5.481, -1.24, -28.157)), (' B  67  LEU HD11', ' B  74  GLN  OE1', -0.592, (-7.072, 14.788, -14.103)), (' B  22  CYS  SG ', ' B  61  LYS  NZ ', -0.589, (2.285, 13.569, -22.294)), (' B 138  GLY  H  ', ' B 172  HIS  HD2', -0.586, (-0.591, -13.245, -22.798)), (' A 307  MRD HMC1', ' A 534  HOH  O  ', -0.578, (-26.448, -23.853, -20.433)), (' A 307  MRD HMC3', ' A 322  HOH  O  ', -0.563, (-25.343, -20.955, -18.996)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.559, (-26.378, -32.081, 2.777)), (' A   4  ARG  HD2', ' B 137  LYS  O  ', -0.553, (-2.581, -16.051, -20.749)), (' B 217  ARG  O  ', ' B 219  PHE  N  ', -0.535, (0.547, -42.55, -10.382)), (' A 137  LYS  NZ ', ' A 412  HOH  O  ', -0.525, (-19.002, -32.24, -11.98)), (' A 154  TYR  HB2', ' A 585  HOH  O  ', -0.51, (-21.953, -1.035, -10.84)), (' A 186  VAL  H  ', ' A 192  GLN  NE2', -0.508, (-26.916, -32.392, 2.539)), (' A 200  ILE HG23', ' A 307  MRD HMC2', -0.5, (-25.643, -23.963, -18.262)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.474, (-22.573, -23.571, -15.902)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.47, (10.754, -40.711, -21.546)), (' A 109  GLY  HA3', ' A 307  MRD H1C1', -0.459, (-25.6, -22.279, -15.781)), (' B  88  ARG  NH2', ' B 593  HOH  O  ', -0.458, (11.323, 6.894, -8.345)), (' B  90  LYS  HE3', ' B 409  HOH  O  ', -0.457, (10.611, 10.199, -8.813)), (' B  19  GLN  NE2', ' B  26  THR HG21', -0.452, (-8.33, 6.805, -19.037)), (' B 165  MET  CE ', ' B 187  ASP  HA ', -0.452, (6.93, -2.252, -27.18)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.448, (-28.08, -23.027, 9.119)), (' B 106  ILE HG13', ' B 110  GLN  HB2', -0.444, (9.213, -15.742, -12.386)), (' B 240  GLU  HG2', ' B 327  HOH  O  ', -0.435, (14.03, -24.631, -18.741)), (' B 279  ARG  HD3', ' B 637  HOH  O  ', -0.434, (-5.664, -45.381, -13.599)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.432, (6.839, 6.745, -19.831)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.43, (0.723, -9.809, -12.045)), (' B 159  PHE  HB3', ' B 177  LEU HD13', -0.425, (6.243, -4.513, -10.48)), (' B 298 AARG  NH1', ' B 430  HOH  O  ', -0.423, (4.552, -17.68, -4.663)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.418, (-26.626, -26.074, -12.569)), (' A 164  HIS  HD2', ' A 337  HOH  O  ', -0.418, (-23.545, -24.633, 7.519)), (' A  22  CYS  SG ', ' A  61  LYS  HE3', -0.418, (-21.485, -22.174, 20.544)), (' A   2  GLY  HA3', ' B 138  GLY  O  ', -0.418, (-4.372, -13.807, -23.505)), (' B 113  SER  OG ', ' B 127  GLN  NE2', -0.417, (-1.361, -15.25, -9.441)), (' B 240  GLU  HG3', ' B 359  HOH  O  ', -0.416, (15.411, -25.997, -19.779)), (' A  47  GLU  C  ', ' A  49  MET  N  ', -0.415, (-21.851, -34.356, 16.3)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.415, (-22.855, -10.727, 22.069)), (' B   5  LYS  NZ ', ' B 534  HOH  O  ', -0.411, (-2.547, -22.567, -17.147)), (' A 138  GLY  O  ', ' B   2  GLY  HA3', -0.408, (-11.283, -28.421, -5.704))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
