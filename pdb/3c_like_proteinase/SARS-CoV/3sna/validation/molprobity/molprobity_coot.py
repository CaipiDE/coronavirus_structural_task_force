# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  33 ', 'ASP', 0.04213553638451722, (3.4549999999999974, -22.672999999999995, 13.995000000000001)), ('A', '  41 ', 'HIS', 0.012072459398648091, (19.375999999999998, -7.197000000000002, 17.943)), ('A', '  49 ', 'MET', 0.0075481999082212215, (26.02, -1.603, 19.031)), ('A', '  50 ', 'LEU', 0.0013754736003453105, (28.169000000000008, 1.131, 17.57)), ('A', '  80 ', 'HIS', 0.019578826254714618, (17.47, -20.385999999999996, 12.425)), ('A', ' 154 ', 'TYR', 0.03542445907599741, (-13.323, -11.356, 12.062)), ('A', ' 211 ', 'ALA', 0.048001184363270256, (-18.484, 13.965, 17.971)), ('A', ' 277 ', 'ASN', 0.033658385400188305, (-12.012999999999998, 29.382999999999996, 22.811)), ('A', ' 278 ', 'GLY', 0.023770307594198743, (-11.432000000000002, 26.581999999999997, 25.331)), ('H', '   2 ', 'SER', 0.00391208506417713, (19.013, 5.921, 20.427))]
data['omega'] = [('H', '   5 ', 'ECC', None, (16.452999999999996, -1.83, 23.076))]
data['rota'] = [('A', '   5 ', 'LYS', 0.2531452641941426, (-9.555, 4.712, 22.286)), ('A', '  14 ', 'GLU', 0.0, (-1.1929999999999996, -13.615000000000002, 24.529)), ('A', '  30 ', 'LEU', 0.05508899509796023, (6.462000000000001, -14.277999999999997, 18.792)), ('A', '  32 ', 'LEU', 0.008866075691508261, (3.7330000000000028, -19.009999999999998, 15.135)), ('A', '  35 ', 'THR', 0.24608699494885153, (8.564000000000002, -20.663000000000004, 14.243999999999998)), ('A', '  49 ', 'MET', 0.01502880324885447, (26.02, -1.603, 19.031)), ('A', '  50 ', 'LEU', 0.0, (28.169000000000008, 1.131, 17.57)), ('A', '  51 ', 'ASN', 0.08454702663517807, (28.817999999999998, -1.074, 14.604000000000001)), ('A', '  59 ', 'ILE', 0.04879152359130122, (27.433, -16.995999999999995, 11.78)), ('A', '  60 ', 'ARG', 0.0, (29.172, -17.578, 15.198)), ('A', '  63 ', 'ASN', 0.024593328869189385, (21.049, -22.930000000000003, 18.777)), ('A', '  73 ', 'VAL', 0.04825711231394195, (8.820000000000004, -24.81, 29.956)), ('A', ' 104 ', 'VAL', 0.009922891220829518, (0.33199999999999963, -7.064, 6.542999999999999)), ('A', ' 125 ', 'VAL', 0.1644820405000906, (-2.3339999999999987, -3.516, 25.961)), ('A', ' 153 ', 'ASP', 0.08162390336783164, (-10.476000000000003, -8.916, 11.047)), ('A', ' 165 ', 'MET', 0.12229695859087236, (14.018, 0.47299999999999986, 19.708)), ('A', ' 166 ', 'GLU', 0.24505753651473844, (13.201, 3.832, 21.376)), ('A', ' 169 ', 'THR', 0.04046049360305607, (12.665, 11.877, 21.239)), ('A', ' 171 ', 'VAL', 0.05762430276176927, (9.182999999999998, 7.624, 20.511)), ('A', ' 175 ', 'THR', 0.05875633956761535, (9.309999999999999, -3.272, 11.874)), ('A', ' 188 ', 'ARG', 0.08424262934154926, (22.850999999999992, 0.39, 14.772)), ('A', ' 190 ', 'THR', 0.008159601566148922, (24.014, 6.094000000000002, 15.387999999999998)), ('A', ' 213 ', 'ILE', 0.03200555186241353, (-22.815, 11.086, 15.642)), ('A', ' 214 ', 'ASN', 0.22846591753112547, (-22.451, 11.009, 19.441)), ('A', ' 233 ', 'VAL', 0.11018051896630121, (-4.551, 26.295, 5.371)), ('A', ' 256 ', 'GLN', 0.1337877525502991, (-24.794, 8.592000000000002, 8.184)), ('A', ' 262 ', 'LEU', 0.19776614324185712, (-16.192999999999994, 19.561, 2.224)), ('A', ' 264 ', 'MET', 0.1109702200530471, (-16.64999999999999, 19.272999999999996, 7.607)), ('A', ' 268 ', 'LEU', 0.1349060715514595, (-12.039999999999997, 22.132, 10.512)), ('A', ' 273 ', 'GLN', 0.003856920917925862, (-8.257999999999997, 29.390000000000008, 12.526)), ('A', ' 285 ', 'THR', 0.0783388173609383, (-9.482, 20.061, 24.124)), ('A', ' 286 ', 'ILE', 0.08344026466781528, (-7.2170000000000005, 19.233, 21.26)), ('A', ' 299 ', 'GLN', 0.15844090282083637, (-17.019, 1.716, 17.448)), ('H', '   1 ', 'ASN', 0.20584526068849995, (21.317999999999998, 8.906, 21.326))]
data['cbeta'] = [('A', ' 106 ', 'ILE', ' ', 0.27778991342585896, (-0.47499999999999987, -0.911, 9.074)), ('A', ' 290 ', 'GLU', ' ', 0.2851486824654139, (-4.575, 8.305000000000001, 17.341))]
data['probe'] = [(' A  50  LEU HD12', ' A  51  ASN  N  ', -1.181, (29.423, 0.592, 15.138)), (' A 292  THR HG22', ' A 294  PHE  H  ', -1.148, (-10.677, 3.962, 8.923)), (' A  50  LEU HD11', ' A  51  ASN  HB3', -1.141, (31.296, -0.418, 14.298)), (' A  50  LEU  C  ', ' A  50  LEU HD12', -1.123, (28.452, 0.658, 15.005)), (' A  50  LEU  CD1', ' A  51  ASN  HB3', -1.088, (30.849, 0.72, 14.735)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -1.083, (-12.936, 22.274, 22.305)), (' A  49  MET  O  ', ' A  52  PRO  HD3', -1.08, (26.557, -1.206, 15.439)), (' A  50  LEU  CD1', ' A  51  ASN  CB ', -1.022, (30.006, 0.94, 14.59)), (' A  50  LEU  CD1', ' A  51  ASN  N  ', -0.948, (29.758, 0.608, 16.115)), (' A  50  LEU HD11', ' A  51  ASN  CB ', -0.941, (31.167, -0.004, 14.018)), (' A 292  THR HG22', ' A 294  PHE  N  ', -0.891, (-11.612, 3.779, 9.444)), (' A  50  LEU HD12', ' A  51  ASN  CB ', -0.887, (29.424, -0.006, 14.366)), (' A  50  LEU HD12', ' A  51  ASN  CA ', -0.873, (29.109, -0.386, 14.96)), (' A  63  ASN  HB3', ' A  77  VAL  HB ', -0.802, (18.125, -23.811, 18.141)), (' A  50  LEU  C  ', ' A  50  LEU  CD1', -0.747, (29.358, 1.373, 15.457)), (' A  50  LEU  CG ', ' A  51  ASN  N  ', -0.723, (29.944, 0.174, 16.592)), (' A 107  GLN  HG3', ' A 108  PRO  HD2', -0.701, (1.678, 4.66, 4.55)), (' A 164  HIS  CD2', ' A 175  THR HG22', -0.697, (11.649, -4.552, 13.931)), (' A  49  MET  O  ', ' A  50  LEU  C  ', -0.692, (27.113, 0.026, 16.026)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.678, (17.26, -8.085, 10.875)), (' A  51  ASN  C  ', ' A  51  ASN  OD1', -0.664, (28.966, -2.976, 13.548)), (' A  49  MET  O  ', ' A  51  ASN  N  ', -0.652, (27.242, -0.939, 16.048)), (' A 225  THR HG21', ' A 269  LYS  CE ', -0.651, (-11.881, 26.806, 3.156)), (' A 164  HIS  NE2', ' A 175  THR  CG2', -0.632, (11.846, -5.857, 13.975)), (' A 212  VAL  HA ', ' A 216  ASP  O  ', -0.625, (-21.644, 16.099, 16.347)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.619, (13.604, -13.266, 29.447)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.616, (-3.63, 5.842, 14.878)), (' A  38  CYS  HB2', ' A  39  PRO  HD2', -0.615, (12.872, -10.886, 18.736)), (' A 225  THR HG21', ' A 269  LYS  NZ ', -0.613, (-11.856, 27.462, 2.962)), (' A  43  ILE  HB ', ' A  61  LYS  HE3', -0.608, (23.96, -13.391, 18.385)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.601, (-13.408, 21.067, 20.572)), (' A 191  ALA  HA ', ' H   1  ASN HD21', -0.595, (22.302, 9.153, 17.001)), (' A 225  THR HG21', ' A 269  LYS  HE3', -0.582, (-11.81, 26.393, 3.201)), (' A 100  LYS  HD3', ' A 101  TYR  H  ', -0.576, (-4.613, -16.426, 9.697)), (' A 164  HIS  NE2', ' A 175  THR HG21', -0.566, (12.368, -5.715, 13.806)), (' A  63  ASN  N  ', ' A  63  ASN  OD1', -0.564, (21.996, -22.566, 17.097)), (' A 245  ASP  O  ', ' A 249  ILE HG12', -0.563, (-10.881, 7.732, 0.482)), (' A  50  LEU  HG ', ' A  51  ASN  H  ', -0.56, (30.109, -0.767, 16.685)), (' A 100  LYS  HD3', ' A 101  TYR  N  ', -0.56, (-5.217, -16.242, 9.648)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.549, (1.59, -21.914, 17.593)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.549, (-2.639, 23.202, 2.792)), (' A 190  THR  O  ', ' H   1  ASN  ND2', -0.54, (22.045, 8.368, 17.012)), (' A   5  LYS  NZ ', ' A 290  GLU  HB2', -0.536, (-5.826, 8.324, 18.978)), (' A 169  THR  HB ', ' A 171  VAL HG22', -0.535, (10.666, 10.515, 19.308)), (' A  50  LEU  HG ', ' A  51  ASN  N  ', -0.534, (30.156, -0.572, 16.559)), (' A 260  ALA  O  ', ' A 263  ASP  HB2', -0.529, (-19.816, 19.17, 4.695)), (' A 111  THR HG22', ' A 129  ALA  CB ', -0.519, (-3.176, 5.615, 14.613)), (' A  99  PRO  O  ', ' A 101  TYR  HD2', -0.518, (-2.794, -18.051, 12.817)), (' A  83  GLN  HG3', ' A  88  ARG  CZ ', -0.517, (13.209, -15.188, 6.537)), (' A 207  TRP  CE2', ' A 288  GLU  HB3', -0.512, (-10.11, 13.506, 18.477)), (' A 164  HIS  CD2', ' A 175  THR  CG2', -0.504, (11.454, -4.824, 14.015)), (' A 217  ARG  O  ', ' A 220  LEU HD12', -0.503, (-21.797, 21.32, 15.026)), (' A  66  PHE  HB2', ' A  77  VAL HG21', -0.502, (17.809, -21.065, 19.848)), (' A 100  LYS  O  ', ' A 101  TYR  HB3', -0.501, (-3.66, -15.483, 12.681)), (' A 213  ILE HD11', ' A 256  GLN  NE2', -0.498, (-23.619, 7.185, 12.048)), (' A 210  ALA  O  ', ' A 211  ALA  C  ', -0.496, (-19.898, 13.22, 16.855)), (' A  83  GLN  O  ', ' A  84  ASN  C  ', -0.494, (15.253, -9.26, 9.027)), (' A 133  ASN  O  ', ' A 134  HIS  HB2', -0.493, (8.774, 7.984, 10.303)), (' A 296  VAL  O  ', ' A 300  CYS  HB2', -0.491, (-18.509, 5.436, 14.814)), (' A 220  LEU HD21', ' A 259  ILE HD13', -0.487, (-21.689, 18.006, 10.613)), (' A  51  ASN  O  ', ' A  51  ASN  OD1', -0.481, (30.088, -3.038, 13.816)), (' A 228  ASN  O  ', ' A 232  LEU  HG ', -0.48, (-5.479, 25.247, -1.092)), (' A 217  ARG  HG2', ' A 217  ARG  O  ', -0.478, (-22.827, 21.37, 15.535)), (' A  19  GLN  HB2', ' A 120  GLY  HA3', -0.477, (9.693, -14.742, 27.615)), (' A  73  VAL HG23', ' A  74  GLN  N  ', -0.476, (9.223, -24.944, 27.332)), (' A 279  ARG  CG ', ' A 280  THR  N  ', -0.473, (-15.816, 22.503, 24.641)), (' A  50  LEU  CD1', ' A  51  ASN  HB2', -0.47, (30.063, 0.726, 14.047)), (' A  24  THR HG22', ' A  45  THR HG22', -0.467, (25.744, -8.985, 26.24)), (' A   5  LYS  NZ ', ' A 288  GLU  OE1', -0.458, (-6.365, 9.832, 19.707)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.457, (-2.708, 8.311, 10.597)), (' A 225  THR  CG2', ' A 269  LYS  NZ ', -0.454, (-12.371, 27.261, 2.763)), (' A 221  ASN  ND2', ' A 270  GLU  OE2', -0.454, (-17.007, 27.841, 9.864)), (' A 149  GLY  HA3', ' A 161  TYR  HB3', -0.45, (2.212, -3.766, 16.054)), (' A 191  ALA  HA ', ' H   1  ASN  ND2', -0.446, (22.475, 9.284, 17.178)), (' A  51  ASN  CG ', ' A  51  ASN  O  ', -0.441, (30.226, -2.493, 13.577)), (' A 135  THR  O  ', ' A 136  ILE HG22', -0.438, (4.627, 5.005, 14.68)), (' A   5  LYS  HZ1', ' A 290  GLU  HB2', -0.436, (-6.006, 8.464, 18.778)), (' A  40  ARG  O  ', ' A  42  VAL  N  ', -0.434, (19.285, -9.48, 17.95)), (' A 207  TRP  CD2', ' A 288  GLU  HB3', -0.433, (-10.122, 13.497, 18.103)), (' A  42  VAL HG13', ' A  43  ILE HG23', -0.433, (20.036, -12.619, 18.751)), (' A  52  PRO  HD2', ' A 188  ARG  HD3', -0.429, (25.239, -1.565, 13.307)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.428, (3.349, 11.844, 14.309)), (' A  27  LEU HD11', ' A  42  VAL  HB ', -0.424, (16.054, -10.561, 20.865)), (' A 286  ILE  HA ', ' A 286  ILE HD12', -0.422, (-6.845, 20.798, 20.652)), (' A 213  ILE HD11', ' A 256  GLN  CD ', -0.421, (-23.379, 7.099, 11.811)), (' A  93  THR HG22', ' A  94  SER  O  ', -0.418, (3.665, -26.939, 18.984)), (' A  63  ASN  ND2', ' A  78  ILE  O  ', -0.415, (19.145, -25.014, 14.823)), (' A  50  LEU  O  ', ' A  50  LEU HD12', -0.415, (28.481, 0.916, 15.017)), (' A  40  ARG  C  ', ' A  42  VAL  H  ', -0.413, (18.705, -9.481, 18.179)), (' A  44  CYS  HB3', ' A  48  ASP  HB2', -0.412, (25.783, -6.077, 19.875)), (' A 100  LYS  HD2', ' A 156  CYS  HB2', -0.408, (-7.419, -15.596, 9.248)), (' A  95  ASN  HB3', ' A  98  THR  HG1', -0.407, (1.09, -22.11, 17.36)), (' A 276  MET  HE3', ' A 281  ILE  CG1', -0.405, (-13.498, 20.32, 20.4)), (' A  62  SER  O  ', ' A  65  SER  HB2', -0.401, (23.054, -19.78, 20.095))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
