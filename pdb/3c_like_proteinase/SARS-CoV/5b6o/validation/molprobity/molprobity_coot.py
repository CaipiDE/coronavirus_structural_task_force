# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  71 ', 'GLY', 0.022169001168178118, (4.035000000000002, 8.696, 2.879)), ('B', '  50 ', 'LEU', 0.0009247875676526294, (-24.56, -23.903, -20.903))]
data['omega'] = [('A', ' 307 ', 'GLY', None, (-6.542000000000002, -22.665, -44.421))]
data['rota'] = [('A', '  65 ', 'SER', 0.17034251434631625, (17.705, 22.238, 3.127)), ('A', ' 131 ', 'ARG', 0.027700133865200857, (5.510000000000002, 13.161, -29.773000000000003)), ('A', ' 224 ', 'THR', 0.1620856913609536, (-4.41, 0.238, -53.83)), ('A', ' 243 ', 'THR', 0.1011104588071371, (8.49, 3.522000000000001, -45.156)), ('A', ' 245 ', 'ASP', 0.0028291615756909764, (9.849000000000004, -0.974, -42.414)), ('A', ' 280 ', 'THR', 0.024636849798409587, (-16.717, 7.618, -36.948)), ('B', '   1 ', 'SER', 0.14630118593956387, (-3.702000000000001, 21.921, -18.663)), ('B', '  24 ', 'THR', 0.08664097149261712, (-9.287, -26.741, -15.930999999999997))]
data['cbeta'] = []
data['probe'] = [(' A 100  LYS  NZ ', ' A 155  ASP  OD2', -1.237, (12.409, -9.846, -11.71)), (' B  56  ASP  OD1', ' B  60  ARG  NH2', -1.035, (-25.373, -31.849, -9.939)), (' A 229  ASP  HA ', ' A 232  LEU HD12', -1.029, (2.346, 10.035, -55.114)), (' B 180  LYS  NZ ', ' B 401  HOH  O  ', -1.004, (-28.921, -9.097, -3.682)), (' B  47  GLU  HB3', ' B 404  HOH  O  ', -0.944, (-22.164, -30.175, -19.893)), (' A 295  ASP  OD1', ' A 401  HOH  O  ', -0.939, (3.032, -0.342, -27.696)), (' B  50  LEU HD13', ' B  51  ASN  OD1', -0.879, (-27.934, -26.608, -19.858)), (' A 142  ASN  OD1', ' A 403  HOH  O  ', -0.85, (0.537, 25.732, -13.553)), (' B  60  ARG  NH1', ' B 402  HOH  O  ', -0.849, (-22.254, -32.374, -11.886)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.833, (-8.635, -0.921, -26.346)), (' B 134  HIS  ND1', ' B 403  HOH  O  ', -0.783, (-27.119, -0.099, -15.147)), (' A  74  GLN  O  ', ' A  76  ARG  NH1', -0.766, (13.396, 11.125, 8.04)), (' B  76  ARG HH11', ' B  78  ILE HD11', -0.747, (-6.626, -24.276, 5.106)), (' A 236  LYS  N  ', ' A 407  HOH  O  ', -0.736, (0.621, 16.152, -46.652)), (' B  52  PRO  HD2', ' B 188  ARG  HG2', -0.699, (-26.879, -21.032, -16.962)), (' B 225  THR HG23', ' B 229  ASP  HB2', -0.693, (-36.336, 24.448, -22.889)), (' A  17  MET  O  ', ' A 404  HOH  O  ', -0.683, (5.087, 8.794, -2.522)), (' B 225  THR HG22', ' B 226  THR  O  ', -0.679, (-35.461, 23.982, -20.83)), (' A   8  PHE  HE2', ' A 151  ASN HD22', -0.671, (3.932, 0.205, -21.792)), (' A  92  ASP  OD1', ' A  93  THR  N  ', -0.671, (17.607, 6.796, 4.645)), (' A  51  ASN  OD1', ' A 188  ARG  NH2', -0.671, (19.999, 32.878, -18.298)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.669, (16.625, 14.841, -14.927)), (' A  83  GLN  NE2', ' A  88  ARG  HD2', -0.664, (22.451, 10.742, -11.255)), (' B  76  ARG  NH1', ' B  78  ILE HD11', -0.663, (-6.22, -24.606, 5.089)), (' A 299  GLN  OE1', ' A 405  HOH  O  ', -0.658, (-4.119, -2.039, -26.292)), (' A 227  LEU HD12', ' A 262  LEU HD21', -0.654, (2.655, 1.972, -50.297)), (' B  55  GLU  O  ', ' B  59  ILE HG12', -0.651, (-25.148, -27.867, -5.075)), (' B  44  CYS  HB3', ' B  48  ASP  HB2', -0.647, (-19.764, -25.342, -16.447)), (' B 252  PRO  HD2', ' B 407  HOH  O  ', -0.644, (-20.595, 20.901, -10.12)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.634, (-8.204, -1.431, -26.249)), (' B 224  THR HG22', ' B 225  THR  H  ', -0.628, (-32.425, 28.265, -19.931)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.622, (2.738, -1.542, -45.891)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.604, (-1.04, 5.053, -48.099)), (' A 227  LEU  CD1', ' A 262  LEU HD21', -0.6, (2.892, 1.525, -50.154)), (' A 229  ASP  HA ', ' A 232  LEU  CD1', -0.596, (1.916, 10.045, -55.32)), (' A  83  GLN HE21', ' A  88  ARG  HD2', -0.594, (21.933, 11.233, -11.165)), (' A 131  ARG HH22', ' A 289  ASP  CG ', -0.575, (-0.315, 11.215, -32.873)), (' A 131  ARG  NH2', ' A 289  ASP  OD2', -0.567, (-0.763, 11.778, -31.684)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.559, (-1.668, 11.962, -39.135)), (' A  50  LEU  HA ', ' A 189  GLN  HB3', -0.553, (12.902, 33.369, -16.612)), (' B 228  ASN  O  ', ' B 232  LEU  HG ', -0.549, (-38.919, 19.353, -22.522)), (' A  62  SER  OG ', ' A  64  HIS  CE1', -0.548, (21.611, 22.551, 5.932)), (' A  62  SER  O  ', ' A  65  SER  OG ', -0.537, (20.267, 21.912, 1.527)), (' B  50  LEU  CD1', ' B  51  ASN  N  ', -0.536, (-26.414, -25.1, -19.735)), (' A   4  ARG HH12', ' B   5  LYS  NZ ', -0.535, (-14.162, 5.485, -21.442)), (' B 225  THR  CG2', ' B 229  ASP  HB2', -0.529, (-35.739, 24.324, -22.482)), (' A  95  ASN  ND2', ' A  97  LYS  H  ', -0.526, (10.525, 0.881, -1.345)), (' B  48  ASP  HB3', ' B  57  LEU HD21', -0.523, (-21.511, -26.66, -14.273)), (' B  45  THR  O  ', ' B  48  ASP  N  ', -0.522, (-19.82, -26.414, -18.825)), (' A  40  ARG  O  ', ' A  43  ILE HG13', -0.521, (16.743, 23.059, -8.544)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.52, (-4.407, 11.464, -16.502)), (' B  50  LEU  CD1', ' B  51  ASN  H  ', -0.518, (-26.27, -25.674, -19.938)), (' A  43  ILE HD11', ' A  54  TYR  HD2', -0.513, (18.544, 24.921, -9.353)), (' B 284  SER  OG ', ' B 286  ILE HG22', -0.51, (-15.875, 13.567, -31.409)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.506, (12.947, -0.964, -14.229)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.506, (13.051, 4.414, -1.401)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.504, (-12.55, -1.029, -12.123)), (' B  50  LEU HD12', ' B  51  ASN  N  ', -0.495, (-26.179, -24.868, -19.157)), (' A  62  SER  HG ', ' A  64  HIS  CE1', -0.474, (21.87, 21.951, 6.064)), (' B  50  LEU HD12', ' B  51  ASN  C  ', -0.465, (-26.038, -25.192, -18.213)), (' A  43  ILE HD11', ' A  54  TYR  CD2', -0.463, (18.449, 25.32, -9.932)), (' B  47  GLU  O  ', ' B  50  LEU  HG ', -0.462, (-23.097, -27.047, -19.863)), (' A 277  ASN  O  ', ' A 406  HOH  O  ', -0.46, (-21.15, 11.408, -43.092)), (' A  76  ARG  HB2', ' A  92  ASP  OD2', -0.457, (17.52, 9.81, 7.19)), (' B  47  GLU  C  ', ' B 404  HOH  O  ', -0.456, (-21.795, -29.124, -19.413)), (' A 249  ILE HG21', ' A 293  PRO  HG2', -0.454, (4.285, -0.892, -36.096)), (' B  76  ARG  HG2', ' B  92  ASP  HB2', -0.448, (-4.048, -21.498, 3.757)), (' B  47  GLU  N  ', ' B  47  GLU  OE1', -0.445, (-18.794, -28.344, -21.539)), (' A  95  ASN HD22', ' A  96  PRO  HD2', -0.437, (11.422, 1.554, 0.775)), (' A 207  TRP  CE2', ' A 288  GLU  HB2', -0.436, (-7.555, 6.421, -33.455)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.429, (10.687, 17.341, -8.434)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.429, (2.014, 18.517, -14.031)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.425, (-6.193, -0.408, -23.082)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.424, (-32.846, 20.936, -27.701)), (' A 237  TYR  N  ', ' A 407  HOH  O  ', -0.424, (0.3, 16.566, -45.279)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.423, (-27.374, 3.627, -17.323)), (' A 256  GLN  NE2', ' A 302  GLY  HA3', -0.422, (-6.771, -12.11, -34.657)), (' A 202  LEU  CB ', ' A 402  HOH  O  ', -0.422, (4.175, 5.503, -38.079)), (' B 227  LEU  HA ', ' B 227  LEU HD23', -0.421, (-33.729, 20.766, -17.9)), (' B 152  ILE  CD1', ' B 157  VAL HG22', -0.416, (-8.254, 2.125, -4.011)), (' A 234  ALA  C  ', ' A 407  HOH  O  ', -0.416, (0.602, 15.149, -46.024)), (' B 236  LYS  HB3', ' B 236  LYS  NZ ', -0.412, (-35.639, 15.06, -31.294)), (' B  53  ASN  CG ', ' B  56  ASP  HB2', -0.412, (-28.367, -27.481, -9.557)), (' B  44  CYS  CB ', ' B  48  ASP  HB2', -0.407, (-19.755, -24.931, -15.514)), (' A   4  ARG  HD2', ' B 126  TYR  CD1', -0.403, (-11.423, 0.882, -21.073)), (' B  68  VAL HG12', ' B  75  LEU HD12', -0.402, (-5.412, -17.53, -3.102)), (' A   3  PHE  HZ ', ' A 296  VAL HG12', -0.402, (-4.96, -0.065, -30.942))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
