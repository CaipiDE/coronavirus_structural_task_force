# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  51 ', 'ASN', 0.0032484399999999996, (23.872, -22.837999999999997, 1.6649999999999996)), ('A', ' 154 ', 'TYR', 0.03436026176058711, (30.48599999999999, -40.686, -36.76399999999999))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.20156091310435123, (41.289, -52.606, -24.11)), ('A', '  50 ', 'LEU', 0.11501454317492774, (27.167999999999996, -24.581999999999997, 2.416999999999999)), ('A', '  67 ', 'LEU', 0.20187619733117879, (36.653, -13.972, -17.118)), ('A', '  86 ', 'LEU', 0.12601525290389867, (24.496000000000002, -24.390000000000004, -15.199)), ('A', '  87 ', 'LEU', 0.02151883499545466, (25.674, -20.924, -16.154)), ('A', ' 153 ', 'ASP', 0.039449552066399704, (28.728999999999985, -40.894, -33.407)), ('A', ' 222 ', 'ARG', 0.2705555167463559, (24.801000000000002, -76.313, -23.458)), ('A', ' 227 ', 'LEU', 0.0532892026047184, (14.901999999999992, -64.785, -16.851)), ('A', ' 244 ', 'GLN', 0.006105920169973111, (13.379999999999995, -58.124, -21.16)), ('A', ' 253 ', 'LEU', 0.0, (25.458, -59.417, -30.205)), ('A', ' 279 ', 'ARG', 0.29036434202246175, (41.06599999999998, -68.95799999999998, -15.764)), ('B', '  27 ', 'LEU', 0.24095863106450996, (48.053, -48.36199999999998, -43.359)), ('B', '  77 ', 'VAL', 0.11572955294825674, (54.90199999999999, -37.12999999999999, -52.243)), ('B', '  86 ', 'LEU', 0.06571013449174651, (60.22599999999999, -46.729, -41.30099999999999)), ('B', '  90 ', 'LYS', 0.24825425021954037, (58.19, -35.861, -48.093)), ('B', ' 226 ', 'THR', 0.02991853980347514, (66.047, -55.298, 3.1229999999999993)), ('B', ' 253 ', 'LEU', 0.007073820348543437, (55.76700000000001, -40.605999999999995, -3.1)), ('B', ' 268 ', 'LEU', 0.025057561133277943, (54.07300000000001, -55.817, -1.101)), ('B', ' 304 ', 'THR', 0.010946763011469773, (47.138, -37.359, 1.003))]
data['cbeta'] = []
data['probe'] = [(' A  90  LYS  HE2', ' A1256  HOH  O  ', -1.059, (24.317, -11.955, -29.028)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -1.026, (30.245, -19.727, -2.912)), (' B 107  GLN  H  ', ' B 110  GLN HE21', -0.896, (61.593, -45.48, -21.812)), (' B 305  PHE  HB3', ' B1473  HOH  O  ', -0.807, (44.104, -40.851, 2.817)), (' A  50  LEU  HA ', ' A 189  GLN  HB2', -0.8, (26.857, -26.643, 1.786)), (' A 106  ILE HG13', ' A 110  GLN HE21', -0.776, (23.695, -42.84, -21.373)), (' A 244  GLN  HA ', ' A 244  GLN HE21', -0.772, (13.719, -59.115, -22.029)), (' B 110  GLN  HG2', ' B1306  HOH  O  ', -0.764, (59.573, -44.92, -17.154)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.748, (37.155, -66.046, -17.855)), (' B 155  ASP  HB2', ' B1479  HOH  O  ', -0.731, (53.314, -26.269, -26.365)), (' B 215  GLY  HA2', ' B1473  HOH  O  ', -0.718, (43.704, -41.165, 2.876)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.697, (25.866, -33.115, -3.187)), (' A  45  THR HG22', ' A  46  ALA  H  ', -0.695, (34.679, -19.31, -0.844)), (' B 190  THR  OG1', ' B 192  GLN  HG3', -0.688, (59.627, -63.463, -37.181)), (' A 270  GLU  HG3', ' A1173  HOH  O  ', -0.682, (27.977, -74.012, -13.482)), (' B 226  THR HG22', ' B 229  ASP  H  ', -0.678, (66.896, -57.292, 1.08)), (' B 198  THR HG21', ' B 240  GLU  OE1', -0.676, (61.516, -58.116, -15.663)), (' B 188  ARG  HG3', ' B 190  THR HG23', -0.668, (60.828, -63.407, -40.845)), (' A 180  LYS  HD2', ' A1094  HOH  O  ', -0.655, (17.161, -32.146, -18.137)), (' B 305  PHE  O  ', ' B 306  GLN  HB2', -0.644, (45.088, -37.184, 5.477)), (' A  50  LEU  H  ', ' A  50  LEU HD12', -0.625, (29.556, -23.453, 1.628)), (' A 107  GLN  H  ', ' A 110  GLN  NE2', -0.623, (21.939, -43.36, -20.911)), (' B  97  LYS  HE3', ' B1514  HOH  O  ', -0.617, (42.709, -31.311, -39.202)), (' B 226  THR HG23', ' B1227  HOH  O  ', -0.615, (68.951, -55.346, 1.019)), (' B  74  GLN  HG2', ' B1478  HOH  O  ', -0.609, (42.806, -36.358, -54.039)), (' A  83  GLN HE21', ' A  88  ARG  HD2', -0.608, (21.214, -22.974, -20.706)), (' A  27  LEU HD23', ' A 901  DOZ  C6 ', -0.608, (34.412, -24.474, -10.458)), (' A  45  THR HG22', ' A  46  ALA  N  ', -0.601, (34.369, -19.829, -0.874)), (' B  67  LEU HD11', ' B  74  GLN  OE1', -0.6, (45.566, -40.14, -53.501)), (' A  51  ASN  H  ', ' A  52  PRO  CD ', -0.597, (25.654, -23.352, 0.414)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.595, (58.391, -48.023, -45.646)), (' B  77  VAL HG12', ' B1260  HOH  O  ', -0.594, (53.067, -39.412, -54.276)), (' A  48  ASP  O  ', ' A  52  PRO  HD3', -0.592, (26.407, -21.84, -1.392)), (' B  33  ASP  OD2', ' B1333  HOH  O  ', -0.588, (59.19, -30.793, -38.397)), (' A  51  ASN  HA ', ' A1267  HOH  O  ', -0.585, (22.284, -23.948, 0.887)), (' B 107  GLN  H  ', ' B 110  GLN  NE2', -0.578, (61.408, -45.054, -21.513)), (' A 276  MET  CE ', ' A 281  ILE HG13', -0.574, (37.79, -65.863, -17.4)), (' A 154  TYR  HA ', ' A1181  HOH  O  ', -0.57, (31.782, -42.275, -37.531)), (' A  50  LEU  N  ', ' A  50  LEU HD12', -0.556, (28.999, -24.313, 1.438)), (' A  88  ARG  NH1', ' A1257  HOH  O  ', -0.551, (22.14, -17.978, -23.091)), (' B 132  PRO  HG2', ' B 198  THR HG23', -0.55, (59.365, -57.159, -16.21)), (' A  24  THR HG22', ' A1263  HOH  O  ', -0.545, (36.116, -15.759, -4.801)), (' A  78  ILE HD11', ' A  90  LYS  HE3', -0.544, (26.75, -12.365, -28.044)), (' A 153  ASP  HB2', ' A1008  HOH  O  ', -0.542, (26.858, -39.059, -31.871)), (' A  45  THR  N  ', ' A  48  ASP  HB2', -0.537, (31.186, -19.049, -2.695)), (' A 154  TYR  HB3', ' A1241  HOH  O  ', -0.531, (29.673, -39.907, -39.735)), (' A 236  LYS  HD3', ' A 236  LYS  O  ', -0.531, (24.395, -62.908, -3.734)), (' A  83  GLN  NE2', ' A  88  ARG  HD2', -0.525, (21.306, -23.529, -20.89)), (' A  86  LEU HD13', ' A 179  GLY  HA2', -0.525, (24.055, -27.864, -15.858)), (' A  47  GLU  HA ', ' A  50  LEU HD13', -0.522, (30.631, -21.822, 2.902)), (' B 294  PHE  CE2', ' B 298  ARG  NH2', -0.51, (54.091, -37.683, -16.763)), (' A  60  ARG  HG2', ' A  60  ARG HH11', -0.506, (23.797, -8.3, -4.377)), (' A  50  LEU  HG ', ' A 189  GLN  HG3', -0.503, (29.586, -26.284, 2.621)), (' B  79  GLY  HA3', ' B  90  LYS  HZ3', -0.5, (61.045, -36.145, -51.41)), (' B 180  LYS  HB3', ' B 180  LYS  NZ ', -0.499, (66.659, -48.729, -32.492)), (' A  50  LEU  HA ', ' A 189  GLN  CB ', -0.496, (27.373, -26.643, 1.786)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.494, (50.573, -32.401, -42.87)), (' A  51  ASN  N  ', ' A  52  PRO  CD ', -0.492, (25.219, -23.533, 0.499)), (' B 294  PHE  HE2', ' B 298  ARG HH21', -0.491, (53.487, -37.255, -17.213)), (' A  61  LYS  NZ ', ' A1262  HOH  O  ', -0.488, (32.051, -13.806, -7.171)), (' A  40  ARG  HA ', ' A  87  LEU HD23', -0.487, (26.557, -20.69, -12.984)), (' A  51  ASN  H  ', ' A  52  PRO  HD3', -0.484, (25.797, -22.848, -0.093)), (' B  75  LEU  N  ', ' B  75  LEU HD12', -0.484, (47.304, -35.831, -50.018)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.483, (17.273, -56.26, -17.831)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.482, (50.905, -54.388, -32.352)), (' B 288  GLU  HG3', ' B1475  HOH  O  ', -0.482, (44.464, -51.307, -11.453)), (' A 290  GLU  HB2', ' A1004  HOH  O  ', -0.481, (34.658, -51.741, -17.103)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.474, (65.022, -51.369, -8.741)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.47, (23.289, -67.931, -11.032)), (' B 102  LYS  HE3', ' B 156  CYS  SG ', -0.47, (58.879, -32.111, -26.756)), (' B 226  THR HG22', ' B 228  ASN  N  ', -0.469, (67.625, -56.935, 0.84)), (' A  88  ARG  NE ', ' A1246  HOH  O  ', -0.467, (21.063, -22.708, -23.195)), (' A  19  GLN HE21', ' A 119  ASN  HA ', -0.461, (42.012, -22.444, -15.423)), (' A   4  ARG  HB2', ' B 139  SER  HB2', -0.46, (42.809, -52.715, -26.592)), (' A 187  ASP  HB3', ' A1268  HOH  O  ', -0.459, (26.517, -28.129, -8.755)), (' B 269  LYS  O  ', ' B 273  GLN  HG3', -0.459, (55.01, -62.166, 0.428)), (' A 302  GLY  HA3', ' A 994  HOH  O  ', -0.458, (37.552, -50.865, -38.639)), (' A 132  PRO  HD2', ' A 197  ASP  OD2', -0.454, (25.803, -48.622, -9.58)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.454, (46.475, -52.861, -34.925)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.449, (54.501, -29.384, -22.293)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.447, (50.466, -32.541, -42.215)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.447, (56.55, -51.532, -17.173)), (' B  90  LYS  HB3', ' B  90  LYS  NZ ', -0.443, (60.654, -35.241, -50.128)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.442, (44.175, -54.794, -2.771)), (' B 306  GLN  N  ', ' B1473  HOH  O  ', -0.442, (43.979, -40.263, 4.184)), (' A 244  GLN  HA ', ' A 244  GLN  NE2', -0.44, (13.102, -59.863, -21.725)), (' A   6  MET  HG3', ' A 813  DMS  H23', -0.439, (37.61, -46.954, -28.011)), (' A 301  SER  OG ', ' A 303  VAL HG23', -0.439, (32.616, -50.581, -35.453)), (' B  63  ASN  O  ', ' B  77  VAL  CG1', -0.436, (54.946, -40.617, -54.181)), (' B  76  ARG  CZ ', ' B  76  ARG  HB3', -0.434, (53.037, -34.297, -55.621)), (' A 295  ASP  OD1', ' A 298  ARG  NH2', -0.434, (30.435, -47.391, -26.684)), (' A   1  SER  HB3', ' B 140  PHE  O  ', -0.433, (43.838, -56.569, -32.886)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.432, (51.201, -54.417, -32.432)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.429, (57.817, -51.307, -47.579)), (' B  70  ALA  CB ', ' B  75  LEU HD11', -0.428, (46.016, -35.411, -46.331)), (' B 294  PHE  HE2', ' B 298  ARG  NH2', -0.427, (53.387, -37.599, -16.815)), (' A 276  MET  HE1', ' A 280  THR  HA ', -0.424, (39.675, -65.191, -16.749)), (' A 286  ILE  C  ', ' A 286  ILE HD12', -0.424, (36.162, -59.091, -14.095)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.421, (41.223, -40.557, -38.569)), (' A 198  THR  OG1', ' A 240  GLU  HG2', -0.417, (22.7, -52.758, -10.575)), (' B 279  ARG  HG2', ' B 279  ARG HH11', -0.416, (38.942, -56.642, 2.476)), (' A 187  ASP  CB ', ' A1268  HOH  O  ', -0.416, (26.642, -27.737, -8.468)), (' A 244  GLN  CA ', ' A 244  GLN HE21', -0.416, (13.462, -59.068, -22.027)), (' B  83  GLN  NE2', ' B  88  ARG  HD2', -0.415, (63.77, -40.991, -40.539)), (' B 206  ALA  HB2', ' B 293  PRO  HG3', -0.411, (56.213, -45.646, -9.042)), (' B  79  GLY  HA3', ' B  90  LYS  NZ ', -0.41, (61.433, -35.894, -50.924)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.41, (29.4, -38.085, -1.337)), (' B 130  MET  HE1', ' B 182  TYR  CG ', -0.409, (59.242, -49.685, -27.328)), (' B 236  LYS  NZ ', ' B1392  HOH  O  ', -0.409, (55.572, -69.657, -5.319)), (' A 188  ARG  HG2', ' A 189  GLN  N  ', -0.409, (25.166, -27.402, -0.135)), (' A  50  LEU  CD1', ' A  50  LEU  H  ', -0.408, (29.163, -23.742, 2.275)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.407, (30.358, -47.674, -18.179)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.406, (32.654, -35.762, -9.595)), (' B  90  LYS  HB3', ' B  90  LYS  HZ3', -0.406, (60.296, -35.472, -49.997)), (' B 233  VAL  O  ', ' B 236  LYS  HB3', -0.404, (59.422, -64.508, -4.645)), (' B  63  ASN  O  ', ' B  77  VAL HG11', -0.404, (54.856, -40.977, -53.894)), (' B 180  LYS  HD3', ' B1438  HOH  O  ', -0.403, (66.812, -45.665, -32.506)), (' A  78  ILE  CD1', ' A  90  LYS  HE3', -0.401, (26.959, -11.703, -27.587))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
