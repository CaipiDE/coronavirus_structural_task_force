# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 302 ', 'GLY', 0.010519303180597246, (-10.429999999999996, -22.938, 36.51900000000001)), ('B', '  46 ', 'ALA', 0.0004873003398389617, (-26.156999999999993, -33.738000000000014, 50.697)), ('B', ' 154 ', 'TYR', 0.04943596724517135, (-26.81199999999999, -1.308, 21.791))]
data['omega'] = [('A', ' 306 ', 'GLN', None, (-10.137999999999996, -10.690000000000003, 38.045))]
data['rota'] = [('A', '  30 ', 'LEU', 0.02976155626696867, (-6.133999999999998, 2.287, 22.72800000000001)), ('A', '  47 ', 'GLU', 0.01007063988650026, (-2.9059999999999997, 6.922999999999999, -2.961)), ('A', '  49 ', 'MET', 1.6957359601245185e-05, (-1.6910000000000003, 4.202, 1.0620000000000005)), ('A', '  59 ', 'ILE', 0.00508189753965427, (4.27, 16.973999999999993, 9.654)), ('A', '  87 ', 'LEU', 0.04042258423660055, (0.7320000000000002, 7.0360000000000005, 16.352000000000004)), ('A', ' 104 ', 'VAL', 0.21218550116525783, (4.5690000000000035, -7.968999999999999, 25.085)), ('A', ' 106 ', 'ILE', 0.15814108803517085, (3.8320000000000034, -12.553, 20.991)), ('A', ' 141 ', 'LEU', 0.0, (-14.783, -5.349, 8.596)), ('A', ' 152 ', 'ILE', 0.10640413974030966, (-4.457999999999998, -11.76, 31.003)), ('A', ' 165 ', 'MET', 0.2937127719786746, (-4.611, -4.418000000000002, 7.540000000000001)), ('A', ' 167 ', 'LEU', 0.0, (-4.126999999999999, -9.282, 3.149000000000001)), ('A', ' 222 ', 'ARG', 0.0, (1.6050000000000004, -48.37299999999999, 23.601000000000006)), ('A', ' 227 ', 'LEU', 0.0019454975351158867, (11.680000000000001, -36.521000000000015, 17.372)), ('A', ' 286 ', 'ILE', 0.029094929052272206, (-10.778999999999998, -32.26, 13.288)), ('A', ' 305 ', 'PHE', 0.16099265334979315, (-9.301999999999996, -12.609, 36.709)), ('B', '  27 ', 'LEU', 0.2292803594174947, (-21.507999999999996, -20.237000000000002, 43.662)), ('B', '  30 ', 'LEU', 0.0, (-25.848999999999997, -11.647, 39.423)), ('B', '  47 ', 'GLU', 0.02080581437724663, (-29.497, -35.565000000000005, 50.746000000000016)), ('B', '  49 ', 'MET', 0.0, (-30.327999999999996, -32.487, 46.63200000000001)), ('B', '  93 ', 'THR', 0.008479686904234267, (-25.750999999999998, -1.4400000000000004, 48.63900000000002)), ('B', '  94 ', 'SER', 0.24854185996527597, (-26.589, -0.6290000000000002, 45.03400000000001)), ('B', ' 106 ', 'ILE', 0.10961136591873472, (-34.909, -17.145, 24.489)), ('B', ' 127 ', 'GLN', 0.0, (-20.579000000000004, -17.977, 22.241000000000007)), ('B', ' 141 ', 'LEU', 0.07448876773980265, (-16.214, -26.944999999999997, 35.737)), ('B', ' 153 ', 'ASP', 0.001636193687882486, (-27.892999999999997, -4.941, 21.556)), ('B', ' 167 ', 'LEU', 0.005143625148459826, (-26.326, -33.511, 32.726)), ('B', ' 217 ', 'ARG', 0.0, (-20.051, -20.513, -3.722)), ('B', ' 222 ', 'ARG', 0.0, (-28.695999999999998, -25.205, -10.649000000000003)), ('B', ' 227 ', 'LEU', 0.0884566699217334, (-40.16999999999999, -26.282, 1.054))]
data['cbeta'] = []
data['probe'] = [(' B 222  ARG  HB2', ' B 222  ARG HH11', -1.05, (-29.109, -25.457, -13.12)), (' A 222  ARG  HG3', ' A 222  ARG HH11', -1.043, (3.565, -50.657, 22.737)), (' A 305  PHE  HA ', ' A 306  GLN  HB2', -0.968, (-7.618, -11.833, 37.26)), (' B 217  ARG  HG2', ' B 217  ARG HH11', -0.961, (-19.372, -18.122, -5.484)), (' B   6  MET  O  ', ' B 127  GLN  HG3', -0.941, (-20.223, -15.583, 19.513)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.916, (-16.18, -14.642, 12.159)), (' B 217  ARG  CG ', ' B 217  ARG HH11', -0.915, (-19.825, -19.099, -5.642)), (' B  19  GLN HE21', ' B  26  THR HG21', -0.866, (-17.748, -18.85, 46.488)), (' B 217  ARG  HD3', ' B 220  LEU HD12', -0.831, (-23.22, -18.875, -6.256)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.804, (-14.664, 7.226, 13.684)), (' A   3  PHE  HZ ', ' A 291  PHE  CE2', -0.804, (-8.271, -26.177, 25.201)), (' B  52  PRO  HD2', ' B 188  ARG  HG2', -0.754, (-35.29, -31.749, 44.286)), (' B 222  ARG  HB2', ' B 222  ARG  NH1', -0.754, (-29.045, -25.18, -13.818)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.719, (3.18, -4.809, 4.006)), (' B 217  ARG  CB ', ' B 217  ARG HH11', -0.718, (-20.417, -18.79, -5.13)), (' A 222  ARG  HG3', ' A 222  ARG  NH1', -0.689, (4.242, -51.023, 23.236)), (' A 305  PHE  HA ', ' A 306  GLN  CB ', -0.688, (-8.254, -11.417, 37.533)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.681, (-16.793, -14.509, 12.094)), (' B  52  PRO  CD ', ' B 188  ARG  HG2', -0.681, (-34.59, -31.891, 44.459)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.68, (-34.484, -31.487, 35.563)), (' B 176  ASP  HB2', ' B 312  HOH  O  ', -0.667, (-35.409, -15.139, 31.155)), (' A 166  GLU  OE1', ' B   1  SER  HB2', -0.656, (-10.837, -8.92, 5.234)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.655, (-1.38, 3.41, 2.843)), (' B  49  MET  HA ', ' B  49  MET  HE3', -0.638, (-30.858, -31.57, 45.686)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.632, (-38.706, -23.595, 9.042)), (' B 222  ARG  CB ', ' B 222  ARG HH11', -0.632, (-28.144, -25.564, -13.314)), (' B 217  ARG  HG2', ' B 217  ARG  NH1', -0.631, (-19.13, -18.034, -5.963)), (' A  47  GLU  HA ', ' A  50  LEU HD23', -0.63, (-3.247, 5.509, -3.64)), (' A 222  ARG  CG ', ' A 222  ARG HH11', -0.623, (3.019, -50.823, 23.534)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.621, (-34.726, -22.715, 34.441)), (' A   3  PHE  CZ ', ' A 291  PHE  CE2', -0.612, (-8.499, -26.765, 25.171)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.61, (-28.919, -2.34, 22.613)), (' B  45  THR HG22', ' B  48  ASP  OD2', -0.602, (-29.334, -29.84, 52.435)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.6, (-35.676, -22.127, 42.187)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.594, (-24.209, -4.715, 43.036)), (' A 154  TYR  C  ', ' A 306  GLN  HG2', -0.58, (-5.288, -10.756, 37.831)), (' B 217  ARG  HB3', ' B 217  ARG  NH1', -0.575, (-20.43, -17.789, -4.927)), (' B 131  ARG  HD3', ' B 197  ASP  OD1', -0.573, (-28.494, -30.236, 19.873)), (' B 217  ARG  NH2', ' B 331  HOH  O  ', -0.564, (-21.647, -14.881, -5.902)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.548, (-6.687, -7.757, 10.221)), (' A   2  GLY  HA3', ' B 138  GLY  O  ', -0.545, (-18.542, -28.577, 27.057)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.542, (-6.96, -9.361, 21.316)), (' B 242  LEU  HA ', ' B 246  HIS  HD2', -0.539, (-37.568, -24.577, 9.121)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.536, (-1.922, -11.323, 36.307)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.533, (-3.621, 8.415, 1.963)), (' B 217  ARG  CG ', ' B 217  ARG  NH1', -0.532, (-20.086, -18.113, -5.098)), (' B 133  ASN  O  ', ' B 134  HIS  HB2', -0.527, (-33.843, -28.898, 26.031)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.522, (-14.49, 7.207, 13.873)), (' B 217  ARG  HD3', ' B 220  LEU  CD1', -0.52, (-23.531, -19.252, -5.965)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.519, (-6.126, -8.069, 9.655)), (' B 111  THR  HB ', ' B 127  GLN HE22', -0.516, (-24.844, -17.481, 19.589)), (' B 247  VAL HG13', ' B 261  VAL HG11', -0.514, (-36.363, -19.16, 2.396)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.506, (-1.79, -20.238, 10.017)), (' B 217  ARG  HB3', ' B 217  ARG HH11', -0.506, (-20.171, -18.566, -4.46)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.504, (3.642, -39.943, 11.668)), (' B 217  ARG  HB2', ' B 220  LEU HD12', -0.5, (-22.886, -19.898, -5.044)), (' B 298  ARG  NH2', ' B 351  HOH  O  ', -0.498, (-21.75, -12.0, 18.755)), (' B   7  ALA  HA ', ' B 127  GLN  HG2', -0.497, (-20.64, -14.944, 21.432)), (' A 138  GLY  O  ', ' B   2  GLY  HA3', -0.496, (-11.49, -13.145, 9.661)), (' B  56  ASP  CG ', ' B  60  ARG HH12', -0.494, (-38.859, -27.739, 55.94)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.493, (-13.946, -3.525, 11.686)), (' B  44  CYS  SG ', ' B  54  TYR  CE1', -0.492, (-32.474, -26.719, 46.736)), (' A  81  SER  O  ', ' A  87  LEU HD23', -0.492, (2.525, 9.553, 16.614)), (' B 217  ARG  HB2', ' B 220  LEU  CD1', -0.489, (-22.888, -19.633, -5.032)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.489, (-11.353, -5.096, 10.72)), (' B  56  ASP  OD2', ' B  60  ARG  NH1', -0.486, (-38.213, -27.74, 56.3)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.484, (-24.604, -26.523, 32.351)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.484, (8.81, -27.704, 18.037)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.482, (-1.33, 4.166, 2.61)), (' A   3  PHE  CZ ', ' A 291  PHE  CZ ', -0.479, (-9.216, -26.018, 25.485)), (' B   4  ARG  N  ', ' B 299  GLN HE22', -0.477, (-16.572, -15.167, 12.606)), (' B 234  ALA  O  ', ' B 239  TYR  HB2', -0.474, (-32.686, -32.538, 8.161)), (' A  45  THR HG22', ' A  48  ASP  OD2', -0.472, (-4.509, 10.607, 1.595)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.468, (-24.591, -15.833, 28.264)), (' B  67  LEU HD11', ' B  74  GLN  HG2', -0.466, (-19.067, -11.985, 52.949)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.465, (-24.728, -26.039, 32.681)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.464, (-31.36, -23.347, 47.902)), (' A  66  PHE  CE1', ' A  87  LEU HD11', -0.463, (-1.955, 11.077, 13.948)), (' A 305  PHE  CA ', ' A 306  GLN  CB ', -0.461, (-8.624, -11.779, 37.331)), (' B 167  LEU HD21', ' B 185  PHE  CE1', -0.458, (-31.024, -32.024, 30.634)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.456, (-13.722, -25.117, 26.404)), (' A 235  MET  HE3', ' A 241  PRO  HG3', -0.454, (9.191, -28.741, 9.53)), (' B  40  ARG  HG2', ' B  85  CYS  O  ', -0.449, (-33.415, -21.964, 42.005)), (' B  45  THR HG22', ' B  48  ASP  CG ', -0.449, (-29.396, -30.361, 52.412)), (' B 217  ARG  CD ', ' B 220  LEU HD12', -0.446, (-22.233, -19.437, -6.048)), (' B  45  THR  H  ', ' B  48  ASP  HB2', -0.444, (-29.334, -30.152, 50.494)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.444, (-24.02, -4.814, 42.826)), (' A 132  PRO  HD2', ' A 197  ASP  OD2', -0.443, (0.545, -20.867, 10.482)), (' B   6  MET  HB2', ' B   6  MET  HE3', -0.442, (-17.479, -13.145, 15.2)), (' A 298  ARG  NH1', ' A 321  HOH  O  ', -0.438, (-4.469, -18.486, 27.884)), (' B 130  MET  HB2', ' B 130  MET  HE3', -0.437, (-30.216, -21.68, 24.887)), (' A 270  GLU  HG3', ' A 274  ASN  ND2', -0.432, (-2.585, -45.131, 12.635)), (' B 131  ARG  CD ', ' B 197  ASP  OD1', -0.431, (-28.355, -29.789, 20.269)), (' B 279  ARG  HB3', ' B 279  ARG  HE ', -0.431, (-14.463, -27.461, -0.875)), (' B  49  MET  CE ', ' B  49  MET  HA ', -0.429, (-30.638, -31.101, 45.416)), (' B  48  ASP  O  ', ' B  52  PRO  HG3', -0.429, (-32.513, -31.707, 47.547)), (' A  46  ALA  HA ', ' A 393  HOH  O  ', -0.427, (-7.231, 4.91, -0.448)), (' B  40  ARG  CD ', ' B  85  CYS  HA ', -0.424, (-35.651, -22.679, 42.693)), (' B 217  ARG  HG3', ' B 217  ARG  O  ', -0.421, (-20.625, -21.06, -6.034)), (' B   5  LYS  HG3', ' B 291  PHE  CZ ', -0.42, (-19.468, -19.279, 15.591)), (' A 292  THR  HB ', ' A 293  PRO  HD2', -0.42, (0.539, -23.311, 24.128)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.417, (-32.01, -19.812, 45.957)), (' B  45  THR  OG1', ' B  46  ALA  N  ', -0.414, (-25.712, -31.582, 51.709)), (' A 153  ASP  O  ', ' A 153  ASP  OD1', -0.409, (-1.438, -11.515, 34.718)), (' A  47  GLU  HA ', ' A  50  LEU  HB2', -0.409, (-1.7, 5.498, -3.37)), (' A 186  VAL  H  ', ' A 192  GLN  NE2', -0.408, (3.248, -5.482, 4.211)), (' B 217  ARG  NE ', ' B 307  HOH  O  ', -0.406, (-22.82, -16.759, -6.519)), (' A   5  LYS  HB2', ' A   5  LYS  HE3', -0.404, (-11.834, -22.984, 19.693)), (' B 242  LEU HD12', ' B 246  HIS  CD2', -0.403, (-36.606, -23.467, 9.048)), (' A 305  PHE  CA ', ' A 306  GLN  HB2', -0.402, (-8.293, -11.856, 37.026)), (' B  16  CYS  SG ', ' B  99  PRO  HD3', -0.4, (-25.134, -5.192, 35.268))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
