# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 278 ', 'GLY', None, (-20.601999999999997, -12.801999999999998, -24.722999999999992)), ('B', ' 302 ', 'GLY', None, (-11.869, 16.008, -11.838))]
data['rota'] = [('A', '  97 ', 'LYS', 0.27355518567551473, (-1.2389999999999999, 12.778999999999998, 18.689))]
data['cbeta'] = []
data['probe'] = [(' A 305  PHE  O  ', ' A 306  GLN  CG ', -1.235, (-18.808, -25.887, 5.897)), (' A 145  CYS  SG ', ' A 401  3A7  C18', -1.18, (1.189, 14.367, -6.534)), (' B 276  MET  HE2', ' B 279  ARG  O  ', -1.132, (-20.263, -8.766, -20.2)), (' A 305  PHE  O  ', ' A 306  GLN  HG3', -1.117, (-19.926, -25.195, 6.259)), (' A 123  SER  HB2', ' B 298  ARG  NH1', -1.114, (-12.26, 12.642, -0.01)), (' A  19  GLN HE21', ' A  26  THR HG21', -1.091, (-2.728, 22.426, 0.416)), (' B 145  CYS  SG ', ' B 401  3A7  C18', -1.065, (-23.689, -9.493, 18.146)), (' A 123  SER  HB2', ' B 298  ARG HH12', -1.038, (-12.017, 12.01, 0.893)), (' B 219  PHE  CE1', ' B 220  LEU  CD2', -0.933, (-24.032, 2.428, -23.037)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.931, (-3.827, 23.11, 0.723)), (' B 276  MET  SD ', ' B 285  THR  O  ', -0.911, (-21.86, -8.872, -17.506)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.893, (-29.575, 1.414, -2.87)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.837, (-2.554, 22.407, 0.605)), (' B 219  PHE  CE1', ' B 220  LEU HD21', -0.831, (-23.242, 3.205, -21.957)), (' B 169  THR  OG1', ' B 171  VAL HG22', -0.822, (-29.353, -12.969, 4.581)), (' A  40  ARG  CG ', ' A  85  CYS  O  ', -0.821, (11.504, 14.438, -3.232)), (' A  40  ARG  HG2', ' A  85  CYS  O  ', -0.819, (11.74, 13.721, -2.88)), (' A 123  SER  CB ', ' B 298  ARG HH12', -0.819, (-11.919, 12.247, 0.903)), (' B 276  MET  CE ', ' B 279  ARG  O  ', -0.804, (-21.031, -8.622, -19.895)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.802, (10.316, 7.721, -12.303)), (' A  56  ASP  HB3', ' A  60  ARG HH12', -0.8, (19.456, 24.454, -8.462)), (' B 276  MET  HG3', ' B 276  MET  O  ', -0.8, (-22.598, -9.807, -20.202)), (' B 212  VAL HG23', ' B 219  PHE  HZ ', -0.794, (-21.098, 3.612, -20.492)), (' A 305  PHE  C  ', ' A 306  GLN  HG3', -0.787, (-19.619, -25.29, 7.449)), (' B 212  VAL  CG2', ' B 219  PHE  HZ ', -0.774, (-21.691, 3.939, -21.202)), (' A 286  ILE  O  ', ' A 286  ILE HD12', -0.773, (-12.232, -12.224, -9.043)), (' A  34  ASP  O  ', ' A  91  VAL HG22', -0.77, (7.877, 19.037, 12.718)), (' B 219  PHE  HE1', ' B 220  LEU HD21', -0.756, (-24.275, 3.005, -21.526)), (' A 285  THR HG21', ' B 285  THR  OG1', -0.741, (-19.705, -11.794, -13.688)), (' A 145  CYS  SG ', ' A 401  3A7  H7 ', -0.732, (1.13, 15.276, -6.488)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.728, (12.453, 19.027, -12.242)), (' B 277  ASN  OD1', ' B 278  GLY  CA ', -0.723, (-20.597, -14.486, -24.243)), (' A 123  SER  CB ', ' B 298  ARG  NH1', -0.722, (-11.656, 12.361, 0.531)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.719, (4.981, 18.217, -2.397)), (' A 131  ARG  HG2', ' A 135  THR  O  ', -0.705, (-0.111, -2.136, -8.119)), (' B 219  PHE  CE1', ' B 220  LEU HD23', -0.701, (-24.716, 2.525, -22.643)), (' A 141  LEU HD21', ' B 299  GLN  O  ', -0.699, (-10.824, 11.351, -9.542)), (' B 286  ILE  O  ', ' B 286  ILE HD12', -0.694, (-21.138, -7.342, -12.478)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.694, (-14.346, -9.215, 4.742)), (' A  86  LEU HD21', ' A 164  HIS  CE1', -0.686, (7.449, 11.187, -1.018)), (' B 212  VAL HG23', ' B 219  PHE  CZ ', -0.683, (-21.302, 2.936, -20.789)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.683, (-37.261, -9.241, 13.826)), (' B 153  ASP  OD1', ' B 154  TYR  CD2', -0.679, (-20.401, 18.596, 4.543)), (' B 219  PHE  HE1', ' B 220  LEU  CD2', -0.675, (-24.393, 2.832, -21.645)), (' B 167  LEU HD11', ' B 185  PHE  CE1', -0.664, (-33.53, -10.05, 8.25)), (' B 212  VAL  CG2', ' B 219  PHE  CZ ', -0.656, (-21.432, 3.181, -21.499)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.646, (3.657, -22.161, -8.113)), (' A  40  ARG  CB ', ' A  85  CYS  O  ', -0.637, (11.65, 14.435, -2.187)), (' B 231  ASN  ND2', ' B 242  LEU  H  ', -0.628, (-37.302, 2.974, -12.995)), (' A  40  ARG  HB3', ' A  85  CYS  O  ', -0.627, (11.914, 14.481, -2.127)), (' A  39  PRO  HA ', ' A  86  LEU HD23', -0.625, (8.486, 12.765, -1.081)), (' A   6  MET  HE2', ' B 126  TYR  CD2', -0.618, (-15.916, -4.887, 7.432)), (' A 286  ILE  C  ', ' A 286  ILE HD12', -0.617, (-11.92, -11.961, -9.721)), (' A 131  ARG  CG ', ' A 135  THR  O  ', -0.616, (0.397, -2.952, -8.502)), (' B 212  VAL  HA ', ' B 216  ASP  O  ', -0.616, (-17.715, 3.436, -21.76)), (' A  54  TYR  HB3', ' A  82  MET  HE1', -0.611, (15.832, 17.852, -4.064)), (' A 153  ASP  OD1', ' A 154  TYR  CD1', -0.61, (-0.471, -5.725, 17.45)), (' B   3  PHE  CE2', ' B 291  PHE  HE2', -0.6, (-16.742, 4.629, -9.595)), (' B 286  ILE  C  ', ' B 286  ILE HD12', -0.592, (-21.634, -7.837, -12.499)), (' B 145  CYS  SG ', ' B 401  3A7  C17', -0.589, (-24.348, -9.685, 17.645)), (' A 140  PHE  O  ', ' B   1  SER  N  ', -0.583, (-6.801, 9.893, -9.56)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.583, (-3.899, 2.93, -7.729)), (' B 231  ASN HD21', ' B 242  LEU  H  ', -0.582, (-37.119, 3.091, -12.487)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.579, (3.394, 15.982, -0.414)), (' B   3  PHE  CD2', ' B 291  PHE  CE2', -0.573, (-16.631, 3.689, -8.944)), (' B 220  LEU HD11', ' B 259  ILE HD13', -0.571, (-23.167, 5.696, -23.062)), (' B 214  ASN  ND2', ' B 282  LEU HD22', -0.569, (-13.671, 0.626, -15.385)), (' B 277  ASN  OD1', ' B 278  GLY  N  ', -0.569, (-20.694, -13.812, -24.497)), (' A 305  PHE  O  ', ' A 306  GLN  CB ', -0.568, (-20.082, -26.201, 6.789)), (' B 167  LEU HD11', ' B 185  PHE  CZ ', -0.563, (-33.23, -9.439, 8.027)), (' B 214  ASN HD22', ' B 282  LEU HD22', -0.557, (-14.229, 0.637, -14.768)), (' A 231  ASN  ND2', ' A 242  LEU  H  ', -0.557, (3.721, -21.854, -8.513)), (' B 145  CYS  SG ', ' B 401  3A7  O1 ', -0.554, (-23.238, -8.907, 18.684)), (' B 140  PHE  HB2', ' B 172  HIS  CE1', -0.548, (-21.906, -9.414, 10.468)), (' A  27  LEU HD11', ' A  38  CYS  HB2', -0.548, (4.665, 16.721, 0.818)), (' B 220  LEU HD11', ' B 259  ILE  CD1', -0.548, (-22.254, 5.763, -23.595)), (' B 109  GLY  HA2', ' B 200  ILE  CD1', -0.546, (-28.87, 0.423, -2.597)), (' B  49  MET  HE1', ' B 401  3A7  C5 ', -0.537, (-27.098, -14.718, 23.641)), (' B   3  PHE  HD2', ' B 291  PHE  CE2', -0.537, (-15.979, 3.361, -8.846)), (' B 167  LEU  CD1', ' B 185  PHE  CE1', -0.535, (-33.152, -10.602, 8.216)), (' A 145  CYS  SG ', ' A 401  3A7  C17', -0.533, (0.573, 14.126, -6.816)), (' B 277  ASN  OD1', ' B 278  GLY  HA2', -0.531, (-20.929, -13.752, -23.245)), (' B 145  CYS  SG ', ' B 401  3A7  C19', -0.522, (-24.543, -9.6, 17.423)), (' B 219  PHE  CD1', ' B 220  LEU HD23', -0.519, (-24.256, 1.868, -22.664)), (' B 219  PHE  HE1', ' B 264  MET  SD ', -0.518, (-24.6, 2.879, -20.925)), (' A  86  LEU HD21', ' A 164  HIS  HE1', -0.516, (7.502, 10.068, -1.141)), (' A 126  TYR  CE1', ' B   6  MET  HE2', -0.513, (-9.369, 5.849, -2.51)), (' A 169  THR  OG1', ' A 171  VAL HG22', -0.512, (-0.528, 2.791, -14.4)), (' B 203  ASN  CB ', ' B 289  ASP  O  ', -0.511, (-25.72, 0.209, -6.492)), (' B 211  ALA  HA ', ' B 282  LEU HD21', -0.5, (-16.322, 1.376, -16.585)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.496, (-18.13, 11.775, 23.667)), (' A  53  ASN  O  ', ' A  57  LEU  HG ', -0.493, (16.742, 21.108, -8.692)), (' B  78  ILE HD11', ' B  90  LYS  HE2', -0.492, (-25.786, 11.162, 34.573)), (' B 203  ASN  HB2', ' B 289  ASP  O  ', -0.489, (-26.179, 0.514, -6.673)), (' A   3  PHE  HB2', ' A 214  ASN HD21', -0.487, (-16.42, -14.023, 3.695)), (' B  58  LEU HD11', ' B  80  HIS  HD2', -0.485, (-32.884, -0.16, 32.184)), (' A 224  THR  HB ', ' A 263  ASP  OD1', -0.483, (-6.143, -32.905, -3.728)), (' A  48  ASP  O  ', ' A  52  PRO  CB ', -0.482, (12.926, 19.231, -12.233)), (' B   3  PHE  CD2', ' B 291  PHE  HE2', -0.482, (-16.674, 4.199, -8.922)), (' A  55  GLU  HA ', ' A  55  GLU  OE1', -0.481, (20.13, 18.671, -3.006)), (' B 159  PHE  HB3', ' B 177  LEU HD22', -0.48, (-25.444, 6.417, 15.04)), (' A  43  ILE HD12', ' A  57  LEU  HB3', -0.478, (13.934, 22.156, -6.048)), (' B 220  LEU  CD1', ' B 259  ILE HD13', -0.478, (-22.773, 5.633, -23.563)), (' A  27  LEU  CD1', ' A  39  PRO  HD2', -0.478, (3.75, 16.363, -0.398)), (' B 209  TYR  O  ', ' B 213  ILE HG13', -0.476, (-18.73, 6.894, -17.17)), (' B 127  GLN  HA ', ' B 127  GLN  NE2', -0.472, (-18.147, 1.634, 2.867)), (' A 177  LEU  N  ', ' A 177  LEU HD12', -0.466, (7.621, 5.662, 3.198)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.466, (-20.862, 2.508, 9.842)), (' B 220  LEU  CD1', ' B 259  ILE  CD1', -0.465, (-22.43, 5.844, -23.82)), (' B 219  PHE  CE1', ' B 264  MET  SD ', -0.465, (-24.248, 2.999, -20.714)), (' B 177  LEU  N  ', ' B 177  LEU HD12', -0.461, (-28.702, 4.157, 15.191)), (' B 276  MET  HE2', ' B 280  THR  HA ', -0.459, (-19.212, -8.348, -18.859)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.454, (-30.239, -2.291, 25.966)), (' B 214  ASN  ND2', ' B 282  LEU  CD2', -0.454, (-14.182, 0.68, -15.541)), (' B 219  PHE  HD1', ' B 267  ALA  HB1', -0.45, (-25.485, 0.895, -22.068)), (' A   1  SER  HB2', ' B 166  GLU  OE1', -0.449, (-22.749, -15.095, 9.372)), (' B  64  HIS  O  ', ' B  65  SER  C  ', -0.445, (-24.083, -3.984, 35.999)), (' A  52  PRO  CG ', ' A 188  ILE HG22', -0.445, (12.368, 15.562, -12.321)), (' A 133  ASN  O  ', ' A 134  HIS  HB2', -0.443, (6.422, -1.855, -9.428)), (' A 304  THR  CG2', ' A 306  GLN HE21', -0.443, (-16.36, -26.066, 6.666)), (' A  52  PRO  HG2', ' A 188  ILE HG22', -0.443, (12.547, 15.474, -12.074)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.442, (19.464, 24.439, -4.973)), (' A 221  ASN  ND2', ' A 270  GLU  OE1', -0.44, (-11.943, -29.711, -10.228)), (' B 169  THR  HG1', ' B 171  VAL HG22', -0.438, (-28.968, -13.357, 5.759)), (' A   6  MET  HE2', ' B 126  TYR  HD2', -0.437, (-15.411, -4.265, 7.899)), (' B 113  SER  O  ', ' B 150  PHE  CD1', -0.433, (-19.74, 3.806, 9.719)), (' B 286  ILE  C  ', ' B 286  ILE  CD1', -0.433, (-21.996, -8.165, -11.676)), (' B 127  GLN  HA ', ' B 127  GLN HE21', -0.433, (-17.873, 2.055, 2.73)), (' B 301  SER  HA ', ' B 302  GLY  HA2', -0.431, (-14.357, 15.936, -12.162)), (' B  97  LYS  O  ', ' B  98  THR  C  ', -0.43, (-16.295, 14.21, 20.218)), (' B 276  MET  CE ', ' B 280  THR  HA ', -0.43, (-19.631, -8.027, -18.961)), (' B 203  ASN  ND2', ' B 289  ASP  O  ', -0.43, (-26.024, 1.031, -5.486)), (' B  40  ARG  HB3', ' B  85  CYS  O  ', -0.428, (-32.243, -2.397, 23.02)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.425, (-31.698, 1.433, 19.014)), (' B 198  THR HG22', ' B 199  THR  N  ', -0.424, (-33.179, -4.734, -6.919)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.421, (1.519, 2.909, -13.042)), (' B 128  CYS  SG ', ' B 129  ALA  N  ', -0.421, (-23.58, -1.457, 3.236)), (' B 202  LEU HD11', ' B 293  PRO  HG2', -0.419, (-27.589, 7.928, -8.404)), (' A 217  ARG  O  ', ' A 218  TRP  C  ', -0.419, (-17.631, -25.662, -5.114)), (' A  56  ASP  O  ', ' A  60  ARG  NH1', -0.417, (18.848, 24.675, -6.367)), (' B 207  TRP  CE2', ' B 282  LEU HD12', -0.416, (-18.488, -0.974, -13.307)), (' B 190  THR  O  ', ' B 191  ALA  C  ', -0.416, (-36.064, -16.092, 12.933)), (' B  97  LYS  HG2', ' B 508  HOH  O  ', -0.416, (-12.638, 10.248, 24.223)), (' B 239  TYR  CZ ', ' B 272  LEU HD21', -0.415, (-30.521, -5.379, -13.852)), (' A 166  GLU  CD ', ' B   1  SER  HB3', -0.413, (-5.123, 8.3, -12.122)), (' B 167  LEU  HB3', ' B 168  PRO  CD ', -0.412, (-31.411, -14.788, 8.945)), (' B   5  LYS  NZ ', ' B 288  GLU  OE2', -0.411, (-19.953, -2.949, -5.066)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.411, (-2.535, -25.285, -7.709)), (' A 166  GLU  OE2', ' B   1  SER  HB3', -0.411, (-5.298, 8.279, -11.64)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.41, (-2.248, 2.977, 3.862)), (' B  40  ARG  HG2', ' B  85  CYS  O  ', -0.41, (-32.562, -3.099, 22.506)), (' A 145  CYS  SG ', ' A 401  3A7  O1 ', -0.407, (-0.268, 14.899, -5.143)), (' A  43  ILE HD12', ' A  57  LEU  CB ', -0.407, (13.816, 21.812, -5.714)), (' B 127  GLN  HG3', ' B 128  CYS  N  ', -0.406, (-19.839, 0.179, 1.629)), (' B  27  LEU  C  ', ' B  27  LEU HD12', -0.405, (-21.97, -4.168, 23.266)), (' B 111  THR  HB ', ' B 127  GLN  OE1', -0.404, (-21.012, 3.158, 0.882)), (' B 198  THR HG21', ' B 240  GLU  OE2', -0.403, (-35.977, -2.978, -5.892)), (' A 188  ILE HG13', ' A 190  THR HG22', -0.402, (9.757, 11.569, -15.641)), (' B 186  VAL  H  ', ' B 192  GLN  NE2', -0.402, (-37.104, -9.869, 13.826)), (' A  83  GLN  NE2', ' A 178  GLU  OE1', -0.401, (15.1, 6.603, 5.7))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
