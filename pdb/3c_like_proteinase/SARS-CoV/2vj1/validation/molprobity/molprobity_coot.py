# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  23 ', 'GLY', 0.04530565657347863, (-10.683, 29.684999999999995, 8.266)), ('A', '  46 ', 'ALA', 0.04821479126237693, (-6.6069999999999975, 22.157, -0.917)), ('A', ' 142 ', 'ASN', 0.005603049106961895, (-16.282999999999998, 13.167, 7.948)), ('A', ' 300 ', 'CYS', 0.03723262267642628, (-9.747, -12.333, 32.491)), ('B', '  84 ', 'ASN', 0.04165672825280532, (-39.833, -4.756, 40.506))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.20125667327445754, (-10.739, 19.461, 13.242999999999997)), ('A', '  45 ', 'THR', 0.17140668623234975, (-6.055999999999999, 24.117, 2.339)), ('A', '  50 ', 'LEU', 0.11321449908490006, (-0.06899999999999984, 19.042, -2.413)), ('A', '  55 ', 'GLU', 0.1262342741525282, (6.873, 26.486, 8.495)), ('A', '  59 ', 'ILE', 0.05720809818049156, (4.773999999999997, 32.351, 9.844)), ('A', '  69 ', 'GLN', 0.279954266690538, (-13.909000000000002, 25.972999999999995, 21.012)), ('A', '  74 ', 'GLN', 0.02542307455479983, (-13.988, 30.20199999999999, 23.002999999999993)), ('A', '  77 ', 'VAL', 0.17340828743320716, (-5.080000000000002, 31.488999999999994, 21.742)), ('A', '  82 ', 'MET', 0.19688816556253652, (5.103999999999999, 23.588, 15.698)), ('A', ' 136 ', 'ILE', 0.009899564914462783, (-5.044, 1.517, 11.878)), ('A', ' 141 ', 'LEU', 0.023138001171144573, (-15.401999999999997, 9.621, 9.039)), ('A', ' 142 ', 'ASN', 0.040142383557026706, (-16.282999999999998, 13.167, 7.948)), ('A', ' 165 ', 'MET', 0.07094127389446246, (-4.977999999999999, 10.98, 7.373)), ('A', ' 169 ', 'THR', 0.0642669211500029, (-7.229, 1.756, 1.231)), ('A', ' 180 ', 'LYS', 0.05470164819625517, (6.023999999999998, 11.97, 14.798)), ('A', ' 226 ', 'THR', 0.07395354378697337, (11.363, -24.949, 17.381)), ('A', ' 232 ', 'LEU', 0.0, (8.739, -21.261, 8.716)), ('A', ' 236 ', 'LYS', 0.123192817014525, (3.531, -18.901, 4.846)), ('A', ' 268 ', 'LEU', 0.0003488194545040704, (-1.1780000000000008, -22.513999999999996, 16.425)), ('A', ' 276 ', 'MET', 0.003968968093888222, (-10.722000000000001, -24.891999999999992, 13.001)), ('B', '   6 ', 'MET', 0.26119657566704074, (-18.383000000000003, 1.8009999999999995, 18.171)), ('B', '  22 ', 'CYS', 0.21043734047522436, (-25.131, -5.136, 51.722)), ('B', '  24 ', 'THR', 0.005081120864724787, (-20.705, -9.063, 52.082999999999984)), ('B', '  27 ', 'LEU', 0.07468548291319214, (-22.126, -4.486, 43.291)), ('B', '  45 ', 'THR', 0.013337274470238842, (-27.032000000000007, -14.297999999999996, 50.006)), ('B', '  47 ', 'GLU', 0.07240001473046112, (-29.062, -19.106, 51.061)), ('B', '  59 ', 'ILE', 0.1205613263172016, (-38.57000000000001, -5.503, 55.272)), ('B', '  64 ', 'HIS', 0.0, (-28.043, 2.0120000000000005, 57.595)), ('B', '  68 ', 'VAL', 0.09458839459937801, (-23.058999999999997, 3.277999999999999, 49.16599999999998)), ('B', '  84 ', 'ASN', 0.09712798300234227, (-39.833, -4.756, 40.506)), ('B', '  87 ', 'LEU', 0.05974923424966877, (-33.67200000000001, -1.3909999999999998, 44.763)), ('B', '  90 ', 'LYS', 0.0, (-32.52, 7.756999999999999, 48.367)), ('B', '  93 ', 'THR', 0.007892481042752251, (-26.881000000000004, 14.354999999999995, 48.19)), ('B', ' 100 ', 'LYS', 0.0, (-29.888, 14.783, 31.109)), ('B', ' 102 ', 'LYS', 0.0022786964348021936, (-34.411, 9.017999999999999, 30.12)), ('B', ' 123 ', 'SER', 0.16469110126822278, (-13.577999999999998, -0.837, 33.587)), ('B', ' 131 ', 'ARG', 0.170688989405339, (-30.476, -10.618, 21.17)), ('B', ' 141 ', 'LEU', 0.04377325116668603, (-20.204, -8.872999999999998, 32.278)), ('B', ' 142 ', 'ASN', 0.0017383475561896515, (-18.907, -11.318, 34.905)), ('B', ' 165 ', 'MET', 0.220687058310035, (-27.289000000000005, -12.38, 36.206)), ('B', ' 166 ', 'GLU', 0.27262988964465584, (-25.233999999999998, -14.866999999999999, 34.24499999999998)), ('B', ' 169 ', 'THR', 0.009519535524304956, (-24.517999999999997, -20.519, 28.809)), ('B', ' 277 ', 'ASN', 0.24300704565761966, (-16.429, -18.810999999999996, -0.23899999999999993))]
data['cbeta'] = [('A', ' 136 ', 'ILE', ' ', 0.33118763822195424, (-5.34, 2.2080000000000006, 13.277)), ('A', ' 289 ', 'ASP', ' ', 0.35124682919512107, (-4.265, -10.798, 15.511)), ('B', '  40 ', 'ARG', ' ', 0.251207635665558, (-33.995999999999995, -6.274999999999999, 44.416)), ('B', '  68 ', 'VAL', ' ', 0.3430409367939033, (-24.404000000000003, 3.732000000000001, 48.422)), ('B', '  84 ', 'ASN', 'B', 0.2579560630740443, (-40.13099999999999, -4.945, 39.011))]
data['probe'] = [(' A  49  MET  HE2', ' A1303  BEZ  C2 ', -1.609, (-2.922, 15.909, 4.506)), (' A  49  MET  CE ', ' A1303  BEZ  C2 ', -1.547, (-2.66, 17.598, 3.042)), (' A  49  MET  HE3', ' A1303  BEZ  C3 ', -1.32, (-2.163, 16.554, 2.478)), (' A  49  MET  HE2', ' A1303  BEZ  C1 ', -1.138, (-3.688, 15.959, 4.253)), (' B   2  GLY  N  ', ' B 300  CYS  HG ', -1.129, (-19.223, 1.157, 8.79)), (' A  49  MET  HE2', ' A1303  BEZ  H2 ', -1.086, (-3.95, 16.986, 3.438)), (' A  22  CYS  SG ', ' A  61  LYS  NZ ', -1.08, (-5.012, 28.017, 11.287)), (' A  49  MET  CE ', ' A1303  BEZ  C3 ', -0.99, (-2.49, 16.02, 3.58)), (' A  49  MET  CE ', ' A1303  BEZ  H2 ', -0.981, (-3.654, 17.111, 3.188)), (' B  19  GLN HE21', ' B  26  THR HG21', -0.977, (-18.422, -3.319, 45.991)), (' A 118  TYR  HE1', ' A 144  SER  HB3', -0.931, (-14.612, 10.752, 12.326)), (' B 213  ILE HG21', ' B 301  SER  HB2', -0.867, (-22.113, 5.429, 2.84)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.829, (-14.708, 11.653, 12.116)), (' A  49  MET  HE3', ' A1303  BEZ  H3 ', -0.82, (-1.9, 16.533, 2.477)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.77, (8.339, -16.112, 14.359)), (' B   2  GLY  N  ', ' B 300  CYS  SG ', -0.748, (-20.29, 1.049, 9.286)), (' A   3  PHE  N  ', ' B 140  PHE  HE1', -0.745, (-13.565, -12.058, 25.7)), (' A 188  ARG  N  ', ' A1303  BEZ  H4 ', -0.725, (-0.395, 14.988, 3.183)), (' A  67  LEU HD21', ' A  69  GLN  OE1', -0.724, (-15.733, 28.098, 17.456)), (' A  82  MET  HE3', ' A  84  ASN  O  ', -0.72, (5.3, 19.937, 11.99)), (' A 142  ASN  H  ', ' A 142  ASN HD22', -0.718, (-17.28, 11.601, 7.935)), (' B  19  GLN  NE2', ' B  26  THR HG21', -0.712, (-18.115, -2.395, 46.517)), (' B 166 AGLU  HG3', ' B1304  XP1  HAJ', -0.7, (-21.912, -12.922, 35.4)), (' A 226  THR HG22', ' A 229  ASP  H  ', -0.694, (11.977, -23.886, 14.066)), (' B   5  LYS  HE2', ' B 290  GLU  HB2', -0.692, (-22.626, -6.625, 16.033)), (' A  49  MET  HE3', ' A1303  BEZ  C2 ', -0.687, (-2.825, 16.601, 2.857)), (' A 290  GLU  OE1', ' A2157  HOH  O  ', -0.666, (-9.698, -4.778, 16.775)), (' A 188  ARG  C  ', ' A1303  BEZ  H4 ', -0.663, (-0.55, 14.574, 1.964)), (' A 231  ASN  ND2', ' A 242  LEU  H  ', -0.663, (7.897, -15.99, 13.705)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.652, (-25.242, -0.094, 27.451)), (' A  63  ASN  O  ', ' A  77 AVAL HG11', -0.645, (-5.732, 32.493, 17.574)), (' A   3  PHE  H  ', ' B 140  PHE  HE1', -0.639, (-14.121, -12.237, 26.106)), (' B 169  THR HG22', ' B 171  VAL HG22', -0.636, (-26.105, -18.057, 27.406)), (' A   5  LYS  HD3', ' A2157  HOH  O  ', -0.631, (-10.741, -5.013, 18.122)), (' A 188  ARG  O  ', ' A1303  BEZ  H4 ', -0.631, (-0.075, 13.649, 2.301)), (' B 112  PHE  HZ ', ' B 136  ILE HD11', -0.629, (-28.098, -5.526, 26.496)), (' A   6  MET  HE3', ' B 124  GLY  HA3', -0.624, (-13.986, -2.118, 29.059)), (' A 142  ASN  N  ', ' A 142  ASN HD22', -0.618, (-16.74, 11.487, 7.516)), (' A  49  MET  HG3', ' A1303  BEZ  H2 ', -0.606, (-3.967, 17.408, 2.734)), (' A 114  VAL HG11', ' A 140  PHE  CZ ', -0.601, (-9.692, 6.724, 15.592)), (' A  22  CYS  CB ', ' A  61  LYS  HZ3', -0.596, (-6.055, 28.114, 10.212)), (' A 269  LYS  HE2', ' A2144  HOH  O  ', -0.588, (5.014, -28.031, 14.929)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.586, (-30.861, -7.579, 16.825)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.585, (-18.788, -11.498, 2.961)), (' B   2  GLY  CA ', ' B 300  CYS  HG ', -0.584, (-19.719, 0.392, 9.48)), (' B  64  HIS  N  ', ' B  64  HIS  ND1', -0.582, (-29.775, 3.093, 57.769)), (' B 226  THR HG23', ' B2091  HOH  O  ', -0.577, (-43.656, -11.473, -1.458)), (' A 295  ASP  OD1', ' A 298  ARG  NH2', -0.577, (-5.494, -4.064, 26.412)), (' A 188  ARG  N  ', ' A1303  BEZ  C4 ', -0.572, (-0.408, 14.841, 3.43)), (' A 140  PHE  HD1', ' A 172  HIS  CG ', -0.571, (-8.847, 6.344, 10.429)), (' A   3  PHE  N  ', ' B 140  PHE  CE1', -0.565, (-14.16, -11.328, 25.966)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.562, (-11.281, 9.86, 10.817)), (' A  33  ASP  OD2', ' A2012  HOH  O  ', -0.553, (-0.237, 19.917, 31.183)), (' B   2  GLY  CA ', ' B 300  CYS  SG ', -0.552, (-20.49, 0.452, 9.117)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.546, (-7.188, 5.474, 21.357)), (' B 197  ASP  OD1', ' B2081  HOH  O  ', -0.542, (-28.044, -15.439, 19.493)), (' B 163  HIS  NE2', ' B 166 BGLU  OE2', -0.542, (-23.927, -10.591, 34.252)), (' A  63  ASN  O  ', ' A  77 AVAL  CG1', -0.542, (-5.398, 32.221, 18.413)), (' A  45  THR HG23', ' A  46  ALA  N  ', -0.541, (-6.049, 24.406, -0.37)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.537, (-25.437, -9.888, 32.534)), (' A  49  MET  CG ', ' A1303  BEZ  H2 ', -0.537, (-3.791, 18.102, 2.924)), (' B 166 AGLU  CG ', ' B1304  XP1  HAJ', -0.534, (-22.327, -12.716, 34.917)), (' A   2  GLY  HA3', ' B 140  PHE  CE1', -0.531, (-13.033, -11.622, 26.681)), (' B  19  GLN HE21', ' B  26  THR  CG2', -0.53, (-18.548, -3.09, 46.001)), (' B  68  VAL HG22', ' B  75  LEU  HB2', -0.523, (-23.61, 6.372, 48.605)), (' A 188  ARG  CA ', ' A1303  BEZ  H4 ', -0.522, (-0.462, 15.032, 2.882)), (' A 165 BMET  CE ', ' A 185  PHE  HB3', -0.522, (0.74, 9.249, 5.723)), (' B 163  HIS  CE1', ' B 166 BGLU  OE2', -0.518, (-23.778, -11.18, 33.812)), (' A  43  ILE HG22', ' A  61  LYS  HE2', -0.511, (-2.701, 27.492, 10.7)), (' B 256  GLN HE22', ' B 301  SER  HB3', -0.509, (-23.703, 7.136, 2.999)), (' A 276  MET  HE3', ' A 281  ILE HD12', -0.509, (-9.406, -21.138, 16.998)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.507, (-0.714, -5.833, 16.08)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.504, (-3.814, 24.25, 2.358)), (' B  66  PHE  CE1', ' B  87  LEU HD11', -0.503, (-30.256, -2.671, 49.388)), (' A  40  ARG  NH1', ' A  82  MET  HE1', -0.501, (6.116, 21.3, 10.541)), (' B 166 AGLU  HG3', ' B1304  XP1  CAJ', -0.495, (-22.299, -13.177, 35.829)), (' A   4  ARG  HD2', ' B 126  TYR  CD1', -0.494, (-19.311, -5.968, 24.199)), (' A 246  HIS  CD2', ' A2129  HOH  O  ', -0.491, (6.011, -11.792, 16.957)), (' B 131  ARG  NH2', ' B 289  ASP  OD2', -0.489, (-26.015, -10.639, 16.484)), (' A  40  ARG HH11', ' A  82  MET  HE1', -0.481, (5.835, 21.167, 10.18)), (' A 136  ILE HD11', ' A 140  PHE  HE1', -0.481, (-7.403, 5.259, 13.614)), (' B 118 ATYR  HE1', ' B 142  ASN  O  ', -0.48, (-16.682, -9.087, 35.877)), (' A 233  VAL HG21', ' A 269  LYS  HD2', -0.479, (4.851, -24.955, 11.496)), (' A 141  LEU HD12', ' B2139  HOH  O  ', -0.479, (-20.448, 8.183, 8.471)), (' A 114  VAL HG11', ' A 140  PHE  HZ ', -0.476, (-9.026, 6.981, 15.837)), (' A  49  MET  HE2', ' A1303  BEZ  C  ', -0.467, (-4.376, 16.801, 4.795)), (' A  58  LEU HD11', ' A  87  LEU HD21', -0.465, (1.012, 26.61, 13.924)), (' B 166 AGLU  OE2', ' B 172  HIS  CD2', -0.465, (-21.886, -13.221, 31.709)), (' B 142  ASN  H  ', ' B 142  ASN  ND2', -0.464, (-18.609, -11.326, 32.609)), (' B  35  THR  HA ', ' B  89  LEU  O  ', -0.461, (-31.829, 7.23, 45.443)), (' B 141  LEU  HB2', ' B 172  HIS  CE1', -0.458, (-21.727, -9.813, 30.191)), (' A  44  CYS  SG ', ' A  54  TYR  CE2', -0.454, (-0.173, 22.148, 5.904)), (' B 141  LEU  HA ', ' B 141  LEU HD12', -0.449, (-19.48, -7.308, 32.337)), (' A   2  GLY  HA3', ' B 140  PHE  HE1', -0.445, (-13.217, -11.806, 26.673)), (' A  87  LEU HD13', ' A  89  LEU HD21', -0.445, (-2.319, 25.822, 16.147)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.443, (2.498, -24.601, 11.085)), (' B  45  THR HG23', ' B2008  HOH  O  ', -0.443, (-25.259, -11.643, 51.927)), (' A  82  MET  HB3', ' A  82  MET  HE2', -0.442, (6.759, 22.808, 13.631)), (' A  67  LEU  CD2', ' A  69  GLN  OE1', -0.44, (-14.92, 28.241, 17.728)), (' A 136  ILE HG12', ' A 172  HIS  HB2', -0.439, (-6.475, 4.195, 11.726)), (' A 142  ASN  N  ', ' A 142  ASN  ND2', -0.438, (-17.132, 11.443, 7.133)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.437, (2.679, 15.34, 16.36)), (' A 188  ARG  HG3', ' A 190  THR HG23', -0.437, (3.03, 14.176, 0.135)), (' B  25  THR HG21', ' B  42  VAL  HA ', -0.436, (-25.817, -7.984, 46.765)), (' A 100  LYS  HB2', ' A 100  LYS  HE3', -0.435, (-4.355, 12.015, 37.148)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.434, (-1.169, 23.264, 9.626)), (' B 226  THR HG22', ' B 228  ASN  N  ', -0.434, (-41.761, -13.057, -0.74)), (' A 231  ASN HD21', ' A 242  LEU  N  ', -0.433, (7.998, -15.668, 14.892)), (' B 141  LEU  O  ', ' B 144  SER  OG ', -0.432, (-20.471, -7.941, 34.498)), (' B 131  ARG HH22', ' B 289  ASP  CG ', -0.431, (-26.84, -10.813, 15.446)), (' B 112  PHE  CZ ', ' B 136  ILE HD11', -0.426, (-27.836, -5.175, 26.889)), (' A  53  ASN  ND2', ' A  56  ASP  OD2', -0.425, (8.073, 28.562, 2.825)), (' B 207  TRP  CH2', ' B 281  ILE  HB ', -0.424, (-19.844, -9.026, 5.661)), (' A 112  PHE  CD1', ' A 149  GLY  HA3', -0.423, (-5.244, 5.077, 20.154)), (' A  67  LEU HD22', ' A2030  HOH  O  ', -0.422, (-13.521, 26.943, 16.404)), (' A 124  GLY  HA3', ' B   6  MET  HG2', -0.422, (-18.145, 5.909, 18.408)), (' A 113  SER  OG ', ' A 127  GLN  NE2', -0.421, (-9.451, 1.088, 24.145)), (' A  58  LEU HD23', ' A2039  HOH  O  ', -0.42, (5.725, 27.309, 13.67)), (' A  22  CYS  HB3', ' A  61  LYS  HZ3', -0.42, (-6.146, 28.448, 10.003)), (' A 188  ARG  C  ', ' A1303  BEZ  C4 ', -0.42, (-0.853, 14.633, 2.439)), (' A 148  VAL  HA ', ' A 161  TYR  O  ', -0.417, (-4.773, 10.132, 19.274)), (' A  49  MET  CE ', ' A1303  BEZ  C1 ', -0.417, (-2.735, 15.995, 4.822)), (' B 226  THR HG22', ' B 228  ASN  H  ', -0.416, (-42.166, -12.863, -0.38)), (' A   4  ARG  H  ', ' B 140  PHE  HD1', -0.416, (-15.781, -11.016, 26.152)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.414, (2.584, 15.749, 16.625)), (' B 211  ALA  HB1', ' B 216  ASP  HB3', -0.414, (-18.821, -4.454, 1.326)), (' B 127  GLN  H  ', ' B1302  DMS  H11', -0.411, (-18.448, -2.807, 21.898)), (' B 131  ARG  HD3', ' B 197  ASP  OD1', -0.408, (-29.145, -13.986, 19.815)), (' A 137  LYS  O  ', ' B   4  ARG  NE ', -0.404, (-10.414, -0.868, 13.521)), (' B  59  ILE  O  ', ' B  59  ILE HG13', -0.404, (-39.147, -4.732, 57.054)), (' A 188  ARG  CA ', ' A1303  BEZ  C4 ', -0.403, (-0.404, 15.139, 3.116)), (' A 140  PHE  HB2', ' A 172  HIS  NE2', -0.402, (-10.643, 7.179, 9.678))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
