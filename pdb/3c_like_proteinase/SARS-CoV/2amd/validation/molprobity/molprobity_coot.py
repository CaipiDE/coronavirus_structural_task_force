# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   0 ', 'SER', 0.02169666356414749, (86.43299999999998, -20.382, 27.81800000000001)), ('A', '   1 ', 'SER', 0.013096344837485195, (85.418, -18.863, 24.467000000000006)), ('A', ' 154 ', 'TYR', 0.01815170916609944, (101.195, 0.473, 35.822))]
data['omega'] = []
data['rota'] = [('A', '  30 ', 'LEU', 0.0, (97.773, 16.295, 22.709000000000007)), ('A', '  45 ', 'THR', 0.11101558058671905, (96.699, 24.093, 3.092)), ('A', '  47 ', 'GLU', 0.20422221207191996, (97.468, 21.997, -2.292)), ('A', '  72 ', 'ASN', 0.1105073659099723, (84.24099999999999, 24.928999999999995, 24.026000000000007)), ('A', '  75 ', 'LEU', 0.09918575699588306, (93.529, 27.879999999999995, 24.847)), ('A', ' 136 ', 'ILE', 0.060251875785366, (99.73899999999998, -0.228, 11.559000000000003)), ('A', ' 222 ', 'ARG', 0.0, (105.62500000000001, -34.478, 23.371)), ('A', ' 227 ', 'LEU', 0.06635713371459795, (115.41999999999996, -22.689, 16.776)), ('A', ' 228 ', 'ASN', 0.1751317935357305, (116.97199999999997, -23.208, 13.356000000000003)), ('A', ' 236 ', 'LYS', 0.05548323116194229, (107.86599999999996, -20.772, 4.624)), ('A', ' 268 ', 'LEU', 0.0013462196115254076, (103.257, -24.341999999999988, 16.32)), ('B', '  47 ', 'GLU', 0.28379614898401473, (75.787, -21.126000000000005, 51.553)), ('B', '  55 ', 'GLU', 0.0044676195550764465, (64.192, -10.665, 49.93)), ('B', '  72 ', 'ASN', 0.060428870562437384, (90.63499999999999, 4.907, 49.06300000000002)), ('B', ' 127 ', 'GLN', 0.19994456810357705, (83.42899999999997, -4.209, 21.944)), ('B', ' 213 ', 'ILE', 0.017193997124081765, (82.94899999999997, 0.701, 0.79)), ('B', ' 228 ', 'ASN', 0.05114598532322894, (62.42299999999999, -16.262, 1.146)), ('B', ' 247 ', 'VAL', 0.04891943263181257, (66.787, -5.024, 4.585)), ('B', ' 268 ', 'LEU', 0.0008350336141794055, (76.28, -14.145, 1.2520000000000004)), ('B', ' 277 ', 'ASN', 0.02079069099828132, (88.398, -20.597, -0.59))]
data['cbeta'] = []
data['probe'] = [(' B   4  ARG  H  ', ' B 299  GLN HE22', -1.008, (87.962, -0.875, 11.709)), (' B 231  ASN  HB3', ' B 235  MET  HE3', -0.929, (65.317, -18.21, 6.588)), (' A   6  MET  HE2', ' A 299  GLN  HG3', -0.926, (91.69, -9.317, 28.031)), (' B 277  ASN HD22', ' B 279  ARG HH12', -0.919, (87.489, -18.497, -3.323)), (' B  88  ARG  HG3', ' B  88  ARG HH11', -0.835, (67.272, -0.733, 42.739)), (' A 222  ARG  HG3', ' A 222  ARG HH11', -0.821, (108.304, -36.764, 22.873)), (' A 245  ASP  O  ', ' A 249  ILE HD13', -0.82, (113.57, -11.705, 23.449)), (' B  51  ASN HD22', ' B 188  ARG  NH1', -0.758, (66.621, -20.934, 44.472)), (' B 277  ASN HD22', ' B 279  ARG  NH1', -0.757, (87.891, -17.869, -3.514)), (' B  68  VAL HG23', ' B  75  LEU  HB2', -0.745, (80.812, 4.398, 48.744)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.72, (93.138, -23.751, 17.331)), (' B  51  ASN HD22', ' B 188  ARG HH12', -0.704, (66.195, -20.396, 44.76)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.698, (87.475, -0.345, 11.66)), (' A   6  MET  HE1', ' B2094  HOH  O  ', -0.698, (92.557, -7.701, 30.612)), (' B 169  THR HG21', ' B2140  HOH  O  ', -0.692, (76.181, -21.658, 25.974)), (' B 231  ASN  HB3', ' B 235  MET  CE ', -0.688, (64.355, -18.299, 6.584)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.675, (86.62, -13.341, 2.531)), (' A  60  ARG  HB2', ' A  60  ARG  NH1', -0.67, (103.744, 30.958, 5.739)), (' A 235  MET  HE3', ' A 241  PRO  HG3', -0.658, (112.766, -15.147, 8.895)), (' A 136  ILE HD13', ' A 172  HIS  O  ', -0.65, (100.447, 2.278, 10.385)), (' A   1  SER  HB2', ' A1128  HOH  O  ', -0.648, (82.735, -20.493, 25.393)), (' B  55  GLU  HB2', ' B2051  HOH  O  ', -0.644, (62.792, -11.835, 47.791)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.641, (69.83, -4.733, 37.748)), (' B 209  TYR  O  ', ' B 213  ILE HG23', -0.636, (80.536, -0.683, 2.173)), (' A 127  GLN  HG2', ' A1020  HOH  O  ', -0.628, (96.324, -5.712, 21.477)), (' B 227  LEU HD21', ' B 242  LEU  O  ', -0.622, (64.403, -12.393, 5.797)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.618, (103.328, 21.047, 12.681)), (' B  48  ASP  O  ', ' B  52  PRO  HB3', -0.611, (71.726, -17.924, 47.308)), (' B 277  ASN  ND2', ' B 279  ARG HH12', -0.604, (86.825, -18.297, -3.813)), (' B 169  THR HG23', ' B 171  VAL HG22', -0.603, (77.482, -20.081, 27.447)), (' B  51  ASN  ND2', ' B 188  ARG HH12', -0.6, (65.982, -20.886, 45.078)), (' A  -3  PRO  N  ', ' A1067  HOH  O  ', -0.599, (88.272, -20.219, 31.603)), (' B  72  ASN  H  ', ' B  72  ASN HD22', -0.597, (91.155, 6.37, 47.204)), (' A 236  LYS  HG3', ' A 237  TYR  CD1', -0.588, (105.028, -22.807, 6.007)), (' A  60  ARG  HB2', ' A  60  ARG HH11', -0.577, (104.007, 30.58, 6.1)), (' A  75  LEU HD22', ' A  91  VAL  HB ', -0.554, (96.889, 26.646, 26.151)), (' B  49  MET  HE2', ' B2001  9IN H203', -0.554, (76.811, -15.787, 44.138)), (' A   6  MET  HE2', ' A 299  GLN  CG ', -0.551, (92.206, -9.317, 28.031)), (' B 247  VAL  HB ', ' B 261  VAL HG11', -0.547, (67.39, -5.863, 2.231)), (' B 131  ARG  HD2', ' B 197  ASP  OD1', -0.546, (75.83, -16.544, 19.605)), (' B  88  ARG  HG3', ' B  88  ARG  NH1', -0.542, (67.174, 0.127, 43.282)), (' B   8  PHE  HD1', ' B 113  SER  HG ', -0.542, (80.895, 1.328, 22.799)), (' B  83  GLN  HB2', ' B  88  ARG  NH1', -0.54, (65.856, -0.837, 42.075)), (' A  25  THR HG23', ' A1001  9IN H273', -0.54, (94.16, 19.797, 7.766)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.538, (106.357, 14.494, 15.638)), (' A  48  ASP  OD2', ' A  57  LEU HD11', -0.535, (103.263, 24.262, 2.501)), (' B 213  ILE  CD1', ' B 300  CYS  HB3', -0.534, (83.374, 2.825, 4.47)), (' B 136  ILE  N  ', ' B 136  ILE HD12', -0.533, (75.429, -12.285, 26.966)), (' A 236  LYS  HD2', ' A 236  LYS  O  ', -0.529, (105.762, -21.259, 2.923)), (' B 168  PRO  HG3', ' B2001  9IN  C5 ', -0.529, (76.846, -24.084, 34.621)), (' B 213  ILE HD11', ' B 300  CYS  HB3', -0.527, (83.912, 2.78, 4.675)), (' A 276  MET  CE ', ' A 281  ILE HG13', -0.523, (93.032, -23.928, 16.831)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.522, (97.664, 6.188, 9.575)), (' A   6  MET  CE ', ' A 299  GLN  HG3', -0.517, (91.336, -8.54, 28.85)), (' B   4  ARG  N  ', ' B 299  GLN HE22', -0.513, (87.438, -1.401, 12.185)), (' A  31  TRP  CE2', ' A  75  LEU HD11', -0.512, (95.577, 23.293, 26.918)), (' B 131  ARG  CD ', ' B 197  ASP  OD1', -0.512, (75.624, -16.344, 19.614)), (' A 209  TYR  O  ', ' A 213  ILE HG12', -0.512, (98.645, -19.454, 28.129)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.509, (79.702, 9.077, 42.747)), (' B  19  GLN  NE2', ' B 119  ASN HD22', -0.507, (89.076, -4.427, 45.55)), (' B 276  MET  HE2', ' B 279  ARG  O  ', -0.505, (88.205, -15.47, 2.972)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.503, (79.841, 9.072, 41.961)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.498, (65.61, -9.19, 8.966)), (' A   4  ARG  HG2', ' B 139  SER  HB2', -0.491, (87.247, -11.903, 26.244)), (' A 136  ILE  H  ', ' A 136  ILE HD13', -0.489, (100.575, 1.593, 10.41)), (' A  55  GLU  CD ', ' A  55  GLU  H  ', -0.487, (110.608, 23.442, 7.018)), (' A 152  ILE HD12', ' A 157  VAL HG22', -0.486, (97.759, 5.488, 30.647)), (' B 245  ASP  O  ', ' B 249  ILE HG12', -0.483, (65.837, -2.488, 8.896)), (' A 166  GLU  OE2', ' B   0  SER  O  ', -0.478, (92.247, 4.026, 3.972)), (' A  49  MET  HE2', ' A1001  9IN H203', -0.477, (99.124, 16.945, 4.236)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.474, (91.068, -25.087, 14.822)), (' A   5  LYS  HG2', ' A 291  PHE  CZ ', -0.472, (93.266, -9.784, 20.241)), (' A   1  SER  N  ', ' A1188  HOH  O  ', -0.472, (87.523, -18.819, 25.67)), (' A  19  GLN HE21', ' A 119  ASN  HA ', -0.468, (87.841, 19.553, 15.769)), (' A  78  ILE  C  ', ' A  78  ILE HD12', -0.468, (103.426, 30.674, 23.968)), (' B  68  VAL HG22', ' B  75  LEU  O  ', -0.467, (79.589, 4.171, 50.89)), (' B2001  9IN  H4 ', ' B2001  9IN  HN2', -0.467, (74.65, -23.326, 36.892)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.466, (104.115, -7.435, 15.811)), (' B  19  GLN HE22', ' B 119  ASN HD22', -0.459, (88.914, -4.037, 45.883)), (' A  47  GLU  N  ', ' A  47  GLU  OE1', -0.456, (96.915, 23.376, -1.386)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.456, (79.718, -1.875, 27.736)), (' B 133  ASN  O  ', ' B 134  HIS  HB2', -0.456, (70.152, -14.971, 25.506)), (' A   0  SER  O  ', ' A   1  SER  HB2', -0.455, (84.407, -20.496, 25.626)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.455, (97.358, 6.012, 10.072)), (' A 136  ILE  N  ', ' A 136  ILE HD13', -0.452, (100.573, 1.408, 10.885)), (' A 222  ARG  CG ', ' A 222  ARG HH11', -0.452, (107.185, -36.929, 23.325)), (' A 192  GLN  NE2', ' A1001  9IN H101', -0.45, (103.837, 8.8, 1.191)), (' A 222  ARG  HG3', ' A 222  ARG  O  ', -0.447, (107.458, -35.775, 22.618)), (' B 142  ASN  ND2', ' B2167  HOH  O  ', -0.447, (86.969, -16.84, 37.311)), (' B  68  VAL  CG2', ' B  75  LEU  O  ', -0.445, (79.726, 4.468, 50.608)), (' A  19  GLN HE21', ' A 119  ASN  CA ', -0.445, (87.716, 19.036, 15.994)), (' B  51  ASN  ND2', ' B 188  ARG  NH1', -0.445, (66.106, -20.976, 45.014)), (' B 235  MET  HE2', ' B 241  PRO  HB3', -0.444, (64.467, -16.724, 8.682)), (' A 153  ASP  O  ', ' A 154  TYR  HB3', -0.442, (103.099, 1.583, 35.255)), (' B  25  THR HG21', ' B  42  VAL  O  ', -0.44, (78.356, -10.521, 48.826)), (' B  25  THR  CG2', ' B  42  VAL  O  ', -0.439, (78.211, -9.957, 49.062)), (' B 118  TYR  CE1', ' B 144  SER  HB3', -0.439, (86.31, -9.665, 36.295)), (' A   3  PHE  HB2', ' A 282  LEU HD13', -0.439, (92.388, -15.852, 23.257)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.437, (69.071, -4.863, 37.773)), (' B 169  THR  CG2', ' B 171  VAL HG22', -0.437, (77.197, -20.605, 27.507)), (' B  47  GLU  CD ', ' B  47  GLU  H  ', -0.435, (77.239, -19.986, 53.019)), (' B 168  PRO  HD2', ' B2121  HOH  O  ', -0.434, (75.102, -23.123, 30.734)), (' A 115  LEU HD13', ' A 125  VAL  CG1', -0.434, (90.076, 5.591, 23.171)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.433, (69.519, -9.403, 34.189)), (' B  68  VAL  CG2', ' B  75  LEU  HB2', -0.431, (80.319, 4.581, 49.008)), (' A 191  ALA  HA ', ' A1001  9IN  C2 ', -0.427, (102.752, 7.526, -3.681)), (' B2001  9IN H271', ' B2151  HOH  O  ', -0.426, (84.744, -10.859, 46.66)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.426, (90.052, 10.476, 11.713)), (' B 198  THR  OG1', ' B 240  GLU  HG2', -0.421, (70.284, -15.962, 15.146)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.42, (100.746, 1.634, 5.074)), (' B 243  THR  H  ', ' B 246  HIS  HD2', -0.418, (65.549, -9.849, 8.761)), (' A 126  TYR  HE1', ' A 128  CYS  SG ', -0.418, (94.677, 0.733, 15.403)), (' A  27  LEU  HG ', ' A  42  VAL HG23', -0.416, (95.839, 20.742, 12.098)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.413, (72.483, -9.741, 47.487)), (' A 115  LEU  CD1', ' A 125  VAL  CG1', -0.413, (89.812, 5.675, 22.674)), (' A  72  ASN  N  ', ' A  72  ASN  OD1', -0.412, (83.927, 23.822, 25.377)), (' A 228  ASN  O  ', ' A 232  LEU  HG ', -0.411, (115.582, -23.719, 10.15)), (' A  52  PRO  HG2', ' A  54  TYR  CE1', -0.41, (105.827, 19.128, 4.689)), (' A 129  ALA  HB3', ' A 290  GLU  OE2', -0.408, (99.35, -5.632, 14.792)), (' B 294  PHE  O  ', ' B 297  VAL HG22', -0.408, (76.551, 3.081, 11.144)), (' B   2  GLY  H  ', ' B 214  ASN HD21', -0.407, (88.742, 1.049, 5.518)), (' A 132  PRO  HD2', ' A 197  ASP  OD1', -0.405, (104.627, -6.866, 9.832)), (' A  19  GLN  NE2', ' A 119  ASN HD22', -0.405, (87.087, 20.321, 15.135)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.403, (79.146, -12.979, 31.894))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
