# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', '  46 ', 'ALA', None, (17.553999999999988, 27.432, 2.497)), ('B', ' 303 ', 'VAL', None, (17.003, -5.378999999999999, 35.924))]
data['rota'] = [('A', '  22 ', 'CYS', 0.23492527093765153, (2.625, -4.65, 52.192)), ('A', '  27 ', 'LEU', 0.2311809633803927, (5.161999999999997, -4.020999999999998, 43.61)), ('A', '  64 ', 'HIS', 0.0, (-0.6850000000000005, 2.516, 58.094)), ('A', '  76 ', 'ARG', 0.20346499518406858, (1.628999999999996, 9.073, 53.896)), ('A', ' 169 ', 'THR', 0.20636584301833924, (2.1179999999999986, -20.71, 29.144)), ('A', ' 232 ', 'LEU', 0.16845555308833776, (-11.962000000000002, -18.753, 3.579)), ('B', '  45 ', 'THR', 0.16321293137523374, (18.649999999999988, 26.981999999999996, 4.629)), ('B', ' 107 ', 'GLN', 0.08977557145618839, (32.08, 0.601, 19.099)), ('B', ' 153 ', 'ASP', 0.1698398075215538, (23.793999999999997, 3.5139999999999993, 33.52900000000002)), ('B', ' 303 ', 'VAL', 0.03780638799071312, (17.853, -4.291999999999999, 36.43))]
data['cbeta'] = []
data['probe'] = [(' B 302  GLY  HA3', ' B 303  VAL HG23', -1.067, (19.349, -6.612, 36.662)), (' B  58  LEU HD22', ' B  82  MET  HE3', -0.79, (30.391, 26.508, 12.062)), (' B  56  ASP  O  ', ' B  59  ILE HG22', -0.73, (31.596, 32.789, 7.404)), (' B 302  GLY  HA3', ' B 303  VAL  CG2', -0.727, (19.519, -5.739, 36.412)), (' B  51  ASN  N  ', ' B  52  PRO  HD3', -0.709, (27.813, 21.893, -0.155)), (' B 155  ASP  HB3', ' B 306  GLN  HB2', -0.643, (20.084, 6.673, 38.997)), (' A  87  LEU HD21', ' A  89  LEU HD21', -0.599, (-3.928, 0.321, 49.006)), (' A  49  MET  HA ', ' A  52  PRO  HG3', -0.577, (-4.757, -15.679, 45.987)), (' B   8  PHE  HE1', ' B 305  PHE  CZ ', -0.561, (19.391, 0.408, 30.929)), (' B  56  ASP  O  ', ' B  60  ARG  HG3', -0.552, (29.735, 33.233, 6.911)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.551, (-0.074, -4.294, 18.701)), (' A   5  LYS  HE2', ' A 127  GLN  O  ', -0.551, (5.584, -4.427, 20.936)), (' B   5  LYS  HA ', ' B 291  PHE  CZ ', -0.539, (15.842, -6.964, 23.031)), (' B  54  TYR  HB3', ' B  82  MET  HE1', -0.538, (30.374, 25.115, 9.263)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.513, (28.868, 16.676, 15.979)), (' B  50  LEU HD23', ' B 189  GLN  HB3', -0.501, (25.598, 17.656, -3.095)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.496, (-7.854, -2.811, 38.168)), (' A 190  THR HG22', ' A 191  ALA  N  ', -0.496, (-6.626, -22.346, 37.265)), (' A 276  MET  HE2', ' A 287  LEU  HG ', -0.487, (5.017, -14.006, 6.102)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.486, (1.6, -9.717, 32.44)), (' B 207  TRP  CD2', ' B 288  GLU  HB3', -0.484, (18.417, -13.298, 18.862)), (' B   5  LYS  HA ', ' B 291  PHE  HZ ', -0.482, (15.126, -6.97, 23.133)), (' B  51  ASN  N  ', ' B  52  PRO  CD ', -0.482, (28.32, 22.154, -0.003)), (' B  87  LEU HD21', ' B  89  LEU HD21', -0.478, (23.564, 27.368, 16.251)), (' A 195  GLY  H  ', ' A 406  EDO  C2 ', -0.477, (-8.581, -17.743, 25.852)), (' B   8  PHE  CE1', ' B 305  PHE  CZ ', -0.473, (19.133, 0.854, 30.949)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.47, (19.647, 6.646, 21.071)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.458, (18.268, 23.552, 28.647)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.456, (29.621, 16.741, 16.308)), (' B  58  LEU HD22', ' B  82  MET  HB2', -0.452, (30.435, 26.474, 13.314)), (' B  45  THR  HA ', ' B  46  ALA  HA ', -0.447, (17.845, 25.481, 4.282)), (' A 108  PRO  HA ', ' A 130  MET  CG ', -0.445, (-6.316, -6.673, 22.622)), (' B  66  PHE  CE1', ' B  87  LEU HD21', -0.442, (23.303, 27.7, 14.667)), (' A 123  SER  HB2', ' B 304  THR HG22', -0.438, (13.876, -1.687, 36.432)), (' A 218  TRP  CZ3', ' A 279  ARG  HD3', -0.434, (9.716, -14.239, -1.42)), (' A   5  LYS  HB3', ' A 401  PEG  H11', -0.426, (10.356, -2.848, 17.632)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.426, (1.534, -10.46, 32.214)), (' A   5  LYS  NZ ', ' A 290  GLU  OE1', -0.426, (4.491, -6.758, 19.339)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.425, (2.2, 0.484, 28.034)), (' A   5  LYS  HZ3', ' B   4  ARG HH12', -0.423, (6.53, -6.855, 19.9)), (' A 280  THR HG22', ' A 285  THR HG22', -0.421, (13.526, -14.399, 6.394)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.417, (1.972, 11.788, 43.201)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.415, (11.037, 11.492, 22.628)), (' B 198  THR  OG1', ' B 240  GLU  HG2', -0.414, (30.411, -8.209, 10.859)), (' B 100  LYS  HD2', ' B 155  ASP  OD2', -0.414, (23.205, 10.192, 39.163)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.412, (19.945, 8.275, 10.24)), (' B 165  MET  CE ', ' B 185  PHE  HB3', -0.406, (27.515, 10.104, 5.871)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.405, (-8.456, -2.393, 38.393)), (' A  98  THR  HA ', ' A  99  PRO  HD3', -0.402, (1.21, 12.562, 36.254)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.4, (9.797, 17.076, 21.9)), (' A 132  PRO  HD2', ' A 197  ASP  OD1', -0.4, (-4.683, -13.65, 19.246))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
