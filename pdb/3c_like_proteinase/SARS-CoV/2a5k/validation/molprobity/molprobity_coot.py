# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 286 ', 'ILE', 0.00512602, (67.612, 50.077, 51.833)), ('A', ' 286 ', 'ILE', 0.007859179500499202, (67.612, 50.077, 51.833)), ('B', ' 154 ', 'TYR', 0.012003331838647232, (80.568, 25.887, 75.15)), ('B', ' 279 ', 'ARG', 0.023109556513938073, (75.325, 43.801, 42.89)), ('B', ' 286 ', 'ILE', 0.0039690981055428365, (76.991, 47.614, 51.538000000000004))]
data['omega'] = []
data['rota'] = [('A', '  22 ', 'CYS', 0.1834688922004952, (67.544, 6.966999999999999, 62.733000000000004)), ('A', '  47 ', 'GLU', 0.058745440158812424, (69.494, 6.628000000000002, 48.205)), ('A', '  49 ', 'MET', 0.16258413691691123, (66.191, 11.320999999999996, 49.31900000000001)), ('A', '  50 ', 'LEU', 0.18448098111986025, (65.884, 11.682999999999996, 45.562)), ('A', '  55 ', 'GLU', 0.01364020675018117, (54.806, 5.25, 53.967000000000006)), ('A', '  56 ', 'ASP', 0.16721271451464492, (57.070999999999984, 2.486999999999999, 52.596000000000004)), ('A', '  59 ', 'ILE', 0.07072734306500648, (56.319, 0.6590000000000003, 57.679)), ('A', '  61 ', 'LYS', 0.00012183237688520621, (60.638, 0.955, 61.147)), ('A', '  64 ', 'HIS', 0.02384762960381442, (64.88699999999999, -0.9317999999999999, 71.26820000000001)), ('A', '  65 ', 'SER', 0.11063431947230988, (64.681, 2.285, 65.33300000000001)), ('A', '  67 ', 'LEU', 0.0, (66.978, 6.991, 69.391)), ('A', '  69 ', 'GLN', 0.18617848163154416, (68.242, 11.976, 73.382)), ('A', '  72 ', 'ASN', 0.0013564914232643652, (72.661, 13.049999999999999, 77.98)), ('A', '  74 ', 'GLN', 0.017286047514737383, (67.968, 8.676999999999996, 76.223)), ('A', ' 104 ', 'VAL', 0.06379172861214985, (49.749, 28.098, 64.586)), ('A', ' 110 ', 'GLN', 0.025904505726587316, (54.745, 37.523, 59.358)), ('A', ' 121 ', 'SER', 0.05797357153902625, (72.016, 21.401, 70.658)), ('A', ' 123 ', 'SER', 0.1083883182038391, (73.404, 27.085, 68.737)), ('A', ' 153 ', 'ASP', 0.05834309356242297, (52.632, 35.84, 73.334)), ('A', ' 155 ', 'ASP', 0.013590791999281631, (53.024, 33.381, 78.704)), ('A', ' 167 ', 'LEU', 0.0153375388095128, (66.667, 25.545, 48.307)), ('A', ' 216 ', 'ASP', 0.25594218709387706, (63.55399999999999, 60.086, 61.336)), ('A', ' 222 ', 'ARG', 0.0, (52.891, 66.585, 51.724000000000004)), ('A', ' 227 ', 'LEU', 0.00011784286082824503, (45.606999999999985, 52.924, 47.025)), ('A', ' 236 ', 'LYS', 0.11024900622561748, (57.22299999999999, 49.9366, 36.2952)), ('A', ' 268 ', 'LEU', 0.0, (57.24099999999999, 55.168, 50.093)), ('A', ' 279 ', 'ARG', 0.0, (68.42066666666666, 63.61966666666667, 54.16483333333333)), ('A', ' 285 ', 'THR', 0.048525319400736254, (69.927, 52.451, 53.448)), ('A', ' 285 ', 'THR', 0.09261075465366256, (70.26899999999998, 52.41, 53.281000000000006)), ('A', ' 286 ', 'ILE', 0.017609618463615823, (67.612, 50.077, 51.833)), ('A', ' 303 ', 'VAL', 0.06930622913384789, (56.728, 44.71299999999999, 75.693)), ('B', '   1 ', 'SER', 0.1020248584713949, (74.222, 30.884, 50.712)), ('B', '  47 ', 'GLU', 0.030479263260945952, (66.874, 66.079, 91.04900000000002)), ('B', '  55 ', 'GLU', 0.009557839033379206, (79.533, 57.723, 97.861)), ('B', '  60 ', 'ARG', 0.21532557953235523, (72.169, 57.20299999999999, 102.916)), ('B', '  67 ', 'LEU', 0.05579104204012025, (63.968, 45.77099999999999, 96.569)), ('B', '  72 ', 'ASN', 0.015062596308604853, (57.282, 36.779, 91.999)), ('B', '  88 ', 'ARG', 0.25017187413861025, (80.80433333333335, 42.38733333333333, 93.87233333333333)), ('B', '  94 ', 'SER', 0.2984918894248478, (71.986, 31.815, 96.087)), ('B', ' 104 ', 'VAL', 0.060560542611696064, (85.481, 39.447, 80.567)), ('B', ' 106 ', 'ILE', 0.020017933071078506, (85.656, 42.890999999999984, 75.377)), ('B', ' 121 ', 'SER', 0.11691011927509724, (61.73299999999999, 40.736, 82.397)), ('B', ' 153 ', 'ASP', 0.0009072346896641138, (82.83399999999999, 31.466, 76.16675000000001)), ('B', ' 155 ', 'ASP', 0.06532637070745641, (77.366, 23.917500000000008, 78.7325)), ('B', ' 190 ', 'THR', 0.012239403440617025, (76.26, 65.582, 81.405)), ('B', ' 198 ', 'THR', 0.1359185175840443, (85.475, 53.83, 62.068)), ('B', ' 212 ', 'VAL', 0.28883045167628213, (83.658, 33.53, 49.156)), ('B', ' 268 ', 'LEU', 0.015574615924955659, (88.403, 45.385, 49.596)), ('B', ' 279 ', 'ARG', 0.0, (75.215, 43.79199999999999, 42.87)), ('B', ' 279 ', 'ARG', 0.0, (75.325, 43.801, 42.89)), ('B', ' 286 ', 'ILE', 0.033745765938494654, (76.991, 47.614, 51.538000000000004)), ('B', ' 289 ', 'ASP', 0.2462911549196555, (81.405, 44.983, 59.775)), ('B', ' 298 ', 'ARG', 0.1912777919043503, (80.04840000000002, 32.35959999999999, 67.65939999999999))]
data['cbeta'] = [('A', '   6 ', 'MET', ' ', 0.30926574530748274, (65.385, 41.96500000000002, 69.086)), ('A', '  56 ', 'ASP', ' ', 0.2568326965464556, (57.721, 2.67, 51.261)), ('A', ' 128 ', 'CYS', 'B', 0.2641224923388959, (63.104, 34.47, 59.742000000000004)), ('A', ' 285 ', 'THR', 'A', 0.2709069659948417, (70.724, 52.385, 52.228)), ('A', ' 286 ', 'ILE', ' ', 0.3136596268337372, (68.377, 48.639, 51.731)), ('B', '  59 ', 'ILE', ' ', 0.2558169547843896, (76.757, 56.281, 103.671)), ('B', ' 154 ', 'TYR', ' ', 0.29060820086422584, (81.732, 24.944, 75.489)), ('B', ' 286 ', 'ILE', ' ', 0.2672760422796307, (76.285, 48.472, 52.67200000000001))]
data['probe'] = [(' A 145  CYS  SG ', ' A 307  AZP HBM2', -1.708, (67.655, 17.031, 58.033)), (' B 145  CYS  SG ', ' B 307  AZP  CBM', -1.427, (68.664, 52.354, 82.503)), (' A 145  CYS  SG ', ' A 307  AZP  CBM', -1.39, (67.76, 18.203, 57.203)), (' A  50  LEU  HB2', ' A 405  HOH  O  ', -1.028, (68.267, 9.789, 44.506)), (' A 288  GLU  HG3', ' A 341  HOH  O  ', -1.005, (64.238, 44.457, 56.764)), (' A 279 AARG  HG2', ' A 279 AARG HH11', -0.998, (69.377, 62.645, 54.724)), (' A 285 ATHR  OG1', ' A 286  ILE  N  ', -0.967, (68.912, 51.161, 50.986)), (' A   5  LYS  HE2', ' A 309  HOH  O  ', -0.954, (65.327, 40.346, 58.829)), (' A  49  MET  HB3', ' A 307  AZP  HBI', -0.953, (65.737, 12.822, 50.446)), (' A  41  HIS  HD2', ' A 307  AZP HBS1', -0.947, (66.42, 14.649, 56.198)), (' A  72  ASN  H  ', ' A  72  ASN  ND2', -0.911, (71.691, 14.308, 78.938)), (' A  72  ASN  N  ', ' A  72  ASN HD22', -0.895, (72.06, 15.519, 78.948)), (' B  72  ASN  H  ', ' B  72  ASN HD22', -0.882, (58.426, 34.595, 91.328)), (' A 276  MET  HE1', ' A 280  THR  HA ', -0.878, (69.189, 55.596, 53.985)), (' A  72  ASN  H  ', ' A  72  ASN HD22', -0.849, (71.667, 14.626, 78.781)), (' A 226  THR HG22', ' A 228  ASN  H  ', -0.797, (44.332, 53.446, 44.165)), (' B 154  TYR  HB2', ' B 397  HOH  O  ', -0.789, (83.251, 25.987, 75.012)), (' A 304  THR HG22', ' B 123  SER  HB2', -0.788, (60.884, 43.195, 76.89)), (' A 276  MET  CE ', ' A 279  ARG  O  ', -0.78, (69.898, 56.221, 52.536)), (' A  72  ASN  N  ', ' A  72  ASN  ND2', -0.775, (71.869, 14.434, 78.803)), (' B  72  ASN  H  ', ' B  72  ASN  ND2', -0.773, (57.659, 34.485, 90.599)), (' B 279 BARG  HB3', ' B 279 BARG HH11', -0.753, (76.702, 41.545, 41.678)), (' B 165 AMET  SD ', ' B 307  AZP  HBF', -0.753, (73.132, 57.119, 82.414)), (' A  41  HIS  CD2', ' A 307  AZP HBS1', -0.752, (66.6, 14.844, 56.207)), (' A 192  GLN  HB2', ' A 307  AZP  CAA', -0.732, (62.043, 23.752, 44.755)), (' A  19  GLN  NE2', ' A 119  ASN  HB3', -0.731, (73.501, 15.328, 67.365)), (' B 279 BARG  NH1', ' B 392  HOH  O  ', -0.725, (76.788, 39.458, 42.452)), (' A 307  AZP  HAF', ' A 397  HOH  O  ', -0.704, (64.526, 23.141, 43.775)), (' B 279 AARG  HA ', ' B 353  HOH  O  ', -0.703, (73.582, 42.972, 41.811)), (' B 279 BARG  CG ', ' B 279 BARG HH11', -0.703, (76.661, 42.189, 41.255)), (' B  19  GLN HE21', ' B 119  ASN  HB3', -0.7, (60.419, 44.853, 86.153)), (' A 276  MET  HE3', ' A 279  ARG  O  ', -0.693, (69.265, 57.008, 53.286)), (' A 284  SER  OG ', ' A 285 ATHR  O  ', -0.69, (69.009, 49.758, 55.156)), (' A 285 ATHR HG23', ' A 286  ILE HG23', -0.683, (70.837, 50.226, 52.015)), (' A 231  ASN  O  ', ' A 235  MET  HG3', -0.68, (51.374, 47.679, 41.661)), (' B 279 BARG  CB ', ' B 279 BARG HH11', -0.676, (76.212, 42.239, 41.757)), (' A 226  THR HG22', ' A 228  ASN  N  ', -0.675, (45.031, 53.581, 44.676)), (' B 132  PRO  HD2', ' B 197  ASP  OD2', -0.673, (83.29, 52.605, 65.297)), (' A  49  MET  HB3', ' A 307  AZP  CBI', -0.672, (66.185, 14.102, 50.252)), (' B  72  ASN  N  ', ' B  72  ASN HD22', -0.653, (58.318, 35.457, 91.257)), (' A 276  MET  CE ', ' A 280  THR  HA ', -0.652, (69.437, 56.03, 53.898)), (' B  48  ASP  O  ', ' B  48  ASP  OD2', -0.65, (71.137, 62.342, 91.58)), (' A 279 AARG  HG2', ' A 279 AARG  NH1', -0.646, (69.024, 63.099, 55.29)), (' B   5  LYS  HE2', ' B 288  GLU  OE1', -0.633, (76.09, 43.379, 60.201)), (' A  69  GLN  NE2', ' A  72  ASN  HA ', -0.63, (73.039, 13.022, 75.871)), (' A 285 ATHR  O  ', ' A 286  ILE  O  ', -0.628, (67.174, 50.622, 54.288)), (' A 126  TYR  HE1', ' A 128 BCYS  SG ', -0.628, (66.035, 32.55, 60.26)), (' A  67  LEU HD11', ' A 471  HOH  O  ', -0.626, (71.086, 9.375, 71.279)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.618, (70.429, 34.349, 91.519)), (' A 270  GLU  HG3', ' A 350  HOH  O  ', -0.618, (58.328, 62.79, 47.368)), (' A 188 AARG  HG3', ' A 190  THR HG22', -0.615, (62.16, 15.921, 44.906)), (' A  49  MET  CB ', ' A 307  AZP  HBI', -0.607, (66.141, 12.709, 49.927)), (' A 145  CYS  SG ', ' A 307  AZP HBM1', -0.602, (67.76, 17.76, 57.183)), (' B  19  GLN  NE2', ' B 119  ASN  HB3', -0.601, (59.788, 44.602, 86.906)), (' B 145  CYS  SG ', ' B 307  AZP  CBK', -0.596, (67.897, 52.413, 82.061)), (' B  46  ALA  HA ', ' B  49  MET  HE3', -0.596, (65.397, 62.449, 87.76)), (' A 110  GLN  HB3', ' A 473  HOH  O  ', -0.594, (52.987, 38.421, 61.089)), (' A 276  MET  HE1', ' A 285 ATHR  HA ', -0.592, (69.844, 54.102, 53.628)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.585, (65.265, 28.699, 74.007)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.583, (69.856, 34.333, 92.312)), (' A   4  ARG  HD2', ' B 126  TYR  CD1', -0.575, (70.937, 44.467, 68.838)), (' B 279 BARG  HA ', ' B 353  HOH  O  ', -0.57, (73.558, 42.966, 41.941)), (' B  52  PRO  O  ', ' B 188 BARG  NH1', -0.566, (78.3, 62.238, 90.556)), (' B 212  VAL  HA ', ' B 216  ASP  O  ', -0.565, (82.92, 33.979, 47.735)), (' B 236 ALYS  HG3', ' B 236  LYS  O  ', -0.564, (88.695, 57.957, 51.66)), (' B 279 BARG  HG2', ' B 279 BARG HH11', -0.563, (76.217, 41.924, 40.83)), (' A 167  LEU HD21', ' A 173  ALA  HB2', -0.554, (61.869, 25.681, 50.52)), (' A 276  MET  CE ', ' A 285 ATHR  HA ', -0.552, (69.679, 54.047, 53.289)), (' A 231  ASN  HB3', ' A 235  MET  HE2', -0.551, (48.837, 47.899, 42.032)), (' A 126  TYR  CE1', ' A 128 BCYS  SG ', -0.549, (66.304, 33.251, 60.291)), (' B  41  HIS  HD2', ' B 307  AZP HBS1', -0.548, (69.468, 55.012, 86.425)), (' B 279 BARG  HG2', ' B 279 BARG  NH1', -0.536, (76.261, 41.733, 40.479)), (' A  88 AARG  NH1', ' A 407  HOH  O  ', -0.533, (49.663, 11.631, 63.788)), (' B 299 AGLN  HG2', ' B 299  GLN  O  ', -0.531, (76.732, 30.398, 59.582)), (' A 107  GLN  O  ', ' A 110  GLN  HG3', -0.527, (52.38, 35.697, 57.973)), (' A 279 AARG  CG ', ' A 279 AARG HH11', -0.527, (69.148, 62.651, 54.581)), (' A 187  ASP  HB2', ' A 307  AZP  HBG', -0.525, (61.702, 15.846, 52.669)), (' B 257  THR  OG1', ' B 259  ILE HD12', -0.523, (89.839, 32.351, 50.227)), (' B 155  ASP  N  ', ' B 155 BASP  OD1', -0.523, (80.328, 25.336, 77.784)), (' A 285 ATHR  HG1', ' A 286 AILE  H  ', -0.522, (69.548, 51.443, 50.725)), (' A  69  GLN  OE1', ' A  74  GLN  NE2', -0.521, (71.191, 9.529, 74.475)), (' A 285 BTHR  O  ', ' A 286  ILE  CG1', -0.519, (69.241, 48.943, 52.906)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.519, (72.511, 13.851, 66.554)), (' A 192  GLN  HB2', ' A 307  AZP  CAB', -0.516, (61.603, 23.534, 45.69)), (' B 253  LEU  O  ', ' B 257  THR HG23', -0.51, (89.417, 31.249, 53.467)), (' A 140  PHE  O  ', ' A 141  LEU HD23', -0.509, (73.675, 26.563, 56.533)), (' A 145  CYS  SG ', ' A 307  AZP  CBK', -0.507, (68.445, 19.045, 57.843)), (' A  41  HIS  HD2', ' A 307  AZP  CBS', -0.507, (67.084, 14.297, 56.023)), (' B  87  LEU HD13', ' B  89  LEU HD21', -0.505, (73.077, 47.616, 95.458)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.504, (61.245, 30.66, 65.23)), (' B 114  VAL  O  ', ' B 125  VAL  HA ', -0.496, (69.184, 39.804, 73.042)), (' B 186  VAL HG21', ' B 188 AARG  HE ', -0.496, (81.071, 62.415, 84.11)), (' A 188 AARG  HG3', ' A 190  THR  CG2', -0.494, (61.833, 16.144, 44.456)), (' A 251  GLY  O  ', ' A 254  SER  HB3', -0.491, (46.711, 54.31, 62.072)), (' A 139  SER  HB3', ' B   6  MET  HE1', -0.486, (71.977, 31.416, 60.432)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.481, (56.746, 39.436, 54.736)), (' A 285 BTHR  O  ', ' A 286  ILE HG23', -0.48, (69.839, 49.89, 52.378)), (' B 251  GLY  O  ', ' B 255  ALA  N  ', -0.48, (94.139, 30.766, 55.902)), (' A 180  LYS  HE2', ' A 391  HOH  O  ', -0.48, (46.962, 18.308, 58.024)), (' A 268  LEU HD22', ' A 272  LEU  HG ', -0.48, (58.79, 52.495, 47.846)), (' A 294 BPHE  CD1', ' A 294  PHE  N  ', -0.48, (52.369, 44.17, 63.933)), (' A 285 ATHR HG21', ' B 359  HOH  O  ', -0.468, (72.734, 50.945, 50.335)), (' A 237  TYR  O  ', ' A 238  ASN  CB ', -0.468, (60.23, 44.895, 42.948)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.467, (59.53, 16.279, 77.175)), (' A 276  MET  CE ', ' A 285 BTHR  HA ', -0.466, (69.318, 54.321, 52.816)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.466, (72.441, 13.907, 67.274)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.466, (45.377, 45.037, 57.767)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.465, (58.275, 50.975, 63.814)), (' A 185  PHE  CE1', ' A 307  AZP  HAB', -0.464, (60.174, 25.538, 46.706)), (' A  53  ASN  OD1', ' A  56  ASP  HB2', -0.462, (56.549, 4.141, 50.287)), (' A 189  GLN  HG3', ' A 307  AZP  OAL', -0.459, (67.13, 18.597, 47.327)), (' A 185  PHE  CD1', ' A 307  AZP  HAB', -0.457, (60.085, 24.637, 46.916)), (' A  69  GLN  NE2', ' A  71  GLY  O  ', -0.453, (72.333, 13.483, 75.42)), (' B 276  MET  O  ', ' B 279 AARG  HD2', -0.453, (78.668, 45.226, 42.179)), (' A 210  ALA  O  ', ' A 214  ASN  ND2', -0.451, (61.197, 54.571, 65.251)), (' A 262  LEU  HA ', ' A 262  LEU HD23', -0.45, (48.386, 55.465, 51.336)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.448, (74.8, 40.485, 75.352)), (' A 100  LYS  HB3', ' A 100  LYS  HE2', -0.447, (50.964, 29.074, 77.031)), (' B 226  THR HG22', ' B 228  ASN  N  ', -0.446, (101.184, 48.498, 52.996)), (' A 285 BTHR  O  ', ' A 286  ILE  CB ', -0.442, (69.146, 49.314, 52.461)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.441, (73.262, 54.503, 92.267)), (' A 285 BTHR  O  ', ' A 286  ILE HG12', -0.439, (69.78, 49.145, 53.276)), (' B 190  THR  O  ', ' B 192  GLN  HG2', -0.436, (77.541, 63.43, 78.698)), (' B 279 AARG  H  ', ' B 279 AARG  HG3', -0.436, (76.303, 45.168, 40.926)), (' A  78  ILE HG13', ' A  90  LYS  HD3', -0.435, (54.096, 6.26, 73.822)), (' A  43  ILE  HB ', ' A  61  LYS  HE2', -0.434, (63.089, 5.789, 58.405)), (' B   4  ARG  HD3', ' B   4  ARG HH11', -0.433, (68.85, 37.276, 59.897)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.431, (59.402, 11.889, 59.957)), (' A  78  ILE HD11', ' A  90  LYS  HD3', -0.428, (54.031, 6.638, 74.609)), (' A 136  ILE HD13', ' A 136  ILE HG21', -0.427, (61.219, 29.81, 57.914)), (' B 245  ASP  O  ', ' B 249  ILE HG13', -0.424, (95.526, 39.096, 64.247)), (' B 165 BMET  HE3', ' B 173  ALA  HB3', -0.424, (77.197, 56.26, 78.223)), (' B 291  PHE  HB2', ' B 327  HOH  O  ', -0.423, (81.137, 40.714, 59.697)), (' B 186  VAL HG23', ' B 188 AARG  HG3', -0.421, (79.321, 61.584, 83.599)), (' A 276  MET  HE3', ' A 279  ARG  C  ', -0.42, (69.63, 57.199, 53.703)), (' A 276  MET  HB3', ' A 276  MET  HE3', -0.419, (68.483, 57.363, 52.282)), (' B  48  ASP  HA ', ' B 396  HOH  O  ', -0.418, (71.79, 66.304, 90.137)), (' B 288  GLU  HG2', ' B 291  PHE  CD1', -0.416, (78.12, 40.705, 58.789)), (' B   5  LYS  HD2', ' B 127 BGLN  OE1', -0.416, (75.143, 41.078, 63.859)), (' B 106  ILE HG13', ' B 110  GLN  HB2', -0.414, (84.567, 41.975, 72.445)), (' A  78  ILE  CG1', ' A  90  LYS  HD3', -0.412, (54.318, 6.407, 73.975)), (' A  19  GLN HE21', ' A 119  ASN  HB3', -0.411, (73.279, 14.909, 67.369)), (' B 272  LEU  HA ', ' B 272  LEU HD23', -0.411, (84.531, 50.374, 49.674)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.408, (55.247, 18.496, 60.159)), (' B 199  THR HG21', ' B 239  TYR  CZ ', -0.407, (84.343, 49.378, 56.395)), (' A 230  PHE  HZ ', ' A 268  LEU HD13', -0.407, (55.029, 51.345, 49.025)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.403, (62.105, 12.518, 71.509)), (' B  53  ASN  CG ', ' B  56  ASP  OD1', -0.403, (78.767, 62.731, 97.652)), (' B 271  LEU HD13', ' B 287  LEU HD21', -0.401, (82.879, 45.032, 49.189))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
