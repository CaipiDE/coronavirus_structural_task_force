# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  46 ', 'ALA', 0.00761295365156272, (0.6999999999999957, -16.635, 49.942)), ('A', '  48 ', 'ASP', 0.005752300932769643, (-4.484999999999999, -17.489, 50.097))]
data['omega'] = []
data['rota'] = [('A', '  22 ', 'CYS', 0.05376837164761477, (1.0760000000000005, -4.706, 51.876)), ('A', ' 277 ', 'ASN', 0.12325363658649484, (10.138, -18.665, -0.30599999999999994)), ('B', '  27 ', 'LEU', 0.2575886582953887, (15.319, 19.897, 13.103)), ('B', '  77 ', 'VAL', 0.009423322723936993, (20.903, 31.84899999999999, 22.094)), ('B', '  86 ', 'LEU', 0.0002838287915353295, (27.613, 19.398, 15.316)), ('B', '  90 ', 'LYS', 0.14569667694485203, (24.885, 28.46899999999999, 24.043)), ('B', ' 177 ', 'LEU', 0.06345163066559205, (27.881, 13.526, 20.507999999999996)), ('B', ' 216 ', 'ASP', 0.18705213016201805, (14.844, -22.967, 25.566)), ('E', '   4 ', 'LEU', 0.19945680851770417, (-0.3879999999999999, -13.306999999999995, 40.103))]
data['cbeta'] = [('B', ' 290 ', 'GLU', ' ', 0.25247179505017303, (19.367000000000004, -6.03, 17.225)), ('F', '   3 ', 'VAL', ' ', 0.2722668750200893, (18.429, 12.029, 1.945)), ('F', '   5 ', '0JU', ' ', 0.2759081373895568, (17.026, 12.767000000000001, 7.684))]
data['probe'] = [(' B  58  LEU HD22', ' B  82  MET  HE3', -0.794, (29.176, 26.419, 11.952)), (' B  22  CYS  SG ', ' B  61  LYS  HE2', -0.787, (20.603, 28.517, 10.704)), (' B 159  PHE  HB3', ' B 177  LEU HD13', -0.781, (24.249, 11.05, 22.957)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.761, (-6.334, -3.735, 44.846)), (' A  49  MET  SD ', ' E   4  LEU HD12', -0.742, (-3.24, -13.8, 43.706)), (' A 110  GLN  HG2', ' A 616  HOH  O  ', -0.681, (-7.095, -1.159, 16.942)), (' B  49  MET  HG2', ' F   4  LEU HD12', -0.648, (22.53, 18.703, 3.569)), (' A  45  THR  HB ', ' A  48  ASP  CB ', -0.612, (-3.062, -15.609, 51.411)), (' A 216  ASP  HB2', ' A 604  HOH  O  ', -0.606, (10.494, -4.16, 2.184)), (' B  78  ILE HG13', ' B  90  LYS  HD3', -0.587, (25.84, 31.627, 25.74)), (' A  41  HIS  CG ', ' E   4  LEU HD13', -0.581, (-2.88, -11.146, 41.838)), (' B 180  LYS  HD2', ' B 592  HOH  O  ', -0.566, (34.743, 11.163, 17.92)), (' B  66  PHE  CE1', ' B  87  LEU HD21', -0.557, (23.899, 27.187, 14.055)), (' A 188  ARG  HG3', ' A 190  THR HG23', -0.557, (-8.089, -19.13, 40.932)), (' B  81  SER  O  ', ' B  87  LEU HD12', -0.549, (28.149, 25.433, 15.707)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.532, (-9.199, -2.5, 37.543)), (' A  49  MET  CA ', ' A  49  MET  HE3', -0.532, (-4.724, -16.135, 44.906)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.527, (1.609, 11.423, 42.8)), (' A  45  THR HG22', ' A  46  ALA  N  ', -0.526, (-0.314, -16.013, 51.534)), (' B  44  CYS  HB3', ' B  48  ASP  HB2', -0.519, (22.056, 23.985, 2.638)), (' B 286  ILE  C  ', ' B 286  ILE HD12', -0.502, (15.831, -15.248, 13.937)), (' A  49  MET  HE3', ' A  49  MET  O  ', -0.496, (-4.787, -16.713, 44.276)), (' A  45  THR  CG2', ' A  46  ALA  N  ', -0.496, (-0.776, -15.742, 51.973)), (' A 280  THR HG22', ' A 285  THR HG22', -0.495, (13.233, -13.592, 5.745)), (' B  66  PHE  CZ ', ' B  87  LEU HD21', -0.493, (24.177, 27.392, 14.108)), (' A  45  THR  O  ', ' A  48  ASP  HB3', -0.49, (-2.455, -15.397, 49.742)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.484, (1.274, 0.278, 27.606)), (' A  49  MET  CE ', ' E   4  LEU HD12', -0.48, (-3.873, -13.933, 43.261)), (' A 165  MET  HB3', ' E   4  LEU  CD2', -0.479, (-2.899, -13.235, 38.362)), (' B 401  EDO  H12', ' B 615  HOH  O  ', -0.473, (35.388, 6.076, 11.072)), (' B 165  MET  HE2', ' B 181  PHE  CE2', -0.464, (26.453, 10.935, 8.102)), (' B  54  TYR  HB3', ' B  82  MET  HE1', -0.458, (29.583, 24.386, 9.18)), (' A  45  THR  HB ', ' A  48  ASP  HB2', -0.457, (-3.377, -15.989, 52.005)), (' A 301  SER  C  ', ' A 557  HOH  O  ', -0.455, (3.421, 9.672, 5.015)), (' B   5  LYS  HD3', ' B 545  HOH  O  ', -0.45, (16.407, -4.606, 18.014)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.449, (-9.019, -2.693, 37.535)), (' B 165  MET  HB3', ' F   4  LEU HD23', -0.444, (22.576, 13.198, 6.024)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.443, (5.329, -8.832, 35.053)), (' B 298  ARG  HD3', ' B 305  PHE  HZ ', -0.443, (18.734, -1.091, 31.503)), (' B 190  THR  O  ', ' F   2  ALA  HB3', -0.443, (24.519, 11.655, -1.029)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.441, (19.001, 6.492, 21.133)), (' A  44  CYS  SG ', ' A  54  TYR  CE1', -0.44, (-6.144, -10.836, 46.414)), (' A 119  ASN  ND2', ' A 595  HOH  O  ', -0.437, (12.677, -4.655, 42.263)), (' A 165  MET  HB3', ' E   4  LEU HD23', -0.432, (-2.281, -13.359, 38.484)), (' A 108  PRO  HA ', ' A 130  MET  HG2', -0.428, (-7.332, -6.717, 22.522)), (' B  49  MET  CG ', ' F   4  LEU HD12', -0.426, (22.235, 19.059, 3.469)), (' A  49  MET  HA ', ' A  49  MET  HE3', -0.419, (-4.734, -15.781, 45.639)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.418, (-10.205, -6.298, 42.046)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.413, (-4.811, -7.38, 17.414)), (' A  61  LYS  HD2', ' A  65  SER  OG ', -0.412, (-3.723, -3.204, 55.21)), (' B 155  ASP  HB3', ' B 306  GLN  HG2', -0.411, (19.434, 6.631, 39.286)), (' A  48  ASP  O  ', ' A  48  ASP  OD1', -0.41, (-5.946, -15.92, 49.124)), (' B 230  PHE  CD2', ' B 265  CYS  HB3', -0.41, (31.109, -21.455, 16.894)), (' B 270  GLU  HG3', ' B 274  ASN  ND2', -0.409, (22.975, -29.576, 12.877)), (' B 154  TYR  HD1', ' B 306  GLN HE22', -0.407, (21.672, 2.88, 40.442)), (' A 294  PHE  CE2', ' A 298  ARG  NH2', -0.403, (-1.808, 6.75, 16.67)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.403, (19.357, 20.842, 31.046)), (' A   1  SER  HB3', ' B 166  GLU  OE1', -0.402, (14.555, 5.972, 4.996)), (' B 167  LEU  HB3', ' B 168  PRO  HD2', -0.402, (22.886, 5.234, 1.527)), (' A 297  VAL  O  ', ' A 301  SER  HA ', -0.401, (1.935, 8.321, 8.692)), (' A  49  MET  HE2', ' A 189  GLN  HG3', -0.4, (-3.03, -16.153, 42.937))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
