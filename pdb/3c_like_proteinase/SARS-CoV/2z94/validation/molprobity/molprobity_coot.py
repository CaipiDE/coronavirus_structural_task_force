# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.13532134365779488, (-23.042, 5.554, 24.24)), ('A', '  77 ', 'VAL', 0.18598195555769073, (15.302, -25.326, 18.333)), ('A', '  86 ', 'LEU', 0.1411438304848777, (13.992999999999999, -11.011, 12.445)), ('A', '  87 ', 'LEU', 0.06305057370407127, (15.207, -14.471000000000004, 13.366999999999999)), ('A', ' 127 ', 'GLN', 0.27226724511281153, (-4.379, 0.604, 20.791)), ('A', ' 132 ', 'PRO', 0.153279833526999, (2.8839999999999995, 9.237, 9.241)), ('A', ' 253 ', 'LEU', 0.0, (-19.843999999999994, 7.612, 7.296)), ('A', ' 268 ', 'LEU', 0.013941855473036696, (-12.782999999999998, 20.965000000000003, 10.469))]
data['cbeta'] = []
data['probe'] = [(' A 226  THR HG23', ' A 229  ASP  H  ', -1.013, (-10.197, 24.043, -2.518)), (' A 107  GLN  H  ', ' A 110  GLN HE21', -0.95, (-1.931, 0.549, 6.35)), (' A 110  GLN  HG2', ' A1070  HOH  O  ', -0.92, (-5.606, 2.382, 7.232)), (' A  67  LEU HD11', ' A  74  GLN  NE2', -0.906, (14.954, -23.84, 27.357)), (' A 306  GLN  N  ', ' A1219  HOH  O  ', -0.873, (-28.588, 12.402, 16.184)), (' A 107  GLN  H  ', ' A 110  GLN  NE2', -0.84, (-1.785, -0.413, 6.308)), (' A  77  VAL HG12', ' A1059  HOH  O  ', -0.834, (17.699, -24.639, 21.084)), (' A  67  LEU HD11', ' A  74  GLN HE22', -0.823, (14.517, -22.934, 27.396)), (' A 162  MET  SD ', ' A1247  HOH  O  ', -0.815, (10.01, -9.108, 15.255)), (' A  88  ARG  HB3', ' A  88  ARG HH11', -0.754, (11.869, -18.435, 10.389)), (' A 305  PHE  HB3', ' A1219  HOH  O  ', -0.741, (-27.803, 11.284, 17.063)), (' A  24  THR HG23', ' A 912  HOH  O  ', -0.727, (22.675, -9.925, 26.965)), (' A 107  GLN  N  ', ' A 110  GLN HE21', -0.709, (-1.17, -0.116, 6.264)), (' A  88  ARG  HB3', ' A  88  ARG  NH1', -0.69, (11.639, -18.672, 9.842)), (' A  67  LEU  CD1', ' A  74  GLN HE22', -0.672, (14.926, -22.673, 26.897)), (' A  67  LEU  CD1', ' A  74  GLN  NE2', -0.667, (15.097, -23.003, 26.97)), (' A  88  ARG  CB ', ' A  88  ARG HH11', -0.654, (12.06, -18.105, 9.99)), (' A 288  GLU  OE1', ' A1280  HOH  O  ', -0.639, (-7.274, 10.313, 19.35)), (' A 279  ARG  HD2', ' A1317  HOH  O  ', -0.635, (-17.789, 25.739, 20.571)), (' A  86  LEU HD13', ' A 179  GLY  HA2', -0.61, (11.819, -8.838, 11.284)), (' A 188  ARG  HD3', ' A1354  HOH  O  ', -0.606, (25.094, -1.518, 12.017)), (' A 305  PHE  HD1', ' A 305  PHE  O  ', -0.596, (-30.531, 9.876, 17.87)), (' A 226  THR HG21', ' A1309  HOH  O  ', -0.589, (-11.084, 25.475, -4.516)), (' A 155  ASP  HB2', ' A1331  HOH  O  ', -0.586, (-11.918, -17.071, 12.439)), (' A   4  ARG  NH1', ' A1283  HOH  O  ', -0.584, (-10.933, 4.098, 27.981)), (' A  63  ASN  O  ', ' A  77  VAL HG11', -0.567, (18.261, -23.228, 19.209)), (' A 226  THR HG23', ' A 229  ASP  N  ', -0.553, (-9.793, 24.72, -1.741)), (' A  83  GLN HE21', ' A  88  ARG  HD2', -0.552, (11.782, -15.141, 8.145)), (' A   5  LYS  HE2', ' A1225  HOH  O  ', -0.548, (-4.768, 6.273, 19.978)), (' A  86  LEU HD11', ' A1247  HOH  O  ', -0.535, (10.914, -9.141, 14.521)), (' A  63  ASN  O  ', ' A  77  VAL  CG1', -0.53, (18.333, -23.967, 18.918)), (' A  83  GLN  NE2', ' A  88  ARG  HD2', -0.53, (11.134, -15.126, 7.606)), (' A 256  GLN  HG2', ' A 304  THR  CG2', -0.525, (-25.835, 7.805, 11.02)), (' A  86  LEU  CD1', ' A1247  HOH  O  ', -0.506, (11.205, -8.699, 14.495)), (' A 142  ASN  HB2', ' A1273  HOH  O  ', -0.504, (14.94, -1.091, 28.592)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.499, (17.079, -8.567, 10.984)), (' A 298  ARG  HD2', ' A1118  HOH  O  ', -0.499, (-13.864, -5.035, 16.543)), (' A   3  PHE  O  ', ' A   4  ARG  HD2', -0.498, (-14.296, 6.334, 24.462)), (' A  82  MET  HE3', ' A1239  HOH  O  ', -0.494, (19.507, -10.468, 7.44)), (' A 277  ASN  HB2', ' A1317  HOH  O  ', -0.492, (-16.423, 26.969, 20.743)), (' A 256  GLN  HG2', ' A 304  THR HG23', -0.487, (-26.017, 7.612, 11.012)), (' A   4  ARG  NH2', ' A1282  HOH  O  ', -0.482, (-13.285, 5.567, 29.8)), (' A   4  ARG  CZ ', ' A1282  HOH  O  ', -0.477, (-13.108, 5.732, 29.706)), (' A  32  LEU HD13', ' A 101  TYR  CE1', -0.464, (1.569, -16.65, 11.751)), (' A 226  THR HG22', ' A 229  ASP  HB2', -0.463, (-11.48, 25.715, -0.966)), (' A 198  THR HG21', ' A 240  GLU  HG2', -0.442, (0.478, 13.864, 7.16)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.442, (-9.277, 26.313, 6.275)), (' A 102  LYS  HE3', ' A1295  HOH  O  ', -0.439, (-5.478, -9.312, 6.951)), (' A   4  ARG  CZ ', ' A1283  HOH  O  ', -0.438, (-11.328, 3.847, 28.091)), (' A 305  PHE  CD1', ' A 305  PHE  O  ', -0.436, (-30.63, 10.548, 18.448)), (' A 290  GLU  CD ', ' A 971  HOH  O  ', -0.432, (-1.852, 8.055, 18.088)), (' A 246  HIS  CD2', ' A1075  HOH  O  ', -0.431, (-6.027, 12.583, 3.898)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.425, (-11.731, -12.975, 11.129)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.425, (-0.276, -4.961, 18.312)), (' A   5  LYS  HG3', ' A 291  PHE  CZ ', -0.424, (-9.657, 6.111, 20.636)), (' A 902  TLD H133', ' A1133  HOH  O  ', -0.42, (21.969, -2.484, 25.907)), (' A  19  GLN HE21', ' A 119  ASN  HA ', -0.42, (11.468, -13.591, 29.513)), (' A  67  LEU HD12', ' A1158  HOH  O  ', -0.417, (15.137, -23.543, 25.346)), (' A   4  ARG  NH1', ' A1282  HOH  O  ', -0.409, (-12.456, 5.621, 29.947)), (' A  40  ARG  CB ', ' A  87  LEU HD13', -0.409, (17.789, -11.66, 14.09)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.408, (3.696, -22.498, 19.341))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
