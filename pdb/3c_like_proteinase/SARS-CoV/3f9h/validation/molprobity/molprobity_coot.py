# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  73 ', 'VAL', 0.08854407287637457, (-9.88, -9.080000000000002, -3.438999999999999)), ('A', ' 142 ', 'ASN', 0.01011529359731611, (10.648, 2.592000000000001, -14.640999999999996)), ('A', ' 143 ', 'GLY', 0.06746605157742881, (9.636, 2.361, -10.998999999999997)), ('A', ' 177 ', 'LEU', 0.03767388122282663, (12.091999999999997, -1.614, 3.783999999999999)), ('B', ' 154 ', 'TYR', 0.02323068138650887, (-2.522, -8.887, -19.804999999999993))]
data['omega'] = []
data['rota'] = [('A', '  30 ', 'LEU', 0.023135704491049156, (4.405, -4.487, -0.22599999999999995)), ('A', '  35 ', 'THR', 0.03682073637316195, (1.4009999999999996, -5.986, 7.174)), ('A', '  55 ', 'GLU', 0.023065183115523927, (2.54, 13.361, 12.219)), ('A', '  56 ', 'ASP', 0.21625202479140415, (-0.222, 15.985, 11.832999999999998)), ('A', '  73 ', 'VAL', 0.24840806387331138, (-9.88, -9.080000000000002, -3.438999999999999)), ('A', '  77 ', 'VAL', 0.07038390503049288, (-7.062, -2.329999999999999, 6.942999999999998)), ('A', '  78 ', 'ILE', 0.26853498738044584, (-7.4129999999999985, -2.767000000000001, 10.718999999999996)), ('A', ' 106 ', 'ILE', 0.2957030741802885, (22.777, -2.476, 0.746)), ('A', ' 127 ', 'GLN', 0.010924764671642728, (18.292, -5.261, -13.072)), ('A', ' 133 ', 'ASN', 0.0832579446118526, (25.340999999999998, 8.911, -5.01)), ('A', ' 136 ', 'ILE', 0.19375297472152622, (18.570999999999994, 4.904, -9.431)), ('A', ' 153 ', 'ASP', 0.2331061970329438, (19.208999999999993, -16.304, -2.173)), ('A', ' 167 ', 'LEU', 0.16719980562048795, (14.230999999999996, 13.943, -8.651)), ('A', ' 169 ', 'THR', 0.2899089511639481, (17.576, 15.195, -13.033)), ('A', ' 192 ', 'GLN', 0.07260174912599725, (17.768, 17.868, -3.689)), ('A', ' 235 ', 'MET', 0.12485886965644372, (39.762999999999984, 10.037000000000004, -10.38)), ('A', ' 268 ', 'LEU', 0.10553556837772374, (41.772, -0.9349999999999998, -17.375)), ('A', ' 270 ', 'GLU', 0.049723467908739355, (44.88299999999999, 1.595, -20.923999999999992)), ('B', '   4 ', 'ARG', 0.07563297080668253, (14.988999999999999, 0.532, -18.728)), ('B', '  30 ', 'LEU', 0.011727082952170282, (8.17, -26.391, -20.776)), ('B', '  45 ', 'THR', 0.14119859541036067, (25.038999999999994, -37.983, -26.495)), ('B', '  55 ', 'GLU', 0.12143271543574685, (14.243999999999996, -40.843, -35.803)), ('B', '  77 ', 'VAL', 0.24800464506882225, (5.751999999999998, -39.709, -18.67899999999999)), ('B', '  87 ', 'LEU', 0.031332330877724565, (10.362999999999996, -33.322, -28.128)), ('B', ' 119 ', 'ASN', 0.0944198250768379, (18.86799999999999, -27.497, -15.162)), ('B', ' 127 ', 'GLN', 0.21463764964396037, (14.626, -8.832, -22.296999999999993)), ('B', ' 167 ', 'LEU', 0.041796914993478665, (26.988999999999994, -20.559, -31.86799999999999)), ('B', ' 268 ', 'LEU', 0.051824074437952644, (19.156, 10.062000000000001, -36.817)), ('B', ' 273 ', 'GLN', 0.12550195373688056, (27.336999999999993, 11.261999999999997, -39.012)), ('B', ' 276 ', 'MET', 0.11126758803131172, (26.482999999999993, 12.321, -29.408999999999992)), ('B', ' 282 ', 'LEU', 0.011855559015325095, (18.066999999999993, 8.87, -22.084999999999994))]
data['cbeta'] = []
data['probe'] = [(' B 143  GLY  O  ', ' B 163  HIS  CD2', -0.898, (21.18, -21.558, -24.639)), (' B  21  THR  HB ', ' B  67  LEU  HB3', -0.819, (15.846, -36.962, -16.784)), (' A   4  ARG HH21', ' B 137  LYS  HB2', -0.765, (21.376, -10.984, -27.477)), (' A 126  TYR  HD2', ' B   6  MET  HE3', -0.754, (11.847, -2.388, -15.312)), (' B 143  GLY  C  ', ' B 163  HIS  CD2', -0.722, (20.474, -21.181, -24.235)), (' A 116  ALA  HB3', ' B   6  MET  HE1', -0.711, (8.794, -1.33, -14.104)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.679, (22.175, -24.778, -36.966)), (' B 143  GLY  O  ', ' B 163  HIS  NE2', -0.669, (21.498, -22.037, -24.545)), (' A 131  ARG  HD2', ' A 137  LYS  HE3', -0.658, (23.767, 6.028, -13.114)), (' B 139  SER  H  ', ' B 142  ASN  HB2', -0.658, (23.584, -16.066, -22.899)), (' A 126  TYR  CD2', ' B   6  MET  HE3', -0.637, (12.391, -1.868, -15.028)), (' B 175  THR HG23', ' B 176  ASP  O  ', -0.598, (10.511, -24.277, -31.365)), (' A   4  ARG  NH2', ' B 137  LYS  HB2', -0.582, (21.393, -10.358, -27.2)), (' B 186  VAL  H  ', ' B 192  GLN  NE2', -0.581, (22.271, -24.974, -37.72)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.58, (12.355, 6.602, -8.173)), (' B 167  LEU  HB3', ' B 168  PRO  HD2', -0.562, (27.765, -19.589, -33.73)), (' A 139  SER  H  ', ' A 142  ASN  HB2', -0.555, (12.092, 5.097, -15.941)), (' A  20  VAL HG22', ' A  68  VAL HG22', -0.553, (-3.159, -0.58, 0.456)), (' A 142  ASN  OD1', ' B   4  ARG  HB2', -0.552, (14.08, 1.663, -17.119)), (' A   6  MET  HE1', ' B 116  ALA  HB3', -0.552, (18.922, -16.638, -17.625)), (' B 196  THR  HA ', ' B 308  HOH  O  ', -0.543, (27.58, -10.159, -40.412)), (' B 167  LEU  HB2', ' B 171  VAL  HB ', -0.53, (26.082, -17.986, -32.502)), (' A 126  TYR  CG ', ' B   4  ARG  HG2', -0.525, (15.038, -1.392, -14.905)), (' A 126  TYR  CD1', ' B   4  ARG  HG2', -0.516, (15.945, -1.35, -14.732)), (' A 116  ALA  CB ', ' B   6  MET  HE1', -0.509, (9.049, -1.28, -13.896)), (' A   6  MET  HB3', ' B 126  TYR  HB3', -0.508, (19.027, -11.301, -18.179)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.505, (15.174, -39.015, -37.375)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.505, (37.353, -6.136, -1.676)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.501, (14.835, -13.506, -7.891)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.496, (11.303, -0.048, -43.495)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.486, (16.002, -20.155, -0.037)), (' A 145  CYS  HA ', ' A 163  HIS  HD2', -0.481, (8.059, 4.943, -7.253)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.469, (2.413, -13.228, 2.767)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.468, (-2.788, 14.73, 12.217)), (' A 127  GLN  HA ', ' A 127  GLN HE21', -0.466, (18.231, -6.145, -11.894)), (' A  69  GLN  HB3', ' A  74  GLN  HG3', -0.465, (-8.931, -3.453, -2.764)), (' A 108  PRO  HG3', ' A 134  HIS  CE1', -0.463, (25.73, 4.687, -0.552)), (' A  30  LEU  HG ', ' A 148  VAL HG11', -0.463, (7.663, -4.918, -1.82)), (' B  76  ARG  HB3', ' B  92  ASP  CG ', -0.463, (2.459, -39.827, -14.263)), (' A 176  ASP  C  ', ' A 178  GLU  H  ', -0.462, (13.526, 0.066, 4.408)), (' A 239  TYR  CE1', ' A 272  LEU HD21', -0.457, (36.35, 4.903, -16.915)), (' A 143  GLY  O  ', ' A 163  HIS  CD2', -0.457, (9.326, 5.237, -8.708)), (' A 167  LEU HD23', ' A 171  VAL HG23', -0.452, (17.07, 11.142, -7.902)), (' B 229  ASP  HA ', ' B 232  LEU HD12', -0.449, (19.917, 9.107, -50.289)), (' B 135  THR  HB ', ' B 171  VAL HG12', -0.447, (22.74, -15.469, -32.875)), (' A 133  ASN  C  ', ' A 133  ASN HD22', -0.445, (23.835, 8.411, -6.046)), (' A 141  LEU  C  ', ' A 143  GLY  H  ', -0.444, (8.653, 2.601, -13.828)), (' A 145  CYS  HA ', ' A 163  HIS  CD2', -0.443, (8.028, 4.968, -6.577)), (' A 124  GLY  C  ', ' B   6  MET  HE2', -0.443, (9.696, -4.297, -15.116)), (' B  45  THR  H  ', ' B  48  ASP  HB2', -0.443, (24.177, -38.63, -28.98)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.439, (13.911, -6.709, -29.059)), (' A  75  LEU HD13', ' A  91  VAL HG21', -0.431, (-3.66, -7.215, 3.714)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.43, (11.285, -15.106, -23.46)), (' B   8  PHE  HB3', ' B 152  ILE HD12', -0.429, (5.796, -10.884, -18.78)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.429, (13.897, -24.078, -11.67)), (' B 167  LEU  CB ', ' B 168  PRO  HD2', -0.428, (27.397, -20.108, -33.503)), (' B  41  HIS  HA ', ' B  54  TYR  HE2', -0.425, (18.75, -34.103, -30.444)), (' A 209  TYR  HB3', ' A 253  LEU HD22', -0.424, (36.481, -12.236, -13.171)), (' B  35  THR  HA ', ' B  89  LEU  O  ', -0.418, (3.645, -33.612, -22.488)), (' A  30  LEU HD22', ' A  32  LEU  HG ', -0.415, (6.055, -7.645, 1.48)), (' A  75  LEU  HA ', ' A 313  HOH  O  ', -0.414, (-9.235, -7.88, 2.593)), (' A   9  PRO  HD3', ' B 124  GLY  HA2', -0.412, (16.204, -15.014, -12.355)), (' B  20  VAL HG22', ' B  68  VAL HG12', -0.411, (11.062, -33.504, -18.937)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.409, (15.497, -29.246, -23.972)), (' B  30  LEU HD22', ' B  32  LEU  HG ', -0.409, (4.92, -24.778, -21.112)), (' A 154  TYR  HB2', ' A 155  ASP  H  ', -0.408, (17.246, -20.255, -0.142)), (' B  56  ASP  OD2', ' B  60  ARG  NH2', -0.406, (19.594, -46.52, -35.355)), (' A 162  MET  O  ', ' A 164  HIS  HD2', -0.4, (11.164, 4.194, -1.468)), (' A   3  PHE  HD2', ' A   4  ARG  HG3', -0.4, (23.553, -10.077, -23.028))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
