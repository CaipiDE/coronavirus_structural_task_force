# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 139 ', 'SER', 0.00157387543016227, (-21.82, 16.411, -21.52)), ('A', ' 154 ', 'TYR', 0.03091056774060282, (2.483999999999999, 9.164, -20.031)), ('A', ' 191 ', 'ALA', 0.005320436339694934, (-30.15599999999999, 24.961, -39.071)), ('B', ' 145 ', 'CYS', 0.025498262813256234, (-6.352999999999998, -4.682, -6.433999999999998)), ('B', ' 215 ', 'GLY', 0.07294045179281733, (-36.81299999999999, 15.53, -24.41))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.08402785152671341, (-15.032, -0.5499999999999998, -18.762999999999995)), ('A', '  30 ', 'LEU', 0.0006129190966274511, (-8.119, 26.488999999999997, -20.968)), ('A', '  56 ', 'ASP', 0.05181375624441489, (-17.02, 43.652, -35.751)), ('A', '  59 ', 'ILE', 0.003970721824349617, (-12.784999999999998, 45.329, -32.091)), ('A', '  60 ', 'ARG', 0.010018896756955786, (-15.600999999999994, 46.58, -29.829)), ('A', ' 130 ', 'MET', 0.03278544874028093, (-15.181, 11.078000000000001, -32.389)), ('A', ' 169 ', 'THR', 0.07525315519815916, (-30.787000000000003, 16.724000000000007, -31.375999999999994)), ('A', ' 190 ', 'THR', 0.008159601566148922, (-29.030000000000005, 28.193000000000005, -37.357)), ('A', ' 226 ', 'THR', 0.1895645848922411, (-14.227, -11.527, -48.272)), ('A', ' 245 ', 'ASP', 0.19026331873707492, (-5.747999999999998, 0.3700000000000001, -43.654)), ('B', '  30 ', 'LEU', 0.02996538926383565, (-4.228, 4.383, -0.509)), ('B', '  55 ', 'GLU', 0.07155341594192398, (-2.42, -13.099, 12.002)), ('B', '  77 ', 'VAL', 0.20827283068015714, (7.275, 2.412999999999999, 6.768999999999999)), ('B', '  78 ', 'ILE', 0.02902634619356564, (7.785, 2.636, 10.546)), ('B', '  87 ', 'LEU', 0.05850082005220502, (-3.527999999999999, -3.5020000000000002, 6.109999999999999)), ('B', '  93 ', 'THR', 0.10141271048411687, (5.6629999999999985, 11.103, 6.267)), ('B', ' 127 ', 'GLN', 0.12733197345284544, (-18.266999999999992, 5.238, -13.067999999999996)), ('B', ' 165 ', 'MET', 0.04150810768335029, (-10.662999999999997, -10.194, -5.095999999999998)), ('B', ' 169 ', 'THR', 0.08383410354136621, (-17.423, -15.509, -12.382999999999996)), ('B', ' 222 ', 'ARG', 0.1546669453750348, (-52.16999999999999, 6.702, -19.772999999999996)), ('B', ' 228 ', 'ASN', 0.18210157522750228, (-47.711, -4.427, -5.798999999999999)), ('B', ' 229 ', 'ASP', 0.1565708337127989, (-48.90799999999999, -4.691, -9.424)), ('B', ' 247 ', 'VAL', 0.003150532575091347, (-40.822, 6.07, -4.4)), ('B', ' 268 ', 'LEU', 0.05322012104907786, (-41.734, 0.8889999999999998, -17.142)), ('B', ' 287 ', 'LEU', 0.0010504653165920403, (-32.553999999999995, 0.605, -20.106999999999992))]
data['cbeta'] = [('A', ' 163 ', 'HIS', 'A', 0.2748176198988847, (-17.886999999999993, 21.452, -25.841999999999995))]
data['probe'] = [(' A 186  VAL HG22', ' A 192  GLN HE22', -0.658, (-22.876, 25.856, -38.874)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.654, (-21.074, -2.22, -47.616)), (' B 231  ASN  HB3', ' B 235  MET  HE2', -0.624, (-42.786, -6.988, -6.928)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.606, (-23.585, 34.3, -32.668)), (' B 167  LEU HD21', ' B 173  ALA  HB2', -0.602, (-16.593, -10.264, -4.879)), (' A  49  MET  HE1', ' A  54  TYR  OH ', -0.587, (-20.858, 32.94, -32.807)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.587, (-14.988, -14.234, -0.445)), (' B 298  ARG  HE ', ' B 299  GLN  HG3', -0.577, (-23.879, 13.936, -11.653)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.535, (-38.497, -0.076, -3.886)), (' A 130  MET  HE2', ' A 136  ILE HD11', -0.534, (-15.894, 15.051, -31.5)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.508, (-22.672, 28.773, -37.926)), (' A 104  VAL HG23', ' A 160  CYS  HB3', -0.49, (-6.173, 15.848, -30.257)), (' A  46  ALA  HB2', ' A 330  HOH  O  ', -0.483, (-28.419, 35.149, -24.46)), (' B  84  ASN  HB2', ' B 179  GLY  HA3', -0.479, (-11.485, -4.249, 7.399)), (' B 152  ILE HG12', ' B 157  VAL HG22', -0.477, (-13.368, 13.703, -4.067)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.469, (-1.495, -10.238, 3.641)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.463, (-14.865, 6.344, -34.434)), (' B 186  VAL  H  ', ' B 192  GLN  NE2', -0.462, (-15.171, -14.424, -0.309)), (' B   5  LYS  HE3', ' B 290  GLU  HB2', -0.46, (-24.237, 3.638, -15.013)), (' B 144  SER  OG ', ' B 163 AHIS  HD2', -0.46, (-9.04, -4.281, -9.562)), (' B  83  GLN  HB2', ' B  88  ARG  HD2', -0.451, (-6.481, -0.861, 10.824)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.451, (-11.607, 0.297, -43.003)), (' A 185  PHE  HD1', ' A 192  GLN  HG3', -0.45, (-23.548, 22.064, -37.252)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.447, (-45.514, -4.551, -16.049)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.445, (-16.661, 35.776, -29.259)), (' A 111  THR  HA ', ' A 129  ALA  HA ', -0.444, (-13.06, 8.802, -29.308)), (' A  19  GLN  HG3', ' A  69  GLN  HB2', -0.444, (-13.833, 32.374, -13.663)), (' B   5  LYS  HE3', ' B 290  GLU  CB ', -0.437, (-24.145, 3.692, -14.736)), (' A 136  ILE HG22', ' A 137  LYS  N  ', -0.433, (-20.308, 14.227, -27.256)), (' B  10  SER  HB2', ' B 115  LEU HD13', -0.43, (-8.689, 8.989, -11.098)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.43, (-2.098, 12.973, 2.748)), (' B 131  ARG  HD3', ' B 197  ASP  OD2', -0.427, (-25.739, -6.342, -10.833)), (' A 288  GLU  HG2', ' A 291  PHE  HE1', -0.424, (-16.977, -0.181, -25.073)), (' A 167  LEU  HB2', ' A 171  VAL HG23', -0.421, (-26.022, 17.829, -32.199)), (' A 111  THR HG23', ' A 292  THR HG23', -0.413, (-11.183, 5.033, -30.144)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.411, (-10.276, 27.342, -31.75)), (' B 100  LYS  HD2', ' B 305  HOH  O  ', -0.405, (-9.88, 18.942, -0.435)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.405, (-24.177, 2.516, -9.991)), (' A 163 AHIS  HE1', ' A 165  MET  O  ', -0.402, (-22.234, 21.702, -28.675)), (' A 124  GLY  HA3', ' B   6  MET  HG2', -0.4, (-18.555, 14.358, -15.23))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
