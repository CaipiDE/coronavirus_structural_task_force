# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 176 ', 'ASP', 0.013295474877233674, (-6.689, -5.2010000000000005, -10.21)), ('A', ' 277 ', 'ASN', 0.011131017472489546, (11.771, 27.647, -23.433))]
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.23998156194170503, (5.498999999999999, 8.849, -21.008999999999993)), ('A', '   5 ', 'LYS', 0.002041351723408225, (4.385, 6.277, -20.449)), ('A', '  45 ', 'THR', 0.07044129876957782, (-26.953999999999986, -7.464999999999998, -22.165)), ('A', '  48 ', 'ASP', 0.03318822110287997, (-28.624, -3.5480000000000005, -19.236999999999995)), ('A', '  55 ', 'GLU', 0.02216692881210433, (-25.5, -11.643, -9.048999999999996)), ('A', '  59 ', 'ILE', 0.2635386061599316, (-27.26199999999999, -17.096, -11.580999999999998)), ('A', '  72 ', 'ASN', 0.024803378104520754, (-7.677999999999994, -22.96999999999999, -32.346)), ('A', ' 106 ', 'ILE', 0.0649225666668622, (-0.39899999999999913, -1.027, -7.928)), ('A', ' 153 ', 'ASP', 0.01686939174095646, (10.528, -9.079999999999998, -11.508)), ('A', ' 180 ', 'LYS', 0.2555894697980257, (-11.309, -4.297999999999998, -7.477)), ('A', ' 189 ', 'GLN', 0.1477449952538115, (-23.027000000000005, 2.375999999999999, -18.341)), ('A', ' 198 ', 'THR', 0.025303388109138496, (-2.0589999999999997, 16.18, -10.696)), ('A', ' 227 ', 'LEU', 0.0, (10.72, 20.507, 1.632)), ('A', ' 254 ', 'SER', 0.11282786543912399, (21.002000000000002, 11.427999999999997, -5.767999999999999)), ('A', ' 268 ', 'LEU', 0.00537117698448746, (12.442, 21.712999999999997, -10.418999999999999)), ('A', ' 269 ', 'LYS', 0.20991074943673124, (10.937000000000001, 24.802, -8.715)), ('A', ' 277 ', 'ASN', 0.0, (11.771, 27.647, -23.433)), ('A', ' 284 ', 'SER', 0.09718541634162434, (11.456, 16.368, -24.143999999999995)), ('A', ' 285 ', 'THR', 0.008159601566148922, (10.094, 19.852, -24.647))]
data['cbeta'] = [('A', '  34 ', 'ASP', ' ', 0.2875097333563761, (-7.257999999999999, -25.306000000000004, -14.059)), ('A', '  41 ', 'HIS', ' ', 0.26412588551961236, (-19.345999999999997, -6.003999999999997, -18.036999999999995)), ('A', ' 145 ', 'CYS', ' ', 0.45857940791980206, (-12.523, -4.571, -21.711)), ('A', ' 148 ', 'VAL', ' ', 0.2766704842092374, (-3.5499999999999963, -8.167, -18.31)), ('A', ' 154 ', 'TYR', ' ', 0.7600577183080626, (13.720999999999998, -12.505999999999998, -11.516)), ('A', ' 277 ', 'ASN', ' ', 0.4651626539812759, (11.041, 29.016, -23.665)), ('A', ' 290 ', 'GLU', ' ', 0.26691018964715935, (4.632, 8.378999999999996, -17.507))]
data['probe'] = [(' A 285  THR  HB ', ' A 867  HOH  O  ', -1.067, (9.86, 20.499, -27.632)), (' A 188  ARG  HD2', ' A 873  HOH  O  ', -0.909, (-25.558, 0.743, -12.819)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.877, (-2.611, 18.906, -9.661)), (' A  72  ASN  H  ', ' A  72  ASN HD22', -0.786, (-5.915, -22.846, -32.092)), (' A 127  GLN  H  ', ' A 801  GOL  H32', -0.677, (4.139, 1.38, -23.445)), (' A  47  GLU  O  ', ' A  50  LEU  HG ', -0.647, (-28.839, -0.785, -21.063)), (' A 198  THR  CG2', ' A 238  ASN  OD1', -0.64, (-2.687, 18.276, -9.201)), (' A 100  LYS  HE2', ' A 841  HOH  O  ', -0.62, (6.025, -17.002, -7.931)), (' A 277  ASN  H  ', ' A 277  ASN HD22', -0.594, (11.129, 28.05, -21.597)), (' A 180  LYS  HE2', ' A 931  HOH  O  ', -0.571, (-9.359, -7.269, -2.637)), (' A 112  PHE  HZ ', ' A 136  ILE HG21', -0.562, (-3.025, 1.556, -16.631)), (' A 168  PRO  HG3', ' I   1  ACE  O  ', -0.528, (-18.28, 9.283, -20.426)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.525, (0.041, -4.329, -18.722)), (' A 239  TYR  CZ ', ' A 272  LEU HD21', -0.516, (6.393, 20.987, -12.846)), (' A 196  THR HG22', ' A 868  HOH  O  ', -0.516, (-6.597, 18.972, -10.527)), (' A 186  VAL HG21', ' A 188  ARG  HE ', -0.515, (-22.102, 2.117, -11.168)), (' A 196  THR  CG2', ' A 868  HOH  O  ', -0.504, (-6.714, 19.11, -10.47)), (' A 166  GLU  HB2', ' I   6  KCQ  CD2', -0.503, (-12.692, 2.955, -23.927)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.5, (8.196, -7.643, -19.24)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.5, (-21.029, -10.696, -16.832)), (' A  28  ASN  O  ', ' A 146  GLY  HA3', -0.492, (-10.291, -9.576, -21.349)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.49, (-9.006, -3.089, -28.147)), (' A 180  LYS  CE ', ' A 931  HOH  O  ', -0.49, (-9.504, -7.268, -3.0)), (' A  37  TYR  HE1', ' A  88 BARG  HE ', -0.487, (-9.263, -15.86, -9.989)), (' A  55  GLU  CD ', ' A  55  GLU  H  ', -0.482, (-24.859, -9.547, -8.852)), (' A 166  GLU  HB3', ' I   3  Z3E  HB ', -0.48, (-14.716, 4.219, -23.825)), (' A 145  CYS  HB2', ' A 163  HIS  O  ', -0.477, (-11.781, -4.622, -20.32)), (' A 221  ASN  ND2', ' A 270  GLU  OE1', -0.476, (17.249, 27.362, -10.339)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.476, (-17.572, -11.604, -15.495)), (' A 277  ASN  H  ', ' A 277  ASN  ND2', -0.471, (10.972, 28.51, -21.646)), (' A 217  ARG  NH1', ' A 911  HOH  O  ', -0.469, (25.781, 19.945, -9.559)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.468, (-10.077, -19.995, -21.032)), (' A 189  GLN HE22', ' I   2  VAL  H  ', -0.467, (-21.297, 5.862, -20.431)), (' A  53  ASN  OD1', ' A  55  GLU  HG2', -0.463, (-27.456, -8.982, -8.562)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.462, (3.516, -13.052, -12.237)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.459, (12.789, 1.923, -22.782)), (' A  72  ASN  N  ', ' A  72  ASN HD22', -0.436, (-6.101, -23.18, -31.608)), (' A  85  CYS  O  ', ' A 164  HIS  HE1', -0.433, (-14.559, -7.225, -13.936)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.423, (-29.213, -14.181, -11.93)), (' A 152  ILE HG12', ' A 157  VAL HG22', -0.422, (6.21, -11.055, -16.584)), (' A 136  ILE HG13', ' A 172  HIS  HB2', -0.421, (-6.522, 3.693, -19.532)), (' A  80  HIS  HA ', ' A  88  ARG  O  ', -0.419, (-15.448, -19.204, -12.71)), (' A  72  ASN  H  ', ' A  72  ASN  ND2', -0.407, (-5.784, -23.412, -32.301)), (' A 106  ILE HG13', ' A 110  GLN  OE1', -0.401, (2.285, -0.075, -8.534)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.4, (-14.354, 9.86, -18.796))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
