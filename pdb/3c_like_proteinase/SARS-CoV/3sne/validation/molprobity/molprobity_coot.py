# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.012240209345889059, (-6.513999999999999, 28.958, -13.321))]
data['omega'] = []
data['rota'] = [('A', '  49 ', 'MET', 0.0, (31.702000000000012, 38.083, -6.376)), ('A', '  53 ', 'ASN', 0.15197052713728637, (34.077000000000005, 34.10200000000001, -14.301000000000002)), ('A', '  59 ', 'ILE', 0.21341693829364253, (34.123000000000005, 23.534000000000002, -14.283)), ('A', '  65 ', 'SER', 0.22331642929202766, (29.665999999999997, 20.192, -4.615)), ('A', '  67 ', 'LEU', 0.08741726965833727, (23.735, 20.255, -1.251)), ('A', '  93 ', 'THR', 0.2503427986897571, (13.617999999999999, 12.589, -6.947)), ('A', ' 100 ', 'LYS', 0.012020176911420597, (0.9630000000000005, 22.519999999999996, -13.637000000000002)), ('A', ' 111 ', 'THR', 0.014801034720973204, (2.4890000000000008, 42.624, -12.241)), ('A', ' 121 ', 'SER', 0.18113356134948932, (11.694, 28.325, 4.013)), ('A', ' 128 ', 'CYS', 0.1408519872983926, (4.838, 43.628, -7.153)), ('A', ' 153 ', 'ASP', 0.0018815040605767463, (-4.023, 31.558000000000003, -14.318000000000001)), ('A', ' 175 ', 'THR', 0.05847714492119849, (15.803, 37.145, -13.905)), ('A', ' 177 ', 'LEU', 0.14439757842242298, (13.419000000000002, 31.365000000000006, -15.289000000000001)), ('A', ' 192 ', 'GLN', 0.08626339978312543, (25.525000000000006, 49.523, -11.303)), ('A', ' 232 ', 'LEU', 0.13812095040682984, (2.6900000000000004, 66.435, -24.21)), ('A', ' 235 ', 'MET', 0.20697525687297594, (6.083000000000002, 63.842, -20.626)), ('A', ' 236 ', 'LYS', 0.2982212646094928, (6.323, 66.808, -18.258)), ('A', ' 262 ', 'LEU', 0.0, (-9.885999999999997, 59.793, -23.794)), ('A', ' 272 ', 'LEU', 0.0, (-1.685999999999999, 65.995, -12.724)), ('A', ' 274 ', 'ASN', 0.12517280211693121, (-4.2490000000000006, 70.693, -10.085000000000003)), ('A', ' 284 ', 'SER', 0.04978913533027283, (-4.887000000000001, 56.853, -1.626)), ('A', ' 301 ', 'SER', 0.18867344947484688, (-17.038, 43.511, -9.353))]
data['cbeta'] = []
data['probe'] = [(' A  49 AMET  CE ', ' A  49 AMET  HA ', -1.082, (30.888, 37.327, -8.195)), (' A 175  THR HG22', ' A 176  ASP  O  ', -0.927, (15.079, 34.233, -15.082)), (' A 159  PHE  HB3', ' A 177  LEU HD13', -0.921, (9.024, 31.336, -12.951)), (' A  49 AMET  HA ', ' A  49 AMET  HE3', -0.918, (31.13, 36.878, -8.087)), (' A 175  THR  CG2', ' A 176  ASP  O  ', -0.903, (15.431, 34.223, -15.485)), (' A  49 AMET  HA ', ' A  49 AMET  HE2', -0.888, (30.333, 37.933, -7.664)), (' A  49 AMET  SD ', ' H   4  LEU HD12', -0.786, (28.26, 37.932, -6.634)), (' A  49 AMET  CA ', ' A  49 AMET  HE2', -0.732, (31.068, 38.498, -7.371)), (' A 111  THR HG21', ' A 295  ASP  OD2', -0.732, (-1.758, 43.319, -11.549)), (' A 159  PHE  HB3', ' A 177  LEU  CD1', -0.719, (9.751, 31.573, -13.077)), (' A 159  PHE  CB ', ' A 177  LEU HD13', -0.719, (9.129, 30.468, -13.494)), (' A  49 AMET  SD ', ' H   4  LEU  CD1', -0.695, (28.13, 37.799, -7.143)), (' A  85  CYS  O  ', ' A 164  HIS  HE1', -0.637, (20.486, 33.817, -12.246)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.628, (20.459, 27.184, 3.385)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.598, (-5.396, 28.507, -15.349)), (' A 235  MET  HE1', ' A 241  PRO  HB3', -0.595, (4.594, 59.544, -25.136)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.588, (6.671, 36.513, -7.894)), (' A  63  ASN  OD1', ' A  80  HIS  HD2', -0.587, (26.785, 17.433, -11.952)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.572, (-5.555, 26.591, -13.884)), (' A 175  THR  CG2', ' A 176  ASP  N  ', -0.567, (15.817, 35.76, -15.04)), (' A 165  MET  HB3', ' H   4  LEU HD23', -0.55, (22.728, 40.252, -7.437)), (' A 207  TRP  CD2', ' A 288  GLU  HB3', -0.527, (-4.409, 53.954, -8.305)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.52, (18.255, 32.354, -15.409)), (' A 213  ILE  HA ', ' A 304  THR HG23', -0.518, (-18.356, 50.995, -11.748)), (' A  34  ASP  OD1', ' A  90  LYS  NZ ', -0.518, (14.754, 16.402, -15.273)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.51, (-4.112, 48.074, -25.644)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.498, (23.88, 32.702, -14.849)), (' A  53  ASN HD22', ' A  56  ASP  H  ', -0.486, (34.542, 30.894, -15.978)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.483, (15.962, 36.946, 1.977)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.468, (4.179, 49.11, -14.855)), (' A 165  MET  CB ', ' H   4  LEU HD23', -0.468, (22.784, 40.77, -7.415)), (' A 153  ASP  O  ', ' A 154  TYR  CB ', -0.459, (-5.64, 28.812, -14.823)), (' A   7  ALA  HA ', ' A 127  GLN  NE2', -0.445, (-0.244, 39.525, -5.844)), (' A 168  PRO  HG3', ' H   1  GLU  O  ', -0.438, (25.088, 49.949, -6.217)), (' A  61  LYS  HE2', ' A1073  HOH  O  ', -0.435, (34.132, 26.658, -8.166)), (' A 175  THR HG23', ' A 176  ASP  N  ', -0.43, (15.792, 35.509, -15.304)), (' A 189  GLN  HG2', ' H   2  SER  O  ', -0.424, (27.462, 42.988, -4.801)), (' A 207  TRP  CE2', ' A 288  GLU  HB3', -0.422, (-4.12, 53.966, -7.519)), (' A  55  GLU  HB2', ' A1088  HOH  O  ', -0.42, (31.971, 31.866, -18.575)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.419, (-7.967, 54.811, -24.327)), (' A 175  THR HG23', ' A 176  ASP  O  ', -0.418, (15.993, 34.516, -15.581)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.414, (21.462, 49.918, -7.398)), (' A 169  THR  HB ', ' A 171  VAL HG22', -0.411, (17.217, 50.791, -6.211)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.402, (20.556, 27.632, 2.914))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
