# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.019388802854312236, (100.105, -11.868, 37.171)), ('B', ' 187 ', 'ASP', 0.02217803140464905, (70.546, -27.288999999999998, 40.196)), ('D', '   6 ', 'GLN', 0.0029621472368577704, (81.05599999999997, -26.468999999999998, 39.556))]
data['omega'] = []
data['rota'] = [('A', '  22 ', 'CYS', 0.04881918721366674, (95.13899999999998, 13.502, 11.425)), ('A', '  30 ', 'LEU', 0.003396289599511704, (97.563, 3.2149999999999985, 22.842)), ('A', '  50 ', 'LEU', 0.06255050179606086, (102.317, 4.376, -1.732)), ('A', '  59 ', 'ILE', 0.10207462284150276, (107.97799999999998, 18.042, 9.615)), ('A', '  77 ', 'VAL', 0.003150532575091347, (98.93, 16.762, 22.575)), ('A', ' 106 ', 'ILE', 0.02213574601003046, (107.41699999999996, -11.595, 20.632)), ('A', ' 189 ', 'GLN', 0.16014232650612983, (101.182, 0.515, 0.097)), ('A', ' 213 ', 'ILE', 0.01113561812093986, (96.393, -33.739, 30.231)), ('A', ' 228 ', 'ASN', 0.27923262091857787, (116.42999999999999, -36.218, 12.793)), ('A', ' 240 ', 'GLU', 0.2705475236541758, (108.723, -26.37599999999999, 11.508)), ('A', ' 268 ', 'LEU', 0.027703600651288088, (103.03899999999999, -37.222, 16.244)), ('B', '  30 ', 'LEU', 0.0839392229350731, (77.744, -10.581, 39.247)), ('B', '  64 ', 'HIS', 0.0014157982098438801, (75.827, -12.702999999999996, 57.703)), ('B', '  77 ', 'VAL', 0.14140893254544232, (75.103, -8.029, 52.425)), ('B', '  93 ', 'THR', 0.16402319012063102, (77.63899999999997, -0.357, 48.301)), ('B', ' 104 ', 'VAL', 0.21021954409612442, (68.032, -11.205, 28.02)), ('B', ' 121 ', 'SER', 0.20552125764893733, (88.818, -13.165, 39.338)), ('B', ' 136 ', 'ILE', 0.02033163992218866, (77.324, -25.146000000000004, 25.744)), ('B', ' 142 ', 'ASN', 0.013816776348730988, (85.136, -26.216, 38.184000000000005)), ('B', ' 155 ', 'ASP', 0.02306996839479954, (78.02099999999997, 0.22699999999999995, 25.238)), ('B', ' 178 ', 'GLU', 0.0645417214815651, (66.578, -14.569, 35.947)), ('B', ' 213 ', 'ILE', 0.009955484711099416, (82.42, -12.403, 0.709)), ('B', ' 238 ', 'ASN', 0.05243038953959329, (72.114, -34.191, 11.773)), ('B', ' 245 ', 'ASP', 0.13643518193855872, (62.51899999999997, -17.581, 8.328000000000001)), ('B', ' 247 ', 'VAL', 0.0537538791650384, (66.499, -17.988, 4.545)), ('B', ' 268 ', 'LEU', 0.055703493340709294, (76.293, -27.099, 1.546)), ('D', '   2 ', 'SER', 0.05359990173019469, (76.383, -37.251, 37.196))]
data['cbeta'] = []
data['probe'] = [(' B  20  VAL HG22', ' B  68  VAL HG12', -1.037, (78.262, -12.189, 47.432)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.879, (87.607, -13.764, 11.707)), (' A 226  THR HG22', ' A 228  ASN  H  ', -0.868, (117.314, -37.261, 14.824)), (' B  56  ASP  CG ', ' B  60  ARG HH12', -0.844, (66.334, -26.945, 54.747)), (' B 165  MET  HB3', ' D   5  LEU HD23', -0.834, (75.408, -27.706, 38.451)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.828, (85.618, -26.003, 2.387)), (' A 243  THR  H  ', ' A 246  HIS  HD2', -0.825, (113.161, -27.287, 17.467)), (' B 145  CYS  HB2', ' D   6  GLN  O  ', -0.765, (80.516, -23.785, 39.344)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.762, (112.809, -26.706, 17.313)), (' B 209  TYR  O  ', ' B 213  ILE HG22', -0.75, (81.113, -14.497, 2.232)), (' B 222  ARG  HG2', ' B 222  ARG HH11', -0.745, (76.653, -28.156, -11.959)), (' C   1  THR HG22', ' C   2  SER  H  ', -0.742, (98.007, -5.074, -4.61)), (' B  64  HIS  CD2', ' B  64  HIS  H  ', -0.742, (73.699, -11.766, 57.856)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.734, (71.405, -18.774, 45.096)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.725, (69.561, -30.402, 35.312)), (' B 217  ARG  HG3', ' B 220  LEU HD12', -0.716, (81.202, -19.057, -5.89)), (' A 210  ALA  HA ', ' A 213  ILE HG22', -0.707, (96.591, -30.876, 27.608)), (' B 188  ARG  NE ', ' B 190  THR HG21', -0.702, (68.678, -35.464, 42.063)), (' A 102  LYS  HG3', ' A 156  CYS  SG ', -0.7, (104.856, -6.139, 31.876)), (' B 185  PHE  HA ', ' B 192  GLN  NE2', -0.675, (69.457, -30.847, 34.173)), (' B 118  TYR  OH ', ' B 141  LEU  HB2', -0.671, (87.753, -23.475, 34.619)), (' B 212  VAL  HA ', ' B 216  ASP  O  ', -0.664, (83.152, -17.095, -1.387)), (' B  68  VAL HG23', ' B  75  LEU  HB3', -0.661, (80.016, -8.317, 49.026)), (' A 165  MET  HE2', ' C   3  ALA  HB1', -0.659, (100.76, -3.502, 2.876)), (' A 226  THR HG22', ' A 228  ASN  N  ', -0.653, (116.466, -36.982, 14.439)), (' B 142  ASN  HA ', ' D   6  GLN  HB3', -0.65, (83.556, -26.161, 37.596)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.649, (79.17, -25.372, 31.779)), (' B 131  ARG HH22', ' B 289  ASP  CG ', -0.643, (77.531, -25.506, 15.307)), (' A  51  ASN HD22', ' A 188  ARG  NH1', -0.635, (107.111, 4.892, 0.595)), (' B  19  GLN  NE2', ' B 119  ASN HD22', -0.634, (87.366, -17.626, 45.589)), (' A 222  ARG  HG2', ' A 222  ARG HH11', -0.63, (107.04, -49.537, 23.751)), (' A 145  CYS  HB2', ' C   6  GLN  O  ', -0.63, (94.592, 1.227, 9.748)), (' B  47  GLU  CD ', ' B  47  GLU  H  ', -0.613, (77.307, -32.282, 52.192)), (' B 222  ARG  HG2', ' B 222  ARG  NH1', -0.611, (76.194, -28.403, -11.969)), (' A 210  ALA  O  ', ' A 213  ILE HG22', -0.608, (95.928, -31.974, 27.56)), (' A 226  THR HG23', ' A 346  HOH  O  ', -0.607, (117.28, -37.448, 17.718)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.607, (92.236, -3.958, 10.744)), (' B  49  MET  HE1', ' D   5  LEU HD12', -0.603, (74.041, -27.875, 42.65)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.602, (101.442, -18.995, 9.858)), (' A 356  HOH  O  ', ' B 286  ILE HD13', -0.601, (85.995, -29.875, 12.879)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.6, (72.635, -32.737, 0.769)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.598, (87.219, -13.116, 11.709)), (' B  63  ASN  HB3', ' B  77  VAL  O  ', -0.593, (73.222, -8.867, 54.517)), (' B 127  GLN  HA ', ' B 127  GLN HE21', -0.592, (82.536, -15.207, 22.035)), (' A 126  TYR  CE2', ' B   6  MET  HE2', -0.591, (89.108, -10.64, 15.31)), (' A 243  THR  N  ', ' A 246  HIS  HD2', -0.587, (112.944, -27.459, 16.96)), (' A 198  THR  HA ', ' A 238  ASN  ND2', -0.586, (104.332, -24.811, 6.363)), (' B 185  PHE  HZ ', ' B 194  ALA  HB2', -0.583, (70.905, -30.486, 27.889)), (' B 131  ARG  NH2', ' B 289  ASP  OD2', -0.581, (78.165, -25.677, 16.33)), (' B 185  PHE  HA ', ' B 192  GLN HE21', -0.579, (68.919, -31.392, 34.149)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.578, (99.489, -18.082, 18.02)), (' B 189  GLN  OE1', ' D   4  VAL  HA ', -0.577, (78.386, -31.459, 40.261)), (' A  61  LYS  HE2', ' A 377  HOH  O  ', -0.576, (100.986, 15.947, 7.138)), (' B 131  ARG  HD2', ' B 197  ASP  OD1', -0.572, (75.962, -29.216, 19.61)), (' A 210  ALA  CA ', ' A 213  ILE HG22', -0.57, (96.787, -31.573, 27.371)), (' A  41  ALA  O  ', ' A  44  CYS  HB2', -0.568, (99.21, 7.474, 7.327)), (' A 276  MET  HE1', ' A 281  ILE  N  ', -0.566, (91.476, -35.642, 17.067)), (' A 171  VAL HG12', ' A 172  HIS  N  ', -0.565, (99.156, -11.367, 7.57)), (' A 154  TYR  HA ', ' A 408  HOH  O  ', -0.565, (98.889, -13.389, 36.854)), (' A 188  ARG  HB3', ' A 188  ARG  NH1', -0.563, (105.94, 3.147, 2.115)), (' B   4  ARG  N  ', ' B 299  GLN HE22', -0.561, (87.454, -13.975, 11.697)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.56, (78.729, -24.805, 32.181)), (' B 165  MET  HB3', ' D   5  LEU  HA ', -0.559, (76.998, -27.499, 38.053)), (' A 198  THR  HA ', ' A 238  ASN HD21', -0.557, (104.084, -24.147, 6.695)), (' A 164  HIS  CD2', ' A 175  THR HG23', -0.554, (103.795, -1.545, 12.539)), (' A 276  MET  O  ', ' A 279  ARG  HB2', -0.554, (91.195, -41.09, 14.818)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.551, (69.148, -17.853, 37.498)), (' B 213  ILE  C  ', ' B 213  ILE HD13', -0.549, (84.032, -11.226, 1.574)), (' A 222  ARG  HG2', ' A 222  ARG  NH1', -0.545, (107.642, -49.467, 24.154)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.545, (93.623, -36.836, 17.52)), (' B  49  MET  HE1', ' D   5  LEU  CD1', -0.544, (73.912, -28.119, 42.2)), (' C  10  ARG  O  ', ' C  11  LYS  HB2', -0.544, (84.113, 12.307, 9.053)), (' A   6  MET  HG3', ' A 299  GLN  CG ', -0.542, (91.47, -21.411, 27.66)), (' B  68  VAL HG23', ' B  75  LEU  CB ', -0.541, (80.371, -7.711, 49.101)), (' B 221  ASN  OD1', ' B 223  PHE  HB2', -0.54, (75.033, -27.45, -7.261)), (' A 276  MET  HE1', ' A 281  ILE  H  ', -0.539, (91.525, -35.108, 16.945)), (' B  56  ASP  O  ', ' B  60  ARG  NH1', -0.537, (67.035, -25.544, 55.301)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.537, (89.39, -10.613, 15.957)), (' A 210  ALA  HA ', ' A 213  ILE  CG2', -0.536, (96.486, -30.904, 28.373)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.536, (79.611, -3.477, 42.964)), (' B  41  ALA  HB2', ' D   5  LEU HD13', -0.534, (74.261, -24.925, 42.21)), (' B  49  MET  HE2', ' B 189  GLN  HG3', -0.532, (75.808, -30.524, 43.031)), (' A 189  GLN  HG2', ' C   3  ALA  O  ', -0.531, (98.696, -1.235, -0.015)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.53, (90.189, -4.4, 27.115)), (' B 188  ARG  CZ ', ' B 190  THR HG21', -0.528, (68.485, -35.952, 42.041)), (' B 188  ARG  NE ', ' B 190  THR  CG2', -0.527, (69.838, -35.23, 41.803)), (' A  22  CYS  HB2', ' A  42  VAL HG22', -0.526, (96.569, 11.125, 11.235)), (' C  11  LYS  HA ', ' C  14  HOH  O  ', -0.525, (85.619, 13.951, 5.496)), (' A  48  ASP  O  ', ' A  52  PRO  HG3', -0.525, (102.069, 7.917, 1.497)), (' C   1  THR HG22', ' C   2  SER  N  ', -0.519, (98.313, -5.799, -4.392)), (' B 167  LEU HD21', ' B 185  PHE  CE1', -0.517, (72.296, -31.161, 30.032)), (' B 280  THR HG22', ' B 285  THR HG22', -0.514, (91.248, -27.945, 5.848)), (' B 100  LYS  HE3', ' B 379  HOH  O  ', -0.513, (74.616, 6.023, 31.882)), (' B 262  LEU HD13', ' B 358  HOH  O  ', -0.513, (64.92, -23.211, -4.603)), (' A 131  ARG HH22', ' A 289  ASP  CG ', -0.512, (100.052, -22.574, 13.379)), (' A  50  LEU  O  ', ' A 188  ARG  HB2', -0.51, (104.609, 2.788, -0.049)), (' A 165  MET  HB2', ' C   4  VAL  O  ', -0.509, (97.95, -2.787, 4.94)), (' B 239  TYR  OH ', ' B 287  LEU HD12', -0.509, (78.17, -29.517, 7.862)), (' B  64  HIS  CD2', ' B  64  HIS  N  ', -0.507, (74.286, -11.736, 57.953)), (' B 176  ASP  HB2', ' B 309  HOH  O  ', -0.507, (68.724, -14.16, 31.058)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.501, (97.519, -7.041, 9.977)), (' B  19  GLN HE22', ' B 119  ASN HD22', -0.5, (88.03, -17.469, 46.095)), (' A   6  MET  HG3', ' A 299  GLN  CD ', -0.5, (91.186, -21.567, 27.16)), (' B 193  ALA  HB2', ' B 387  HOH  O  ', -0.499, (73.893, -37.762, 29.736)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.497, (97.244, -7.137, 9.576)), (' A 277  ASN  N  ', ' A 277  ASN HD22', -0.495, (92.854, -41.986, 10.45)), (' A  47  GLU  N  ', ' A  47  GLU  OE1', -0.494, (96.607, 11.402, -1.084)), (' A 213  ILE  O  ', ' A 213  ILE HD13', -0.493, (94.31, -32.692, 31.807)), (' A 168  PRO  HB3', ' C   1  THR  HB ', -0.493, (97.881, -8.483, -3.318)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.493, (106.429, 1.237, 15.748)), (' B 186  VAL  H  ', ' B 192  GLN  NE2', -0.491, (69.106, -30.809, 35.484)), (' A 171  VAL  CG1', ' A 172  HIS  N  ', -0.491, (98.645, -11.658, 7.315)), (' B  76  ARG  O  ', ' B  91  VAL  HA ', -0.49, (75.95, -5.392, 51.023)), (' A 153  ASP  O  ', ' A 155  ASP  N  ', -0.489, (100.685, -9.776, 36.242)), (' A 141  LEU  N  ', ' A 141  LEU HD12', -0.488, (88.733, -5.715, 9.468)), (' A 191  ALA  HA ', ' C   2  SER  HA ', -0.487, (101.46, -4.899, -3.094)), (' A 132  PRO  HD2', ' A 197  ASP  OD2', -0.483, (104.161, -19.707, 9.628)), (' A 211  ALA  HA ', ' A 282  LEU  HG ', -0.483, (93.291, -32.907, 24.023)), (' A 135  THR  HB ', ' A 171  VAL  CG1', -0.481, (100.755, -12.287, 7.922)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.481, (102.199, 9.297, 9.545)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.481, (103.235, 8.141, 13.29)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.481, (79.857, -3.711, 42.577)), (' B  77  VAL  HA ', ' B  90  LYS  O  ', -0.48, (74.417, -7.376, 51.098)), (' B 217  ARG  HG2', ' B 217  ARG  O  ', -0.48, (83.111, -20.113, -5.958)), (' A 228  ASN  O  ', ' A 232  LEU  HG ', -0.478, (114.645, -36.383, 9.814)), (' A 131  ARG  CD ', ' A 197  ASP  OD1', -0.475, (101.074, -19.038, 9.7)), (' A  90  LYS  CE ', ' A 322  HOH  O  ', -0.475, (107.078, 17.031, 25.484)), (' A 276  MET  CE ', ' A 281  ILE HG13', -0.472, (92.917, -36.686, 17.157)), (' D   1  THR  O  ', ' D   1  THR HG22', -0.472, (75.843, -40.746, 36.017)), (' B  40  ARG  CZ ', ' B  54  TYR  CD1', -0.472, (67.586, -25.069, 44.072)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.471, (106.39, -3.756, 4.235)), (' A 126  TYR  CD1', ' B   4  ARG  HG2', -0.468, (91.491, -13.222, 15.938)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.467, (69.01, -22.149, 33.877)), (' A  51  ASN  N  ', ' A  52  PRO  HD3', -0.466, (103.9, 5.397, -0.265)), (' A   8  PHE  HE1', ' A 305  PHE  CZ ', -0.466, (96.922, -14.717, 31.323)), (' B 217  ARG  HG3', ' B 220  LEU  CD1', -0.464, (81.205, -19.097, -5.137)), (' A 210  ALA  C  ', ' A 213  ILE HG22', -0.461, (96.398, -31.614, 27.816)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.46, (107.759, -39.656, 10.765)), (' B  68  VAL  CG2', ' B  75  LEU  HB3', -0.459, (79.493, -8.245, 49.284)), (' B 169  THR  OG1', ' B 171  VAL HG22', -0.457, (77.027, -32.479, 27.68)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.456, (103.989, -20.023, 16.055)), (' A 290  GLU  OE1', ' B   4  ARG  NH2', -0.456, (95.293, -18.18, 15.406)), (' B 269  LYS  O  ', ' B 273  GLN  HG3', -0.456, (75.594, -33.171, 0.239)), (' A 165  MET  HE2', ' C   3  ALA  CB ', -0.454, (100.71, -3.308, 2.714)), (' B  13  VAL HG21', ' B 150  PHE  CE2', -0.453, (81.044, -9.973, 29.597)), (' A  99  PRO  O  ', ' A 101  TYR  HD2', -0.453, (100.848, -0.34, 32.492)), (' A 136  ILE  O  ', ' A 136  ILE HG13', -0.452, (97.95, -11.301, 11.325)), (' B  49  MET  CE ', ' D   5  LEU HD12', -0.451, (74.731, -28.429, 43.085)), (' A   4  ARG  NH1', ' B 137  LYS  O  ', -0.45, (82.747, -24.648, 23.499)), (' B  49  MET  HB3', ' B 189  GLN  HG3', -0.45, (75.488, -31.781, 44.043)), (' A 356  HOH  O  ', ' B 286  ILE HG21', -0.449, (86.191, -30.428, 12.466)), (' B 239  TYR  CZ ', ' B 272  LEU HD21', -0.448, (76.443, -29.937, 7.555)), (' B  17  MET  HE2', ' B 117  CYS  SG ', -0.448, (83.835, -14.02, 36.051)), (' A 213  ILE  C  ', ' A 213  ILE HD13', -0.447, (94.811, -32.441, 31.274)), (' A  39  PRO  HB3', ' A 164  HIS  CE1', -0.443, (101.711, 1.635, 12.363)), (' A 226  THR HG22', ' A 227  LEU  N  ', -0.441, (116.403, -37.18, 15.83)), (' B 127  GLN  HA ', ' B 127  GLN  NE2', -0.44, (82.021, -15.31, 22.03)), (' A 208  LEU HD11', ' A 268  LEU  HG ', -0.437, (101.679, -34.373, 17.211)), (' B 132  PRO  HD2', ' B 197  ASP  OD2', -0.434, (73.219, -28.523, 19.475)), (' B 166  GLU  HG3', ' B 172  HIS  CD2', -0.432, (81.256, -28.857, 32.023)), (' A  95  ASN  HA ', ' A  96  PRO  HD3', -0.431, (94.756, 9.018, 31.537)), (' B 231  ASN  O  ', ' B 235  MET  HG3', -0.431, (66.531, -32.508, 6.614)), (' B 188  ARG  HE ', ' B 190  THR  CG2', -0.43, (70.111, -35.509, 42.273)), (' B 186  VAL  N  ', ' B 192  GLN HE22', -0.429, (69.022, -29.967, 35.38)), (' A   6  MET  HB2', ' A 299  GLN HE21', -0.429, (92.596, -20.755, 26.363)), (' A 218  TRP  CD1', ' A 279  ARG  NH1', -0.429, (91.098, -41.482, 20.302)), (' A 114  VAL  O  ', ' A 125  VAL  HA ', -0.428, (91.016, -8.871, 20.587)), (' B 136  ILE HG23', ' B 172  HIS  HB2', -0.425, (78.349, -24.937, 28.821)), (' B  49  MET  CE ', ' B 189  GLN  HG3', -0.424, (75.231, -30.705, 43.273)), (' C   9  PHE  HE2', ' C  11  LYS  HG2', -0.423, (84.503, 11.531, 5.243)), (' A 111  THR HG22', ' A 129  ALA  CB ', -0.423, (99.862, -17.85, 18.03)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.422, (96.088, 8.118, 28.899)), (' A  49  MET  O  ', ' A 189  GLN  HB2', -0.422, (100.449, 2.813, 0.331)), (' A  32  LEU HD13', ' A 101  TYR  CE1', -0.421, (102.842, 1.111, 28.201)), (' B 207  TRP  CE2', ' B 288  GLU  HB3', -0.421, (83.036, -22.079, 9.944)), (' B 185  PHE  CA ', ' B 192  GLN  NE2', -0.421, (68.996, -30.283, 34.39)), (' A 201  THR HG23', ' A 239  TYR  HD2', -0.42, (105.7, -30.471, 14.124)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.419, (72.353, -22.281, 47.243)), (' B 113  SER  OG ', ' B 127  GLN  NE2', -0.417, (81.697, -13.3, 22.833)), (' B 161  TYR  CE1', ' B 174  GLY  HA3', -0.417, (74.334, -21.606, 31.571)), (' A 210  ALA  O  ', ' A 213  ILE  CG2', -0.416, (95.727, -31.652, 28.374)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.416, (75.193, -1.021, 22.351)), (' A 165  MET  HE3', ' C   5  LEU HD23', -0.415, (100.082, -0.586, 5.517)), (' A 207  TRP  CE2', ' A 288  GLU  HB2', -0.414, (95.123, -28.836, 18.981)), (' A 277  ASN  N  ', ' A 277  ASN  ND2', -0.414, (93.028, -42.222, 10.867)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.411, (88.806, -11.495, 38.958)), (' A  90  LYS  HD2', ' A 369  HOH  O  ', -0.408, (106.043, 12.54, 27.106)), (' B 131  ARG  CD ', ' B 197  ASP  OD1', -0.408, (75.727, -28.542, 19.838)), (' A  59  ILE  HA ', ' A  59  ILE HD13', -0.407, (108.923, 18.301, 11.035)), (' B  13  VAL HG21', ' B 150  PHE  CD2', -0.406, (80.676, -10.146, 29.795)), (' A 207  TRP  CD2', ' A 288  GLU  HB2', -0.402, (95.657, -28.603, 18.697)), (' B 210  ALA  HA ', ' B 213  ILE  CG2', -0.402, (81.452, -13.529, 3.964)), (' B 207  TRP  O  ', ' B 210  ALA  HB3', -0.402, (81.514, -17.556, 6.1)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.401, (65.269, -22.481, 9.315)), (' A 223  PHE  CD1', ' A 223  PHE  N  ', -0.401, (106.635, -47.021, 20.559)), (' A 148  VAL  HA ', ' A 161  TYR  O  ', -0.401, (99.142, -4.232, 19.234)), (' B 210  ALA  O  ', ' B 214  ASN  HB2', -0.4, (84.868, -14.947, 3.321)), (' A 277  ASN  C  ', ' A 279  ARG  H  ', -0.4, (89.837, -41.114, 13.218)), (' B 245  ASP  O  ', ' B 249  ILE HG13', -0.4, (65.095, -15.67, 8.913)), (' B  19  GLN  O  ', ' B  68  VAL  HA ', -0.4, (81.655, -12.329, 47.988))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
