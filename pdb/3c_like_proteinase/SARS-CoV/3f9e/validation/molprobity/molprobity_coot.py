# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 122 ', 'PRO', 0.038324524122541434, (-12.632, 23.917, -21.174)), ('A', ' 213 ', 'ILE', 0.042887750544608506, (-22.266, 8.904, 5.264)), ('A', ' 297 ', 'VAL', 0.08105382991449318, (-11.654, 10.561000000000003, -0.154))]
data['omega'] = []
data['rota'] = [('A', '   6 ', 'MET', 0.09154339575725218, (-14.260999999999997, 17.177, -8.058999999999996)), ('A', '  24 ', 'THR', 0.08279743070127327, (-19.307, 19.215, -40.521)), ('A', '  49 ', 'MET', 0.04076314149606005, (-16.307, 5.9700000000000015, -40.51)), ('A', '  87 ', 'LEU', 0.08111200048300699, (-3.995, 14.49, -37.42799999999998)), ('A', ' 171 ', 'VAL', 0.07134717541119202, (-16.601999999999997, 3.8810000000000007, -21.603999999999992)), ('A', ' 189 ', 'GLN', 0.1816922091922436, (-16.718, 2.470000000000001, -35.64)), ('A', ' 190 ', 'THR', 0.08594587385011399, (-17.338, -1.275, -35.309)), ('A', ' 196 ', 'THR', 0.07915866399139945, (-15.602, -3.470000000000001, -21.652)), ('A', ' 198 ', 'THR', 0.017581291045493413, (-18.138, -5.6930000000000005, -16.853)), ('A', ' 200 ', 'ILE', 0.09084220375807746, (-15.987, -2.668, -11.321999999999996)), ('A', ' 226 ', 'THR', 0.11616719277785853, (-17.617, -14.576, 2.174)), ('A', ' 244 ', 'GLN', 0.25317449941947273, (-8.306, -8.891, -0.6989999999999997)), ('A', ' 264 ', 'MET', 0.03264880098963926, (-21.49, -4.075, 2.793)), ('A', ' 268 ', 'LEU', 0.0068914977067550225, (-24.714, -5.271, -2.632999999999999)), ('A', ' 285 ', 'THR', 0.09798154594198248, (-31.509, 4.419, -9.728))]
data['cbeta'] = []
data['probe'] = [(' A  49  MET  HA ', ' A  49  MET  HE2', -0.791, (-14.214, 5.792, -40.034)), (' A  38  CYS  HA ', ' A 162  MET  HE1', -0.665, (-5.74, 16.115, -31.258)), (' A 131  ARG HH22', ' A 200  ILE HD13', -0.61, (-12.067, -2.54, -11.204)), (' A 200  ILE HG23', ' A 289  ASP  HB2', -0.575, (-17.415, 0.188, -11.5)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.56, (-14.305, 6.552, -40.001)), (' A 145  CYS  HA ', ' A 163  HIS  CD2', -0.546, (-13.272, 12.579, -26.735)), (' A 296  VAL  C  ', ' A 298  ARG  H  ', -0.508, (-13.743, 11.422, -1.426)), (' A 142  ASN  HB3', ' A 331  HOH  O  ', -0.496, (-22.231, 12.297, -23.479)), (' A 213  ILE HG23', ' A 257  THR HG22', -0.489, (-19.906, 6.213, 6.311)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.481, (-0.804, 27.624, -29.787)), (' A 297  VAL  O  ', ' A 297  VAL HG12', -0.479, (-9.855, 12.151, 0.298)), (' A 245  ASP  O  ', ' A 249  ILE HG12', -0.476, (-7.373, -2.414, -2.074)), (' A 131  ARG  HD3', ' A 137  LYS  HD2', -0.475, (-13.41, 1.935, -15.141)), (' A  55  GLU  O  ', ' A  59  ILE HG12', -0.455, (-4.087, 9.585, -49.063)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.448, (-4.833, 24.628, -34.593)), (' A  19  GLN  CD ', ' A 120  GLY  HA3', -0.443, (-15.013, 23.575, -29.203)), (' A 233  VAL HG21', ' A 269  LYS  HE2', -0.441, (-24.397, -13.295, -3.645)), (' A  40  ARG  HA ', ' A  87  LEU  HB2', -0.44, (-6.489, 13.578, -37.769)), (' A 193  ALA  O  ', ' A 196  THR HG22', -0.436, (-17.305, -3.614, -24.155)), (' A 148  VAL HG12', ' A 162  MET  HG3', -0.436, (-5.66, 14.768, -26.965)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.43, (-14.931, -10.685, -6.101)), (' A 228  ASN  HB3', ' A 326  HOH  O  ', -0.427, (-17.159, -19.736, -2.409)), (' A  28  ASN  OD1', ' A 120  GLY  HA2', -0.421, (-13.552, 21.471, -27.266)), (' A 202  LEU HD13', ' A 246  HIS  HB3', -0.413, (-11.656, -3.137, -3.906)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.407, (-25.114, -12.396, -3.725)), (' A  10  SER  HA ', ' A 125  VAL HG23', -0.406, (-8.367, 22.087, -15.879)), (' A 135  THR HG21', ' A 196  THR  OG1', -0.403, (-13.455, -0.557, -22.642)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.402, (-10.204, 15.73, -32.649))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
