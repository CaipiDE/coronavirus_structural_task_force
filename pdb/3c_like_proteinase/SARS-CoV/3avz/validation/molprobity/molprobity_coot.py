# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.1949913830589734, (6.339000000000001, -34.49, 1.992)), ('A', '   5 ', 'LYS', 0.06203237559370919, (2.867, -35.358, 3.221999999999999)), ('A', '  24 ', 'THR', 0.006638333442349781, (-29.370999999999988, -51.688, -3.845)), ('A', '  43 ', 'ILE', 0.0853170252887402, (-29.236999999999988, -51.566, 5.259)), ('A', '  53 ', 'ASN', 0.29958537456543394, (-34.503000000000014, -46.582, 13.562)), ('A', '  59 ', 'ILE', 0.0025727091979456038, (-34.39599999999999, -57.43100000000001, 12.351)), ('A', '  60 ', 'ARG', 0.04085006606539626, (-36.16999999999999, -57.344, 9.077)), ('A', '  65 ', 'SER', 0.05068889958820006, (-29.649999999999988, -60.238, 3.5439999999999996)), ('A', '  67 ', 'LEU', 0.09530585627769946, (-23.735999999999994, -60.40100000000001, 0.165)), ('A', '  72 ', 'ASN', 0.17474168234205134, (-14.338999999999995, -62.70900000000002, -6.8759999999999994)), ('A', '  75 ', 'LEU', 0.0, (-18.453, -65.27, 1.449)), ('A', '  78 ', 'ILE', 0.0029302762272691743, (-23.75, -66.52900000000001, 9.369)), ('A', '  81 ', 'SER', 0.003992372142789646, (-24.526999999999994, -58.076, 15.298999999999998)), ('A', '  82 ', 'MET', 0.08736551863950438, (-24.61199999999999, -54.37200000000001, 15.636)), ('A', '  87 ', 'LEU', 0.03588996616082218, (-22.435999999999993, -53.771, 11.58)), ('A', '  90 ', 'LYS', 0.25010495478638256, (-19.657, -63.106, 10.917999999999997)), ('A', ' 100 ', 'LYS', 0.28262781812225735, (-1.68, -57.969, 13.615)), ('A', ' 104 ', 'VAL', 0.16607438226660973, (-7.813, -47.254000000000005, 18.485)), ('A', ' 106 ', 'ILE', 0.19780081556298396, (-7.6919999999999975, -41.278, 17.367)), ('A', ' 123 ', 'SER', 0.10506411625549618, (-8.458, -46.829, -5.1579999999999995)), ('A', ' 128 ', 'CYS', 0.24449662248794143, (-5.366, -37.09, 6.998999999999999)), ('A', ' 169 ', 'THR', 0.08912056289825732, (-18.80899999999999, -28.322, 3.6409999999999996)), ('A', ' 180 ', 'LYS', 0.08989928637276708, (-18.623, -44.64100000000001, 17.869)), ('A', ' 187 ', 'ASP', 0.28725988179081774, (-25.954999999999995, -41.493, 10.878999999999996)), ('A', ' 189 ', 'GLN', 0.18414548509486145, (-29.532, -38.003, 6.383)), ('A', ' 213 ', 'ILE', 0.2326344655684002, (15.627999999999993, -29.186, 9.779)), ('A', ' 216 ', 'ASP', 0.0, (14.796999999999995, -22.718, 5.351)), ('A', ' 223 ', 'PHE', 0.0019498204956810395, (13.184000000000001, -12.733, 20.22)), ('A', ' 249 ', 'ILE', 0.01326815729729779, (6.351, -32.854, 23.404)), ('A', ' 262 ', 'LEU', 0.0, (9.238, -20.243000000000002, 22.939)), ('A', ' 272 ', 'LEU', 0.04786632725596233, (0.9950000000000006, -14.613000000000001, 12.368999999999998)), ('A', ' 279 ', 'ARG', 0.0, (7.896999999999998, -16.322, 1.035)), ('A', ' 280 ', 'THR', 0.05113796261432882, (7.7909999999999995, -20.079, 1.208)), ('A', ' 285 ', 'THR', 0.073808547812899, (2.261999999999999, -20.498000000000005, 1.185)), ('A', ' 294 ', 'PHE', 0.27624319415815957, (5.816000000000001, -37.59000000000002, 15.667999999999997)), ('A', ' 298 ', 'ARG', 0.15221130178353165, (9.631, -40.205000000000005, 11.535)), ('A', ' 299 ', 'GLN', 0.1642194184615809, (10.438, -38.251, 8.453999999999999)), ('B', '   2 ', 'SER', 0.23020571713151206, (-27.965999999999998, -32.216, 5.131)), ('B', '   4 ', 'VAL', 0.1273095615495185, (-24.706999999999994, -37.249, 2.4689999999999994))]
data['cbeta'] = [('A', ' 290 ', 'GLU', ' ', 0.29624508375589853, (-2.254999999999999, -31.733, 8.247))]
data['probe'] = [(' A 145  CYS  SG ', ' B   6  HSV  HC ', -1.599, (-19.796, -43.767, 2.533)), (' A 145  CYS  SG ', ' B   6  HSV  C  ', -1.265, (-20.502, -44.306, 1.464)), (' A 159  PHE  HB3', ' A 177  LEU  CD1', -1.135, (-10.179, -50.172, 11.7)), (' A 262  LEU  CD2', ' A 262  LEU  H  ', -1.135, (11.073, -22.28, 24.029)), (' A 277  ASN  HB2', ' A 279  ARG  NH1', -1.111, (7.726, -11.325, 2.465)), (' A 277  ASN  HB2', ' A 279  ARG HH12', -1.094, (6.977, -10.77, 3.233)), (' A 226  THR HG23', ' A 229  ASP  H  ', -1.081, (3.566, -14.755, 27.254)), (' A 226  THR HG22', ' A 229  ASP  HB2', -1.052, (4.454, -14.289, 26.809)), (' A 226  THR HG22', ' A 229  ASP  CB ', -1.0, (4.167, -13.299, 26.029)), (' A 286  ILE  O  ', ' A 286  ILE HD12', -0.973, (0.825, -23.518, 5.048)), (' A 262  LEU  N  ', ' A 262  LEU HD22', -0.968, (9.956, -22.492, 23.267)), (' A 262  LEU  H  ', ' A 262  LEU HD22', -0.94, (10.163, -22.477, 24.21)), (' A 145  CYS  CB ', ' B   6  HSV  HC ', -0.932, (-19.6, -45.202, 1.987)), (' A 159  PHE  CB ', ' A 177  LEU  CD1', -0.912, (-9.383, -49.997, 11.995)), (' A  62  SER  O  ', ' A  65  SER  HB2', -0.898, (-29.737, -61.077, 5.83)), (' A 277  ASN  CB ', ' A 279  ARG  NH1', -0.871, (7.165, -10.861, 2.137)), (' A 262  LEU  CD2', ' A 262  LEU  N  ', -0.868, (10.205, -21.777, 23.337)), (' A 277  ASN  CB ', ' A 279  ARG HH12', -0.868, (6.966, -10.888, 2.982)), (' A 226  THR HG22', ' A 229  ASP  CG ', -0.866, (3.958, -12.799, 26.556)), (' A 262  LEU  H  ', ' A 262  LEU HD23', -0.857, (11.05, -21.808, 24.239)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.853, (6.287, -18.697, 2.536)), (' A 159  PHE  HB3', ' A 177  LEU HD11', -0.833, (-10.257, -49.059, 11.515)), (' A 226  THR HG22', ' A 229  ASP  OD2', -0.823, (4.472, -12.561, 27.049)), (' A 159  PHE  HB3', ' A 177  LEU HD12', -0.823, (-9.945, -48.679, 12.753)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.786, (-2.763, -51.399, 1.408)), (' A 226  THR  CG2', ' A 229  ASP  H  ', -0.783, (3.319, -14.299, 27.021)), (' A 226  THR  CG2', ' A 229  ASP  HB2', -0.771, (4.524, -14.478, 26.63)), (' A 286  ILE  C  ', ' A 286  ILE HD12', -0.769, (0.601, -22.506, 4.837)), (' A 226  THR  CG2', ' A 229  ASP  CB ', -0.759, (3.739, -14.176, 26.993)), (' A 226  THR HG23', ' A 229  ASP  N  ', -0.742, (2.673, -14.346, 27.059)), (' A 226  THR  CG2', ' A 229  ASP  CG ', -0.739, (4.019, -13.532, 27.388)), (' A 226  THR  CG2', ' A 229  ASP  OD2', -0.724, (4.907, -13.375, 27.574)), (' A  95  ASN  OD1', ' A  97  LYS  N  ', -0.718, (-6.058, -62.977, 4.732)), (' A 191  ALA  HA ', ' B   2  SER  HA ', -0.71, (-28.787, -31.577, 6.917)), (' A 276  MET  SD ', ' A 285  THR  O  ', -0.684, (3.014, -18.845, 3.047)), (' A 294  PHE  C  ', ' A 294  PHE  CD2', -0.679, (5.583, -38.845, 13.702)), (' A 223  PHE  HD1', ' A 223  PHE  N  ', -0.678, (14.486, -12.372, 18.445)), (' A 223  PHE  CD1', ' A 223  PHE  N  ', -0.655, (13.889, -11.936, 18.253)), (' A  53  ASN  O  ', ' A  57  LEU  HG ', -0.655, (-34.639, -48.566, 11.73)), (' A  73  VAL HG12', ' A  74  GLN  O  ', -0.654, (-16.745, -66.34, -1.659)), (' A 209  TYR  O  ', ' A 213  ILE HG13', -0.649, (12.703, -29.135, 11.332)), (' A  62  SER  H  ', ' A  65  SER  HB2', -0.645, (-31.006, -60.552, 6.293)), (' A 216  ASP  N  ', ' A 216  ASP  OD1', -0.641, (14.814, -24.447, 4.674)), (' A  95  ASN  OD1', ' A  96  PRO  HD2', -0.64, (-8.125, -63.458, 4.305)), (' A  92  ASP  OD2', ' A  93  THR  N  ', -0.628, (-15.535, -68.116, 5.759)), (' A 218  TRP  CZ2', ' A 279  ARG  HB3', -0.617, (8.581, -16.877, 3.519)), (' A 289  ASP  C  ', ' A 289  ASP  OD1', -0.613, (-2.227, -28.952, 10.042)), (' A 286  ILE  C  ', ' A 286  ILE  CD1', -0.609, (-0.376, -22.563, 5.099)), (' A 159  PHE  CB ', ' A 177  LEU HD12', -0.608, (-9.283, -49.126, 12.793)), (' A 166  GLU  HB2', ' B   6  HSV  CE1', -0.607, (-19.486, -37.043, 1.369)), (' A 260  ALA  HB3', ' A 263  ASP  OD2', -0.604, (14.109, -20.669, 21.826)), (' A 191  ALA  HA ', ' B   1  ACE  O  ', -0.593, (-28.466, -31.122, 6.917)), (' A 104  VAL  CG1', ' A 105  ARG  N  ', -0.589, (-7.503, -44.946, 18.555)), (' A 117  CYS  SG ', ' A 122  PRO  HA ', -0.589, (-9.258, -49.702, -1.873)), (' A  53  ASN HD22', ' A  56  ASP  H  ', -0.588, (-34.984, -50.087, 14.477)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.588, (-8.306, -62.239, 7.561)), (' A 152  ILE  CG2', ' A 154  TYR  O  ', -0.572, (3.435, -51.172, 10.334)), (' A 263  ASP  O  ', ' A 266  ALA  HB3', -0.566, (10.33, -17.197, 18.393)), (' A 270  GLU  HA ', ' A 270  GLU  OE1', -0.565, (5.761, -10.816, 14.39)), (' A  45  THR  O  ', ' A  49  MET  HG3', -0.562, (-31.748, -43.876, 2.885)), (' A 145  CYS  SG ', ' B   6  HSV  CA ', -0.555, (-20.938, -43.232, 1.951)), (' A   5  LYS  NZ ', ' A 290  GLU  OE1', -0.55, (-3.478, -33.227, 5.757)), (' A  76  ARG  HB2', ' A  92  ASP  OD1', -0.545, (-19.155, -68.989, 3.867)), (' A 159  PHE  CB ', ' A 177  LEU HD13', -0.544, (-9.95, -50.658, 12.805)), (' A 286  ILE HD13', ' A 287  LEU  O  ', -0.543, (-1.118, -23.331, 6.214)), (' A  30  LEU  O  ', ' A  36  VAL  HA ', -0.537, (-14.974, -56.825, 7.962)), (' A  95  ASN  OD1', ' A  96  PRO  CD ', -0.533, (-7.38, -64.31, 4.42)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.532, (-11.121, -62.91, 5.86)), (' B   4  VAL  O  ', ' B   4  VAL HG22', -0.51, (-22.488, -37.986, 1.799)), (' A 159  PHE  HB2', ' A 177  LEU  CD1', -0.504, (-9.382, -50.043, 13.237)), (' A 298  ARG  HG2', ' A 298  ARG  O  ', -0.503, (9.118, -41.236, 9.228)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.5, (-21.24, -31.108, 6.496)), (' A 294  PHE  C  ', ' A 294  PHE  HD2', -0.493, (5.019, -39.061, 13.902)), (' A  58  LEU  O  ', ' A  58  LEU HD12', -0.492, (-31.011, -56.307, 10.468)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.491, (-24.328, -47.946, 13.602)), (' A 279  ARG  CZ ', ' A 279  ARG  HB2', -0.486, (8.36, -14.231, 2.604)), (' A 142  ASN  OD1', ' A 143  GLY  N  ', -0.486, (-20.932, -43.767, -2.476)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.484, (-24.94, -36.619, 12.667)), (' A 294  PHE  CD2', ' A 294  PHE  O  ', -0.483, (6.25, -39.086, 14.178)), (' B   4  VAL  CG2', ' B   4  VAL  O  ', -0.479, (-22.741, -37.919, 1.802)), (' A 155  ASP  OD2', ' A 156  CYS  N  ', -0.477, (2.999, -54.759, 13.536)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.477, (-19.784, -53.522, -4.767)), (' A  78  ILE HG12', ' A  79  GLY  N  ', -0.475, (-22.464, -65.833, 10.705)), (' A 100  LYS  HD2', ' A 101  TYR  H  ', -0.472, (-3.277, -57.544, 15.303)), (' A  76  ARG  O  ', ' A  91  VAL  HA ', -0.469, (-19.67, -65.975, 6.826)), (' A  87  LEU HD13', ' A  89  LEU HD21', -0.469, (-24.056, -56.548, 8.674)), (' A  62  SER  O  ', ' A  65  SER  N  ', -0.468, (-29.522, -61.112, 4.93)), (' A 115  LEU  HG ', ' A 117  CYS  SG ', -0.467, (-8.735, -49.024, 0.123)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.465, (-6.931, -44.559, 7.091)), (' A 189  GLN  NE2', ' A 407  HOH  O  ', -0.464, (-28.316, -39.415, 1.614)), (' A 232  LEU  HA ', ' A 232  LEU HD23', -0.457, (-4.654, -14.49, 24.102)), (' A 145  CYS  HB2', ' B   6  HSV  HC ', -0.455, (-20.5, -45.679, 1.967)), (' A 218  TRP  CE2', ' A 279  ARG  HG2', -0.454, (10.277, -17.203, 3.88)), (' B   5  ALC  HA ', ' B   5  ALC HD13', -0.453, (-23.569, -40.707, 4.986)), (' A 281  ILE  O  ', ' A 284  SER  N  ', -0.452, (6.125, -24.192, 2.032)), (' A  92  ASP  OD2', ' A  93  THR  OG1', -0.45, (-15.437, -68.579, 4.73)), (' A   6  MET  O  ', ' A 127  GLN  HB2', -0.446, (0.351, -39.072, 4.237)), (' A 239  TYR  OH ', ' A 287  LEU HD12', -0.445, (-0.212, -20.087, 11.273)), (' A 207  TRP  CZ3', ' A 287  LEU  HA ', -0.445, (2.815, -23.254, 7.726)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.443, (-18.829, -48.043, 14.244)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.438, (-4.734, -32.093, 14.692)), (' A  70  ALA  O  ', ' A  71  GLY  C  ', -0.438, (-13.441, -61.831, -4.508)), (' A  51  ASN  C  ', ' A  51  ASN  ND2', -0.437, (-35.458, -41.532, 11.196)), (' A 254  SER  OG ', ' A 259  ILE  O  ', -0.437, (13.928, -25.909, 20.655)), (' A  53  ASN  ND2', ' A  56  ASP  H  ', -0.436, (-35.216, -49.732, 15.202)), (' A 189  GLN  HB2', ' A 189  GLN HE21', -0.436, (-28.823, -39.385, 4.088)), (' A 104  VAL HG13', ' A 105  ARG  N  ', -0.432, (-7.352, -45.248, 19.293)), (' A 106  ILE  HB ', ' A 160  CYS  HB2', -0.432, (-7.928, -43.08, 15.016)), (' A 276  MET  O  ', ' A 279  ARG  HB2', -0.431, (7.73, -14.447, 2.614)), (' A 189  GLN  CG ', ' A 189  GLN  O  ', -0.428, (-31.128, -37.035, 5.01)), (' A  62  SER  O  ', ' A  65  SER  CB ', -0.427, (-29.641, -60.478, 5.143)), (' A 189  GLN  HG2', ' A 189  GLN  O  ', -0.426, (-31.566, -37.287, 4.999)), (' A 226  THR HG21', ' A 229  ASP  OD2', -0.424, (4.198, -13.138, 28.299)), (' A 288  GLU  HG2', ' A 291  PHE  HE2', -0.424, (2.191, -29.962, 6.386)), (' A  84  ASN  N  ', ' A  84  ASN HD22', -0.422, (-22.709, -49.456, 19.345)), (' A  80  HIS  N  ', ' A  80  HIS  ND1', -0.42, (-25.897, -61.712, 11.872)), (' A 272  LEU  HA ', ' A 272  LEU HD12', -0.418, (0.116, -15.646, 11.234)), (' A 210  ALA  O  ', ' A 213  ILE  HB ', -0.415, (13.148, -29.725, 8.977)), (' A  83  GLN  O  ', ' A  84  ASN  HB2', -0.414, (-21.111, -49.034, 16.893)), (' A 276  MET  O  ', ' A 279  ARG  NH1', -0.412, (7.433, -12.626, 2.947)), (' A 159  PHE  HB2', ' A 177  LEU HD13', -0.41, (-9.934, -50.476, 13.146)), (' A 141  LEU  O  ', ' A 144  SER  OG ', -0.409, (-17.414, -42.527, -0.864)), (' A  74  GLN  O  ', ' A  75  LEU HD23', -0.405, (-16.558, -65.806, -0.202)), (' A  51  ASN  C  ', ' A  51  ASN HD22', -0.404, (-35.202, -41.547, 11.196)), (' A 281  ILE  O  ', ' A 282  LEU  C  ', -0.403, (7.536, -25.09, 2.34)), (' B   5  ALC  O  ', ' B   6  HSV  HD2', -0.403, (-22.66, -40.497, 0.243)), (' A  95  ASN  OD1', ' A  96  PRO  N  ', -0.402, (-7.342, -63.91, 5.215)), (' A   4  ARG  HD3', ' A   4  ARG HH11', -0.401, (4.723, -33.572, -1.459)), (' A 277  ASN  HB3', ' A 279  ARG  NH1', -0.401, (7.358, -10.683, 2.145))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
