# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 277 ', 'ASN', 0.005376212836827116, (-11.085, 26.566999999999997, 23.542)), ('A', ' 286 ', 'ILE', 0.017019322989076952, (-7.232000000000001, 18.561, 20.793))]
data['omega'] = []
data['rota'] = [('A', '  50 ', 'LEU', 0.013647453471602573, (26.58099999999999, -0.11999999999999997, 17.74)), ('A', '  55 ', 'GLU', 0.03577952561578696, (25.009, -12.424000000000001, 9.267)), ('A', '  67 ', 'LEU', 0.009003268940152616, (16.07, -21.576, 24.208)), ('A', '  72 ', 'ASN', 0.0955647700018583, (6.704999999999998, -23.726, 31.962)), ('A', ' 100 ', 'LYS', 0.18622822298513406, (-6.042999999999999, -18.316999999999997, 11.792)), ('A', ' 104 ', 'VAL', 0.24127004526605006, (-1.4780000000000002, -6.802666666666667, 7.189)), ('A', ' 122 ', 'PRO', 0.14021357669579013, (1.629999999999999, -10.430999999999997, 28.263000000000005)), ('A', ' 125 ', 'VAL', 0.02368155922975506, (-2.956999999999999, -4.118, 25.554000000000002)), ('A', ' 127 ', 'GLN', 0.0, (-6.5314, 0.38600000000000007, 19.0372)), ('A', ' 127 ', 'GLN', 0.11397809766679201, (-5.8946, 2.951, 19.4908)), ('A', ' 145 ', 'CYS', 0.18627818742144026, (11.205999999999992, -6.07, 22.193)), ('A', ' 153 ', 'ASP', 0.07838453474535434, (-11.293, -9.646, 11.572)), ('A', ' 155 ', 'ASP', 0.031153497949203607, (-11.546999999999999, -15.482000000000001, 13.374)), ('A', ' 158 ', 'SER', 0.2463423433223548, (-3.566, -10.034000000000002, 11.039)), ('A', ' 165 ', 'MET', 0.16125833063847125, (16.26133333333333, 0.2063333333333333, 17.327666666666662)), ('A', ' 180 ', 'LYS', 0.2983325253174661, (11.177, -5.142, 7.280000000000001)), ('A', ' 196 ', 'THR', 0.15913521288177282, (8.929999999999996, 15.283, 11.727)), ('A', ' 214 ', 'ASN', 0.05678021593909417, (-23.090999999999994, 10.037, 18.815)), ('A', ' 226 ', 'THR', 0.03524849333372144, (-12.678, 23.221, -2.061)), ('A', ' 227 ', 'LEU', 0.00038947554284927673, (-10.358999999999996, 20.32, -1.479)), ('A', ' 228 ', 'ASN', 0.0620090399179697, (-7.62, 22.584, -2.687)), ('A', ' 268 ', 'LEU', 0.0, (-12.269999999999996, 21.356, 10.531)), ('A', ' 284 ', 'SER', 0.16063174803834643, (-11.448, 15.736999999999998, 23.995)), ('A', ' 285 ', 'THR', 0.10225828043645081, (-9.912999999999997, 19.181, 23.425)), ('A', ' 286 ', 'ILE', 0.07826535643986098, (-7.232000000000001, 18.561, 20.793)), ('A', ' 294 ', 'PHE', 0.29379545273090524, (-12.515428571428568, -1.5314285714285714, 10.142428571428571)), ('A', ' 294 ', 'PHE', 0.12884327282138058, (-10.977714285714285, 1.6150000000000002, 7.183142857142856))]
data['cbeta'] = [('A', '  43 ', 'ILE', ' ', 0.30343107196333835, (22.106999999999996, -13.209, 17.981)), ('A', '  48 ', 'ASP', ' ', 0.39285031527846676, (29.417, -5.272000000000002, 19.131)), ('A', '  59 ', 'ILE', ' ', 0.2714388008186498, (27.672000000000004, -17.886000000000006, 10.278)), ('A', '  92 ', 'ASP', ' ', 0.573093689631034, (9.483999999999995, -29.805, 19.329)), ('A', ' 127 ', 'GLN', 'A', 0.4120197645070807, (-5.799, 1.5980000000000005, 20.525)), ('A', ' 128 ', 'CYS', 'B', 0.3128617869946634, (-0.6070000000000002, 2.099000000000001, 18.25)), ('A', ' 135 ', 'THR', ' ', 0.309711481049938, (7.650000000000001, 6.3820000000000014, 15.157000000000002)), ('A', ' 150 ', 'PHE', ' ', 0.25257584258059307, (-2.4600000000000013, -8.176000000000002, 16.057)), ('A', ' 259 ', 'ILE', ' ', 0.28099625198643463, (-22.072999999999993, 16.151999999999997, 7.504)), ('A', ' 290 ', 'GLU', ' ', 0.45136402716391183, (-4.705000000000002, 7.624, 17.262))]
data['probe'] = [(' A 145  CYS  SG ', ' A 307  AZP  CBM', -1.467, (14.44, -5.925, 22.379)), (' A  86  LEU  CD2', ' A 162 BMET  HE1', -1.29, (10.68, -10.079, 13.972)), (' A 276  MET  HE3', ' A 281  ILE  CD1', -1.184, (-13.686, 19.538, 17.611)), (' A  86  LEU  CD2', ' A 162 BMET  CE ', -1.161, (9.891, -10.044, 14.598)), (' A 276  MET  HE3', ' A 281  ILE HD12', -1.158, (-13.567, 19.058, 17.888)), (' A  86  LEU HD21', ' A 162 BMET  HE2', -1.08, (9.636, -8.571, 14.293)), (' A 276  MET  CE ', ' A 281  ILE  CD1', -1.045, (-14.146, 20.299, 18.919)), (' A 264 BMET  HE3', ' A 267  ALA  HB3', -1.043, (-16.649, 19.643, 9.677)), (' A 276  MET  CE ', ' A 281  ILE HD12', -1.029, (-12.916, 19.61, 18.749)), (' A  86  LEU HD21', ' A 162 BMET  CE ', -1.006, (9.703, -9.465, 14.487)), (' A 276  MET  CE ', ' A 281  ILE HG13', -1.001, (-14.484, 20.086, 19.419)), (' A 286  ILE  O  ', ' A 286  ILE HG13', -0.992, (-7.496, 16.216, 20.644)), (' A  86  LEU HD22', ' A 162 BMET  HE1', -0.988, (10.133, -10.629, 14.997)), (' A 294 BPHE  HE1', ' A 427  HOH  O  ', -0.966, (-9.129, 4.27, 6.086)), (' A  86  LEU HD22', ' A 162 BMET  CE ', -0.954, (10.048, -10.237, 14.781)), (' A 276  MET  CE ', ' A 281  ILE  CG1', -0.95, (-13.921, 19.516, 19.464)), (' A 276  MET  HE2', ' A 281  ILE HG13', -0.928, (-14.54, 20.225, 19.658)), (' A  67  LEU HD11', ' A 532  HOH  O  ', -0.924, (17.628, -19.729, 29.432)), (' A 264 BMET  CE ', ' A 267  ALA  HB3', -0.904, (-15.823, 19.68, 10.184)), (' A 226  THR HG22', ' A 228  ASN  N  ', -0.871, (-9.192, 22.557, -3.199)), (' A 155 BASP  N  ', ' A 155 BASP  OD1', -0.845, (-12.274, -14.372, 11.701)), (' A 145  CYS  SG ', ' A 307  AZP  CBO', -0.811, (15.438, -6.082, 23.881)), (' A 212  VAL HG11', ' A 259  ILE HD11', -0.772, (-22.741, 14.452, 11.407)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.768, (13.15, -13.834, 29.122)), (' A 180  LYS  HD2', ' A 506  HOH  O  ', -0.738, (11.9, -4.686, 1.925)), (' A 126  TYR  HA ', ' A 309  GOL  H32', -0.724, (-4.72, -0.232, 23.609)), (' A  53  ASN  OD1', ' A  55  GLU  HG2', -0.72, (27.017, -10.066, 8.269)), (' A 127  GLN  H  ', ' A 309  GOL  H32', -0.713, (-4.988, 1.213, 22.812)), (' A 145  CYS  SG ', ' A 307  AZP  CBK', -0.711, (13.349, -4.812, 23.429)), (' A 276  MET  HE1', ' A 281  ILE  CG1', -0.699, (-13.666, 18.783, 19.683)), (' A 208  LEU HD13', ' A 264 BMET  HE2', -0.684, (-15.227, 18.185, 11.207)), (' A  21  THR  HB ', ' A  67  LEU  HG ', -0.683, (16.95, -18.929, 25.954)), (' A 226  THR HG22', ' A 228  ASN  H  ', -0.679, (-9.376, 22.373, -3.207)), (' A   4  ARG HH11', ' A 308 AEDO  H11', -0.679, (-11.37, 5.096, 27.612)), (' A 226  THR HG21', ' A 377  HOH  O  ', -0.676, (-10.177, 24.731, -5.167)), (' A   5  LYS  HD2', ' A 127 BGLN  OE1', -0.659, (-6.363, 4.78, 20.302)), (' A 294 BPHE  CD1', ' A 415  HOH  O  ', -0.657, (-9.018, 1.701, 8.081)), (' A 226  THR  CG2', ' A 228  ASN  H  ', -0.648, (-10.032, 22.533, -3.777)), (' A 153  ASP  HB2', ' A 426  HOH  O  ', -0.636, (-13.002, -8.026, 9.796)), (' A 276  MET  HE3', ' A 281  ILE HD11', -0.629, (-14.487, 20.07, 18.139)), (' A  19  GLN  NE2', ' A  26  THR  CG2', -0.621, (12.761, -14.067, 28.511)), (' A 257  THR  CB ', ' A 259  ILE HD12', -0.615, (-23.006, 13.867, 9.372)), (' A  22  CYS  SG ', ' A  61  LYS  HE3', -0.608, (22.842, -16.206, 19.577)), (' A 285  THR  O  ', ' A 286  ILE  CG1', -0.607, (-7.593, 16.902, 22.092)), (' A 264 BMET  CE ', ' A 267  ALA  CB ', -0.603, (-17.11, 20.456, 10.407)), (' A 127  GLN  H  ', ' A 309  GOL  C3 ', -0.598, (-5.603, 1.3, 22.917)), (' A 127  GLN  N  ', ' A 309  GOL  H32', -0.59, (-4.976, 0.248, 22.77)), (' A 285  THR  O  ', ' A 286  ILE HG12', -0.587, (-7.994, 16.69, 22.815)), (' A 165 AMET  SD ', ' A 307  AZP  HBF', -0.581, (16.815, -2.457, 18.17)), (' A 257  THR  HB ', ' A 259  ILE HD12', -0.566, (-23.368, 13.49, 9.649)), (' A   5  LYS  HD2', ' A 127 BGLN  CD ', -0.564, (-6.204, 4.475, 19.728)), (' A 256  GLN  HG2', ' A 304  THR  OG1', -0.56, (-26.06, 8.241, 11.028)), (' A 257  THR  OG1', ' A 259  ILE HD12', -0.558, (-22.769, 13.83, 9.063)), (' A 212  VAL  HA ', ' A 216  ASP  O  ', -0.557, (-22.492, 15.625, 15.888)), (' A  69  GLN  OE1', ' A  74  GLN  NE2', -0.554, (11.948, -22.803, 29.71)), (' A   4  ARG  HD3', ' A 308 AEDO  H12', -0.553, (-11.552, 4.897, 25.881)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.55, (12.357, -13.978, 28.703)), (' A 209  TYR  CE1', ' A 264 AMET  HE2', -0.54, (-19.2, 14.422, 8.374)), (' A 226  THR HG22', ' A 229  ASP  H  ', -0.54, (-9.329, 23.959, -2.15)), (' A 165 AMET  HE1', ' A 307  AZP  CBF', -0.537, (18.113, -1.547, 18.483)), (' A 294  PHE  C  ', ' A 294 APHE  CD2', -0.534, (-13.122, 0.575, 11.109)), (' A 222  ARG  CZ ', ' A 223  PHE  CZ ', -0.531, (-21.9, 31.597, 5.982)), (' A 294 BPHE  CD1', ' A 294  PHE  N  ', -0.513, (-12.146, 2.923, 8.643)), (' A 264 BMET  HE3', ' A 267  ALA  CB ', -0.51, (-17.073, 20.516, 10.08)), (' A 222  ARG  NH2', ' A 223  PHE  CZ ', -0.506, (-21.112, 32.366, 6.013)), (' A 294 BPHE  CE1', ' A 415  HOH  O  ', -0.506, (-8.821, 1.684, 7.426)), (' A 231  ASN  O  ', ' A 235 BMET  HE2', -0.504, (-2.084, 22.444, 2.151)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.501, (-16.931, 7.86, 14.655)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.497, (-0.395, -4.746, 18.035)), (' A 212  VAL HG11', ' A 259  ILE  CD1', -0.49, (-22.844, 14.613, 10.922)), (' A   4  ARG  HD3', ' A 308 AEDO  C1 ', -0.49, (-11.417, 5.141, 26.125)), (' A 218  TRP  HB2', ' A 279  ARG  NH2', -0.487, (-21.353, 23.478, 20.218)), (' A 226  THR HG23', ' A 366  HOH  O  ', -0.483, (-10.559, 22.009, -4.905)), (' A  25  THR  HA ', ' A 546  HOH  O  ', -0.48, (18.262, -10.721, 27.455)), (' A 104 AVAL HG22', ' A 105  ARG  N  ', -0.471, (-0.275, -5.531, 6.285)), (' A 108  PRO  HD3', ' A 344  HOH  O  ', -0.469, (3.273, 2.446, 6.162)), (' A 294  PHE  H  ', ' A 294 BPHE  HD1', -0.465, (-10.913, 3.348, 8.912)), (' A 271  LEU  HA ', ' A 271  LEU HD23', -0.463, (-12.542, 25.186, 15.533)), (' A 235 AMET  HB2', ' A 235 AMET  HE3', -0.462, (-0.579, 22.708, 2.596)), (' A 264  MET  HA ', ' A 264 BMET  HE3', -0.459, (-16.859, 19.47, 9.123)), (' A 307  AZP  CAU', ' A 307  AZP  O  ', -0.457, (15.752, -0.773, 22.272)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.453, (11.207, -3.016, 10.535)), (' A 223  PHE  HB3', ' A 536  HOH  O  ', -0.45, (-17.28, 28.748, 4.609)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.45, (-10.724, 7.414, 0.473)), (' A   4  ARG HH11', ' A 308 AEDO  C1 ', -0.448, (-10.97, 5.205, 27.139)), (' A  21  THR  HA ', ' A  25  THR  O  ', -0.448, (17.516, -15.057, 25.512)), (' A  32  LEU  O  ', ' A  33  ASP  HB2', -0.447, (3.52, -21.688, 12.675)), (' A 284  SER  OG ', ' A 524  HOH  O  ', -0.443, (-8.614, 13.704, 22.347)), (' A 210  ALA  HB2', ' A 296  VAL  CG1', -0.442, (-16.621, 7.605, 14.227)), (' A 198 BTHR  CG2', ' A 240  GLU  HG2', -0.44, (0.917, 14.105, 7.463)), (' A 276  MET  HE1', ' A 281  ILE HD12', -0.44, (-13.252, 18.625, 19.211)), (' A 126  TYR  CA ', ' A 309  GOL  H32', -0.439, (-4.541, -0.04, 23.618)), (' A  67  LEU HD12', ' A 459  HOH  O  ', -0.439, (14.574, -20.348, 28.563)), (' A 294 BPHE  CE1', ' A 427  HOH  O  ', -0.435, (-8.805, 3.853, 6.005)), (' A 106  ILE HG13', ' A 110  GLN  HB2', -0.434, (-2.427, 0.67, 9.399)), (' A 285  THR  O  ', ' A 286  ILE  CB ', -0.431, (-7.508, 17.505, 22.52)), (' A 276  MET  HE1', ' A 281  ILE HG13', -0.431, (-13.91, 18.898, 20.355)), (' A 237  TYR  O  ', ' A 238  ASN  HB3', -0.427, (0.147, 21.08, 11.637)), (' A 180  LYS  HB3', ' A 180  LYS  HE3', -0.427, (10.951, -3.141, 5.48)), (' A   4  ARG  NH1', ' A 308 BEDO  O1 ', -0.426, (-10.969, 4.99, 28.331)), (' A 100  LYS  HD2', ' A 341  HOH  O  ', -0.424, (-4.808, -18.984, 8.812)), (' A 307  AZP  HAF', ' A 307  AZP  OAL', -0.423, (20.235, 3.932, 20.04)), (' A 257  THR  HB ', ' A 259  ILE  CD1', -0.421, (-23.179, 14.17, 10.07)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.42, (3.746, -23.014, 19.041)), (' A 276  MET  HE1', ' A 281  ILE  CB ', -0.418, (-14.11, 18.077, 19.783)), (' A 222  ARG  NH2', ' A 223  PHE  HZ ', -0.416, (-21.465, 32.894, 6.532)), (' A  93  THR HG22', ' A  94  SER  O  ', -0.415, (2.903, -27.329, 19.025)), (' A 104 AVAL  CG2', ' A 105  ARG  N  ', -0.414, (-0.275, -5.792, 6.273)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.412, (9.807, -20.831, 20.518)), (' A 165 BMET  HB3', ' A 165 BMET  HE2', -0.409, (15.756, 1.336, 19.004)), (' A 264 BMET  HE1', ' A 267  ALA  CB ', -0.406, (-16.996, 20.13, 11.173)), (' A 114  VAL  O  ', ' A 125 AVAL  HA ', -0.405, (-1.775, -4.177, 24.288)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.405, (20.932, 0.717, 13.164)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.404, (17.117, -12.37, 15.351)), (' A 152  ILE HG12', ' A 157  VAL HG22', -0.401, (-6.74, -11.437, 15.876)), (' A  59  ILE  HA ', ' A  59  ILE HD12', -0.4, (25.589, -19.125, 10.493))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
