# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 300 ', 'CYS', 0.02394343095887389, (24.916, 33.693, -0.372))]
data['omega'] = []
data['rota'] = [('A', '  72 ', 'ASN', 0.011513042051689149, (20.129, 51.939, 15.586)), ('A', '  86 ', 'LEU', 0.0, (-0.5270000000000001, 42.569, 8.439)), ('A', '  87 ', 'LEU', 0.015552599792547268, (0.30100000000000016, 44.201, 11.736)), ('A', ' 106 ', 'ILE', 0.02499270269047202, (-1.3480000000000012, 44.049, -8.637999999999996)), ('A', ' 132 ', 'PRO', 0.12905853189241706, (-0.01699999999999946, 33.623, -13.11)), ('A', ' 228 ', 'ASN', 0.24251750881396453, (-7.9270000000000005, 31.075000000000003, -32.092)), ('A', ' 240 ', 'GLU', 0.26771399335435914, (-1.663000000000002, 31.582000000000004, -20.913999999999994)), ('A', ' 268 ', 'LEU', 0.01168884776835489, (5.895999999999999, 33.225, -31.628)), ('A', ' 277 ', 'ASN', 0.16156827389196485, (18.019999999999996, 26.65, -33.433)), ('B', '  75 ', 'LEU', 0.01728724136153776, (23.114999999999995, 75.016, -8.539999999999996)), ('B', '  86 ', 'LEU', 0.004626013772013721, (35.27199999999999, 64.58, -17.688)), ('B', '  87 ', 'LEU', 0.010356749119370281, (34.192, 68.102, -16.846)), ('B', ' 106 ', 'ILE', 0.027383521076438246, (37.179, 48.323, -12.299)), ('B', ' 132 ', 'PRO', 0.16827929396933872, (36.436000000000014, 41.25100000000001, -21.385999999999992)), ('B', ' 141 ', 'LEU', 0.0, (18.608, 55.725, -24.408)), ('B', ' 220 ', 'LEU', 0.0, (29.965, 17.720000000000006, -10.26)), ('B', ' 221 ', 'ASN', 0.042269143047690326, (32.209, 14.745, -11.136)), ('B', ' 227 ', 'LEU', 0.021956348467557465, (44.94100000000002, 24.339999999999996, -16.054)), ('B', ' 268 ', 'LEU', 0.0, (32.74400000000001, 22.991, -16.529)), ('B', ' 296 ', 'VAL', 0.16829864332593658, (28.15000000000002, 35.105, -4.84))]
data['cbeta'] = []
data['probe'] = [(' A 139  SER  HA ', ' B   2  GLY  H  ', -1.08, (15.657, 33.158, -4.217)), (' B 163  HIS  NE2', ' B 801  DMS  H22', -1.038, (26.136, 55.076, -23.499)), (' B  45  THR HG22', ' B  46  ALA  H  ', -1.01, (25.263, 70.419, -33.318)), (' B  36  VAL  CG1', ' B  89  LEU  HB2', -0.852, (29.248, 70.567, -12.43)), (' B  45  THR  HB ', ' B1228  HOH  O  ', -0.805, (27.483, 71.188, -33.398)), (' B  36  VAL HG13', ' B  89  LEU  HB2', -0.803, (30.131, 70.225, -11.94)), (' B  77  VAL HG12', ' B1028  HOH  O  ', -0.792, (25.958, 77.78, -13.434)), (' B 221  ASN  C  ', ' B 221  ASN HD22', -0.777, (34.095, 14.507, -11.283)), (' A 139  SER  HB3', ' B1061  HOH  O  ', -0.771, (18.254, 36.162, -4.313)), (' A 139  SER  HA ', ' B   2  GLY  N  ', -0.771, (15.681, 32.616, -4.15)), (' A  21  THR HG23', ' A1140  HOH  O  ', -0.741, (13.233, 44.93, 15.709)), (' A 226  THR HG23', ' A 229  ASP  H  ', -0.717, (-7.174, 31.269, -34.766)), (' B 270  GLU  HG3', ' B1063  HOH  O  ', -0.715, (31.945, 15.514, -20.248)), (' A 145  CYS  SG ', ' A 804  DMS  H22', -0.682, (9.963, 35.309, 5.31)), (' A 155  ASP  HB3', ' A1189  HOH  O  ', -0.68, (8.858, 62.531, -8.82)), (' A  21  THR HG22', ' A  26  THR  OG1', -0.68, (13.409, 41.738, 15.602)), (' A 198  THR  OG1', ' A 240  GLU  HG2', -0.679, (-0.196, 31.08, -18.037)), (' B  45  THR HG22', ' B  46  ALA  N  ', -0.677, (25.981, 69.736, -32.708)), (' A 236  LYS  HD3', ' A 236  LYS  O  ', -0.677, (1.762, 22.078, -25.578)), (' A  45  THR HG22', ' A  46  ALA  H  ', -0.676, (7.719, 29.553, 18.311)), (' A   6  MET  HE1', ' B1026  HOH  O  ', -0.669, (15.064, 52.516, -18.478)), (' A  67  LEU HD11', ' A  74  GLN  NE2', -0.666, (14.266, 48.357, 19.808)), (' A  21  THR  OG1', ' A  67  LEU  HB3', -0.664, (11.947, 44.18, 18.513)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.66, (-0.937, 29.786, 2.153)), (' A 279  ARG  HD2', ' A1247  HOH  O  ', -0.652, (17.801, 30.49, -36.406)), (' A  69  GLN  HG2', ' A  74  GLN  NE2', -0.647, (14.915, 49.901, 18.695)), (' A  72  ASN  HA ', ' A1141  HOH  O  ', -0.634, (21.273, 50.482, 15.56)), (' A  74  GLN  HG2', ' A1256  HOH  O  ', -0.634, (16.584, 53.545, 20.268)), (' A 226  THR  CG2', ' A 229  ASP  H  ', -0.621, (-6.674, 30.914, -35.205)), (' A1235  HOH  O  ', ' B   4  ARG  HD3', -0.609, (15.107, 39.099, -10.603)), (' B 166  GLU  HB2', ' B 801  DMS  C2 ', -0.6, (24.632, 54.946, -26.36)), (' A 134  HIS  HD2', ' A1151  HOH  O  ', -0.594, (-2.98, 31.239, -8.139)), (' B  52  PRO  HB2', ' B  57  LEU HD11', -0.591, (34.706, 70.086, -29.824)), (' B  50  LEU  N  ', ' B  50  LEU HD12', -0.589, (31.704, 64.896, -34.876)), (' B 166  GLU  HB2', ' B 801  DMS  H23', -0.579, (25.546, 54.601, -26.204)), (' B  45  THR  CG2', ' B  46  ALA  H  ', -0.574, (25.561, 70.371, -32.35)), (' A  84  ASN  CG ', ' A 180  LYS  HD3', -0.571, (-6.843, 41.495, 3.949)), (' B  33  ASP  OD2', ' B1003  HOH  O  ', -0.566, (33.822, 65.365, -1.782)), (' B  10  SER  O  ', ' B  14  GLU  HG3', -0.564, (20.236, 55.589, -6.001)), (' B 294  PHE  HD2', ' B 298  ARG  NH2', -0.564, (30.943, 42.0, -4.51)), (' B  52  PRO  HB2', ' B  57  LEU  CD1', -0.563, (35.139, 69.479, -29.445)), (' A 294  PHE  CD2', ' A 298  ARG  NH2', -0.562, (5.817, 50.487, -16.983)), (' A  27  LEU HD23', ' A 902  DTZ  S1 ', -0.562, (9.517, 37.241, 10.022)), (' A  86  LEU HD22', ' A 179  GLY  CA ', -0.561, (-1.599, 43.724, 4.515)), (' A 240  GLU  HG3', ' A1259  HOH  O  ', -0.557, (-1.024, 34.398, -18.775)), (' A 236  LYS  HD2', ' A 237  TYR  CE1', -0.55, (3.144, 22.863, -28.691)), (' B 106  ILE HD13', ' B 160  CYS  CB ', -0.546, (33.98, 50.19, -10.887)), (' A 110  GLN  HG2', ' A1245  HOH  O  ', -0.544, (0.5, 43.582, -15.935)), (' A 137  LYS  HE3', ' A1222  HOH  O  ', -0.539, (10.428, 29.107, -10.703)), (' B 134  HIS  HD2', ' B1000  HOH  O  ', -0.538, (38.075, 47.31, -19.943)), (' A   6  MET  HE1', ' A1264  HOH  O  ', -0.537, (13.61, 52.436, -18.275)), (' B  48  ASP  O  ', ' B  52  PRO  HB3', -0.525, (33.788, 68.247, -31.648)), (' A 137  LYS  HE2', ' A1232  HOH  O  ', -0.524, (9.194, 30.201, -13.954)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.524, (0.441, 29.625, 14.779)), (' B 106  ILE HG13', ' B 110  GLN HE21', -0.522, (35.822, 46.192, -11.486)), (' B 221  ASN  C  ', ' B 221  ASN  ND2', -0.521, (34.068, 15.139, -11.556)), (' B 221  ASN  ND2', ' B 223  PHE  H  ', -0.519, (35.351, 14.848, -12.238)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.516, (5.437, 25.814, -1.331)), (' B 198  THR  OG1', ' B 240  GLU  HG2', -0.515, (37.234, 36.2, -22.385)), (' B  63  ASN  O  ', ' B  77  VAL HG11', -0.512, (28.317, 77.544, -15.328)), (' A 217  ARG  HB2', ' A 220  LEU HD12', -0.511, (11.694, 41.125, -38.617)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.511, (32.3, 68.803, -23.581)), (' A  45  THR  HB ', ' A  48  ASP  OD1', -0.507, (4.643, 29.502, 19.134)), (' A 301  SER  HB2', ' A1258  HOH  O  ', -0.503, (16.188, 53.268, -28.682)), (' A  86  LEU HD22', ' A 179  GLY  N  ', -0.503, (-1.426, 43.91, 4.256)), (' A 280  THR HG22', ' A 285  THR HG22', -0.503, (20.821, 31.474, -27.036)), (' A  61  LYS  HE2', ' A 940  HOH  O  ', -0.496, (1.311, 36.705, 21.633)), (' B 107  GLN  H  ', ' B 110  GLN  NE2', -0.491, (37.353, 45.667, -12.089)), (' B 286  ILE HD11', ' B 288  GLU  OE2', -0.485, (21.89, 32.952, -17.94)), (' A 228  ASN  O  ', ' A 232  LEU  HG ', -0.485, (-6.671, 27.793, -31.477)), (' B 141  LEU  C  ', ' B 801  DMS  H13', -0.483, (20.258, 56.632, -24.973)), (' B 166  GLU  N  ', ' B 801  DMS  H23', -0.48, (26.422, 55.1, -26.688)), (' B  19  GLN HE21', ' B 119  ASN  HA ', -0.464, (17.943, 66.197, -17.747)), (' B 141  LEU  O  ', ' B 801  DMS  H13', -0.462, (20.553, 56.845, -24.48)), (' A 233  VAL HG21', ' A 269  LYS  HD2', -0.462, (0.114, 27.349, -34.45)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.459, (9.029, 56.772, 9.925)), (' A 142  ASN  ND2', ' A 804  DMS  H11', -0.458, (13.453, 31.131, 5.111)), (' A 294  PHE  CE2', ' A 298  ARG  NH2', -0.458, (6.202, 51.387, -16.316)), (' A  72  ASN  N  ', ' A  72  ASN  OD1', -0.455, (20.519, 52.789, 13.703)), (' A  45  THR HG22', ' A  46  ALA  N  ', -0.454, (7.471, 29.119, 18.398)), (' B 165  MET  HE3', ' B 167  LEU HD21', -0.453, (32.435, 53.695, -28.499)), (' B 213  ILE HD12', ' B 256  GLN HE21', -0.452, (28.683, 28.106, 0.753)), (' A 236  LYS  C  ', ' A 236  LYS  HD3', -0.45, (1.799, 22.516, -25.999)), (' A 294  PHE  HD2', ' A 298  ARG  NH2', -0.449, (5.887, 50.237, -16.994)), (' B  50  LEU  H  ', ' B  50  LEU HD12', -0.447, (31.477, 65.359, -34.856)), (' A 269  LYS  HE3', ' A 994  HOH  O  ', -0.447, (0.721, 30.306, -37.276)), (' A 140  PHE  C  ', ' B   1  SER  HB2', -0.444, (16.204, 33.383, 0.461)), (' B  12  LYS  HE3', ' B1241  HOH  O  ', -0.444, (25.679, 52.219, 2.198)), (' A 288  GLU  HB3', ' A1016  HOH  O  ', -0.442, (12.113, 37.442, -19.287)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.442, (3.961, 31.579, 17.578)), (' A   8  PHE  HE2', ' A 151  ASN HD22', -0.44, (7.707, 49.226, -11.871)), (' B 294  PHE  HD2', ' B 298  ARG HH21', -0.439, (31.133, 42.653, -4.011)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.438, (8.72, 35.153, -0.556)), (' B 106  ILE HD13', ' B 160  CYS  HB3', -0.438, (34.211, 50.476, -10.136)), (' B 188  ARG  HD3', ' B1176  HOH  O  ', -0.437, (38.137, 63.014, -29.302)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.437, (-2.995, 41.737, -30.966)), (' B 213  ILE HD12', ' B 256  GLN  NE2', -0.436, (28.596, 28.068, 0.235)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.435, (42.282, 33.354, -15.079)), (' B  86  LEU HD13', ' B 179  GLY  HA2', -0.435, (35.717, 60.996, -17.483)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.434, (9.005, 45.6, -5.187)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.433, (27.34, 52.725, -22.995)), (' B  50  LEU  CD1', ' B  50  LEU  N  ', -0.431, (31.319, 65.026, -35.326)), (' B 299  GLN  C  ', ' B 301  SER  H  ', -0.431, (24.68, 35.856, 0.152)), (' A  45  THR  N  ', ' A  48  ASP  HB2', -0.427, (4.012, 31.147, 17.177)), (' B 222  ARG  HD3', ' B 222  ARG  O  ', -0.424, (37.166, 11.423, -10.042)), (' A 140  PHE  O  ', ' B   1  SER  HB2', -0.424, (15.887, 32.914, 0.545)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.424, (27.02, 53.089, -22.646)), (' A 141  LEU  HA ', ' B   1  SER  HB2', -0.422, (16.623, 33.077, 1.052)), (' A 277  ASN  HA ', ' A 277  ASN HD22', -0.422, (17.873, 24.95, -33.141)), (' B   5  LYS  HB2', ' B   5  LYS  HE3', -0.421, (21.865, 37.501, -12.952)), (' B  87  LEU  HA ', ' B  87  LEU HD22', -0.42, (35.57, 69.322, -17.909)), (' A  21  THR  CG2', ' A  26  THR  OG1', -0.418, (13.69, 41.714, 16.355)), (' A   6  MET  SD ', ' A1268  HOH  O  ', -0.416, (17.122, 49.467, -17.795)), (' A 108  PRO  HA ', ' A 130  MET  CG ', -0.415, (0.609, 38.26, -10.488)), (' A  60  ARG  NH2', ' A1070  HOH  O  ', -0.415, (-3.255, 31.502, 21.857)), (' B  67  LEU  HA ', ' B  67  LEU HD12', -0.415, (22.852, 76.474, -15.115)), (' B  86  LEU HD22', ' B 179  GLY  N  ', -0.413, (37.007, 60.79, -15.279)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.413, (5.068, 59.843, -10.332)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.412, (26.76, 51.611, -11.79)), (' B 167  LEU  HB3', ' B 168  PRO  HD2', -0.412, (30.554, 50.95, -31.562)), (' B 102  LYS  HE3', ' B 156  CYS  SG ', -0.411, (34.807, 53.509, 0.002)), (' A 127  GLN  HA ', ' A 127  GLN HE21', -0.411, (12.166, 44.443, -10.613)), (' A  21  THR HG22', ' A  26  THR HG23', -0.41, (13.52, 42.273, 14.984)), (' B  50  LEU  CD1', ' B  50  LEU  H  ', -0.408, (31.269, 65.35, -35.325)), (' B 236  LYS  HD3', ' B 236  LYS  O  ', -0.408, (35.214, 25.897, -29.506)), (' B  87  LEU HD12', ' B  89  LEU HD21', -0.407, (32.033, 71.701, -16.556)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.405, (22.192, 55.567, -22.252)), (' A 133  ASN  O  ', ' A 134  HIS  HB2', -0.403, (-0.516, 32.511, -6.762)), (' B  88  ARG  HB3', ' B  88  ARG  NH1', -0.403, (36.368, 69.635, -11.141)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.403, (8.617, 34.581, -0.782)), (' A 106  ILE HG13', ' A 110  GLN  OE1', -0.401, (-0.129, 44.59, -11.033)), (' B 253  LEU HD11', ' B 296  VAL HG21', -0.4, (31.272, 32.507, -5.738)), (' A  44  CYS  SG ', ' A  54  TYR  CE2', -0.4, (0.802, 33.842, 13.231))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
