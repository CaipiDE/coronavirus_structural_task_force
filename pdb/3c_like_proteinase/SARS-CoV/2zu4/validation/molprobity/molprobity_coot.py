# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.04603763117380128, (-13.2, -12.818, 12.580000000000004)), ('A', ' 215 ', 'GLY', 0.007296698035145376, (-24.873000000000005, 12.652000000000001, 19.115)), ('A', ' 216 ', 'ASP', 0.0005651639999999999, (-22.927000000000003, 15.904000000000002, 19.217))]
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.03309182925531103, (-22.951, 5.389, 24.162000000000006)), ('A', '  22 ', 'CYS', 0.07805478113240734, (21.121, -15.751000000000003, 24.132)), ('A', '  51 ', 'ASN', 0.02472163830113163, (27.938000000000013, -1.7350000000000005, 15.134)), ('A', '  67 ', 'LEU', 0.060935801222910646, (17.128, -20.890000000000008, 24.723000000000006)), ('A', '  77 ', 'VAL', 0.005625984047065539, (15.355000000000008, -25.32400000000001, 18.582)), ('A', '  82 ', 'MET', 0.16930395319895356, (17.819, -14.781, 9.69)), ('A', '  86 ', 'LEU', 0.01165290582889756, (14.188999999999998, -11.078000000000003, 12.621000000000002)), ('A', '  99 ', 'PRO', 0.06664187475498289, (-4.559000000000002, -19.226, 15.800000000000004)), ('A', ' 102 ', 'LYS', 0.2536984978378602, (-1.338000000000001, -13.919, 8.556000000000001)), ('A', ' 127 ', 'GLN', 0.14528678454232383, (-4.212000000000002, 0.53, 20.677000000000007)), ('A', ' 142 ', 'ASN', 0.21913068615514283, (13.861999999999998, -2.8710000000000004, 28.394)), ('A', ' 155 ', 'ASP', 0.15022506514596015, (-10.882000000000001, -15.317000000000004, 14.153000000000004)), ('A', ' 198 ', 'THR', 0.1231672554087606, (2.08, 15.277, 10.788)), ('A', ' 227 ', 'LEU', 0.0, (-10.341000000000001, 20.262, -1.4090000000000003)), ('A', ' 228 ', 'ASN', 0.0028921139315688953, (-7.640000000000001, 22.798000000000002, -2.288)), ('A', ' 253 ', 'LEU', 0.11964026301727246, (-19.758, 7.731, 7.612000000000001)), ('A', ' 268 ', 'LEU', 0.0033273400793616143, (-12.549000000000003, 21.098999999999997, 10.696000000000003)), ('A', ' 286 ', 'ILE', 0.020847074670208462, (-7.797000000000004, 18.244, 21.229000000000006))]
data['cbeta'] = [('A', ' 128 ', 'CYS', ' ', 0.3002277684273053, (-0.142000000000003, 1.7949999999999995, 18.591000000000005))]
data['probe'] = [(' A 286  ILE  H  ', ' A 286  ILE HD13', -1.01, (-8.081, 16.645, 22.758)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.927, (25.926, -7.214, 20.799)), (' A 286  ILE  N  ', ' A 286  ILE HD13', -0.846, (-8.594, 17.576, 22.775)), (' A 228  ASN  ND2', ' A2127  HOH  O  ', -0.804, (-10.313, 21.384, -4.519)), (' A 236  LYS  HE3', ' A 237  TYR  CE1', -0.804, (-4.811, 27.676, 9.176)), (' A 142  ASN HD22', ' A 143  GLY  H  ', -0.751, (14.368, -4.976, 26.771)), (' A 228  ASN  H  ', ' A 228  ASN  ND2', -0.742, (-9.295, 21.587, -3.527)), (' A 142  ASN HD22', ' A 143  GLY  N  ', -0.715, (14.901, -5.409, 27.442)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.715, (13.635, -13.548, 29.024)), (' A 233  VAL HG21', ' A 269  LYS  HD3', -0.69, (-9.628, 26.73, 5.478)), (' A 288  GLU  OE1', ' A2094  HOH  O  ', -0.687, (-7.05, 10.563, 19.491)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.684, (17.499, -12.517, 14.797)), (' A 137  LYS  NZ ', ' A2058  HOH  O  ', -0.678, (4.141, 11.056, 16.639)), (' A 215  GLY  O  ', ' A 216  ASP  HB2', -0.672, (-22.156, 14.403, 20.348)), (' A 236  LYS  NZ ', ' A 273  GLN HE21', -0.656, (-5.996, 29.156, 8.021)), (' A  45  THR HG23', ' A  48  ASP  OD1', -0.641, (27.189, -10.235, 21.615)), (' A 286  ILE  CD1', ' A 286  ILE  N  ', -0.622, (-7.488, 17.387, 22.986)), (' A 213  ILE  HA ', ' A 304  THR HG23', -0.601, (-24.668, 9.748, 14.21)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.597, (17.387, -8.564, 11.045)), (' A 276  MET  O  ', ' A 277  ASN  HB2', -0.589, (-14.972, 25.492, 21.354)), (' A 228  ASN  H  ', ' A 228  ASN HD22', -0.586, (-9.712, 22.294, -3.958)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.585, (13.443, -14.298, 29.488)), (' A 236  LYS  HE3', ' A 237  TYR  HE1', -0.569, (-5.048, 27.394, 9.665)), (' A 188  ARG  HG3', ' A 190  THR HG22', -0.567, (22.791, 2.211, 14.026)), (' A 233  VAL HG21', ' A 269  LYS  CD ', -0.565, (-9.599, 26.473, 5.467)), (' A 127  GLN  HA ', ' A 127  GLN HE21', -0.555, (-4.751, -0.373, 19.94)), (' A 236  LYS  HZ1', ' A 273  GLN HE21', -0.555, (-6.156, 29.883, 8.552)), (' A 215  GLY  O  ', ' A 216  ASP  CB ', -0.543, (-21.996, 14.275, 19.829)), (' A 258  GLY  C  ', ' A 259  ILE HD13', -0.528, (-24.882, 15.083, 6.981)), (' A 167  LEU  HB3', ' A 168  PRO  CD ', -0.526, (15.196, 8.696, 18.483)), (' A 134  HIS  ND1', ' A2057  HOH  O  ', -0.523, (5.624, 3.64, 7.734)), (' A   5  LYS  HD3', ' A 291  PHE  CZ ', -0.523, (-9.056, 6.155, 20.055)), (' A  83  GLN  NE2', ' A  88  ARG  HD3', -0.521, (11.119, -15.156, 8.125)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.498, (3.378, -11.247, 24.638)), (' A 280  THR HG22', ' A 285  THR HG22', -0.498, (-12.192, 19.022, 26.158)), (' A 214  ASN  O  ', ' A 215  GLY  O  ', -0.497, (-23.144, 11.811, 20.234)), (' A  47  GLU  N  ', ' A  47  GLU  OE2', -0.494, (29.799, -4.921, 23.649)), (' A 127  GLN  CA ', ' A 127  GLN HE21', -0.494, (-5.213, -0.668, 20.003)), (' A 169  THR  OG1', ' A 171  VAL HG22', -0.482, (10.822, 10.107, 19.006)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.473, (15.079, 8.901, 18.243)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.473, (26.179, -5.02, 17.294)), (' A 207  TRP  CZ3', ' A 287  LEU  HA ', -0.47, (-10.361, 15.875, 17.698)), (' A  31  TRP  CE2', ' A  75  LEU HD21', -0.466, (6.776, -23.517, 20.718)), (' A 233  VAL HG21', ' A 269  LYS  CG ', -0.464, (-9.323, 26.067, 6.437)), (' A 127  GLN  HG2', ' A2007  HOH  O  ', -0.463, (-7.401, 2.02, 17.843)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.462, (-0.513, -5.085, 18.189)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.462, (-9.055, 25.988, 6.64)), (' A 228  ASN  N  ', ' A 228  ASN  ND2', -0.461, (-8.727, 22.064, -3.403)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.461, (-11.19, 20.434, 4.746)), (' A 223  PHE  O  ', ' A 263  ASP  OD1', -0.456, (-20.6, 22.75, 4.276)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.448, (-16.618, 7.056, 14.96)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.445, (4.223, -22.893, 19.199)), (' A 277  ASN  HB2', ' A 279  ARG  HG3', -0.442, (-16.132, 25.626, 22.787)), (' A  62  SER  HG ', ' A  64  HIS  CG ', -0.439, (24.152, -25.567, 19.724)), (' A 236  LYS  HZ3', ' A 273  GLN HE21', -0.436, (-6.142, 29.435, 7.563)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.436, (-8.427, 25.69, 7.626)), (' A  82  MET  HE3', ' A2052  HOH  O  ', -0.434, (19.865, -10.481, 7.733)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.428, (4.087, -22.598, 19.485)), (' A 304  THR HG22', ' A 305  PHE  N  ', -0.421, (-27.014, 10.008, 15.153)), (' A 176  ASP  HB2', ' A2049  HOH  O  ', -0.417, (4.721, -7.686, 8.752)), (' A 106  ILE HG13', ' A 110  GLN  HB2', -0.416, (-1.895, 0.178, 9.264)), (' A 226  THR  HB ', ' A2127  HOH  O  ', -0.415, (-11.606, 22.063, -4.374)), (' A  76  ARG  HB3', ' A  92  ASP  OD1', -0.415, (13.04, -29.716, 20.772)), (' A 258  GLY  O  ', ' A 259  ILE HD13', -0.415, (-25.387, 15.553, 6.874)), (' A  95  ASN  HA ', ' A  96  PRO  HD3', -0.412, (2.711, -25.286, 20.734)), (' A 102  LYS  HB2', ' A 102  LYS  HE3', -0.412, (-2.16, -13.074, 5.505)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.41, (18.379, 2.725, 15.275)), (' A 165  MET  HE1', ' A 192  GLN HE22', -0.409, (18.327, 2.473, 15.058)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.408, (29.213, -14.857, 12.34)), (' A 259  ILE  N  ', ' A 259  ILE HD13', -0.403, (-24.479, 15.224, 7.598))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
