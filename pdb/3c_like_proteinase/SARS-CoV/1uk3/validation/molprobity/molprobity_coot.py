# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  51 ', 'ASN', 0.0039607051147809175, (100.32600000000002, 3.4530000000000003, -0.9620000000000002)), ('A', ' 154 ', 'TYR', 0.015043886086277984, (94.81000000000002, -12.413, 36.874)), ('A', ' 192 ', 'GLN', 0.0, (100.418, -9.205, -0.8170000000000002)), ('A', ' 221 ', 'ASN', 0.025861846750252042, (94.51, -45.78400000000002, 20.178)), ('A', ' 302 ', 'GLY', 0.042014454454737324, (88.936, -23.508, 38.126)), ('B', '  46 ', 'ALA', 0.0, (73.432, -31.121, 48.842000000000006)), ('B', ' 137 ', 'LYS', 0.004235744307073404, (74.92100000000002, -26.426000000000005, 25.144)), ('B', ' 139 ', 'SER', 0.008021381637265925, (79.506, -27.187, 28.476)), ('B', ' 142 ', 'ASN', 0.0059600781371097825, (82.28600000000002, -25.101, 36.845000000000006)), ('B', ' 168 ', 'PRO', 0.09909636353409221, (71.976, -36.001, 33.024)), ('B', ' 171 ', 'VAL', 0.0, (73.845, -29.58600000000001, 28.25700000000001)), ('B', ' 217 ', 'ARG', 0.0477745501841248, (77.859, -19.255, -3.59)), ('B', ' 257 ', 'THR', 0.013033053555249727, (69.969, -12.005000000000004, -2.551)), ('B', ' 301 ', 'SER', 0.0006731693091349174, (72.036, -6.394000000000002, 5.527))]
data['omega'] = []
data['rota'] = [('A', '   3 ', 'PHE', 0.15404665333495077, (83.213, -27.742000000000008, 25.895000000000003)), ('A', '  26 ', 'THR', 0.08005481567066386, (86.83, 7.238000000000002, 11.802)), ('A', '  30 ', 'LEU', 0.01040288299273165, (93.011, 2.249, 22.738)), ('A', '  47 ', 'GLU', 0.06098927231516022, (93.663, 11.131, -2.058)), ('A', '  50 ', 'LEU', 0.15567627441374915, (96.75800000000002, 3.6370000000000013, -2.283)), ('A', '  55 ', 'GLU', 0.050426773630101604, (105.41800000000005, 10.487000000000004, 6.858000000000001)), ('A', '  76 ', 'ARG', 0.20909292090797482, (91.657, 17.315, 23.162000000000006)), ('A', '  77 ', 'VAL', 0.04645945849400477, (94.739, 15.692000000000002, 21.701000000000008)), ('A', '  87 ', 'LEU', 0.08500533966510554, (99.77499999999999, 6.5600000000000005, 15.877000000000004)), ('A', ' 104 ', 'VAL', 0.2650168808481688, (103.139, -8.42, 24.476000000000006)), ('A', ' 106 ', 'ILE', 0.03473027881403512, (102.11399999999999, -13.036, 20.561000000000007)), ('A', ' 118 ', 'TYR', 0.13334502825830083, (82.823, 0.26700000000000007, 15.401)), ('A', ' 121 ', 'SER', 0.031468546981497585, (81.898, 1.5610000000000002, 20.245)), ('A', ' 130 ', 'MET', 0.013906305402822937, (96.417, -16.255, 15.445)), ('A', ' 189 ', 'GLN', 0.0018265250152925093, (96.378, -1.754, -0.632)), ('A', ' 216 ', 'ASP', 0.12345916743875052, (86.107, -38.43, 26.598)), ('A', ' 223 ', 'PHE', 0.0, (99.95099999999998, -48.17300000000002, 19.13)), ('A', ' 227 ', 'LEU', 0.10010336380195996, (107.42799999999998, -37.563, 15.370000000000003)), ('A', ' 263 ', 'ASP', 0.01655822209614665, (100.65399999999997, -41.476, 22.23)), ('A', ' 268 ', 'LEU', 0.00011615506452244136, (95.306, -37.952, 16.197)), ('A', ' 288 ', 'GLU', 0.16936938884450078, (89.05, -27.669000000000008, 17.343)), ('B', '  25 ', 'THR', 0.060936716155520994, (76.64, -23.432000000000002, 49.285)), ('B', '  30 ', 'LEU', 0.023770126266550486, (72.499, -10.892, 39.723)), ('B', '  47 ', 'GLU', 0.03573655959844152, (71.151, -33.906, 50.189)), ('B', '  55 ', 'GLU', 0.0435253962261301, (58.434, -23.326, 50.692)), ('B', '  74 ', 'GLN', 0.24640726076522596, (79.53, -7.344000000000002, 51.538)), ('B', '  77 ', 'VAL', 0.004693716534545193, (70.371, -8.427, 52.993000000000016)), ('B', '  87 ', 'LEU', 0.23430840544317236, (65.215, -16.244000000000007, 44.981)), ('B', ' 136 ', 'ILE', 0.012964514452920291, (71.71200000000002, -24.686000000000007, 26.23100000000001)), ('B', ' 140 ', 'PHE', 0.0813022004834054, (80.82399999999998, -24.34000000000001, 30.597)), ('B', ' 141 ', 'LEU', 0.00021820192428530767, (81.86, -26.733, 33.386)), ('B', ' 167 ', 'LEU', 0.01738377637055192, (71.186, -32.242, 32.825)), ('B', ' 224 ', 'THR', 0.2706460033981198, (63.545, -25.63500000000001, -6.1400000000000015)), ('B', ' 247 ', 'VAL', 0.09113108603586556, (59.654999999999994, -19.328, 6.271)), ('B', ' 263 ', 'ASP', 0.03864277912231335, (65.439, -22.128000000000007, -3.459)), ('B', ' 268 ', 'LEU', 0.009041272979398916, (70.522, -27.163, 1.8940000000000001))]
data['cbeta'] = []
data['probe'] = [(' B 229  ASP  HA ', ' B 232  LEU HD12', -1.05, (59.269, -34.638, 0.555)), (' A 223  PHE  H  ', ' A 223  PHE  HD2', -1.03, (97.547, -47.648, 18.362)), (' A 102  LYS  HE3', ' A 156  CYS  SG ', -0.984, (100.674, -8.076, 32.659)), (' A 226  THR HG23', ' A 229  ASP  H  ', -0.915, (107.737, -40.617, 12.172)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.91, (80.44, -25.71, 2.936)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.873, (101.044, -0.091, 15.321)), (' A 236  LYS  HA ', ' A 236  LYS  HE2', -0.859, (99.249, -34.942, 2.187)), (' B  70  ALA  HB2', ' B  75  LEU HD11', -0.839, (77.697, -6.06, 46.002)), (' A 223  PHE  CD2', ' A 223  PHE  N  ', -0.826, (98.18, -48.806, 18.936)), (' A 139  SER  HB2', ' B   4  ARG  N  ', -0.814, (82.433, -13.79, 11.614)), (' B 142  ASN HD21', ' B 144  SER  HB3', -0.795, (80.851, -20.797, 35.913)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.767, (62.869, -30.324, 35.452)), (' A 223  PHE  HD2', ' A 223  PHE  N  ', -0.763, (98.177, -47.929, 19.13)), (' A 108  PRO  HA ', ' A 130  MET  HG2', -0.755, (100.161, -16.936, 14.745)), (' B 175  THR HG23', ' B 176  ASP  O  ', -0.748, (64.744, -17.283, 34.812)), (' B 207  TRP  HZ3', ' B 287  LEU HD23', -0.747, (77.31, -24.199, 5.928)), (' A 227  LEU HD22', ' A 231  ASN HD21', -0.746, (107.719, -34.251, 14.586)), (' B 101  TYR  O  ', ' B 102  LYS  HD2', -0.744, (65.056, -2.968, 30.684)), (' A   4  ARG  HB2', ' B 138  GLY  HA2', -0.736, (79.49, -25.009, 24.788)), (' B   3  PHE  HE1', ' B 300  CYS  SG ', -0.731, (76.748, -11.603, 7.287)), (' A 221  ASN HD21', ' A 266  ALA  CB ', -0.73, (98.486, -43.078, 17.865)), (' B 139  SER  HA ', ' B 172  HIS  HE1', -0.727, (77.544, -27.623, 29.314)), (' A 141  LEU  H  ', ' A 141  LEU HD23', -0.719, (82.978, -5.79, 11.894)), (' A 226  THR HG22', ' A 229  ASP  HB2', -0.716, (106.828, -42.012, 12.397)), (' B  76  ARG  HB3', ' B  92  ASP  OD2', -0.714, (73.142, -3.551, 53.488)), (' B 142  ASN  ND2', ' B 144  SER  HB3', -0.706, (80.855, -21.796, 35.614)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.693, (85.849, -37.309, 18.356)), (' B  68  VAL  CG2', ' B  75  LEU  HB2', -0.691, (75.098, -8.51, 49.036)), (' B 244  GLN  O  ', ' B 247  VAL HG13', -0.69, (57.118, -20.084, 6.539)), (' B 217  ARG  HG3', ' B 220  LEU HD12', -0.687, (74.808, -18.981, -5.577)), (' A 231  ASN  O  ', ' A 235  MET  HG3', -0.672, (103.802, -34.479, 7.974)), (' A  21  THR HG23', ' A  25  THR  O  ', -0.672, (87.665, 10.232, 10.784)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.671, (96.227, -11.587, 36.343)), (' B  68  VAL HG23', ' B  75  LEU  HB2', -0.67, (75.364, -8.512, 49.79)), (' A 139  SER  HB2', ' B   4  ARG  CB ', -0.67, (83.24, -13.512, 11.987)), (' A 227  LEU HD22', ' A 231  ASN  ND2', -0.666, (107.525, -34.475, 14.519)), (' B   5  LYS  NZ ', ' B 290  GLU  HB2', -0.665, (76.571, -19.944, 16.995)), (' B 170  GLY  O  ', ' B 171  VAL  O  ', -0.662, (72.846, -30.376, 30.002)), (' A   3  PHE  N  ', ' B 139  SER  HB2', -0.66, (81.274, -28.631, 26.355)), (' B  30  LEU  HG ', ' B 148  VAL HG11', -0.66, (71.489, -11.738, 35.915)), (' B 141  LEU  O  ', ' B 141  LEU HD22', -0.659, (84.608, -26.014, 33.674)), (' B 140  PHE  CD1', ' B 140  PHE  O  ', -0.659, (79.833, -24.204, 32.158)), (' A  50  LEU  O  ', ' A  51  ASN  HB3', -0.655, (100.203, 3.658, -2.984)), (' B  45  THR  O  ', ' B  47  GLU  N  ', -0.651, (71.609, -31.303, 50.213)), (' A 226  THR  CG2', ' A 229  ASP  H  ', -0.649, (108.053, -40.92, 12.609)), (' B 260  ALA  O  ', ' B 263  ASP  HB2', -0.646, (64.919, -19.554, -3.128)), (' A 221  ASN  ND2', ' A 266  ALA  C  ', -0.637, (97.142, -42.663, 17.334)), (' B 256  GLN  C  ', ' B 258  GLY  H  ', -0.633, (67.794, -10.607, -2.355)), (' B 256  GLN  O  ', ' B 258  GLY  N  ', -0.629, (67.703, -11.672, -2.701)), (' A 190  THR HG22', ' A 191  ALA  N  ', -0.623, (100.529, -5.618, -2.914)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.618, (97.955, 7.485, 9.352)), (' A  49  MET  HG3', ' A  49  MET  O  ', -0.613, (94.293, 3.197, 0.761)), (' A 221  ASN HD21', ' A 266  ALA  C  ', -0.611, (97.716, -42.63, 17.695)), (' A   3  PHE  HE2', ' A 291  PHE  CZ ', -0.606, (89.066, -26.34, 26.596)), (' A   4  ARG HH22', ' B 137  LYS  HB2', -0.606, (75.777, -25.559, 22.67)), (' B 167  LEU HD12', ' B 168  PRO  HD3', -0.603, (69.636, -33.418, 33.84)), (' B   5  LYS  HZ3', ' B 290  GLU  HB2', -0.602, (76.601, -20.173, 16.48)), (' B 276  MET  CE ', ' B 281  ILE HG13', -0.601, (80.784, -25.366, 3.2)), (' B 207  TRP  CZ3', ' B 287  LEU HD23', -0.597, (77.138, -23.621, 6.519)), (' A 131  ARG  HD2', ' A 137  LYS  HE3', -0.597, (92.262, -19.608, 9.68)), (' B 151  ASN  HB2', ' B 312  HOH  O  ', -0.592, (68.204, -10.409, 24.388)), (' B 276  MET  HE2', ' B 279  ARG  O  ', -0.589, (82.053, -27.274, 3.198)), (' A 139  SER  HB2', ' B   4  ARG  HB3', -0.582, (83.299, -12.809, 12.643)), (' B 111  THR HG21', ' B 290  GLU  O  ', -0.579, (72.781, -17.503, 16.78)), (' B 102  LYS  HD3', ' B 156  CYS  SG ', -0.572, (65.654, -2.723, 28.224)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.566, (73.674, -25.511, 32.306)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.565, (101.221, -6.031, 3.47)), (' B 186  VAL  N  ', ' B 192  GLN HE22', -0.565, (62.608, -30.342, 35.451)), (' B  19  GLN  O  ', ' B  68  VAL  HA ', -0.565, (76.586, -12.641, 47.653)), (' A 139  SER  HA ', ' B   2  GLY  O  ', -0.564, (84.079, -11.741, 9.747)), (' A 191  ALA  O  ', ' A 192  GLN  O  ', -0.564, (97.989, -9.608, -1.616)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.563, (84.875, -4.67, 27.025)), (' A 296  VAL  O  ', ' A 300  CYS  HB2', -0.56, (92.586, -27.753, 31.731)), (' A 117  CYS  O  ', ' A 144  SER  HA ', -0.559, (84.947, -2.081, 14.519)), (' A 190  THR  CG2', ' A 191  ALA  N  ', -0.557, (100.351, -5.148, -3.135)), (' A 236  LYS  HD3', ' A 236  LYS  O  ', -0.555, (97.26, -34.994, 2.621)), (' B  76  ARG  HB3', ' B  92  ASP  CG ', -0.554, (72.561, -3.681, 53.312)), (' A 291  PHE  HE2', ' A 296  VAL HG22', -0.546, (92.063, -27.031, 26.601)), (' B 139  SER  HA ', ' B 172  HIS  CE1', -0.542, (77.691, -26.979, 29.575)), (' A 100  LYS  HD3', ' A 155  ASP  OD2', -0.54, (95.769, -5.555, 38.597)), (' A  50  LEU  O  ', ' A  51  ASN  CB ', -0.539, (100.131, 3.412, -2.995)), (' A 106  ILE HG23', ' A 107  GLN  N  ', -0.537, (101.115, -14.511, 18.641)), (' B 186  VAL HG22', ' B 192  GLN  NE2', -0.536, (62.278, -32.062, 36.023)), (' B  78  ILE  O  ', ' B  78  ILE HG22', -0.536, (65.246, -5.947, 54.684)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.535, (101.86, -5.203, 12.114)), (' A 139  SER  CB ', ' B   4  ARG  HB3', -0.534, (83.561, -12.782, 12.644)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.53, (102.233, 0.075, 15.718)), (' A 235  MET  HE3', ' A 241  PRO  HG3', -0.529, (104.793, -30.298, 8.059)), (' A 139  SER  HB3', ' B   6  MET  HE3', -0.526, (82.319, -10.767, 13.666)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.526, (101.295, -37.694, 15.772)), (' A  63  ASN  HB3', ' A  77  VAL HG22', -0.525, (96.104, 17.477, 18.877)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.524, (73.37, -24.881, 32.724)), (' B  30  LEU HD13', ' B  32  LEU  HG ', -0.524, (70.511, -8.333, 37.647)), (' A 236  LYS  CE ', ' A 236  LYS  HA ', -0.515, (98.943, -35.304, 2.378)), (' A 291  PHE  CE2', ' A 296  VAL HG22', -0.515, (92.218, -26.924, 26.216)), (' B 270  GLU  HG2', ' B 274  ASN  ND2', -0.515, (73.414, -32.084, -3.671)), (' B 284  SER  OG ', ' B 286  ILE HG13', -0.513, (82.4, -26.18, 10.594)), (' A 221  ASN HD21', ' A 266  ALA  HB1', -0.512, (98.61, -43.588, 18.067)), (' B 141  LEU  CD1', ' B 141  LEU  H  ', -0.508, (83.13, -26.565, 31.099)), (' B 211  ALA  HA ', ' B 282  LEU HD13', -0.508, (79.16, -16.499, 3.769)), (' A 138  GLY  O  ', ' A 172  HIS  HE1', -0.507, (87.048, -11.438, 9.65)), (' A  51  ASN  O  ', ' A  51  ASN  OD1', -0.507, (102.315, 4.905, -1.859)), (' B 118  TYR  HB2', ' B 325  HOH  O  ', -0.504, (83.967, -19.769, 36.502)), (' B 161  TYR  CE1', ' B 174  GLY  HA3', -0.504, (68.678, -21.741, 31.706)), (' B 167  LEU HD21', ' B 185  PHE  CE1', -0.501, (66.087, -31.291, 30.441)), (' B 141  LEU  O  ', ' B 142  ASN  HB3', -0.5, (83.773, -24.264, 35.22)), (' B  47  GLU  CD ', ' B  47  GLU  H  ', -0.495, (72.867, -32.686, 51.034)), (' B 288  GLU  OE1', ' B 290  GLU  HB2', -0.494, (76.233, -20.901, 16.008)), (' B 117  CYS  O  ', ' B 144  SER  HA ', -0.491, (79.302, -19.929, 37.422)), (' B  78  ILE HD11', ' B  92  ASP  HB3', -0.491, (70.139, -2.927, 54.078)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.49, (83.173, -37.242, 16.301)), (' B 201  THR  OG1', ' B 239  TYR  HB3', -0.488, (66.267, -28.544, 10.082)), (' B  86  LEU HD12', ' B 179  GLY  N  ', -0.488, (63.088, -15.771, 37.649)), (' A   4  ARG  NH2', ' B 137  LYS  HB2', -0.488, (76.096, -25.067, 22.641)), (' A  66  PHE  HB2', ' A  77  VAL HG11', -0.487, (93.762, 14.28, 18.199)), (' B  78  ILE  CD1', ' B  92  ASP  HB3', -0.487, (70.022, -2.921, 53.945)), (' B  12  LYS  NZ ', ' B 332  HOH  O  ', -0.485, (77.427, -2.071, 25.923)), (' B 101  TYR  C  ', ' B 102  LYS  HD2', -0.482, (65.363, -3.273, 30.871)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.481, (91.805, 6.792, 28.409)), (' B 256  GLN  C  ', ' B 258  GLY  N  ', -0.48, (68.077, -11.431, -2.698)), (' A 233  VAL  O  ', ' A 236  LYS  HB3', -0.48, (99.137, -36.301, 6.08)), (' A   4  ARG  HD2', ' B 138  GLY  HA3', -0.478, (78.509, -23.376, 25.55)), (' B 245  ASP  N  ', ' B 245  ASP  OD2', -0.476, (56.126, -20.823, 10.538)), (' B 130  MET  HE1', ' B 182  TYR  CG ', -0.474, (64.886, -20.718, 27.591)), (' A 292  THR  HB ', ' A 293  PRO  HD2', -0.474, (98.529, -23.735, 23.487)), (' A  76  ARG  CB ', ' A  76  ARG HH11', -0.473, (92.262, 19.472, 24.698)), (' A 295  ASP  OD1', ' A 298  ARG  NH2', -0.473, (93.176, -19.073, 27.301)), (' B  68  VAL HG21', ' B  75  LEU  HB2', -0.473, (74.424, -8.369, 49.292)), (' A 268  LEU HD22', ' A 272  LEU  HG ', -0.47, (94.526, -36.258, 13.015)), (' B 168  PRO  HD2', ' B 192  GLN  O  ', -0.466, (68.267, -35.38, 32.53)), (' B 253  LEU HD21', ' B 296  VAL  CG1', -0.466, (71.012, -12.236, 6.749)), (' A   4  ARG  CZ ', ' B 138  GLY  N  ', -0.465, (77.056, -24.414, 24.017)), (' B  56  ASP  O  ', ' B  60  ARG  HG3', -0.465, (61.558, -24.259, 56.099)), (' B 252  PRO  O  ', ' B 255  ALA  N  ', -0.464, (65.013, -10.813, 1.325)), (' B   7  ALA  HA ', ' B 127  GLN  NE2', -0.463, (77.107, -13.43, 21.657)), (' B 296  VAL  O  ', ' B 300  CYS  HB2', -0.459, (73.466, -9.671, 7.351)), (' B 207  TRP  CZ3', ' B 287  LEU  HA ', -0.458, (77.597, -24.24, 7.875)), (' A 270  GLU  HG3', ' A 274  ASN  ND2', -0.457, (92.403, -44.544, 12.651)), (' A  63  ASN  HB3', ' A  77  VAL  CG2', -0.457, (96.464, 16.764, 19.273)), (' B 270  GLU  HG2', ' B 274  ASN HD22', -0.457, (74.096, -32.047, -3.006)), (' A  76  ARG  HB3', ' A  76  ARG HH11', -0.455, (92.297, 19.7, 25.116)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.455, (88.995, -11.104, 30.111)), (' B 167  LEU  C  ', ' B 169  THR  H  ', -0.453, (72.356, -34.271, 31.881)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.453, (82.294, 1.84, 21.883)), (' B 141  LEU  H  ', ' B 141  LEU HD13', -0.452, (83.222, -26.329, 31.356)), (' B  71  GLY  HA2', ' B 338  HOH  O  ', -0.451, (83.298, -10.697, 44.004)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.45, (97.264, 7.374, 1.739)), (' A  49  MET  CG ', ' A  49  MET  O  ', -0.45, (94.673, 3.429, 1.182)), (' B 280  THR  HB ', ' B 284  SER  O  ', -0.45, (84.076, -23.769, 5.425)), (' A 115  LEU  O  ', ' A 147  SER  HB3', -0.448, (87.764, -4.675, 18.375)), (' A 292  THR  HB ', ' A 293  PRO  CD ', -0.448, (98.312, -23.883, 23.481)), (' A  55  GLU  HG2', ' A  56  ASP  N  ', -0.448, (106.233, 11.877, 5.336)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.447, (97.314, -21.414, 16.145)), (' A 221  ASN  HB2', ' A 223  PHE  CE2', -0.447, (95.795, -46.91, 18.027)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.447, (91.858, 7.356, 28.732)), (' A 226  THR  CG2', ' A 229  ASP  HB2', -0.446, (107.204, -41.642, 12.901)), (' B 127  GLN  HA ', ' B 127  GLN HE21', -0.446, (76.87, -14.937, 22.425)), (' A 107  GLN  C  ', ' A 130  MET  HE2', -0.445, (101.288, -15.362, 16.805)), (' B 101  TYR  HA ', ' B 157  VAL  O  ', -0.445, (68.345, -4.528, 30.039)), (' B 138  GLY  O  ', ' B 140  PHE  N  ', -0.443, (79.353, -24.989, 28.859)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.443, (63.538, -17.783, 38.286)), (' B 165  MET  HE1', ' B 187  ASP  HA ', -0.439, (65.608, -27.778, 39.237)), (' B  45  THR HG22', ' B  47  GLU  OE1', -0.435, (73.703, -31.354, 52.869)), (' A 141  LEU  HB2', ' A 350  HOH  O  ', -0.432, (79.54, -3.169, 11.06)), (' A 315  HOH  O  ', ' B  12  LYS  HG3', -0.432, (78.312, -3.267, 28.464)), (' A  41  HIS  HA ', ' A  54  TYR  HE2', -0.432, (97.346, 5.484, 7.38)), (' B 113  SER  OG ', ' B 127  GLN  NE2', -0.431, (76.369, -13.134, 23.167)), (' B 170  GLY  O  ', ' B 171  VAL HG22', -0.431, (72.533, -31.711, 29.038)), (' A  45  THR  OG1', ' A  47  GLU  HG3', -0.428, (94.579, 12.534, 0.75)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.426, (82.817, -12.081, 39.334)), (' B 300  CYS  O  ', ' B 301  SER  C  ', -0.422, (73.192, -5.136, 6.306)), (' A  52  PRO  HG2', ' A  54  TYR  CE1', -0.421, (100.372, 4.358, 4.322)), (' B 133  ASN  O  ', ' B 134  HIS  HB2', -0.42, (64.373, -27.984, 26.097)), (' B 207  TRP  CE2', ' B 288  GLU  HB3', -0.417, (77.362, -20.709, 9.716)), (' A 167  LEU  CD1', ' A 167  LEU  N  ', -0.417, (94.456, -8.438, 4.688)), (' A 139  SER  O  ', ' A 140  PHE  HD2', -0.416, (84.605, -8.508, 12.752)), (' A  14  GLU  OE1', ' B  11  GLY  N  ', -0.415, (81.474, -5.46, 28.878)), (' A  59  ILE  C  ', ' A  61  LYS  H  ', -0.414, (101.639, 17.551, 9.362)), (' B 141  LEU  O  ', ' B 142  ASN  CB ', -0.414, (83.255, -24.486, 35.401)), (' A 139  SER  HB2', ' B   4  ARG  CA ', -0.413, (82.686, -13.91, 12.363)), (' A  37  TYR  O  ', ' A 162  MET  HE1', -0.412, (94.918, 2.299, 19.247)), (' A 286  ILE  HA ', ' A 286  ILE HD12', -0.412, (85.861, -32.987, 12.939)), (' B 300  CYS  O  ', ' B 302  GLY  N  ', -0.412, (73.854, -5.059, 6.234)), (' B 142  ASN  ND2', ' B 325  HOH  O  ', -0.41, (83.06, -20.999, 36.036)), (' B 207  TRP  NE1', ' B 282  LEU HD23', -0.409, (78.209, -18.576, 8.453)), (' B 167  LEU  HA ', ' B 167  LEU HD12', -0.408, (70.011, -32.497, 34.13)), (' B  28  ASN  HB2', ' B 146  GLY  HA3', -0.408, (75.023, -17.332, 39.376)), (' B  17  MET  HG3', ' B 117  CYS  SG ', -0.407, (79.063, -12.62, 36.477)), (' A 235  MET  HE3', ' A 241  PRO  CG ', -0.406, (105.42, -30.035, 7.797)), (' B 118  TYR  HE1', ' B 328  HOH  O  ', -0.405, (84.616, -22.744, 42.616)), (' A 190  THR  CG2', ' A 191  ALA  H  ', -0.405, (100.198, -5.493, -3.576)), (' A 221  ASN  ND2', ' A 267  ALA  N  ', -0.404, (97.018, -42.296, 18.529)), (' A  51  ASN  N  ', ' A  52  PRO  CD ', -0.403, (99.005, 4.084, 0.243)), (' B 127  GLN  HA ', ' B 127  GLN  NE2', -0.401, (76.571, -15.405, 22.466)), (' B  63  ASN  HB3', ' B  77  VAL HG22', -0.401, (68.458, -10.53, 54.725)), (' A 185  PHE  HZ ', ' A 194  ALA  HB2', -0.401, (99.032, -13.321, 5.026)), (' A  16  CYS  HB3', ' A  30  LEU HD23', -0.4, (92.209, 0.858, 25.702))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
