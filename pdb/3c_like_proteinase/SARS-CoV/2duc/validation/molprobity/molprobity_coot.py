# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'THR', 0.0, (45.93999999999999, 21.839, 1.7200000000000002)), ('A', '  49 ', 'MET', 0.02634156413917592, (49.00999999999999, 17.064, 0.18))]
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.0, (39.61600000000001, -10.279, 23.053)), ('A', '  22 ', 'CYS', 0.09451781010169152, (43.699, 24.615, 10.905)), ('A', ' 222 ', 'ARG', 0.0033389603458985665, (53.897999999999996, -36.236999999999995, 23.570000000000004)), ('A', ' 227 ', 'LEU', 0.05649057547586504, (63.68000000000003, -24.45, 17.132)), ('A', ' 244 ', 'GLN', 0.13137536058694887, (65.163, -17.854, 21.356)), ('B', '  93 ', 'THR', 0.10105827008079322, (26.071000000000005, 10.774999999999997, 48.356)), ('B', ' 132 ', 'PRO', 0.11332236838429376, (18.597000000000005, -15.355999999999998, 19.785000000000004)), ('B', ' 268 ', 'LEU', 0.0002726039022831459, (24.29, -15.685999999999996, 1.1850000000000005)), ('B', ' 293 ', 'PRO', 0.0401504813529798, (22.864000000000004, -3.066999999999999, 10.344000000000001))]
data['cbeta'] = []
data['probe'] = [(' A   4  ARG  H  ', ' A 299  GLN HE22', -0.952, (39.21, -12.679, 26.487)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.909, (40.137, -13.129, 27.054)), (' A   4  ARG  NH2', ' B 138  GLY  HA3', -0.89, (32.221, -13.012, 24.481)), (' B 110  GLN  HG3', ' B 415  HOH  O  ', -0.834, (17.099, -4.657, 19.888)), (' A   3  PHE  HA ', ' A 299  GLN HE21', -0.815, (39.894, -14.201, 28.199)), (' A  45  THR HG22', ' A  46  ALA  H  ', -0.765, (44.196, 20.954, -0.46)), (' B 167  LEU HD12', ' B 171  VAL HG23', -0.743, (24.336, -19.636, 28.513)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.724, (55.14, 7.495, 4.129)), (' B  21  THR  HB ', ' B  67  LEU  CD2', -0.694, (29.982, -5.227, 51.939)), (' A 222  ARG  HG3', ' A 222  ARG  O  ', -0.689, (55.999, -37.517, 22.543)), (' A   4  ARG  N  ', ' A 299  GLN HE22', -0.688, (39.461, -13.299, 26.649)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.682, (51.475, 19.492, 12.896)), (' A  69  GLN  HG2', ' A  74  GLN  NE2', -0.678, (36.569, 25.475, 19.323)), (' B  21  THR  HB ', ' B  67  LEU  HG ', -0.676, (30.901, -5.021, 50.922)), (' A  43  ILE  HB ', ' A  61  LYS  NZ ', -0.654, (49.671, 24.411, 8.22)), (' A 131  ARG  HD2', ' A 197  ASP  OD1', -0.637, (49.429, -8.251, 9.434)), (' B 198  THR  OG1', ' B 240  GLU  HG2', -0.625, (18.07, -17.6, 14.695)), (' A   3  PHE  HA ', ' A 299  GLN  NE2', -0.624, (39.485, -13.492, 28.015)), (' A 131  ARG  CD ', ' A 197  ASP  OD1', -0.623, (50.155, -8.209, 9.28)), (' A 222  ARG  HG3', ' A 222  ARG HH11', -0.617, (56.552, -38.395, 23.382)), (' B  21  THR  HB ', ' B  67  LEU  CG ', -0.615, (30.612, -4.814, 51.957)), (' A  57  LEU  O  ', ' A  60  ARG  HG2', -0.61, (53.046, 28.089, 6.867)), (' B  21  THR  HB ', ' B  67  LEU HD21', -0.608, (31.004, -6.148, 52.197)), (' A 304  THR HG21', ' B 118  TYR  HB3', -0.603, (38.745, -6.431, 38.308)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.602, (19.597, -7.677, 45.302)), (' A 298  ARG  HD2', ' A 305  PHE  HZ ', -0.598, (44.845, -5.104, 31.796)), (' A 180  LYS  HD2', ' A 373  HOH  O  ', -0.591, (61.17, 7.493, 18.015)), (' A  45  THR HG22', ' A  46  ALA  N  ', -0.583, (44.045, 21.583, 0.007)), (' B 140  PHE  HB2', ' B 172  HIS  CD2', -0.582, (30.539, -15.064, 31.157)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.567, (27.63, -14.223, 31.957)), (' A 232  LEU  O  ', ' A 236  LYS  HE3', -0.554, (59.557, -25.088, 6.499)), (' A  45  THR  CG2', ' A  46  ALA  H  ', -0.551, (44.938, 21.296, -0.471)), (' A 100  LYS  HD2', ' A 155  ASP  OD2', -0.547, (48.816, 6.291, 38.351)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.538, (54.684, 12.572, 15.981)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.538, (27.908, 7.557, 42.765)), (' A   4  ARG  CZ ', ' B 138  GLY  HA3', -0.535, (32.479, -13.041, 24.48)), (' A 295  ASP  OD1', ' A 298  ARG  NH2', -0.534, (47.377, -7.174, 26.573)), (' A   4  ARG  N  ', ' A 299  GLN  NE2', -0.533, (39.64, -13.588, 26.986)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.527, (27.114, -14.526, 32.146)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.527, (17.256, -6.489, 37.528)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.516, (55.4, 12.45, 15.976)), (' A   4  ARG  NH2', ' B 138  GLY  CA ', -0.508, (31.596, -13.917, 24.552)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.5, (45.556, -7.986, 34.209)), (' A   2  GLY  H  ', ' A 214  ASN HD21', -0.498, (38.667, -18.861, 31.203)), (' A 126  TYR  CD1', ' B   4  ARG  HD3', -0.497, (40.41, -2.12, 15.614)), (' A  67  LEU HD11', ' A  74  GLN  HG3', -0.497, (38.053, 27.574, 19.702)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.493, (50.657, -8.151, 10.005)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.49, (21.702, -11.264, 16.879)), (' A  43  ILE  HB ', ' A  61  LYS  HZ2', -0.489, (49.666, 24.939, 8.165)), (' A 244  GLN  HA ', ' A 244  GLN HE21', -0.48, (64.957, -19.239, 21.929)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.476, (27.731, 7.605, 42.166)), (' A  45  THR  HB ', ' A  48  ASP  O  ', -0.469, (46.361, 19.038, 0.509)), (' B 133  ASN  ND2', ' B 194  ALA  HB1', -0.465, (20.86, -20.819, 24.786)), (' A 298  ARG  HD2', ' A 305  PHE  CZ ', -0.458, (45.002, -5.052, 32.303)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.456, (16.98, -6.06, 37.546)), (' B 166  GLU  OE1', ' B 172  HIS  CD2', -0.437, (29.501, -17.157, 32.006)), (' B 139  SER  HA ', ' B 172  HIS  HE1', -0.436, (31.609, -16.579, 28.459)), (' B 167  LEU  HB2', ' B 171  VAL  O  ', -0.435, (26.386, -19.555, 30.511)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.433, (45.379, 2.693, 21.105)), (' A  51  ASN  N  ', ' A  52  PRO  HD3', -0.432, (53.547, 16.232, -0.261)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.43, (61.016, -15.567, 17.845)), (' B 166  GLU  HB2', ' B 449  HOH  O  ', -0.429, (27.451, -19.537, 36.658)), (' A  43  ILE  O  ', ' A  43  ILE HG13', -0.425, (50.254, 22.404, 7.04)), (' A 232  LEU  O  ', ' A 236  LYS  HG3', -0.423, (59.048, -24.466, 6.548)), (' B 141  LEU  N  ', ' B 141  LEU HD22', -0.422, (35.431, -12.366, 31.588)), (' B 141  LEU  CD2', ' B 141  LEU  N  ', -0.42, (35.601, -11.738, 31.573)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.419, (20.209, -21.191, -0.166)), (' A   4  ARG HH21', ' B 138  GLY  HA3', -0.411, (31.837, -13.403, 25.658)), (' A   2  GLY  HA2', ' B 139  SER  OG ', -0.408, (35.776, -17.215, 29.944)), (' B  47  GLU  H  ', ' B  47  GLU  HG3', -0.405, (26.439, -20.616, 50.777)), (' A   2  GLY  H  ', ' A 214  ASN  ND2', -0.405, (38.889, -19.092, 30.939)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.401, (27.77, -3.577, 27.779))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
