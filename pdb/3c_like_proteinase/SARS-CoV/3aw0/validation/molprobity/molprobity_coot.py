# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  25 ', 'THR', 0.2566084971495055, (-26.863, -50.963, -0.425)), ('A', '  47 ', 'GLU', 0.12854739940703475, (-35.859, -43.594, 2.855)), ('A', '  67 ', 'LEU', 0.24281777225584972, (-23.58, -60.88399999999999, 1.337)), ('A', '  72 ', 'ASN', 0.014927208667523721, (-14.647, -63.574999999999996, -6.229)), ('A', '  94 ', 'SER', 0.047390497175051005, (-10.718, -66.675, 8.912)), ('A', ' 106 ', 'ILE', 0.0, (-7.030000000000001, -41.683, 17.763)), ('A', ' 177 ', 'LEU', 0.04135918469848071, (-13.302, -49.566, 15.265)), ('A', ' 189 ', 'GLN', 0.01607488083300652, (-29.578, -38.375, 7.195)), ('A', ' 196 ', 'THR', 0.13646720201743917, (-15.402000000000005, -24.322000000000003, 14.131000000000002)), ('A', ' 232 ', 'LEU', 0.03358691317287791, (-2.6290000000000027, -14.466000000000003, 23.951)), ('A', ' 235 ', 'MET', 0.08352401680325758, (-5.872000000000002, -17.091, 20.554)), ('A', ' 262 ', 'LEU', 0.0, (9.834999999999999, -21.154000000000003, 23.818)), ('A', ' 272 ', 'LEU', 0.0, (1.827999999999999, -15.166, 12.771)), ('A', ' 277 ', 'ASN', 0.054668565335622143, (6.859999999999998, -12.19, 3.304)), ('A', ' 286 ', 'ILE', 0.10489692715620529, (1.5119999999999998, -21.523999999999997, 4.426)), ('A', ' 306 ', 'GLN', 0.2895651911382441, (24.359, -27.975999999999996, 10.097))]
data['cbeta'] = [('A', ' 290 ', 'GLU', ' ', 0.30902993733245565, (-1.8060000000000003, -32.042, 8.344)), ('A', ' 306 ', 'GLN', ' ', 0.32273008844702444, (24.373000000000005, -26.614, 9.353))]
data['probe'] = [(' A  49  MET  CE ', ' B   5  LEU HD12', -1.361, (-27.551, -43.891, 6.0)), (' A  49  MET  CE ', ' B   5  LEU  CD1', -1.146, (-26.497, -43.26, 6.555)), (' A  49  MET  HE3', ' B   5  LEU HD12', -1.111, (-28.013, -43.381, 7.01)), (' A  49  MET  HE2', ' B   5  LEU HD12', -1.077, (-26.884, -44.242, 6.218)), (' A 145  CYS  SG ', ' B   6  HSV  C  ', -1.06, (-20.49, -44.625, 2.15)), (' A  49  MET  HE3', ' B   5  LEU  CD1', -1.048, (-27.163, -42.411, 6.848)), (' A 165  MET  HB3', ' B   5  LEU HD23', -0.953, (-23.271, -40.933, 6.581)), (' A  67  LEU  HG ', ' A  74  GLN HE21', -0.918, (-23.461, -62.84, -1.381)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.9, (-23.997, -37.885, 13.145)), (' A  39  PRO  HB3', ' A 164  HIS  CD2', -0.893, (-20.903, -46.139, 8.767)), (' A  67  LEU  HG ', ' A  74  GLN  NE2', -0.86, (-23.329, -62.458, -1.705)), (' A 159  PHE  HB3', ' A 177  LEU HD13', -0.79, (-9.837, -49.938, 12.251)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.769, (7.832, -36.044, 2.776)), (' A  13  VAL HG21', ' A 150  PHE  CE2', -0.751, (-4.509, -49.663, 5.776)), (' A  44  CYS  CB ', ' A  49  MET  SD ', -0.75, (-29.354, -45.904, 5.699)), (' A  44  CYS  SG ', ' A  49  MET  SD ', -0.744, (-30.083, -45.811, 6.673)), (' A  13  VAL HG12', ' A 115  LEU HD23', -0.737, (-6.678, -51.539, 3.715)), (' A 165  MET  HB3', ' B   5  LEU  CD2', -0.735, (-23.101, -41.28, 6.816)), (' A 296  VAL HG13', ' A 300  CYS  SG ', -0.733, (10.447, -34.0, 10.585)), (' A  44  CYS  HB3', ' A  49  MET  SD ', -0.723, (-30.0, -45.599, 5.477)), (' A 214  ASN  HB2', ' A 409  HOH  O  ', -0.712, (14.43, -28.174, 5.388)), (' A 212  VAL  O  ', ' A 215  GLY  N  ', -0.704, (17.454, -27.626, 8.594)), (' A 231  ASN  O  ', ' A 235  MET  HE2', -0.69, (-3.744, -18.199, 22.717)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.677, (-12.398, -36.27, 3.832)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.661, (-6.769, -49.471, -1.026)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.653, (-0.329, -21.714, 23.416)), (' A 225  THR  O  ', ' A 262  LEU  HG ', -0.653, (8.958, -19.106, 26.076)), (' A 186  VAL  H  ', ' A 192  GLN  NE2', -0.642, (-23.995, -37.057, 13.221)), (' A 127  GLN  NE2', ' A 436  HOH  O  ', -0.628, (-0.118, -41.008, 9.967)), (' A 162  MET  HG2', ' A 164  HIS  CE1', -0.621, (-17.885, -47.067, 9.539)), (' A  49  MET  HE2', ' B   5  LEU  CD1', -0.607, (-26.419, -43.406, 6.323)), (' A  49  MET  HB3', ' A 189  GLN  HB2', -0.594, (-30.398, -40.547, 5.616)), (' A 145  CYS  SG ', ' B   6  HSV  O  ', -0.579, (-20.97, -45.484, 2.398)), (' A  47  GLU  O  ', ' A  50  LEU HD12', -0.573, (-35.73, -42.035, 4.641)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.572, (-23.751, -48.016, 14.326)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.57, (-20.695, -53.539, -3.822)), (' A  41  HIS  HB2', ' A  49  MET  HE1', -0.564, (-27.659, -45.515, 7.315)), (' A  13  VAL  CG1', ' A 115  LEU HD23', -0.552, (-6.564, -51.144, 3.86)), (' A 165  MET  CB ', ' B   5  LEU HD23', -0.546, (-22.779, -39.852, 6.582)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.545, (-3.163, -52.173, 0.916)), (' A 284  SER  OG ', ' A 286  ILE HG22', -0.543, (2.103, -24.45, 2.971)), (' A  28  ASN  O  ', ' A 146  GLY  HA3', -0.541, (-16.845, -50.776, 4.59)), (' A 145  CYS  SG ', ' B   6  HSV  CA ', -0.54, (-21.151, -43.67, 2.632)), (' A  51  ASN  C  ', ' A  51  ASN HD22', -0.533, (-34.837, -41.866, 12.427)), (' A  41  HIS  CB ', ' A  49  MET  HE1', -0.53, (-27.088, -45.337, 7.548)), (' A  13  VAL HG21', ' A 150  PHE  CD2', -0.523, (-5.076, -49.09, 6.791)), (' A  13  VAL HG21', ' A 150  PHE  CZ ', -0.519, (-4.062, -49.053, 6.038)), (' A 264  MET  O  ', ' A 267  ALA  HB3', -0.511, (9.266, -20.388, 16.635)), (' A 244  GLN  HG3', ' A 426  HOH  O  ', -0.509, (4.795, -29.991, 31.175)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.506, (-6.571, -44.969, 7.318)), (' A 214  ASN  CB ', ' A 409  HOH  O  ', -0.498, (14.859, -28.077, 5.525)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.496, (-18.478, -48.382, 14.847)), (' A 303  VAL  O  ', ' A 303  VAL HG23', -0.495, (21.356, -35.096, 9.506)), (' A  39  PRO  HB3', ' A 164  HIS  NE2', -0.491, (-20.252, -47.387, 9.573)), (' A  41  HIS  HB2', ' A  49  MET  CE ', -0.491, (-27.481, -45.452, 6.813)), (' A 209  TYR  O  ', ' A 213  ILE HG13', -0.488, (13.581, -29.939, 12.216)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.488, (8.682, -35.988, 3.425)), (' A 152  ILE HG12', ' A 157  VAL HG22', -0.479, (-0.225, -51.702, 9.415)), (' A 185  PHE  HA ', ' A 192  GLN HE21', -0.478, (-23.598, -36.026, 14.038)), (' A  51  ASN  C  ', ' A  51  ASN  ND2', -0.474, (-35.571, -42.025, 12.42)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.466, (-24.12, -52.514, 10.456)), (' A 164  HIS  HD2', ' A 405  HOH  O  ', -0.466, (-22.481, -46.242, 9.751)), (' A 214  ASN  N  ', ' A 214  ASN HD22', -0.459, (15.49, -31.21, 7.653)), (' A  49  MET  HE3', ' B   5  LEU HD11', -0.456, (-27.128, -42.873, 8.022)), (' A 106  ILE  HA ', ' A 106  ILE HD12', -0.449, (-4.94, -42.145, 18.166)), (' A  22  CYS  HB3', ' A  42  VAL  O  ', -0.449, (-27.593, -53.103, 3.92)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.448, (-7.921, -62.362, 8.308)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.443, (6.211, -38.887, 3.093)), (' A 212  VAL  C  ', ' A 215  GLY  H  ', -0.437, (16.468, -28.059, 9.31)), (' A 207  TRP  CE2', ' A 288  GLU  HB3', -0.437, (4.417, -27.254, 7.159)), (' A 231  ASN  ND2', ' A 242  LEU  H  ', -0.434, (-0.855, -21.694, 23.67)), (' A  15  GLY  HA3', ' A  97  LYS  HD3', -0.43, (-4.886, -59.188, 2.266)), (' A 244  GLN  HB2', ' A 431  HOH  O  ', -0.42, (3.846, -25.431, 31.426)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.42, (-15.89, -39.389, 5.351)), (' A  84  ASN  HB3', ' A 179  GLY  O  ', -0.418, (-20.234, -46.762, 17.477)), (' A  61  LYS  HE2', ' A 418  HOH  O  ', -0.409, (-34.271, -54.431, 7.616)), (' A  41  HIS  CD2', ' B   5  LEU HD13', -0.408, (-24.804, -44.52, 7.246)), (' A 166  GLU  HB2', ' B   6  HSV  HE1', -0.403, (-18.437, -37.87, 2.065))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
