# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  33 ', 'ASP', 0.030895732811236643, (3.0239999999999996, -23.547, 14.18)), ('A', '  34 ', 'ASP', 0.02198539417329904, (6.558, -25.079000000000008, 14.367999999999999)), ('A', '  46 ', 'ALA', 0.0004990879907581119, (26.455, -6.551, 25.512)), ('A', '  47 ', 'GLU', 0.03192297293542204, (26.578999999999986, -3.6050000000000013, 23.174)), ('A', '  49 ', 'MET', 0.02499065267356771, (24.825999999999993, -2.937, 18.615)), ('A', ' 286 ', 'ILE', 0.0050549236200021575, (-7.859, 18.395, 20.88))]
data['omega'] = [('A', '  48 ', 'ASP', None, (27.326, -4.366, 21.03))]
data['rota'] = [('A', '  50 ', 'LEU', 0.211368160199535, (27.185000000000002, -0.083, 17.824)), ('A', '  65 ', 'SER', 0.08708780623643372, (22.564999999999998, -21.341000000000008, 21.274)), ('A', '  67 ', 'LEU', 0.13960879135647838, (16.550999999999995, -21.291, 24.297)), ('A', '  86 ', 'LEU', 0.024912765416889433, (11.549499999999997, -10.42025, 12.582250000000002)), ('A', '  86 ', 'LEU', 9.743904923926448e-05, (11.532499999999999, -11.990250000000001, 11.63625)), ('A', ' 106 ', 'ILE', 0.0, (0.24099999999999877, -1.951, 7.621)), ('A', ' 121 ', 'SER', 0.1397330075808176, (4.656, -13.087, 29.6)), ('A', ' 122 ', 'PRO', 0.0, (1.8889999999999985, -10.701, 28.407)), ('A', ' 128 ', 'CYS', 0.04976077550071012, (-1.681, 2.5, 18.626)), ('A', ' 153 ', 'ASP', 0.004931156652645123, (-10.761, -9.923000000000002, 11.57)), ('A', ' 180 ', 'LYS', 0.0, (10.431, -3.520666666666667, 3.4659999999999997)), ('A', ' 188 ', 'ARG', 0.2849157108379443, (21.858999999999998, -0.854, 15.233)), ('A', ' 190 ', 'THR', 0.008608967298220934, (23.176, 4.776, 15.694)), ('A', ' 212 ', 'VAL', 0.007351242675213143, (-22.002, 13.293000000000001, 15.251)), ('A', ' 214 ', 'ASN', 0.04123829743958385, (-22.878, 9.631000000000002, 18.938)), ('A', ' 227 ', 'LEU', 0.0, (-10.219, 19.925, -1.585)), ('A', ' 268 ', 'LEU', 0.024858452678416684, (-12.339999999999996, 21.092, 10.512)), ('A', ' 279 ', 'ARG', 0.0012499725113924577, (-15.365, 22.952, 24.184)), ('A', ' 284 ', 'SER', 0.04039421029416028, (-11.239, 15.593, 24.088)), ('A', ' 286 ', 'ILE', 0.10695627659456704, (-7.859, 18.395, 20.88)), ('A', ' 306 ', 'GLN', 0.005707850003388752, (-31.149800000000006, 12.1856, 11.9878)), ('A', ' 306 ', 'GLN', 0.0012199600471349866, (-30.099599999999995, 10.9722, 12.1624))]
data['cbeta'] = [('A', '  21 ', 'THR', ' ', 0.25602245452966516, (17.348999999999993, -16.775, 26.634)), ('A', '  30 ', 'LEU', ' ', 0.26639471369732437, (5.468999999999999, -14.331, 17.516)), ('A', '  60 ', 'ARG', ' ', 0.2757883969282694, (29.303, -16.707, 15.9)), ('A', '  80 ', 'HIS', ' ', 0.25175820357246215, (17.940999999999995, -20.575999999999993, 13.651)), ('A', '  88 ', 'ARG', ' ', 0.3640245175016944, (12.639999999999995, -17.747, 11.184)), ('A', ' 102 ', 'LYS', ' ', 0.28329793866748104, (-2.859, -12.748, 7.691)), ('A', ' 106 ', 'ILE', ' ', 0.25784813290363584, (-0.051000000000000156, -1.989, 9.11)), ('A', ' 155 ', 'ASP', 'A', 0.32103085120679836, (-11.826999999999998, -16.679, 14.278999999999998)), ('A', ' 175 ', 'THR', ' ', 0.2774331667180093, (10.265999999999996, -5.333000000000002, 11.553)), ('A', ' 190 ', 'THR', ' ', 0.293579002079819, (22.504999999999992, 4.428000000000002, 14.347)), ('A', ' 212 ', 'VAL', ' ', 0.6124707045389881, (-22.323, 14.304, 14.029999999999998)), ('A', ' 277 ', 'ASN', ' ', 0.4842488467899148, (-12.192, 28.775, 22.237)), ('A', ' 285 ', 'THR', ' ', 0.30400363820479126, (-9.489999999999998, 19.924, 25.059)), ('A', ' 286 ', 'ILE', ' ', 0.35124978947102925, (-6.49, 17.887, 21.415)), ('A', ' 290 ', 'GLU', ' ', 0.3100166251292993, (-4.577000000000002, 7.403000000000001, 17.305)), ('A', ' 291 ', 'PHE', ' ', 0.2621516665913695, (-10.259, 7.060000000000001, 15.648))]
data['probe'] = [(' A  45  THR HG22', ' A  48 AASP  CG ', -1.067, (27.449, -6.872, 19.917)), (' A 231  ASN  O  ', ' A 235 AMET  HG2', -0.979, (-2.818, 21.844, 2.254)), (' A  41  HIS  HB2', ' A  49  MET  HE1', -0.899, (19.891, -5.305, 18.935)), (' A 146  GLY  O  ', ' A 162 AMET  HE2', -0.897, (7.291, -9.667, 19.106)), (' A 308   CL CL  ', ' A 410  HOH  O  ', -0.867, (17.675, -6.402, 5.122)), (' A  45  THR  O  ', ' A  47  GLU  N  ', -0.797, (25.628, -5.412, 22.738)), (' A  45  THR HG22', ' A  48 AASP  OD1', -0.761, (28.642, -7.622, 20.183)), (' A 106  ILE HD13', ' A 110  GLN  HB2', -0.739, (-2.207, 0.538, 9.323)), (' A 291  PHE  HB2', ' A 314  HOH  O  ', -0.736, (-9.991, 9.034, 14.852)), (' A  45  THR HG22', ' A  48 AASP  CB ', -0.729, (28.008, -6.236, 20.244)), (' A 162 BMET  HE3', ' A 164  HIS  NE2', -0.724, (11.843, -7.341, 14.467)), (' A 188  ARG  HD3', ' A 404  HOH  O  ', -0.689, (24.022, -0.203, 11.243)), (' A  48 BASP  C  ', ' A  50  LEU  H  ', -0.677, (27.24, -2.065, 18.653)), (' A  56  ASP  O  ', ' A  60  ARG  HD3', -0.675, (29.518, -14.942, 12.718)), (' A  48 BASP  C  ', ' A  50  LEU  N  ', -0.67, (26.985, -2.055, 18.653)), (' A 304  THR  HB ', ' A 306 BGLN HE22', -0.669, (-28.882, 8.554, 11.905)), (' A 269  LYS  O  ', ' A 273  GLN  HG3', -0.662, (-9.576, 26.741, 9.421)), (' A  48 AASP  O  ', ' A  48 AASP  OD2', -0.635, (27.238, -6.102, 18.096)), (' A 276  MET  O  ', ' A 278  GLY  N  ', -0.634, (-12.29, 25.418, 22.881)), (' A 285  THR  O  ', ' A 285  THR  OG1', -0.622, (-8.032, 19.099, 24.556)), (' A 222  ARG  NH1', ' A 310  HOH  O  ', -0.616, (-22.796, 30.784, 3.343)), (' A  45  THR  CG2', ' A  48 AASP  OD1', -0.613, (28.541, -7.493, 20.777)), (' A 304  THR  HB ', ' A 306 BGLN  NE2', -0.609, (-28.796, 9.314, 11.938)), (' A  55  GLU  HB2', ' A 335  HOH  O  ', -0.608, (24.549, -10.084, 6.99)), (' A  41  HIS  CB ', ' A  49  MET  HE1', -0.605, (19.423, -5.775, 18.618)), (' A 190  THR HG23', ' A 191  ALA  O  ', -0.586, (21.882, 6.903, 13.354)), (' A  45  THR  OG1', ' A  46  ALA  N  ', -0.571, (26.675, -8.469, 24.074)), (' A  45  THR  CG2', ' A  48 AASP  HB3', -0.57, (28.862, -6.93, 21.039)), (' A  76  ARG HH21', ' A  78  ILE HG22', -0.563, (16.631, -30.506, 17.526)), (' A 190  THR  CG2', ' A 192  GLN  HB3', -0.562, (20.663, 6.151, 13.337)), (' A 298  ARG  HG3', ' A 399  HOH  O  ', -0.562, (-14.519, -4.229, 14.273)), (' A 206  ALA  HB2', ' A 293  PRO  HG3', -0.56, (-12.402, 8.325, 9.288)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.553, (17.387, -12.72, 14.872)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.547, (-13.198, 21.246, 22.835)), (' A  34  ASP  OD1', ' A  90 BLYS  HE3', -0.544, (9.0, -27.332, 10.867)), (' A 219  PHE  HE1', ' A 264 AMET  HE1', -0.542, (-18.461, 17.497, 12.482)), (' A 176  ASP  HB2', ' A 329  HOH  O  ', -0.532, (4.507, -7.923, 8.491)), (' A  44  CYS  SG ', ' A  54  TYR  CE2', -0.532, (22.717, -7.453, 16.122)), (' A  41  HIS  HB2', ' A  49  MET  CE ', -0.532, (20.595, -5.636, 18.921)), (' A 132  PRO  HD2', ' A 197  ASP  OD2', -0.531, (3.226, 11.369, 11.569)), (' A 289  ASP  C  ', ' A 289  ASP  OD2', -0.531, (-4.674, 10.156, 15.201)), (' A 140  PHE  HD1', ' A 172  HIS  CD2', -0.528, (7.941, 1.284, 22.284)), (' A  45  THR  CG2', ' A  48 AASP  CB ', -0.517, (28.586, -6.957, 20.835)), (' A 285  THR  O  ', ' A 286  ILE  CG1', -0.516, (-7.517, 17.037, 22.777)), (' A 271  LEU HD13', ' A 287  LEU HD21', -0.515, (-11.759, 19.973, 15.731)), (' A 140  PHE  HD1', ' A 172  HIS  CG ', -0.514, (7.762, 2.02, 22.354)), (' A  61  LYS  HB2', ' A  65  SER  OG ', -0.51, (24.561, -20.699, 18.603)), (' A  48 AASP  C  ', ' A  48 AASP  OD2', -0.506, (26.81, -5.9, 18.785)), (' A  42  VAL  O  ', ' A  42  VAL HG22', -0.505, (19.475, -13.009, 21.5)), (' A 190  THR HG23', ' A 191  ALA  C  ', -0.502, (21.426, 7.402, 14.048)), (' A 190  THR HG21', ' A 384  HOH  O  ', -0.501, (21.085, 5.193, 11.89)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.495, (-10.374, 6.506, 0.633)), (' A 208  LEU  HB3', ' A 264 AMET  HE2', -0.494, (-16.116, 16.231, 12.294)), (' A 253  LEU HD21', ' A 297  VAL HG23', -0.486, (-17.887, 4.551, 10.086)), (' A 233  VAL  O  ', ' A 234  ALA  C  ', -0.481, (-2.955, 23.031, 6.302)), (' A 226  THR  HB ', ' A 333  HOH  O  ', -0.475, (-10.908, 22.0, -4.612)), (' A 106  ILE  CD1', ' A 110  GLN  HB2', -0.475, (-2.348, -0.055, 9.92)), (' A  41  HIS  CG ', ' A  49  MET  HE1', -0.472, (19.081, -6.165, 19.211)), (' A 165 BMET  HE3', ' A 167  LEU HD21', -0.462, (14.988, 4.317, 16.079)), (' A 167  LEU  HB3', ' A 168  PRO  CD ', -0.46, (14.585, 7.878, 18.362)), (' A 268  LEU  O  ', ' A 269  LYS  C  ', -0.457, (-10.824, 23.742, 10.633)), (' A 280  THR HG22', ' A 285  THR HG22', -0.456, (-12.039, 19.765, 26.066)), (' A 148  VAL HG12', ' A 162 AMET  HE3', -0.456, (5.919, -10.062, 17.418)), (' A 148  VAL  CG1', ' A 162 AMET  HE3', -0.448, (5.757, -10.56, 17.651)), (' A 212  VAL  HA ', ' A 216  ASP  O  ', -0.447, (-22.392, 14.955, 16.155)), (' A  19  GLN  NE2', ' A 119  ASN  HB3', -0.446, (11.111, -14.087, 30.585)), (' A 180  LYS  HB3', ' A 180 ALYS  HE3', -0.446, (9.506, -3.442, 5.432)), (' A 272  LEU  HA ', ' A 272  LEU HD23', -0.445, (-6.93, 23.917, 13.874)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.443, (-8.89, 25.735, 6.922)), (' A 306 BGLN  HB2', ' A 306 BGLN HE21', -0.438, (-30.859, 9.886, 13.729)), (' A 199  THR HG23', ' A 289  ASP  OD1', -0.435, (-2.832, 13.411, 14.14)), (' A  86 BLEU  HB2', ' A 162 BMET  HE1', -0.431, (11.88, -10.09, 13.994)), (' A 188  ARG  HG3', ' A 189  GLN  N  ', -0.43, (23.343, 0.927, 15.663)), (' A  95  ASN  OD1', ' A  96  PRO  CD ', -0.429, (0.554, -24.076, 20.961)), (' A  84  ASN  HA ', ' A 410  HOH  O  ', -0.427, (16.688, -7.915, 6.334)), (' A  76  ARG  HB3', ' A  76  ARG  HE ', -0.424, (15.339, -29.302, 19.792)), (' A 107  GLN  O  ', ' A 108  PRO  C  ', -0.423, (-0.745, 4.133, 8.127)), (' A 118  TYR  CD2', ' A 118  TYR  N  ', -0.419, (6.762, -7.844, 29.008)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.418, (-10.463, 18.975, -0.155)), (' A  53  ASN  O  ', ' A  57  LEU  HG ', -0.418, (27.397, -9.934, 13.04)), (' A 100  LYS  HB2', ' A 100  LYS  HE2', -0.417, (-8.091, -20.335, 10.737)), (' A  45  THR  C  ', ' A  47  GLU  N  ', -0.413, (25.916, -6.15, 23.549)), (' A 164  HIS  CD2', ' A 175  THR HG23', -0.411, (11.892, -4.907, 13.932)), (' A 162 BMET  HE3', ' A 164  HIS  CE1', -0.41, (12.427, -7.455, 15.152)), (' A 285  THR  O  ', ' A 286  ILE  CB ', -0.405, (-7.44, 17.948, 22.824)), (' A  35  THR HG22', ' A  36  VAL  N  ', -0.404, (9.036, -19.363, 14.183)), (' A 235  MET  H  ', ' A 235 AMET  HG2', -0.402, (-2.359, 22.076, 3.426)), (' A  57  LEU  HA ', ' A  57  LEU HD23', -0.402, (28.721, -12.438, 14.997)), (' A 213  ILE HG21', ' A 300  CYS  HB3', -0.4, (-21.563, 5.338, 15.578)), (' A  45  THR  CG2', ' A  48 AASP  CG ', -0.4, (28.902, -7.295, 20.577)), (' A 190  THR HG23', ' A 191  ALA  N  ', -0.4, (22.331, 6.722, 14.39))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
