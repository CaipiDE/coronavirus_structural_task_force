# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  30 ', 'LEU', 0.0, (12.094999999999994, 11.583999999999996, 0.5560000000000002)), ('A', '  67 ', 'LEU', 0.0, (12.933999999999996, 17.998, -11.123)), ('A', '  87 ', 'LEU', 0.05093166817820194, (3.089999999999997, 15.139999999999999, -3.696000000000001)), ('A', '  94 ', 'SER', 0.27299543514761304, (14.312999999999995, 2.531999999999999, -7.147000000000001)), ('A', ' 121 ', 'SER', 0.08635872714760442, (21.378999999999994, 17.813999999999993, 1.544)), ('A', ' 127 ', 'GLN', 0.029096330535824666, (15.523999999999996, 15.312999999999997, 18.888)), ('A', ' 165 ', 'MET', 0.002904288645017496, (5.794999999999999, 25.389999999999993, 7.445000000000001)), ('A', ' 207 ', 'TRP', 0.2031978512750446, (11.789000000000003, 14.748999999999999, 35.18800000000002)), ('A', ' 243 ', 'THR', 0.023975526429313575, (-3.9499999999999993, 8.931, 31.448000000000004)), ('A', ' 268 ', 'LEU', 0.0003095642191626181, (3.5900000000000016, 18.16, 41.312000000000005)), ('A', ' 273 ', 'GLN', 0.18434151156802597, (-0.5260000000000051, 25.843000000000004, 42.806000000000004)), ('A', ' 279 ', 'ARG', 0.0015120577590387809, (14.233, 26.723, 44.195000000000014)), ('A', ' 282 ', 'LEU', 0.0, (17.937, 19.403, 38.58600000000001)), ('B', '   4 ', 'ARG', 0.13869860329466627, (18.315, 23.62399999999999, 18.922000000000008)), ('B', '  62 ', 'SER', 0.10041341818754741, (48.512, -12.403999999999996, 19.106000000000005)), ('B', '  65 ', 'SER', 0.059120399012893295, (43.39, -12.621, 20.384)), ('B', '  75 ', 'LEU', 0.21524340606052175, (37.587, -9.025, 9.715000000000003)), ('B', '  87 ', 'LEU', 0.17270852159915043, (45.35199999999999, 0.11800000000000033, 19.812)), ('B', ' 106 ', 'ILE', 0.268665195920237, (40.127, 20.032, 19.274000000000004)), ('B', ' 127 ', 'GLN', 0.03975798466886978, (26.434999999999995, 17.517999999999997, 20.248000000000008)), ('B', ' 131 ', 'ARG', 0.18468715068983224, (35.22899999999999, 21.595999999999993, 28.536000000000005)), ('B', ' 155 ', 'ASP', 0.004012247719658522, (32.72099999999999, 16.143, 2.534)), ('B', ' 178 ', 'GLU', 0.15268956381943521, (46.458, 9.565999999999999, 18.075)), ('B', ' 217 ', 'ARG', 0.026599255410671083, (16.142, 40.869, 23.471000000000004)), ('B', ' 268 ', 'LEU', 0.007672113761427786, (26.171, 39.55999999999999, 30.075)), ('B', ' 282 ', 'LEU', 0.0, (16.022, 30.491999999999997, 24.482))]
data['cbeta'] = []
data['probe'] = [(' B 219  PHE  HZ ', ' B 509  HOH  O  ', -1.052, (19.741, 37.846, 22.948)), (' B 212  VAL HG23', ' B 509  HOH  O  ', -1.024, (19.648, 37.871, 21.796)), (' A   6  MET  HB3', ' B 479  HOH  O  ', -0.987, (20.829, 10.361, 20.599)), (' B 225  THR  HB ', ' B 442  HOH  O  ', -0.954, (31.789, 46.038, 27.68)), (' A 300  CYS  HB3', ' A 505  HOH  O  ', -0.906, (18.872, 5.464, 36.78)), (' B 154  TYR  HB2', ' B 420  HOH  O  ', -0.85, (34.404, 19.421, 1.886)), (' A 124  GLY  HA3', ' B   6  MET  HE3', -0.829, (21.287, 20.209, 11.722)), (' B 219  PHE  CZ ', ' B 509  HOH  O  ', -0.754, (19.474, 38.447, 23.13)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.746, (33.514, 25.578, 24.922)), (' A 207  TRP  HE3', ' A 512  HOH  O  ', -0.728, (11.311, 18.053, 36.5)), (' A 207  TRP  CE3', ' A 512  HOH  O  ', -0.726, (11.729, 17.841, 36.602)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.722, (43.006, 9.299, 33.986)), (' A 137  LYS  O  ', ' B   4  ARG  NH1', -0.701, (12.492, 21.421, 19.093)), (' B  66  PHE  HB2', ' B  77  VAL HG21', -0.7, (42.465, -8.917, 15.979)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.69, (20.756, 11.935, 28.048)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.669, (18.922, 25.288, 16.947)), (' A 145  CYS  SG ', ' A 506  HOH  O  ', -0.668, (10.333, 25.362, 2.327)), (' B  69  GLN  HB3', ' B 459  HOH  O  ', -0.628, (30.746, -9.357, 13.364)), (' A 243  THR HG22', ' A 246  HIS  H  ', -0.616, (-1.373, 6.866, 30.457)), (' A 140  PHE  HA ', ' A 510  HOH  O  ', -0.61, (15.401, 23.957, 9.258)), (' B 225  THR HG22', ' B 226  THR  O  ', -0.561, (34.45, 46.394, 29.277)), (' B 131  ARG  CD ', ' B 197  ASP  OD1', -0.543, (32.874, 22.616, 31.927)), (' A 270  GLU  HG3', ' A 274  ASN HD21', -0.543, (2.314, 23.853, 47.215)), (' B  23  GLY  HA3', ' B 422  HOH  O  ', -0.532, (39.041, -10.837, 27.395)), (' A 126  TYR  CD1', ' B   4  ARG  HG2', -0.528, (16.251, 20.67, 17.082)), (' A 180  LYS  HD3', ' A 525  HOH  O  ', -0.523, (-5.808, 10.875, 7.859)), (' A 167  LEU  HB3', ' A 168  PRO  CD ', -0.517, (2.267, 29.956, 13.24)), (' A  30  LEU  HG ', ' A 148  VAL HG11', -0.513, (11.103, 12.102, 4.539)), (' A 479  HOH  O  ', ' B 138  GLY  HA2', -0.512, (28.0, 14.388, 25.891)), (' B 131  ARG  HD2', ' B 197  ASP  OD1', -0.505, (32.649, 22.273, 32.177)), (' A   6  MET  HE2', ' B 139  SER  HB3', -0.499, (23.452, 10.287, 25.915)), (' A   4  ARG  HD2', ' B 126  TYR  CD1', -0.495, (25.046, 14.365, 24.516)), (' B  90  LYS  HD2', ' B 429  HOH  O  ', -0.493, (47.808, -0.83, 8.389)), (' A   3  PHE  HZ ', ' A 300  CYS  SG ', -0.49, (18.429, 10.322, 35.33)), (' A 208  LEU HD23', ' A 512  HOH  O  ', -0.484, (10.807, 17.59, 38.198)), (' A 276  MET  HE1', ' A 286  ILE  HA ', -0.484, (10.17, 25.872, 36.362)), (' B   4  ARG  N  ', ' B 299  GLN HE22', -0.481, (18.737, 24.715, 17.525)), (' B 131  ARG  HD3', ' B 197  ASP  OD1', -0.481, (33.098, 22.791, 31.817)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.48, (20.871, 9.936, 7.828)), (' A   3  PHE  CZ ', ' A 300  CYS  SG ', -0.477, (18.735, 10.271, 35.087)), (' B   4  ARG  NH2', ' B 528  HOH  O  ', -0.475, (13.677, 19.076, 22.653)), (' A 132  PRO  HG2', ' A 198  THR  O  ', -0.473, (1.446, 21.026, 26.021)), (' A 165  MET  HB3', ' A 165  MET  HE3', -0.47, (3.917, 25.354, 5.546)), (' B 213  ILE HG21', ' B 300  CYS  HB3', -0.468, (19.756, 34.017, 13.52)), (' A 279  ARG  HB3', ' A 432  HOH  O  ', -0.466, (14.77, 24.122, 45.692)), (' B 131  ARG  NH2', ' B 289  ASP  OD2', -0.461, (29.559, 24.512, 28.4)), (' A  55  GLU  HG2', ' A 419  HOH  O  ', -0.458, (-7.776, 19.905, -5.348)), (' A 479  HOH  O  ', ' B 126  TYR  HE1', -0.456, (27.735, 14.554, 24.675)), (' A 227  LEU HD11', ' A 242  LEU  HB3', -0.455, (-3.211, 10.871, 35.496)), (' B 140  PHE  HD1', ' B 172  HIS  CG ', -0.451, (30.483, 10.011, 28.479)), (' B 176  ASP  HB2', ' B 529  HOH  O  ', -0.45, (42.899, 13.386, 17.684)), (' B 125  VAL  N  ', ' B 479  HOH  O  ', -0.45, (22.183, 10.119, 19.834)), (' B 198  THR HG22', ' B 238  ASN  OD1', -0.446, (36.712, 29.285, 35.993)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.445, (17.955, 6.642, 14.589)), (' B 106  ILE HD13', ' B 130  MET  HB2', -0.445, (36.786, 19.494, 22.763)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.444, (37.243, 2.467, 5.186)), (' A 190  THR  N  ', ' A 446  HOH  O  ', -0.443, (-4.053, 31.831, 3.391)), (' B 106  ILE HD11', ' B 130  MET  HE3', -0.442, (38.403, 17.626, 23.121)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.442, (38.608, 24.018, 28.151)), (' A 211  ALA  HA ', ' A 282  LEU HD13', -0.44, (17.083, 16.003, 39.44)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.437, (38.609, 36.195, 23.877)), (' A 479  HOH  O  ', ' B 128  CYS  HB3', -0.436, (28.181, 15.937, 24.799)), (' A 276  MET  O  ', ' A 279  ARG  HD3', -0.433, (10.767, 26.859, 45.193)), (' B 225  THR HG22', ' B 226  THR  N  ', -0.433, (33.957, 47.474, 29.324)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.431, (33.262, 9.956, 28.625)), (' A  61  LYS  HA ', ' A  61  LYS  HD3', -0.429, (2.79, 21.957, -14.167)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.427, (44.339, -2.868, 26.011)), (' B  80  HIS  HB3', ' B  89  LEU HD23', -0.425, (46.437, -5.311, 16.442)), (' B 140  PHE  HD1', ' B 172  HIS  CD2', -0.424, (30.595, 9.472, 28.961)), (' B 211  ALA  HB2', ' B 282  LEU HD22', -0.423, (19.2, 32.77, 22.749)), (' A 185  PHE  HA ', ' A 192  GLN  OE1', -0.421, (-3.526, 24.899, 9.843)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.419, (12.57, 13.346, 12.386)), (' B 218  TRP  CZ2', ' B 279  ARG  HB2', -0.419, (15.258, 36.554, 31.33)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.416, (16.145, 24.429, 6.184)), (' B 106  ILE  H  ', ' B 106  ILE HG13', -0.414, (39.716, 17.666, 19.804)), (' B 265  CYS  HB2', ' B 442  HOH  O  ', -0.408, (31.341, 44.425, 27.139)), (' A 270  GLU  HG3', ' A 274  ASN  ND2', -0.406, (2.572, 23.824, 47.214)), (' A 281  ILE HG12', ' A 514  HOH  O  ', -0.402, (13.755, 19.808, 42.893)), (' A  61  LYS  HE2', ' A 435  HOH  O  ', -0.4, (1.025, 23.944, -11.733))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
