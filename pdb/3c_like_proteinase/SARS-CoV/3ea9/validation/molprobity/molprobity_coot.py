# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   2 ', 'GLY', 0.02014016273280094, (-12.268, 44.351, -3.5609999999999995)), ('A', '  50 ', 'LEU', 0.03585486163821203, (34.362, 39.52, -6.057999999999998)), ('A', '  73 ', 'VAL', 0.049400682716462335, (14.874, 13.032, 3.921)), ('A', ' 154 ', 'TYR', 0.014543238236289271, (-5.846, 26.55499999999999, -13.67)), ('A', ' 278 ', 'GLY', 0.009153292034753699, (-4.832999999999999, 63.928, 0.9949999999999999))]
data['omega'] = [('A', '   3 ', 'PHE', None, (-10.39, 45.827, -2.974))]
data['rota'] = [('A', '  22 ', 'CYS', 0.23590496831929988, (27.686000000000003, 23.495, -1.19)), ('A', '  30 ', 'LEU', 4.2115068065305514e-05, (13.347999999999999, 24.066, -6.869999999999999)), ('A', '  43 ', 'ILE', 0.025238541709472345, (29.17, 27.389, -5.718)), ('A', '  49 ', 'MET', 0.0, (31.941000000000013, 36.682, -5.5329999999999995)), ('A', '  50 ', 'LEU', 0.20417749543968272, (34.362, 39.52, -6.057999999999998)), ('A', '  60 ', 'ARG', 0.1154880974964657, (36.235, 21.483, -9.436)), ('A', '  64 ', 'HIS', 0.0, (28.688000000000002, 14.767, -3.885)), ('A', '  65 ', 'SER', 0.06104072540343178, (29.746, 18.375, -3.208999999999999)), ('A', '  77 ', 'VAL', 0.007351242675213143, (22.438, 14.031999999999995, -6.638999999999999)), ('A', '  81 ', 'SER', 0.11249564985219382, (25.099999999999998, 21.029000000000003, -15.341999999999997)), ('A', ' 104 ', 'VAL', 0.06527338470142141, (7.655999999999997, 31.37, -18.683)), ('A', ' 106 ', 'ILE', 0.022205455523854983, (7.495999999999997, 37.376, -17.499999999999996)), ('A', ' 123 ', 'SER', 0.1072421536834403, (8.504, 31.676, 5.154)), ('A', ' 153 ', 'ASP', 0.25737634072948207, (-3.0620000000000003, 28.928, -14.729999999999999)), ('A', ' 165 ', 'MET', 0.0, (20.637, 38.944, -5.237999999999999)), ('A', ' 167 ', 'LEU', 0.0002637069290268446, (21.019999999999992, 45.498, -5.283999999999998)), ('A', ' 177 ', 'LEU', 0.2563475324484467, (13.824999999999996, 29.395, -14.725999999999999)), ('A', ' 235 ', 'MET', 0.0, (6.725999999999999, 62.32999999999999, -19.446)), ('A', ' 256 ', 'GLN', 0.09699011804794332, (-18.064999999999998, 47.404999999999994, -17.569)), ('A', ' 259 ', 'ILE', 0.0, (-15.873999999999999, 55.29, -18.669)), ('A', ' 264 ', 'MET', 0.0, (-9.586, 57.980999999999995, -17.035))]
data['cbeta'] = []
data['probe'] = [(' A  19  GLN HE21', ' A  26  THR HG21', -1.084, (20.703, 26.1, 3.711)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.946, (20.496, 24.726, 3.585)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.939, (20.575, 25.4, 3.033)), (' A 209  TYR  O  ', ' A 213  ILE HG13', -0.868, (-13.444, 49.263, -12.039)), (' A  45  THR HG22', ' A  48  ASP  OD2', -0.752, (34.73, 31.467, -3.414)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.727, (30.401, 36.245, -6.679)), (' A 212  VAL HG11', ' A 259  ILE HD11', -0.726, (-15.522, 53.53, -14.114)), (' A  40  ARG  HA ', ' A  87  LEU HD13', -0.713, (24.817, 27.3, -10.47)), (' A 217  ARG  HG2', ' A 217  ARG  O  ', -0.705, (-16.203, 59.014, -9.368)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.69, (3.624, 26.666, -1.746)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.681, (30.894, 35.437, -6.947)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.639, (24.424, 42.296, -12.646)), (' A  53  ASN  O  ', ' A  57  LEU  HG ', -0.635, (34.875, 29.735, -10.591)), (' A 264  MET  HA ', ' A 264  MET  HE3', -0.62, (-9.596, 58.069, -15.156)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.589, (-4.597, 26.404, -15.69)), (' A  45  THR HG23', ' A  47  GLU  HB2', -0.584, (35.261, 33.472, -1.243)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.573, (9.479, 50.117, -10.789)), (' A  32  LEU HD13', ' A 101  TYR  CE1', -0.566, (9.319, 22.457, -13.79)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.566, (8.748, 16.334, -8.221)), (' A 277  ASN  O  ', ' A 279  ARG  N  ', -0.564, (-6.801, 64.112, -0.629)), (' A  78  ILE  O  ', ' A  78  ILE HD12', -0.563, (23.088, 12.393, -12.346)), (' A  44  CYS  HB3', ' A  48  ASP  HB2', -0.546, (32.034, 32.621, -5.199)), (' A  78  ILE  C  ', ' A  78  ILE HD12', -0.546, (22.947, 12.613, -11.831)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.542, (24.327, 30.815, -14.013)), (' A  88  ARG  HB3', ' A  88  ARG  NH1', -0.537, (19.288, 20.365, -15.602)), (' A 164  HIS  HD2', ' A 323  HOH  O  ', -0.53, (22.947, 33.416, -9.903)), (' A 131  ARG  CD ', ' A 197  ASP  OD1', -0.51, (9.918, 49.682, -10.296)), (' A 299  GLN  HG2', ' A 299  GLN  O  ', -0.507, (-11.241, 41.626, -7.018)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.495, (10.999, 16.183, -6.54)), (' A   7  ALA  HB1', ' A 113  SER  HB3', -0.494, (1.785, 34.928, -4.829)), (' A   1  SER  OG ', ' A   2  GLY  N  ', -0.49, (-14.157, 43.16, -2.511)), (' A  45  THR HG22', ' A  48  ASP  CG ', -0.487, (34.73, 31.967, -3.498)), (' A  49  MET  CE ', ' A  52  PRO  HG3', -0.484, (31.046, 35.152, -7.888)), (' A  27  LEU HD11', ' A  42  VAL  HB ', -0.481, (22.579, 27.578, -4.347)), (' A 294  PHE  C  ', ' A 294  PHE  CD2', -0.479, (-5.749, 39.758, -14.357)), (' A 217  ARG  CG ', ' A 217  ARG  O  ', -0.477, (-16.026, 58.83, -9.376)), (' A 276  MET  O  ', ' A 277  ASN  HB2', -0.474, (-7.071, 65.708, -3.146)), (' A  43  ILE HD11', ' A  66  PHE  HE1', -0.468, (27.61, 23.584, -7.103)), (' A  56  ASP  O  ', ' A  60  ARG  HG3', -0.467, (36.556, 24.834, -11.011)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.462, (10.555, 57.284, -15.451)), (' A 276  MET  HB2', ' A 276  MET  HE3', -0.456, (-2.147, 61.766, -4.722)), (' A 277  ASN  C  ', ' A 279  ARG  H  ', -0.451, (-6.265, 64.548, -0.949)), (' A 140  PHE  HD1', ' A 172  HIS  ND1', -0.449, (13.868, 41.409, -2.674)), (' A  45  THR  O  ', ' A  48  ASP  N  ', -0.444, (33.893, 34.284, -3.053)), (' A 159  PHE  HB3', ' A 177  LEU  CD2', -0.442, (10.279, 29.481, -12.581)), (' A  89  LEU  O  ', ' A  91  VAL HG13', -0.441, (19.031, 16.67, -8.797)), (' A  28  ASN  O  ', ' A 146  GLY  HA3', -0.44, (17.289, 28.354, -4.217)), (' A 164  HIS  HB3', ' A 165  MET  HE3', -0.438, (21.808, 37.011, -8.119)), (' A 209  TYR  CZ ', ' A 264  MET  HG3', -0.43, (-10.785, 53.866, -17.055)), (' A  17  MET  HE2', ' A 117  CYS  SG ', -0.43, (11.133, 28.344, -1.106)), (' A  31  TRP  HB2', ' A  36  VAL HG22', -0.429, (14.416, 19.763, -5.759)), (' A 235  MET  HB2', ' A 235  MET  HE2', -0.424, (5.867, 62.068, -22.286)), (' A 220  LEU  HA ', ' A 220  LEU HD23', -0.423, (-12.4, 60.81, -13.164)), (' A 221  ASN  OD1', ' A 223  PHE  HD2', -0.423, (-11.731, 66.833, -16.332)), (' A 105  ARG  NH1', ' A 176  ASP  OD2', -0.422, (14.796, 35.155, -18.749)), (' A  63  ASN  OD1', ' A  80  HIS  ND1', -0.42, (27.468, 16.767, -10.796)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.42, (-1.915, 65.557, -17.951)), (' A  40  ARG  CA ', ' A  87  LEU HD13', -0.418, (24.742, 27.742, -10.259)), (' A  31  TRP  CZ2', ' A  95  ASN  HA ', -0.416, (10.804, 14.451, -5.458)), (' A 277  ASN  C  ', ' A 279  ARG  N  ', -0.415, (-6.272, 64.051, -0.424)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.411, (18.591, 30.574, -14.252)), (' A  45  THR  CG2', ' A  47  GLU  HB2', -0.411, (35.632, 32.957, -1.015)), (' A  40  ARG  CB ', ' A  87  LEU HD13', -0.411, (25.196, 27.698, -10.766)), (' A 142  ASN  N  ', ' A 142  ASN HD22', -0.408, (20.229, 37.924, 3.291)), (' A 254  SER  HB2', ' A 259  ILE  O  ', -0.408, (-13.878, 53.488, -19.934)), (' A 165  MET  HB3', ' A 165  MET  HE2', -0.401, (23.533, 38.661, -6.491)), (' A  45  THR HG23', ' A  47  GLU  H  ', -0.4, (34.057, 34.013, -0.969)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.4, (32.916, 32.33, -3.89))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
