# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  50 ', 'LEU', 0.02690297801256249, (75.13200000000002, 49.435, 37.01)), ('A', ' 119 ', 'ASN', 0.007839767977761269, (57.42, 38.956999999999994, 49.246)), ('A', ' 120 ', 'GLY', 0.0005370538829973313, (58.36500000000001, 35.93599999999999, 51.388)), ('A', ' 154 ', 'TYR', 0.024266191334344274, (62.632000000000005, 10.347, 50.145)), ('A', ' 168 ', 'PRO', 0.053587801018003034, (67.573, 41.0, 28.523)), ('A', ' 187 ', 'ASP', 0.03523444058694482, (75.158, 39.788, 39.693)), ('A', ' 191 ', 'ALA', 0.019303954861932118, (76.33200000000002, 43.338, 28.468)), ('A', ' 227 ', 'LEU', 0.039006439855745215, (74.984, 5.992, 17.551))]
data['omega'] = [('A', ' 301 ', 'SER', None, (55.61, 4.454, 37.823))]
data['rota'] = [('A', '  21 ', 'THR', 0.023181322474029247, (64.163, 43.84599999999999, 52.84)), ('A', '  47 ', 'GLU', 0.027087122241410976, (71.495, 52.51799999999999, 40.186)), ('A', '  48 ', 'ASP', 0.14482953996816897, (74.1, 50.46899999999999, 42.068)), ('A', '  62 ', 'SER', 0.004019992775283754, (75.10000000000002, 46.57599999999999, 59.67)), ('A', '  77 ', 'VAL', 0.003150532575091347, (69.26, 39.419, 62.45499999999999)), ('A', '  90 ', 'LYS', 0.02523803482532262, (72.772, 34.437999999999995, 61.141000000000005)), ('A', ' 128 ', 'CYS', 0.2346927652117473, (61.901, 23.595, 34.827)), ('A', ' 141 ', 'LEU', 0.0740562033723935, (58.54600000000001, 39.553, 37.907)), ('A', ' 165 ', 'MET', 0.02361130621780349, (68.4, 37.968, 37.522)), ('A', ' 178 ', 'GLU', 0.007912354363021672, (76.633, 28.216999999999988, 48.053)), ('A', ' 187 ', 'ASP', 0.0048185218798865856, (75.158, 39.788, 39.693)), ('A', ' 190 ', 'THR', 0.20840397568331323, (75.97, 44.775, 31.985999999999997)), ('A', ' 228 ', 'ASN', 0.030585025613565422, (77.97700000000002, 7.399, 15.662999999999998)), ('A', ' 242 ', 'LEU', 0.0512727965945659, (74.791, 10.966, 22.964)), ('A', ' 253 ', 'LEU', 0.008823442216506999, (63.087, 2.508, 30.249000000000002)), ('A', ' 268 ', 'LEU', 0.10982952131983958, (64.256, 10.621, 16.87)), ('A', ' 281 ', 'ILE', 0.11819338431320399, (53.39800000000001, 13.452000000000002, 20.527)), ('A', ' 286 ', 'ILE', 0.13010784361719227, (57.24600000000001, 20.501, 19.668))]
data['cbeta'] = []
data['probe'] = [(' A 149  GLY  HA2', ' A 393  HOH  O  ', -1.068, (63.677, 25.308, 41.811)), (' A 149  GLY  CA ', ' A 393  HOH  O  ', -1.048, (64.008, 25.631, 41.654)), (' A 145  CYS  H  ', ' A 350  959 H16B', -0.859, (63.337, 39.012, 42.073)), (' A 119  ASN  O  ', ' A 121  SER  N  ', -0.818, (56.714, 35.456, 49.834)), (' A 114  VAL  HA ', ' A 393  HOH  O  ', -0.806, (62.669, 26.092, 41.331)), (' A 243  THR  H  ', ' A 246  HIS  HD2', -0.769, (74.803, 10.957, 25.163)), (' A  19  GLN HE21', ' A 119  ASN  HB3', -0.735, (56.902, 40.7, 50.816)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.704, (74.79, 10.552, 25.645)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.695, (74.827, 32.382, 45.977)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.657, (55.541, 28.758, 46.773)), (' A 118  TYR  CE2', ' A 144  SER  HB3', -0.647, (58.392, 36.929, 40.816)), (' A 215  GLY  HA2', ' A 217  ARG HH21', -0.647, (50.473, 2.727, 22.986)), (' A  21  THR HG23', ' A  67  LEU  HB3', -0.646, (62.836, 43.847, 55.116)), (' A 226  THR  O  ', ' A 227  LEU  HB3', -0.644, (76.269, 4.122, 17.374)), (' A 130  MET  HA ', ' A 130  MET  HE3', -0.64, (69.011, 25.692, 33.957)), (' A  19  GLN  HG2', ' A 369  HOH  O  ', -0.634, (60.955, 40.948, 51.075)), (' A 207  TRP  CH2', ' A 281  ILE  HB ', -0.634, (56.128, 14.577, 21.671)), (' A 181  PHE  HB3', ' A 371  HOH  O  ', -0.602, (76.817, 31.992, 36.641)), (' A 165  MET  HE2', ' A 350  959  H2 ', -0.596, (72.046, 41.098, 36.815)), (' A 165  MET  CE ', ' A 350  959  H2 ', -0.585, (72.78, 40.731, 36.329)), (' A 207  TRP  HH2', ' A 281  ILE  HB ', -0.565, (55.854, 14.913, 21.452)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.557, (64.153, 26.317, 59.877)), (' A 167  LEU  HB3', ' A 351  HOH  O  ', -0.538, (69.856, 37.601, 28.375)), (' A 107  GLN  N  ', ' A 110  GLN  OE1', -0.537, (72.75, 18.665, 37.655)), (' A 165  MET  HE2', ' A 350  959  C2 ', -0.534, (71.475, 41.164, 36.611)), (' A 141  LEU HD22', ' A 142  ASN  H  ', -0.521, (58.526, 42.365, 38.327)), (' A 138  GLY  H  ', ' A 172  HIS  CD2', -0.52, (62.408, 31.957, 33.255)), (' A  14  GLU  HG2', ' A 122  PRO  HG2', -0.517, (55.367, 28.045, 49.847)), (' A 153  ASP  O  ', ' A 154  TYR  HB3', -0.512, (63.948, 11.919, 50.291)), (' A 276  MET  HA ', ' A 368  HOH  O  ', -0.51, (55.262, 13.492, 8.721)), (' A 217  ARG  HB2', ' A 220  LEU HD12', -0.508, (55.652, 2.697, 18.824)), (' A 153  ASP  HB2', ' A 381  HOH  O  ', -0.505, (65.652, 12.896, 44.976)), (' A 189  GLN HE21', ' A 350  959  H1 ', -0.494, (70.926, 43.583, 35.774)), (' A 145  CYS  N  ', ' A 350  959 H16B', -0.485, (63.663, 38.212, 42.336)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.483, (62.846, 31.679, 33.243)), (' A  85  CYS  HB2', ' A 179  GLY  O  ', -0.483, (76.871, 33.446, 43.849)), (' A 114  VAL HG22', ' A 393  HOH  O  ', -0.482, (63.471, 26.493, 40.798)), (' A  66  PHE  HB2', ' A  77  VAL HG11', -0.471, (68.729, 42.042, 58.867)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.469, (64.058, 20.282, 33.045)), (' A  76  ARG  HB3', ' A  92  ASP  HB3', -0.459, (66.568, 37.902, 66.425)), (' A 221  ASN  OD1', ' A 223  PHE  HB2', -0.447, (63.091, 3.337, 12.562)), (' A   6  MET  HE3', ' A 299  GLN  CD ', -0.443, (53.275, 13.361, 35.983)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.443, (68.863, 19.309, 30.46)), (' A 236  LYS  HE3', ' A 237  TYR  CE1', -0.439, (69.045, 17.577, 10.453)), (' A 149  GLY  HA3', ' A 393  HOH  O  ', -0.438, (64.315, 25.933, 41.519)), (' A 165  MET  HE1', ' A 192  GLN HE22', -0.438, (74.385, 39.837, 34.779)), (' A 249  ILE  O  ', ' A 249  ILE HG22', -0.437, (68.077, 5.199, 32.905)), (' A 189  GLN  HB2', ' A 350  959  H1 ', -0.436, (71.586, 44.603, 36.038)), (' A  19  GLN  HG3', ' A 120  GLY  H  ', -0.428, (58.657, 38.482, 51.45)), (' A 295  ASP  HB3', ' A 357  HOH  O  ', -0.428, (61.7, 13.561, 38.746)), (' A 167  LEU  O  ', ' A 169  THR  N  ', -0.427, (66.532, 39.004, 28.551)), (' A 106  ILE HG23', ' A 160  CYS  HB2', -0.419, (70.434, 21.499, 42.137)), (' A  18  VAL HG12', ' A  70  ALA  HA ', -0.419, (59.847, 34.503, 57.542)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.411, (55.628, 32.625, 51.524)), (' A 187  ASP  N  ', ' A 187  ASP  OD1', -0.405, (76.596, 38.93, 40.251)), (' A 253  LEU  HA ', ' A 253  LEU HD13', -0.404, (61.71, 2.707, 31.25)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.401, (74.282, 39.856, 34.547))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
