# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.24095625744208712, (14.681999999999995, 38.82, -10.496000000000004)), ('A', '  49 ', 'MET', 0.0, (23.176, 25.530999999999985, -14.469)), ('A', '  51 ', 'ASN', 0.01920092546607077, (28.064, 24.066, -14.318)), ('A', '  62 ', 'SER', 0.21101577199392602, (26.080000000000005, 44.165499999999994, -25.914500000000004)), ('A', '  72 ', 'ASN', 0.05108103206377171, (6.459, 50.057, -15.774000000000003)), ('A', '  75 ', 'LEU', 0.007505776966831285, (15.927, 51.988, -17.806)), ('A', '  81 ', 'SER', 0.22749040627735484, (30.616000000000003, 44.481, -15.055)), ('A', '  90 ', 'LYS', 0.0, (28.010599999999997, 51.800000000000004, -14.393400000000003)), ('A', '  90 ', 'LYS', 0.0, (28.252399999999994, 50.3978, -14.937000000000001)), ('A', ' 136 ', 'ILE', 0.23981487153342831, (19.181, 32.993, 7.195000000000002)), ('A', ' 180 ', 'LYS', 0.04501342376831459, (30.906, 37.774, -1.697)), ('A', ' 188 ', 'ARG', 0.2870326873943573, (25.351999999999993, 27.012999999999995, -8.92)), ('A', ' 189 ', 'GLN', 0.043146068889223475, (23.218999999999994, 23.968999999999998, -8.252)), ('A', ' 236 ', 'LYS', 0.0, (26.624999999999996, 21.224999999999994, 25.941)), ('A', ' 279 ', 'ARG', 0.0, (7.096, 31.698428571428572, 35.94857142857143)), ('A', ' 298 ', 'ARG', 0.0, (16.788, 50.355, 20.47800000000001)), ('B', '  45 ', 'THR', 0.10789022541118072, (-0.5219999999999967, 67.17899999999999, 29.934)), ('B', '  57 ', 'LEU', 0.0, (-9.562, 72.056, 26.967)), ('B', '  59 ', 'ILE', 0.02571206583725004, (-11.8, 75.903, 23.528)), ('B', ' 137 ', 'LYS', 0.09663831606885225, (0.7739999999999991, 43.28199999999998, 22.065)), ('B', ' 165 ', 'MET', 0.0, (-1.938000000000001, 54.346, 25.463000000000005)), ('B', ' 198 ', 'THR', 0.27186149556384964, (-8.085, 33.956, 24.502)), ('B', ' 236 ', 'LYS', 0.0, (-11.328, 24.40599999999999, 27.95200000000001)), ('B', ' 240 ', 'GLU', 0.12615109151396114, (-12.207999999999998, 31.37999999999999, 21.284)), ('B', ' 269 ', 'LYS', 0.10704587787181088, (-8.502, 18.91, 19.333)), ('B', ' 299 ', 'GLN', 0.2528433546268965, (3.1052, 35.7556, 4.7616000000000005))]
data['cbeta'] = [('A', '  41 ', 'HIS', ' ', 0.27177306252936645, (22.635, 33.09, -11.018)), ('A', ' 277 ', 'ASN', ' ', 0.2573984085744643, (9.282999999999994, 24.125, 34.835)), ('B', ' 290 ', 'GLU', ' ', 0.2605339936347927, (-0.34700000000000086, 36.712, 15.47))]
data['probe'] = [(' B 165  MET  CE ', ' B 165  MET  SD ', -1.485, (-5.83, 55.708, 25.695)), (' A 279 BARG  HG2', ' A 279 BARG HH11', -0.91, (6.093, 31.803, 34.368)), (' B 233  VAL HG21', ' B 269  LYS  HD2', -0.885, (-12.572, 18.522, 21.882)), (' B   4  ARG  O  ', ' B 299 AGLN  NE2', -0.867, (5.57, 35.322, 7.188)), (' A   5 BLYS  NZ ', ' A 290  GLU  OE1', -0.85, (14.172, 36.447, 13.336)), (' A 279 BARG  CG ', ' A 279 BARG HH11', -0.762, (6.165, 31.407, 34.684)), (' A 279 BARG  HG2', ' A 279 BARG  NH1', -0.732, (6.063, 32.452, 34.979)), (' A 231  ASN  HB3', ' A 235  MET  HE3', -0.714, (32.575, 27.639, 26.761)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.699, (10.755, 40.321, -14.327)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.696, (4.106, 53.784, 21.071)), (' A   5 ALYS  HE2', ' A 290  GLU  HB2', -0.686, (14.495, 36.633, 15.865)), (' B 154  TYR  HD2', ' B 516  HOH  O  ', -0.679, (-6.562, 45.029, -4.618)), (' B 165  MET  CE ', ' B 165  MET  HB3', -0.678, (-3.591, 56.292, 26.16)), (' B  40  ARG  HB2', ' B  82  MET  HE2', -0.641, (-9.672, 66.007, 21.106)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.635, (25.059, 38.672, -12.689)), (' A 231  ASN  CB ', ' A 235  MET  HE3', -0.635, (31.972, 28.611, 26.803)), (' B 165  MET  HE1', ' B 187  ASP  HA ', -0.627, (-6.536, 57.358, 26.494)), (' A 235  MET  HE2', ' A 241  PRO  CB ', -0.623, (32.417, 28.407, 23.11)), (' A 235  MET  HE2', ' A 241  PRO  HA ', -0.601, (31.61, 28.543, 23.969)), (' A 235  MET  HE2', ' A 241  PRO  CA ', -0.58, (31.548, 28.721, 23.252)), (' A 166 AGLU  HG3', ' A 172  HIS  CD2', -0.577, (15.335, 30.696, 0.001)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.577, (-10.192, 59.343, 16.202)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.572, (10.386, 40.711, -14.358)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.57, (12.455, 44.995, -3.53)), (' A  50  LEU  HA ', ' A 189  GLN  HG3', -0.568, (23.54, 22.951, -11.26)), (' A   5 BLYS  NZ ', ' A 290  GLU  CD ', -0.547, (15.456, 36.271, 13.563)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.545, (-14.61, 68.144, 25.407)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.544, (27.052, 33.307, 12.205)), (' A 188  ARG  HD3', ' A 447  HOH  O  ', -0.529, (28.989, 28.515, -9.436)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.528, (16.97, 43.488, 4.892)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.523, (-10.095, 58.663, 16.666)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.512, (17.571, 54.441, -10.048)), (' A   5 BLYS  NZ ', ' A 128  CYS  HA ', -0.512, (14.871, 37.75, 12.032)), (' B  54  TYR  HB3', ' B  82  MET  HE1', -0.505, (-11.011, 66.786, 23.615)), (' B 165  MET  HB3', ' B 165  MET  HE3', -0.501, (-3.872, 56.681, 26.012)), (' A  81  SER  OG ', ' A  90 BLYS  NZ ', -0.493, (30.476, 47.219, -14.126)), (' B  53  ASN  ND2', ' B  56  ASP  OD2', -0.492, (-15.739, 71.024, 30.089)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.489, (27.955, 40.157, -5.02)), (' A   5 BLYS  NZ ', ' B   4  ARG HH12', -0.482, (13.862, 36.676, 12.937)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.481, (27.848, 40.562, -5.244)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.481, (-6.463, 67.189, 23.38)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.479, (-0.009, 49.265, 11.094)), (' A 231  ASN  HB3', ' A 235  MET  CE ', -0.473, (32.557, 27.511, 26.186)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.465, (17.382, 54.301, -9.884)), (' A 231  ASN  CG ', ' A 235  MET  HE3', -0.465, (32.027, 28.803, 26.641)), (' A   5 BLYS  HZ3', ' B   4  ARG  NH1', -0.461, (13.598, 37.05, 12.481)), (' A  96  PRO  HG2', ' A  97  LYS  HE2', -0.46, (13.248, 59.788, -7.999)), (' B 165  MET  CB ', ' B 165  MET  CE ', -0.46, (-3.871, 55.597, 26.624)), (' A 235  MET  HE2', ' A 241  PRO  HG3', -0.454, (32.235, 27.73, 23.081)), (' A 235  MET  HE2', ' A 241  PRO  HB3', -0.449, (32.751, 28.866, 23.635)), (' B 106  ILE HG13', ' B 110  GLN  HB2', -0.446, (-8.517, 42.848, 11.974)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.445, (29.02, 36.686, -9.556)), (' A 132  PRO  HD2', ' A 197  ASP  OD1', -0.442, (23.936, 29.426, 13.436)), (' A  72  ASN  H  ', ' A  72  ASN HD22', -0.44, (5.942, 51.839, -14.623)), (' B  72  ASN  O  ', ' B  74  GLN  NE2', -0.44, (9.989, 72.485, 10.054)), (' B   6  MET  HB3', ' B   6  MET  HE2', -0.44, (6.478, 40.078, 4.92)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.438, (24.856, 25.801, 32.97)), (' A   5 ALYS  HG2', ' A 291  PHE  CZ ', -0.437, (12.371, 40.107, 18.386)), (' A 166 AGLU  HG3', ' A 172  HIS  HD2', -0.436, (15.835, 30.534, -0.006)), (' B  87  LEU HD13', ' B  89  LEU HD21', -0.435, (-5.346, 68.852, 17.027)), (' A 153  ASP  O  ', ' A 154  TYR  C  ', -0.432, (20.771, 57.413, 9.706)), (' A 235  MET  HE2', ' A 241  PRO  CG ', -0.423, (31.987, 28.164, 22.994)), (' B 236  LYS  HG3', ' B 237  TYR  CD2', -0.415, (-8.945, 22.223, 26.433)), (' A 189  GLN  HB2', ' A 189  GLN HE21', -0.415, (20.996, 22.237, -8.573)), (' A 180  LYS  NZ ', ' A 485  HOH  O  ', -0.412, (34.223, 34.965, -1.696)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.409, (8.259, 46.726, -6.071)), (' A 188  ARG  HD2', ' A 466  HOH  O  ', -0.409, (29.793, 26.284, -11.273)), (' A 279 AARG  NH2', ' A 527  HOH  O  ', -0.405, (9.73, 31.55, 39.551))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
