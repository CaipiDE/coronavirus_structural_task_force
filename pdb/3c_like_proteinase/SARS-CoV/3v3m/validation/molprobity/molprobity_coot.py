# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 279 ', 'ARG', 0.0, (-8.241000000000001, -2.641, -1.211)), ('A', ' 304 ', 'THR', 0.0132577482802518, (-19.976, -17.782000000000004, -11.196000000000002))]
data['omega'] = []
data['rota'] = [('A', '  44 ', 'CYS', 0.06189075662539769, (30.786, -34.409, -6.218)), ('A', '  45 ', 'THR', 0.008159601566148922, (33.801, -34.26700000000001, -3.912000000000001)), ('A', '  53 ', 'ASN', 0.23900975660852766, (34.23699999999999, -33.355, -14.241)), ('A', '  59 ', 'ILE', 0.0, (33.898999999999994, -43.76, -14.03)), ('A', '  69 ', 'GLN', 0.004612244273817296, (17.243, -46.79000000000001, 1.035)), ('A', '  87 ', 'LEU', 0.0, (22.060000000000006, -40.169, -12.385)), ('A', '  90 ', 'LYS', 0.012383212268115364, (19.111000000000008, -49.402, -11.78)), ('A', ' 128 ', 'CYS', 0.2216706027270475, (5.1530000000000005, -22.929, -6.952)), ('A', ' 141 ', 'LEU', 0.002271874376271106, (17.01, -26.269, 3.2220000000000004)), ('A', ' 178 ', 'GLU', 0.11695225315943307, (15.645000000000005, -35.884, -18.281)), ('A', ' 180 ', 'LYS', 0.2885202758915024, (18.229000000000006, -30.795, -18.407)), ('A', ' 306 ', 'GLN', 0.13760761075946457, (-23.243, -13.697, -10.842))]
data['cbeta'] = [('A', ' 290 ', 'GLU', ' ', 0.25616348308592196, (2.3930000000000007, -18.311, -8.259000000000002))]
data['probe'] = [(' A  53  ASN HD22', ' A  56  ASP  H  ', -0.946, (34.642, -37.024, -15.901)), (' A 134  HIS  HD2', ' A 765  HOH  O  ', -0.87, (15.953, -17.979, -18.567)), (' A  53  ASN  ND2', ' A  56  ASP  H  ', -0.807, (34.337, -36.514, -16.469)), (' A 305  PHE  O  ', ' A 306  GLN  HB2', -0.758, (-21.416, -12.992, -10.034)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.727, (24.664, -23.294, -13.553)), (' A 134  HIS  CD2', ' A 765  HOH  O  ', -0.645, (15.659, -17.895, -18.756)), (' A  24  THR  H  ', ' A 402  DMS  H23', -0.573, (31.054, -39.005, 0.654)), (' A 264 BMET  HE3', ' A 267  ALA  HB3', -0.57, (-9.756, -6.016, -15.823)), (' A  74  GLN  HG2', ' A 786  HOH  O  ', -0.562, (22.665, -51.864, 1.416)), (' A  55  GLU  O  ', ' A  59  ILE HD13', -0.534, (33.439, -40.653, -16.125)), (' A 208  LEU HD13', ' A 264 BMET  HE2', -0.532, (-8.075, -7.74, -13.87)), (' A  24  THR HG22', ' A 402  DMS  H23', -0.531, (32.113, -37.761, 0.625)), (' A  40  ARG  HA ', ' A  87  LEU HD22', -0.523, (24.408, -37.953, -10.23)), (' A  84  ASN  HB3', ' A 403  DMS  H11', -0.514, (21.662, -32.422, -19.51)), (' A  24  THR HG22', ' A 402  DMS  H12', -0.505, (31.519, -36.568, 0.378)), (' A 297 BVAL HG23', ' A 760  HOH  O  ', -0.445, (-8.792, -26.239, -15.333)), (' A  24  THR  CG2', ' A 402  DMS  H12', -0.441, (31.168, -36.395, 0.953)), (' A 216  ASP  HB2', ' A 774  HOH  O  ', -0.439, (-15.404, -11.034, -4.37)), (' A 401  0EN  C5 ', ' A 401  0EN  C8 ', -0.433, (24.08, -29.119, -2.297)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.428, (18.257, -34.666, -14.547)), (' A   5  LYS  HG2', ' A 127  GLN  HB3', -0.424, (0.816, -23.032, -4.02)), (' A 212  VAL HG11', ' A 259  ILE HD11', -0.419, (-16.203, -10.683, -14.382)), (' A  55  GLU  O  ', ' A  59  ILE  CD1', -0.413, (34.293, -40.805, -16.029)), (' A 401  0EN  C8 ', ' A 401  0EN  H1 ', -0.409, (24.541, -29.458, -2.382)), (' A 140  PHE  HB3', ' A 401  0EN  H30', -0.403, (16.74, -25.82, -0.8))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
