# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  46 ', 'ALA', 0.019707346454616376, (27.445000000000004, -45.29099999999998, 24.922)), ('A', ' 154 ', 'TYR', 0.04183417117617296, (-13.671, -52.969, 13.226000000000003)), ('A', ' 277 ', 'ASN', 0.026462000246283975, (-13.379, -12.897000000000004, 23.272))]
data['omega'] = [('A', ' 179 ', 'GLY', None, (10.829, -49.499, 8.97))]
data['rota'] = [('A', '   6 ', 'MET', 0.027977114897741906, (-10.638999999999996, -39.998, 22.318)), ('A', '  42 ', 'VAL', 0.0, (18.787999999999997, -51.162, 20.642)), ('A', '  50 ', 'LEU', 0.0, (26.631999999999998, -39.85200000000001, 17.574)), ('A', '  72 ', 'ASN', 0.10275126782144099, (8.082000000000003, -62.59000000000002, 32.24)), ('A', '  74 ', 'GLN', 0.1583594661700983, (11.185000000000006, -65.467, 27.464)), ('A', '  87 ', 'LEU', 0.017453530745556726, (15.106999999999994, -54.563, 13.570000000000002)), ('A', '  94 ', 'SER', 0.1270137601324883, (3.819, -66.895, 17.058)), ('A', ' 128 ', 'CYS', 0.2363774160352358, (-1.959, -37.701000000000015, 18.758)), ('A', ' 154 ', 'TYR', 0.014196871113597343, (-13.671, -52.969, 13.226000000000003)), ('A', ' 165 ', 'MET', 0.16249408171856075, (13.581, -40.032, 19.658)), ('A', ' 220 ', 'LEU', 0.003248922894341889, (-20.853, -18.327, 12.391)), ('A', ' 277 ', 'ASN', 0.04269453758736817, (-13.379, -12.897000000000004, 23.272))]
data['cbeta'] = []
data['probe'] = [(' A 145  CYS  SG ', ' A 302  CYV  H51', -1.476, (13.814, -44.174, 22.218)), (' A 145  CYS  SG ', ' A 302  CYV  C5 ', -1.027, (14.261, -43.413, 23.046)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.859, (13.347, -54.549, 29.367)), (' A 264  MET  HE3', ' A 267  ALA  HB3', -0.818, (-16.33, -20.927, 10.005)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.763, (17.398, -37.57, 11.787)), (' A  39  PRO  O  ', ' A  42  VAL HG22', -0.632, (16.214, -51.743, 18.012)), (' A  55  GLU  HB2', ' A 331  HOH  O  ', -0.625, (24.671, -50.453, 7.197)), (' A 288  GLU  HG2', ' A 291  PHE  CE2', -0.602, (-10.189, -30.638, 18.871)), (' A  27  LEU  HG ', ' A  42  VAL HG13', -0.538, (15.963, -51.293, 21.915)), (' A 264  MET  CE ', ' A 267  ALA  HB3', -0.535, (-17.402, -20.93, 10.51)), (' A  90  LYS  HD2', ' A  90  LYS  N  ', -0.524, (13.315, -62.823, 13.263)), (' A 208  LEU HD13', ' A 264  MET  HE2', -0.51, (-15.065, -22.177, 11.718)), (' A  62  SER  O  ', ' A  65  SER  HB2', -0.499, (22.465, -61.501, 18.536)), (' A   5  LYS  HG3', ' A 291  PHE  CZ ', -0.493, (-9.268, -33.963, 20.727)), (' A   1  ALA  HA ', ' A 214  ASN HD21', -0.488, (-21.88, -31.135, 22.575)), (' A 288  GLU  HG2', ' A 291  PHE  HE2', -0.484, (-9.966, -31.108, 19.607)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.483, (17.061, -48.685, 11.028)), (' A  63  ASN  OD1', ' A  80  HIS  ND1', -0.461, (19.985, -63.445, 14.401)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.459, (-0.325, -44.962, 18.281)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.451, (-13.102, -39.22, 21.504)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.445, (9.306, -42.059, 24.982)), (' A 288  GLU  HG2', ' A 291  PHE  CD2', -0.444, (-10.167, -30.685, 18.743)), (' A 166  GLU  HB2', ' A 302  CYV  C17', -0.443, (12.049, -38.009, 23.569)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.442, (13.532, -54.731, 29.359)), (' A  27  LEU  CG ', ' A  42  VAL HG13', -0.439, (15.481, -51.183, 22.052)), (' A 176  ASP  O  ', ' A 179  GLY  HA2', -0.428, (8.945, -47.932, 9.906)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.42, (-8.984, -13.916, 6.532)), (' A 221  ASN  ND2', ' A 270  GLU  OE1', -0.417, (-17.661, -13.316, 10.103)), (' A  63  ASN  O  ', ' A  77  VAL  HB ', -0.406, (18.279, -64.288, 19.402)), (' A  61  LYS  HE2', ' A 377  HOH  O  ', -0.405, (27.312, -55.086, 17.884)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.402, (21.033, -39.131, 12.77))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
