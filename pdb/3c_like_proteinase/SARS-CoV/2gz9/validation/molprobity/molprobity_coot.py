# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  47 ', 'GLU', 0.00436272710780888, (35.873, -43.873, -3.9570000000000003))]
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.28849188428037226, (-2.7219999999999995, -36.627, -3.3890000000000002)), ('A', '  24 ', 'THR', 0.05890814514848275, (29.70000000000001, -53.313999999999986, 2.293)), ('A', '  30 ', 'LEU', 0.0, (12.962999999999997, -55.576, -7.254000000000001)), ('A', '  49 ', 'MET', 0.19293285926951423, (31.73, -43.65, -6.943000000000001)), ('A', '  69 ', 'GLN', 0.2984972675690917, (17.535, -61.44099999999999, 1.157)), ('A', '  90 ', 'LYS', 0.24099576598911762, (19.135000000000005, -64.222, -11.778)), ('A', ' 106 ', 'ILE', 0.06688423344910162, (7.072000000000001, -42.29699999999998, -17.974)), ('A', ' 128 ', 'CYS', 0.22533335629472995, (5.124, -37.969, -7.119000000000001)), ('A', ' 153 ', 'ASP', 0.0007028883607150838, (-3.8189999999999986, -50.36799999999999, -14.054000000000002)), ('A', ' 165 ', 'MET', 0.0, (20.536, -40.55199999999999, -6.292)), ('A', ' 188 ', 'ARG', 0.048719205044939144, (28.653999999999993, -41.265, -10.316)), ('A', ' 198 ', 'THR', 0.07036908287444615, (8.877, -25.118999999999996, -15.039)), ('A', ' 235 ', 'MET', 0.13110860119424178, (6.431, -17.751, -20.323)), ('A', ' 240 ', 'GLU', 0.07515193475697328, (5.074000000000002, -24.706, -19.848)), ('A', ' 268 ', 'LEU', 0.0004209022203742519, (-5.712999999999999, -19.403, -15.31)), ('A', ' 304 ', 'THR', 0.0402751418891149, (-20.18, -32.426, -11.203000000000001))]
data['cbeta'] = [('A', '  41 ', 'HIS', ' ', 0.2753262145631165, (25.99, -47.102999999999994, -7.919)), ('A', ' 290 ', 'GLU', ' ', 0.2660033042998147, (2.122, -32.82399999999999, -8.371)), ('A', ' 304 ', 'THR', ' ', 0.2510142322225731, (-19.518, -31.415, -12.221))]
data['probe'] = [(' A   4  ARG  H  ', ' A 299  GLN HE22', -1.009, (-7.892, -35.689, -3.442)), (' A  49  MET  HA ', ' A  49  MET  HE3', -0.803, (30.716, -44.048, -8.744)), (' A 110  GLN  HG2', ' A 415  HOH  O  ', -0.79, (1.33, -37.998, -18.512)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.697, (-8.053, -36.14, -3.883)), (' A  49  MET  HE1', ' A  54  TYR  OH ', -0.696, (28.437, -45.51, -10.192)), (' A  30  LEU HD13', ' A  32  LEU HD11', -0.624, (10.055, -55.014, -10.787)), (' A  46  ALA  O  ', ' A  47  GLU  HB2', -0.616, (36.393, -44.645, -2.331)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.605, (24.022, -52.62, -10.599)), (' A 213  ILE  HA ', ' A 304  THR  HB ', -0.595, (-17.808, -31.186, -12.014)), (' A 256  GLN HE21', ' A 304  THR HG22', -0.581, (-18.81, -33.395, -13.741)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.571, (21.991, -32.262, -7.626)), (' A  49  MET  HE2', ' A 188  ARG  HA ', -0.545, (28.792, -43.1, -9.29)), (' A 227  LEU  CD2', ' A 242  LEU HD23', -0.539, (-3.458, -23.46, -25.465)), (' A  50  LEU  O  ', ' A 188  ARG  NH1', -0.533, (33.679, -40.102, -11.491)), (' A 198  THR HG22', ' A 457  HOH  O  ', -0.528, (11.711, -23.516, -17.179)), (' A   4  ARG  NH2', ' A 354  HOH  O  ', -0.522, (-3.005, -34.689, 5.067)), (' A 116  ALA  HB2', ' A 420  HOH  O  ', -0.519, (10.126, -43.136, -0.809)), (' A 246  HIS  CD2', ' A 316  HOH  O  ', -0.489, (0.894, -28.054, -21.967)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.484, (19.985, -54.495, 3.642)), (' A 164  HIS  O  ', ' A 165  MET  HE3', -0.481, (21.759, -42.865, -6.887)), (' A 227  LEU HD21', ' A 242  LEU HD23', -0.48, (-3.435, -24.065, -25.001)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.457, (4.305, -32.518, -14.672)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.453, (18.124, -49.63, -15.471)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.45, (-2.445, -14.431, -19.493)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.449, (18.314, -49.666, -14.852)), (' A 167  LEU  HB3', ' A 168  PRO  CD ', -0.448, (22.019, -32.515, -7.388)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.446, (24.01, -49.127, -14.751)), (' A  69  GLN  HG3', ' A 337  HOH  O  ', -0.441, (20.407, -58.985, 1.505)), (' A  30  LEU  HG ', ' A 148  VAL HG11', -0.428, (11.241, -51.953, -8.27)), (' A 246  HIS  HD2', ' A 316  HOH  O  ', -0.427, (0.967, -27.836, -22.144)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.426, (-3.437, -21.274, -25.927)), (' A  30  LEU HD13', ' A  32  LEU  CD1', -0.42, (10.081, -56.026, -10.831)), (' A 279  ARG  HB3', ' A 279  ARG  HE ', -0.404, (-11.229, -18.233, -2.517))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
