# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  48 ', 'ASP', 0.002547825826406723, (-5.213999999999999, -16.096, 50.119)), ('A', ' 282 ', 'LEU', 0.04515794100508623, (10.182000000000004, -5.039, 5.994)), ('B', '  46 ', 'ALA', 0.027472232679190228, (17.385, 23.355000000000004, 0.195)), ('B', '  48 ', 'ASP', 0.04443999583583373, (23.337999999999994, 24.577, 0.512))]
data['omega'] = []
data['rota'] = [('A', '  22 ', 'CYS', 0.07628603497433167, (1.1110000000000007, -4.6640000000000015, 52.056)), ('A', '  24 ', 'THR', 0.014686302699041883, (5.407000000000009, -8.754999999999999, 52.527)), ('A', '  61 ', 'LYS', 0.11527191667165028, (-7.136, -3.513000000000001, 56.345)), ('A', '  64 ', 'HIS', 0.09315750002778206, (-2.162999999999995, 2.578, 57.365)), ('A', ' 123 ', 'SER', 0.1136368621126147, (12.882000000000001, -1.1090000000000002, 33.538)), ('A', ' 227 ', 'LEU', 0.22926291606787003, (-14.082, -10.49, 0.607)), ('B', '  43 ', 'ILE', 0.2203611271331796, (22.226, 26.343000000000004, 8.863)), ('B', '  51 ', 'ASN', 0.06498805261018598, (28.227, 21.004, -0.908)), ('B', '  59 ', 'ILE', 0.16693682212717756, (30.284000000000002, 33.09100000000001, 9.528)), ('B', ' 104 ', 'VAL', 0.061085298881721845, (30.15, 7.983, 24.57)), ('B', ' 153 ', 'ASP', 0.08948359336994623, (23.21900000000001, 3.02, 33.473)), ('B', ' 222 ', 'ARG', 0.2900105856427326, (27.386000000000003, -32.362, 23.235))]
data['cbeta'] = [('F', '   5 ', '0JU', ' ', 0.2619605796811022, (16.943, 13.031000000000006, 7.674))]
data['probe'] = [(' B  56  ASP  O  ', ' B  59  ILE HG22', -0.881, (30.303, 32.377, 5.796)), (' A 168  PRO  HG3', ' E   1  PHQ  H21', -0.741, (-0.397, -22.136, 33.946)), (' A  45  THR  O  ', ' A  49  MET  HG3', -0.725, (-1.826, -15.501, 48.207)), (' B  40  ARG  HA ', ' B  87  LEU HD13', -0.698, (25.307, 23.435, 12.602)), (' A  45  THR HG22', ' A  46  ALA  N  ', -0.683, (-0.503, -15.545, 52.177)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.662, (-6.079, -3.532, 45.264)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.639, (-5.751, -17.767, 0.197)), (' B  49  MET  HB3', ' B 189  GLN  HG3', -0.613, (21.652, 18.06, 0.606)), (' A 280  THR HG22', ' A 285  THR HG22', -0.605, (13.275, -13.315, 6.036)), (' A 213  ILE HD13', ' A 256  GLN  NE2', -0.602, (2.677, 5.092, 3.028)), (' B 168  PRO  HG3', ' F   1  PHQ  H21', -0.599, (20.744, 7.345, -2.173)), (' B 118  TYR  CE1', ' B 144  SER  HB3', -0.58, (11.581, 12.461, 11.546)), (' A 100  LYS  HD3', ' A 156  CYS  HB2', -0.574, (-4.616, 15.209, 26.207)), (' B 155  ASP  HB3', ' B 306  GLN  HG2', -0.572, (19.211, 6.795, 39.424)), (' B  47  GLU  C  ', ' B  49  MET  H  ', -0.566, (22.122, 22.612, -0.442)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.552, (28.87, 16.788, 16.133)), (' A 135  THR  C  ', ' A 136  ILE HD12', -0.55, (-3.126, -9.395, 25.704)), (' B   5  LYS  HE2', ' B 127  GLN  HB3', -0.55, (15.294, -2.38, 19.959)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.541, (28.877, 16.2, 15.907)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.526, (-5.162, -7.358, 17.284)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.523, (1.449, 11.388, 42.926)), (' A  45  THR  O  ', ' A  49  MET  CG ', -0.523, (-1.573, -15.059, 48.131)), (' A 209  TYR  O  ', ' A 213  ILE HG13', -0.518, (2.514, 1.377, 2.372)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.517, (19.574, 7.694, 9.647)), (' B 165  MET  HE1', ' B 185  PHE  HB3', -0.516, (27.087, 10.188, 4.807)), (' B 165  MET  CE ', ' B 185  PHE  HB3', -0.515, (27.127, 9.65, 5.208)), (' A 124  GLY  HA2', ' B   9  PRO  HD3', -0.511, (13.238, 1.26, 29.813)), (' B  48  ASP  O  ', ' B  52  PRO  HG3', -0.51, (25.605, 22.1, 2.203)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.51, (-5.798, -7.333, 47.526)), (' A  45  THR  CG2', ' A  46  ALA  N  ', -0.508, (-0.205, -15.306, 52.29)), (' B  58  LEU HD22', ' B  82  MET  HE3', -0.505, (29.856, 26.733, 12.327)), (' A 277  ASN  C  ', ' A 279  ARG  H  ', -0.5, (11.54, -16.04, 0.197)), (' A  44  CYS  SG ', ' A  54  TYR  CE1', -0.496, (-6.498, -10.93, 46.194)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.491, (5.666, -8.601, 34.586)), (' B 298 BARG  HG3', ' B 299  GLN  N  ', -0.487, (18.045, -6.083, 30.617)), (' B  47  GLU  C  ', ' B  49  MET  N  ', -0.483, (22.365, 22.687, -0.439)), (' A  47  GLU  O  ', ' A  49  MET  N  ', -0.48, (-3.675, -17.567, 48.718)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.478, (19.216, 8.115, 10.172)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.476, (21.684, -3.347, 18.345)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.472, (1.709, 11.114, 42.537)), (' B 167  LEU  HB3', ' B 168  PRO  CD ', -0.468, (22.717, 5.465, 1.633)), (' B 298 AARG  HG3', ' B 303  VAL  HB ', -0.465, (19.136, -3.86, 33.824)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.464, (23.679, 4.38, 36.535)), (' B 270  GLU  HG3', ' B 274  ASN  OD1', -0.464, (22.832, -29.024, 12.801)), (' B 233  VAL  O  ', ' B 237  TYR  HD2', -0.463, (28.709, -20.129, 7.747)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.456, (18.014, 23.141, 28.621)), (' B  40  ARG  CA ', ' B  87  LEU HD13', -0.453, (25.583, 22.774, 12.21)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.452, (19.711, 20.605, 31.107)), (' A 301  SER  HB2', ' B 141  LEU HD13', -0.451, (5.873, 10.113, 7.752)), (' A  45  THR HG22', ' A  47  GLU  H  ', -0.449, (-0.619, -16.45, 52.331)), (' B 168  PRO  HG3', ' F   1  PHQ  C2 ', -0.445, (21.041, 7.942, -1.664)), (' B  61  LYS  NZ ', ' B 640  HOH  O  ', -0.444, (20.671, 29.621, 7.868)), (' A 262  LEU  HA ', ' A 262  LEU HD23', -0.443, (-9.495, -7.679, -0.969)), (' A 276  MET  O  ', ' A 279  ARG  HB2', -0.44, (9.712, -14.778, -0.298)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.44, (1.515, 0.42, 27.836)), (' B 169  THR  OG1', ' B 171  VAL HG22', -0.437, (20.832, 1.742, 3.319)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.436, (-2.643, 14.751, 22.527)), (' A 168  PRO  HG3', ' E   1  PHQ  C2 ', -0.432, (-0.344, -21.51, 34.59)), (' A 207  TRP  CH2', ' A 281  ILE  HB ', -0.431, (6.591, -8.677, 5.963)), (' B  40  ARG  CB ', ' B  87  LEU HD13', -0.429, (26.533, 22.702, 12.414)), (' B 236  LYS  HG3', ' B 236  LYS  O  ', -0.429, (27.898, -19.086, 3.323)), (' B 106  ILE HD11', ' B 130  MET  HE3', -0.427, (27.164, 3.597, 17.004)), (' A 168  PRO  HA ', ' E   1  PHQ  C4 ', -0.426, (1.975, -21.458, 33.437)), (' A 166  GLU  HG3', ' A 172  HIS  CD2', -0.426, (3.059, -13.202, 31.874)), (' B 222  ARG  HD3', ' B 222  ARG  O  ', -0.423, (29.66, -33.496, 22.641)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.422, (-0.335, -4.37, 18.691)), (' A  21  THR  OG1', ' A  26  THR HG23', -0.418, (5.832, -2.524, 48.508)), (' F   4  LEU  HA ', ' F   4  LEU HD23', -0.417, (21.744, 14.337, 5.766)), (' A  47  GLU  O  ', ' A  48  ASP  C  ', -0.414, (-4.698, -17.346, 48.909)), (' B 288  GLU  HG2', ' B 291  PHE  CE2', -0.414, (16.749, -10.153, 19.728)), (' A 165  MET  HB3', ' E   4  LEU  HA ', -0.412, (-1.421, -12.85, 38.319)), (' A  58  LEU  CD2', ' A  82  MET  HB2', -0.412, (-11.395, -2.955, 47.858)), (' A 222  ARG  CZ ', ' A 223  PHE  CZ ', -0.409, (-2.714, -14.628, -12.452)), (' B 288  GLU  HG2', ' B 291  PHE  CD2', -0.408, (17.139, -10.272, 19.768)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.407, (17.777, 22.694, 28.431)), (' B  47  GLU  O  ', ' B  49  MET  N  ', -0.406, (22.77, 22.8, -0.921)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.404, (18.971, 6.66, 21.241)), (' A  21  THR  HA ', ' A  25  THR  O  ', -0.403, (3.479, -4.671, 49.006)), (' A 271  LEU  HG ', ' A 554  HOH  O  ', -0.402, (2.069, -12.706, -1.454)), (' A  39  PRO  HD3', ' A 162  MET  SD ', -0.402, (-2.163, -2.307, 39.428)), (' A 136  ILE  N  ', ' A 136  ILE HD12', -0.4, (-2.688, -9.48, 26.249)), (' B   1  SER  HB3', ' B 637  HOH  O  ', -0.4, (9.585, -17.031, 29.959))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
