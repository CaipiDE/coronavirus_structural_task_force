# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 128 ', 'CYS', 0.2618987141766654, (-5.190000000000001, -37.481, 7.107)), ('A', ' 177 ', 'LEU', 0.2416348336405116, (-13.573, -49.902999999999984, 15.086)), ('A', ' 228 ', 'ASN', 0.2620187335975786, (0.835, -17.719, 28.432999999999996))]
data['cbeta'] = []
data['probe'] = [(' A  46  ALA  HA ', ' A  49  MET  CE ', -1.43, (-30.876, -43.524, 1.957)), (' A  46  ALA  CA ', ' A  49  MET  HE3', -1.308, (-32.343, -44.142, 1.788)), (' A 100  LYS  HE2', ' A 573  HOH  O  ', -1.112, (-2.323, -59.439, 16.224)), (' A  49  MET  O  ', ' A  52  PRO  HD3', -1.1, (-32.506, -42.813, 9.07)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.893, (7.685, -36.074, 2.837)), (' A  46  ALA  HA ', ' A  49  MET  HE3', -0.875, (-32.035, -43.26, 2.707)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.807, (-24.121, -37.727, 12.817)), (' A  46  ALA  HA ', ' A  49  MET  HE1', -0.803, (-30.65, -44.517, 1.914)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.749, (-0.813, -22.63, 23.252)), (' A  46  ALA  C  ', ' A  49  MET  HE3', -0.746, (-32.869, -43.527, 2.426)), (' A 243  THR HG21', ' A 585  HOH  O  ', -0.713, (-2.418, -29.465, 26.396)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.683, (-12.202, -35.657, 3.934)), (' A 401  3BL  C2 ', ' A 401  3BL  H29', -0.666, (-27.708, -44.093, 2.71)), (' A  46  ALA  CA ', ' A  49  MET  CE ', -0.656, (-31.797, -44.924, 2.024)), (' A  45  THR  O  ', ' A  47  GLU  N  ', -0.629, (-33.824, -45.43, 2.941)), (' A  46  ALA  HB2', ' A 401  3BL  C6 ', -0.617, (-31.565, -44.635, -1.261)), (' A  45  THR  O  ', ' A  46  ALA  C  ', -0.594, (-33.981, -44.902, 2.887)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.58, (-23.943, -48.523, 14.517)), (' A  28  ASN  ND2', ' A 120  GLY  H  ', -0.567, (-15.325, -51.648, -0.986)), (' A  33  ASP  O  ', ' A  94  SER  HA ', -0.559, (-11.545, -65.031, 9.17)), (' A 401  3BL  C13', ' A 401  3BL  C2 ', -0.541, (-26.435, -43.998, 2.428)), (' A  49  MET  O  ', ' A  50  LEU  C  ', -0.538, (-33.554, -41.162, 9.316)), (' A  61  LYS  HE2', ' A 545  HOH  O  ', -0.533, (-34.209, -54.975, 7.985)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.53, (-23.4, -50.713, 4.87)), (' A 222  ARG  NH2', ' A 611  HOH  O  ', -0.528, (17.03, -7.096, 23.021)), (' A  46  ALA  O  ', ' A  49  MET  HG2', -0.522, (-32.762, -42.99, 3.896)), (' A 217  ARG  HD2', ' A 625  HOH  O  ', -0.521, (20.286, -24.512, 11.982)), (' A  46  ALA  HB2', ' A 401  3BL  H32', -0.516, (-31.401, -44.145, -0.512)), (' A  46  ALA  O  ', ' A  49  MET  HE3', -0.513, (-32.619, -42.973, 2.955)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.511, (9.693, -32.629, 10.459)), (' A 159  PHE  HB3', ' A 177  LEU  CD1', -0.509, (-9.841, -50.001, 12.224)), (' A  49  MET  O  ', ' A  52  PRO  CD ', -0.503, (-32.235, -42.166, 10.52)), (' A  27  LEU HD12', ' A  28  ASN  O  ', -0.486, (-18.628, -52.147, 4.144)), (' A 159  PHE  HB3', ' A 177  LEU HD13', -0.483, (-9.182, -50.02, 12.572)), (' A 231  ASN  ND2', ' A 242  LEU  H  ', -0.482, (-1.37, -22.026, 23.483)), (' A  28  ASN HD21', ' A 120  GLY  H  ', -0.478, (-15.073, -51.702, -0.989)), (' A 159  PHE  CB ', ' A 177  LEU HD13', -0.474, (-9.424, -50.26, 13.118)), (' A 235  MET  HE1', ' A 241  PRO  HD3', -0.469, (-6.684, -22.679, 21.916)), (' A  11  GLY  C  ', ' A 519  HOH  O  ', -0.463, (-0.355, -55.979, 2.126)), (' A 401  3BL  C13', ' A 401  3BL  H1 ', -0.461, (-26.476, -44.298, 2.631)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.459, (-19.51, -50.403, 5.296)), (' A 164  HIS  HD2', ' A 540  HOH  O  ', -0.459, (-22.671, -46.233, 10.148)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.457, (-6.493, -45.32, 7.496)), (' A 186  VAL  CB ', ' A 551  HOH  O  ', -0.454, (-25.909, -41.378, 15.428)), (' A 111  THR HG23', ' A 292  THR HG23', -0.445, (-0.184, -36.241, 12.941)), (' A  45  THR  O  ', ' A  48  ASP  N  ', -0.443, (-34.703, -45.661, 4.543)), (' A 186  VAL  HB ', ' A 551  HOH  O  ', -0.443, (-26.219, -41.564, 15.326)), (' A  49  MET  C  ', ' A  52  PRO  HD3', -0.441, (-32.76, -42.822, 9.096)), (' A  27  LEU  C  ', ' A  27  LEU HD12', -0.436, (-19.558, -51.887, 3.021)), (' A 129  ALA  HB3', ' A 290  GLU  HG2', -0.436, (-4.414, -32.815, 9.963)), (' A 186  VAL  H  ', ' A 192  GLN  NE2', -0.432, (-24.316, -37.227, 13.643)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.431, (-24.131, -52.282, 10.627)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.43, (7.155, -20.378, 5.484)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.423, (7.714, -26.761, 24.394)), (' A 129  ALA  CB ', ' A 290  GLU  HG2', -0.422, (-4.348, -33.367, 10.101)), (' A 227  LEU  HA ', ' A 227  LEU HD12', -0.41, (3.528, -20.949, 25.79)), (' A 303  VAL  O  ', ' A 303  VAL HG23', -0.407, (21.456, -35.232, 9.489)), (' A 103  PHE  CE1', ' A 177  LEU HD22', -0.407, (-10.472, -53.092, 13.66)), (' A 305  PHE  O  ', ' A 306  GLN  HB3', -0.4, (23.113, -27.716, 7.875))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
