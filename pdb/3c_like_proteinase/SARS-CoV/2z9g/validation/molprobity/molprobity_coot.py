# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  87 ', 'LEU', 0.02256046046524407, (15.274, -14.373000000000001, 13.565)), ('A', ' 228 ', 'ASN', 0.09305536862852269, (-7.716999999999999, 22.808, -2.467))]
data['cbeta'] = []
data['probe'] = [(' A 305  PHE  HB3', ' A1037  HOH  O  ', -0.805, (-27.645, 11.67, 17.103)), (' A  76  ARG  HB3', ' A  92  ASP  OD2', -0.697, (12.808, -29.879, 20.698)), (' A  86  LEU HD13', ' A 179  GLY  HA2', -0.674, (11.696, -8.745, 10.893)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.667, (17.221, 3.118, 12.068)), (' A 306  GLN  N  ', ' A1037  HOH  O  ', -0.664, (-28.407, 12.535, 16.44)), (' A  83  GLN  HB2', ' A  88  ARG  HD2', -0.637, (12.844, -15.606, 7.961)), (' A  88  ARG  HB3', ' A  88  ARG HH11', -0.632, (11.988, -18.376, 10.432)), (' A 215  GLY  HA2', ' A1037  HOH  O  ', -0.623, (-26.872, 12.65, 17.256)), (' A 113  SER  OG ', ' A 127  GLN  NE2', -0.579, (-5.781, -3.124, 18.891)), (' A  67  LEU HD12', ' A1043  HOH  O  ', -0.562, (15.911, -23.433, 24.977)), (' A 110  GLN  NE2', ' A1133  HOH  O  ', -0.554, (-4.34, 5.467, 6.879)), (' A  67  LEU HD11', ' A  74  GLN  NE2', -0.536, (15.432, -23.254, 27.456)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.53, (-2.251, 7.587, 10.81)), (' A 228  ASN  HB3', ' A 679  HOH  O  ', -0.53, (-7.717, 25.687, -3.957)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.527, (29.077, -15.052, 11.676)), (' A 269  LYS  O  ', ' A 273  GLN  HG3', -0.519, (-10.005, 26.381, 10.05)), (' A  88  ARG  HB3', ' A  88  ARG  NH1', -0.499, (11.637, -18.763, 10.098)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.497, (8.982, 0.856, 19.955)), (' A  88  ARG  NH1', ' A1075  HOH  O  ', -0.495, (12.175, -20.415, 9.379)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.494, (26.359, -4.445, 16.491)), (' A  49  MET  HE1', ' A1149  HOH  O  ', -0.489, (20.177, -3.783, 21.81)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.486, (-3.746, -12.389, 23.947)), (' A 110  GLN  HG3', ' A1132  HOH  O  ', -0.485, (-3.244, 0.277, 6.921)), (' A  88  ARG  CB ', ' A  88  ARG HH11', -0.481, (12.232, -18.253, 10.248)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.481, (-14.615, 18.988, 19.945)), (' A 100  LYS  HD2', ' A1077  HOH  O  ', -0.479, (-9.387, -20.008, 10.48)), (' A 168  PRO  HB2', ' A1032  HOH  O  ', -0.477, (15.512, 11.648, 19.046)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.476, (9.202, 0.969, 19.969)), (' A 154  TYR  HA ', ' A1134  HOH  O  ', -0.475, (-14.029, -13.146, 13.995)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.469, (17.138, -8.572, 11.014)), (' A   3  PHE  O  ', ' A   4  ARG  HD2', -0.465, (-14.178, 6.656, 24.716)), (' A 102  LYS  HE3', ' A 848  HOH  O  ', -0.459, (-5.253, -9.16, 7.12)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.453, (20.919, -11.008, 16.788)), (' A 189  GLN  HG3', ' A 963  HOH  O  ', -0.447, (22.343, 4.527, 19.91)), (' A 305  PHE  HD1', ' A 305  PHE  O  ', -0.437, (-30.773, 10.691, 18.414)), (' A  87  LEU HD12', ' A  89  LEU HD21', -0.437, (16.907, -17.411, 15.738)), (' A  83  GLN HE21', ' A  88  ARG  HD2', -0.427, (11.983, -15.149, 8.352)), (' A 106  ILE HD13', ' A 112  PHE  CD2', -0.418, (-0.274, -0.853, 13.122)), (' A 189  GLN  HG3', ' A1141  HOH  O  ', -0.417, (21.902, 3.241, 20.359)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.414, (0.953, -22.376, 17.226)), (' A  41  HIS  HA ', ' A  54  TYR  HE2', -0.41, (20.868, -8.144, 16.472)), (' A 256  GLN  HG2', ' A 304  THR HG23', -0.408, (-25.728, 7.381, 11.351)), (' A 188  ARG  HG3', ' A 190  THR HG23', -0.404, (22.78, 1.956, 13.824))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
