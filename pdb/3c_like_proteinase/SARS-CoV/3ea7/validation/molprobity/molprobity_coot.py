# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  46 ', 'ALA', 0.02231670730855621, (-7.813, 5.796000000000001, -1.044)), ('B', ' 154 ', 'TYR', 0.02214786105701559, (-27.33499999999999, -1.938, 21.668))]
data['omega'] = []
data['rota'] = [('A', '  30 ', 'LEU', 0.0, (-6.559999999999998, 1.7749999999999997, 22.402)), ('A', '  50 ', 'LEU', 0.0853250627013559, (-0.7889999999999997, 3.2460000000000013, -2.6510000000000007)), ('A', '  62 ', 'SER', 0.038486144083639505, (-2.2109999999999994, 19.169, 13.72)), ('A', '  69 ', 'GLN', 0.01850683074537167, (-14.363, 9.721, 21.169)), ('A', '  73 ', 'VAL', 0.216539832899, (-17.384, 12.112999999999996, 25.373)), ('A', '  77 ', 'VAL', 0.006301065150182694, (-5.698, 15.308000000000005, 21.848)), ('A', '  87 ', 'LEU', 0.009865523593586743, (0.10999999999999854, 6.607, 15.852)), ('A', ' 100 ', 'LYS', 0.24014522650571715, (-2.9610000000000003, -3.499, 34.955)), ('A', ' 121 ', 'SER', 0.29594146207622224, (-17.734999999999992, 0.16600000000000006, 19.842)), ('A', ' 123 ', 'SER', 0.16845822250057094, (-19.051, -5.653000000000001, 18.85)), ('A', ' 141 ', 'LEU', 0.22028120526138806, (-15.396, -5.806, 8.545)), ('A', ' 142 ', 'ASN', 0.02682406934429578, (-14.514999999999999, -2.259, 7.467)), ('A', ' 167 ', 'LEU', 0.027335786913657928, (-4.8870000000000005, -9.874, 2.819)), ('A', ' 171 ', 'VAL', 0.21227975024608395, (-6.789999999999997, -13.696, 6.084)), ('A', ' 222 ', 'ARG', 0.0, (0.4119999999999999, -49.094, 22.485)), ('A', ' 226 ', 'THR', 0.10119653224873422, (10.746, -41.25700000000001, 16.956)), ('A', ' 227 ', 'LEU', 0.0028945672286824586, (10.689999999999998, -37.507, 16.467)), ('A', ' 228 ', 'ASN', 0.06494693683788343, (12.051, -38.07, 12.941)), ('A', ' 268 ', 'LEU', 0.00020148248475820803, (-1.5429999999999993, -38.647000000000006, 15.868)), ('A', ' 297 ', 'VAL', 0.21665121541978052, (-4.465999999999999, -26.38000000000001, 31.524)), ('A', ' 303 ', 'VAL', 0.010035463886471425, (-8.798999999999996, -20.659, 36.022)), ('A', ' 304 ', 'THR', 0.021758937509730458, (-10.361, -17.346, 36.853)), ('B', '  16 ', 'CYS', 0.11764661747078434, (-22.884, -8.235000000000003, 38.12800000000001)), ('B', '  27 ', 'LEU', 0.2437272551892878, (-22.258, -20.904, 43.424)), ('B', '  30 ', 'LEU', 9.454605744149699e-07, (-26.385, -12.184, 39.296)), ('B', '  48 ', 'ASP', 0.07303156029439214, (-31.169, -32.862, 49.626)), ('B', '  62 ', 'SER', 0.007622282812934883, (-32.745999999999995, -16.684, 57.388)), ('B', '  77 ', 'VAL', 0.007174953598731533, (-28.66199999999999, -9.643, 52.429)), ('B', '  87 ', 'LEU', 0.07893568569987258, (-33.527, -17.695000000000007, 44.77)), ('B', '  88 ', 'ARG', 0.038277874453463034, (-33.79099999999998, -13.911000000000003, 45.077)), ('B', '  93 ', 'THR', 0.05019076040436364, (-26.184999999999995, -1.9840000000000002, 48.352)), ('B', '  94 ', 'SER', 0.1744022726498761, (-27.312999999999988, -1.1400000000000003, 44.859)), ('B', ' 100 ', 'LYS', 0.06945754980902805, (-29.525, -1.6830000000000007, 30.899)), ('B', ' 107 ', 'GLN', 0.0014746700109681266, (-36.38899999999999, -20.515, 21.939)), ('B', ' 127 ', 'GLN', 0.0, (-21.145, -18.471, 22.077)), ('B', ' 130 ', 'MET', 0.24234002443368016, (-30.015, -23.567, 22.798)), ('B', ' 136 ', 'ILE', 0.028361438898163185, (-26.841999999999985, -26.647, 25.739)), ('B', ' 141 ', 'LEU', 0.015594538239088572, (-16.948999999999995, -27.569999999999997, 35.591)), ('B', ' 153 ', 'ASP', 0.08318540686502325, (-28.75, -5.46, 21.684)), ('B', ' 167 ', 'LEU', 0.0, (-27.116999999999997, -34.276, 32.615)), ('B', ' 217 ', 'ARG', 0.021989090997047676, (-19.004999999999992, -22.444, -2.557)), ('B', ' 222 ', 'ARG', 0.0, (-27.43099999999999, -26.742000000000004, -10.659000000000002)), ('B', ' 226 ', 'THR', 0.030466311944935886, (-39.158, -28.346000000000004, -3.219)), ('B', ' 227 ', 'LEU', 0.20059004478216688, (-39.679, -27.785000000000004, 0.501)), ('B', ' 263 ', 'ASP', 0.22469868851198826, (-31.292, -23.875000000000004, -4.396)), ('B', ' 268 ', 'LEU', 0.04905700302123751, (-27.754999999999995, -29.056000000000004, 1.523)), ('B', ' 276 ', 'MET', 0.01121507649251408, (-18.29, -33.509, 2.562))]
data['cbeta'] = []
data['probe'] = [(' A 222  ARG  HG3', ' A 222  ARG HH11', -1.096, (2.576, -50.926, 22.401)), (' B 222  ARG  HG3', ' B 222  ARG HH11', -1.093, (-28.076, -26.282, -13.327)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.999, (-1.551, 4.187, 2.515)), (' A 222  ARG  HG3', ' A 222  ARG  NH1', -0.922, (3.161, -51.77, 22.773)), (' A 131  ARG  HD2', ' A 137  LYS  HE3', -0.907, (-4.379, -20.116, 8.669)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.89, (-31.465, -23.691, 16.918)), (' B 222  ARG  HG3', ' B 222  ARG  NH1', -0.871, (-29.095, -25.657, -13.78)), (' B  49  MET  HA ', ' B  49  MET  HE2', -0.867, (-30.595, -31.846, 45.068)), (' A   1  SER  N  ', ' B 140  PHE  H  ', -0.861, (-18.852, -28.403, 31.17)), (' A 222  ARG  CG ', ' A 222  ARG HH11', -0.856, (2.579, -51.713, 22.223)), (' B   6  MET  O  ', ' B 127  GLN  HG3', -0.833, (-21.011, -15.52, 19.085)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.826, (-0.262, -21.879, 15.441)), (' B 212  VAL HG13', ' B 217  ARG  NH1', -0.794, (-22.024, -18.084, -3.004)), (' A  49  MET  HE1', ' A  54  TYR  OH ', -0.789, (-0.595, 3.211, 5.065)), (' B 212  VAL HG13', ' B 217  ARG HH12', -0.774, (-22.087, -17.408, -3.028)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.769, (-15.31, 6.435, 13.645)), (' A 243  THR  H  ', ' A 246  HIS  HD2', -0.744, (8.935, -28.815, 17.444)), (' B  49  MET  HE1', ' B  54  TYR  OH ', -0.72, (-32.107, -29.044, 43.755)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.718, (-34.892, -32.275, 35.15)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.706, (8.361, -28.368, 17.6)), (' B 300  CYS  O  ', ' B 301  SER  HB3', -0.697, (-22.365, -8.207, 4.942)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.672, (-13.477, -25.677, 26.259)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.668, (-15.146, 6.185, 13.778)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.668, (-5.251, 7.633, 1.892)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.665, (-2.322, 3.265, 2.603)), (' A   1  SER  H1 ', ' B 140  PHE  H  ', -0.664, (-19.171, -28.333, 31.673)), (' B  44  CYS  SG ', ' B  49  MET  HE3', -0.65, (-31.078, -29.021, 46.582)), (' A   1  SER  H2 ', ' B 140  PHE  H  ', -0.644, (-18.845, -28.027, 30.527)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.643, (-36.031, -23.04, 41.951)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.643, (-16.365, -15.088, 12.179)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.639, (3.036, -5.365, 3.934)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.635, (-35.222, -19.247, 37.795)), (' B 234  ALA  O  ', ' B 239  TYR  HB2', -0.628, (-32.603, -33.687, 7.956)), (' B   4  ARG  N  ', ' B 299  GLN HE22', -0.619, (-16.816, -15.709, 12.152)), (' A 304  THR HG23', ' B 121  SER  HB3', -0.615, (-12.067, -15.363, 38.406)), (' B 171  VAL HG22', ' B 172  HIS  H  ', -0.612, (-25.816, -29.637, 27.561)), (' A 254  SER  HB2', ' A 259  ILE  O  ', -0.608, (2.651, -36.884, 27.608)), (' B  19  GLN HE21', ' B  26  THR HG21', -0.596, (-17.717, -19.168, 46.136)), (' B  81  SER  O  ', ' B  87  LEU HD23', -0.591, (-35.482, -16.667, 46.56)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.583, (-24.607, -5.052, 42.875)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.582, (-26.627, -20.412, 41.961)), (' A 207  TRP  HZ3', ' A 287  LEU HD23', -0.575, (-8.819, -33.907, 16.447)), (' B 107  GLN  O  ', ' B 110  GLN  HG3', -0.573, (-34.368, -19.872, 19.798)), (' B 294  PHE  CE2', ' B 298  ARG  NH2', -0.567, (-28.324, -9.608, 16.276)), (' A 142  ASN  N  ', ' A 142  ASN HD22', -0.566, (-16.557, -2.935, 7.51)), (' A  44  CYS  SG ', ' A  49  MET  HE3', -0.564, (-2.429, 5.226, 3.89)), (' A 298  ARG  HE ', ' A 303  VAL HG11', -0.562, (-6.037, -19.683, 32.705)), (' B 230  PHE  CZ ', ' B 268  LEU HD12', -0.56, (-31.362, -29.141, 4.149)), (' A 124  GLY  HA3', ' B   6  MET  HE3', -0.555, (-18.061, -10.494, 18.155)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.554, (-2.528, -20.744, 8.998)), (' B 131  ARG  HD3', ' B 197  ASP  OD2', -0.549, (-29.368, -29.941, 19.871)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.549, (-25.027, -16.595, 28.048)), (' A 234  ALA  HB1', ' A 239  TYR  HB2', -0.545, (2.756, -32.688, 10.277)), (' B 217  ARG  HD3', ' B 220  LEU HD12', -0.544, (-21.455, -21.14, -5.535)), (' A  81  SER  O  ', ' A  87  LEU HD23', -0.543, (1.928, 8.826, 16.159)), (' B 111  THR  HB ', ' B 127  GLN HE22', -0.543, (-24.854, -18.111, 19.173)), (' A 126  TYR  CD1', ' B   4  ARG  HG3', -0.542, (-12.392, -14.643, 15.431)), (' A  78  ILE  CG1', ' A  90  LYS  HG2', -0.537, (-1.858, 15.226, 25.198)), (' B 108  PRO  HA ', ' B 130  MET  CG ', -0.537, (-32.71, -23.34, 22.294)), (' A 140  PHE  HD1', ' A 172  HIS  CD2', -0.528, (-9.651, -9.283, 10.066)), (' B 230  PHE  HZ ', ' B 268  LEU HD12', -0.525, (-30.94, -28.683, 4.703)), (' B  30  LEU HD13', ' B  32  LEU HD11', -0.525, (-29.243, -9.903, 35.933)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.523, (-16.748, -14.788, 11.868)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.518, (-4.419, -20.019, 18.063)), (' A 298  ARG  HG3', ' A 303  VAL  CG1', -0.51, (-7.353, -20.121, 32.48)), (' A  67  LEU HD12', ' A  68  VAL  N  ', -0.501, (-11.887, 13.034, 18.687)), (' A 243  THR  N  ', ' A 246  HIS  HD2', -0.5, (8.577, -29.189, 17.174)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.5, (-11.934, -5.538, 10.554)), (' A 136  ILE HG13', ' A 172  HIS  HB2', -0.497, (-6.686, -11.84, 10.753)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.496, (-16.068, 6.696, 14.169)), (' A  87  LEU HD13', ' A  89  LEU HD21', -0.496, (-2.81, 9.977, 15.769)), (' A 124  GLY  HA2', ' B   9  PRO  HD3', -0.495, (-19.1, -8.558, 21.169)), (' A 138  GLY  O  ', ' B   2  GLY  HA3', -0.483, (-12.001, -13.779, 9.13)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.482, (-26.361, -3.625, 39.728)), (' B 239  TYR  CZ ', ' B 272  LEU HD21', -0.475, (-27.724, -31.81, 7.683)), (' B  55  GLU  O  ', ' B  59  ILE HG13', -0.475, (-40.18, -23.787, 53.552)), (' A  45  THR  O  ', ' A  45  THR HG23', -0.473, (-6.472, 8.922, 0.254)), (' B  69  GLN  HB3', ' B  71  GLY  O  ', -0.47, (-16.968, -11.633, 47.78)), (' B  88  ARG  CB ', ' B  88  ARG HH11', -0.469, (-35.693, -12.194, 44.264)), (' B  27  LEU HD11', ' B  42  VAL  HB ', -0.465, (-26.707, -21.382, 45.003)), (' A 126  TYR  CE1', ' B   4  ARG  HG3', -0.463, (-11.796, -14.61, 14.992)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.463, (2.813, -0.154, 15.903)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.462, (-7.061, -10.454, 21.031)), (' B  44  CYS  CB ', ' B  49  MET  HE3', -0.462, (-29.845, -29.298, 46.365)), (' B 108  PRO  HA ', ' B 130  MET  HG3', -0.461, (-33.148, -23.83, 22.035)), (' B  95  ASN  HB3', ' B  98  THR  HG1', -0.461, (-25.969, -3.115, 40.285)), (' B   3  PHE  HA ', ' B 299  GLN  NE2', -0.46, (-17.246, -14.66, 11.13)), (' A 207  TRP  CD2', ' A 288  GLU  HB3', -0.457, (-8.631, -30.263, 18.813)), (' A 295  ASP  O  ', ' A 298  ARG  HB3', -0.456, (-6.726, -22.896, 29.451)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.455, (9.081, -36.985, 16.754)), (' A 124  GLY  HA3', ' B   6  MET  CE ', -0.455, (-18.438, -10.014, 17.878)), (' B  40  ARG  CD ', ' B  85  CYS  HA ', -0.452, (-35.952, -23.509, 42.497)), (' A 164  HIS  CD2', ' A 175  THR HG23', -0.451, (0.016, -3.21, 12.63)), (' B  49  MET  CE ', ' B  49  MET  HA ', -0.449, (-30.317, -31.111, 45.624)), (' A 226  THR HG23', ' A 229  ASP  H  ', -0.448, (11.073, -41.136, 13.788)), (' B 292  THR  O  ', ' B 295  ASP  HB2', -0.444, (-26.56, -15.993, 12.965)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.444, (-25.353, -26.782, 31.954)), (' B 186  VAL  N  ', ' B 192  GLN HE22', -0.443, (-35.359, -31.803, 35.345)), (' B  19  GLN  NE2', ' B  26  THR HG21', -0.443, (-17.702, -18.988, 46.627)), (' B 130  MET  HB2', ' B 130  MET  HE2', -0.442, (-30.644, -21.969, 24.678)), (' A 207  TRP  O  ', ' A 210  ALA  HB3', -0.438, (-7.679, -31.674, 23.79)), (' A   9  PRO  HD3', ' B 124  GLY  HA2', -0.437, (-12.981, -15.369, 29.907)), (' A  78  ILE HG13', ' A  90  LYS  HG2', -0.436, (-1.156, 15.687, 25.468)), (' B 133  ASN  O  ', ' B 134  HIS  HB2', -0.43, (-34.302, -29.813, 25.964)), (' B 294  PHE  HE2', ' B 298  ARG  NH2', -0.428, (-28.614, -9.666, 16.994)), (' B  84  ASN  HB2', ' B 179  GLY  HA3', -0.427, (-37.941, -19.627, 38.403)), (' A  21  THR  OG1', ' A  26  THR HG23', -0.426, (-13.656, 7.785, 13.629)), (' A 297  VAL  CG2', ' A 298  ARG  N  ', -0.425, (-3.894, -24.417, 31.883)), (' A  32  LEU HD13', ' A 101  TYR  CE1', -0.424, (-1.52, -0.483, 28.17)), (' A 298  ARG  HG3', ' A 303  VAL HG11', -0.422, (-7.095, -20.111, 32.516)), (' B 226  THR HG23', ' B 229  ASP  OD2', -0.422, (-39.354, -32.048, -4.443)), (' A 270  GLU  O  ', ' A 274  ASN  HB2', -0.421, (-5.196, -43.873, 11.11)), (' B 207  TRP  CE2', ' B 288  GLU  HB3', -0.42, (-20.644, -24.217, 10.087)), (' B 131  ARG HH22', ' B 289  ASP  CG ', -0.42, (-26.761, -27.366, 15.59)), (' A 298  ARG  NE ', ' A 303  VAL HG11', -0.42, (-6.037, -19.172, 32.728)), (' B  20  VAL HG22', ' B  68  VAL HG22', -0.419, (-25.09, -14.489, 47.284)), (' B 233  VAL  O  ', ' B 236  LYS  HB2', -0.417, (-33.254, -37.375, 5.337)), (' B 108  PRO  HA ', ' B 130  MET  HG2', -0.417, (-33.337, -23.182, 22.599)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.416, (-35.824, -18.829, 38.02)), (' A 225  THR  OG1', ' A 269  LYS  NZ ', -0.416, (6.606, -42.475, 14.057)), (' B 289  ASP  HA ', ' B 307  HOH  O  ', -0.411, (-25.252, -23.181, 12.217)), (' B 262  LEU  HA ', ' B 262  LEU HD23', -0.41, (-35.143, -24.533, -0.495)), (' B  16  CYS  HB2', ' B  30  LEU HD22', -0.409, (-25.272, -9.863, 37.075)), (' A 185  PHE  HA ', ' A 192  GLN  NE2', -0.408, (3.364, -7.124, 4.31)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.405, (2.763, -5.129, 12.405)), (' B 185  PHE  HA ', ' B 192  GLN  NE2', -0.404, (-35.627, -32.518, 34.136)), (' B  10  SER  O  ', ' B  14  GLU  HG3', -0.403, (-18.569, -8.712, 31.131)), (' B  88  ARG  HB3', ' B  88  ARG HH11', -0.403, (-35.542, -11.982, 44.273)), (' B 104  VAL  O  ', ' B 160  CYS  HA ', -0.403, (-33.966, -15.234, 28.653)), (' B 207  TRP  CH2', ' B 281  ILE  HB ', -0.401, (-18.774, -25.55, 6.154)), (' A 166  GLU  OE1', ' B   1  SER  HB2', -0.401, (-11.427, -9.961, 5.142)), (' B  95  ASN  HA ', ' B  96  PRO  HD3', -0.4, (-23.481, -1.956, 43.302)), (' B 108  PRO  HB3', ' B 131  ARG  O  ', -0.4, (-33.841, -26.159, 21.43)), (' A 137  LYS  O  ', ' B   4  ARG  NH1', -0.4, (-10.48, -17.243, 11.628))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
