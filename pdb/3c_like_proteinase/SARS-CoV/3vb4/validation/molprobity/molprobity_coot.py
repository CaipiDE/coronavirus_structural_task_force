# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 154 ', 'TYR', 0.03770996486720492, (21.9, 3.6979999999999986, 36.979))]
data['omega'] = []
data['rota'] = [('A', ' 154 ', 'TYR', 0.07164001491257742, (-0.8740000000000006, 15.076, 21.519)), ('A', ' 216 ', 'ASP', 0.22984921076190967, (9.675999999999997, -4.582, -0.143)), ('B', '  47 ', 'GLU', 0.09290651295361353, (20.394, 23.237, -1.929)), ('B', '  69 ', 'GLN', 0.06542191784101217, (12.252999999999993, 26.363999999999994, 20.942)), ('B', ' 104 ', 'VAL', 0.21946806667360172, (30.350999999999996, 8.147, 24.642)), ('B', ' 123 ', 'SER', 0.22608598178089573, (7.406000000000001, 10.901, 18.903)), ('B', ' 222 ', 'ARG', 0.2782551200758853, (27.502000000000002, -32.386, 22.993999999999993)), ('B', ' 301 ', 'SER', 0.04710998245009684, (18.271, -9.531, 35.866))]
data['cbeta'] = [('E', '   3 ', 'VAL', ' ', 0.28762533762146836, (2.2720000000000002, -16.827, 38.53599999999999)), ('F', '   5 ', '0JU', ' ', 0.2576386357622573, (17.278, 12.816, 7.672999999999998))]
data['probe'] = [(' B 155  ASP  HB3', ' B 306  GLN  HG2', -0.862, (19.754, 6.547, 38.608)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.766, (-4.425, -7.37, 16.932)), (' B  58  LEU HD22', ' B  82  MET  HE3', -0.735, (30.006, 26.255, 11.619)), (' A  27 ALEU HD22', ' A 145  CYS  HB2', -0.718, (3.096, -6.383, 41.258)), (' B 154  TYR  HD1', ' B 306  GLN HE22', -0.712, (21.791, 3.572, 40.07)), (' A  27 BLEU HD21', ' A  42  VAL  HB ', -0.636, (-0.745, -4.956, 44.874)), (' B 297  VAL  O  ', ' B 301  SER  HB2', -0.605, (20.155, -8.96, 33.954)), (' A  45  THR  O  ', ' A  49  MET  HG3', -0.599, (-0.733, -14.983, 48.171)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.598, (8.056, -12.172, 3.356)), (' B  47  GLU  HG3', ' B  47  GLU  O  ', -0.594, (22.506, 23.342, -3.226)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.563, (19.077, 6.612, 20.938)), (' A  87  LEU HD21', ' A  89  LEU HD21', -0.553, (-4.334, 0.444, 48.693)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.552, (28.939, 16.047, 15.983)), (' B  87  LEU HD21', ' B  89  LEU HD21', -0.551, (23.608, 27.013, 15.759)), (' B 298 AARG  HD3', ' B 305  PHE  HZ ', -0.549, (19.599, -1.178, 31.442)), (' A 108  PRO  HA ', ' A 130  MET  CG ', -0.544, (-6.704, -7.012, 21.969)), (' B  43  ILE  HB ', ' B  61  LYS  HE2', -0.526, (22.743, 28.465, 8.885)), (' B 165  MET  CE ', ' B 185  PHE  HB3', -0.518, (27.721, 9.733, 5.676)), (' B 298 AARG  HG2', ' B 303  VAL  HB ', -0.511, (19.004, -3.991, 33.232)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.506, (14.482, 10.908, 10.609)), (' B  66  PHE  CE1', ' B  87  LEU HD21', -0.505, (22.738, 27.06, 14.442)), (' B 235  MET  HE3', ' B 241  PRO  HG3', -0.505, (35.45, -12.549, 8.779)), (' A 280  THR HG22', ' A 285  THR HG22', -0.498, (13.272, -14.278, 6.128)), (' A 108  PRO  HA ', ' A 130  MET  HG3', -0.495, (-6.84, -7.413, 21.939)), (' B  44  CYS  HB3', ' B  48  ASP  HB2', -0.491, (22.622, 24.006, 3.112)), (' B  54  TYR  HB3', ' B  82  MET  HE1', -0.489, (29.949, 24.761, 9.436)), (' A  94  SER  O  ', ' A  96  PRO  HD3', -0.48, (2.339, 16.227, 43.321)), (' A 234  ALA  HB1', ' A 239  TYR  HB2', -0.479, (-6.407, -15.478, 8.027)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.479, (1.597, 0.342, 27.739)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.463, (-8.27, -2.249, 37.989)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.461, (-8.508, -2.208, 38.202)), (' B 164  HIS  CD2', ' B 175  THR HG23', -0.461, (26.489, 13.197, 12.755)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.46, (12.588, -8.982, 26.88)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.46, (29.321, 16.441, 16.25)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.458, (17.928, 22.831, 28.141)), (' A  56  ASP  O  ', ' A  59  ILE HG22', -0.45, (-11.372, -8.315, 55.192)), (' A 300  CYS  O  ', ' A 301  SER  C  ', -0.446, (3.922, 8.28, 5.675)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.444, (18.295, 23.079, 28.654)), (' B  56  ASP  O  ', ' B  59  ILE HG22', -0.443, (30.816, 32.61, 7.069)), (' A  44  CYS  SG ', ' A  54  TYR  CE1', -0.44, (-5.423, -10.803, 46.934)), (' A 294  PHE  CE1', ' A 298  ARG  NH2', -0.438, (-1.626, 6.6, 16.316)), (' A 139  SER  HB3', ' B   6  MET  CE ', -0.438, (10.335, -6.985, 28.742)), (' A 297  VAL  O  ', ' A 301  SER  HA ', -0.426, (2.292, 8.451, 8.387)), (' B  78  ILE HD11', ' B  90  LYS  HE3', -0.424, (24.974, 31.992, 27.265)), (' A 153  ASP  OD1', ' A 154  TYR  CE1', -0.421, (-5.364, 13.149, 21.766)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.417, (29.328, -24.243, 11.13)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.416, (10.899, 3.787, 38.545)), (' B  82  MET  HB2', ' B  82  MET  HE3', -0.41, (30.389, 25.47, 12.862)), (' F   1  BOC  H13', ' F   1  BOC  O1 ', -0.41, (20.744, 11.289, -2.277)), (' B  17  MET  HG3', ' B 117  CYS  SG ', -0.404, (13.498, 14.102, 21.053)), (' B 155  ASP  HB3', ' B 306  GLN  CG ', -0.4, (20.565, 6.618, 39.555))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
