# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.2528593846870449, (-2.5159999999999982, 3.183, 30.690999999999995)), ('A', '  87 ', 'LEU', 0.05029641876914914, (7.362000000000003, 6.985000000000002, 35.997)), ('A', ' 106 ', 'ILE', 0.25819255518058865, (12.176, 16.351, 18.206)), ('A', ' 130 ', 'MET', 0.12991704491092118, (4.031000000000001, 17.957999999999995, 15.836)), ('A', ' 268 ', 'LEU', 0.0006702574857628126, (-13.696, 25.866999999999994, 1.1999999999999995))]
data['cbeta'] = []
data['probe'] = [(' A 232  LEU  O  ', ' A 236  LYS  HG2', -0.888, (-12.709, 35.91, 7.673)), (' A   4  ARG  HB2', ' A 299  GLN HE22', -0.774, (-7.591, 4.162, 3.948)), (' A 106  ILE HG13', ' A 110  GLN  OE1', -0.739, (12.352, 16.61, 14.765)), (' A 222  ARG  HG2', ' A 384  HOH  O  ', -0.736, (-20.88, 27.187, -10.164)), (' A  45  THR HG22', ' A  48  ASP  CG ', -0.722, (-5.729, 11.42, 43.356)), (' A  97  LYS  H  ', ' A  97  LYS  HD3', -0.692, (11.246, -8.83, 23.329)), (' A 131  ARG  HD2', ' A 200  ILE  CD1', -0.651, (-1.978, 21.958, 12.639)), (' A 299  GLN  HG2', ' A 299  GLN  O  ', -0.64, (-4.779, 5.546, -0.226)), (' A  97  LYS  HD3', ' A  97  LYS  N  ', -0.624, (11.744, -8.507, 23.212)), (' A  45  THR HG22', ' A  48  ASP  OD2', -0.602, (-5.175, 10.971, 43.57)), (' A   8  PHE  CZ ', ' A 127  GLN  HG3', -0.598, (3.676, 8.192, 7.265)), (' A  66  PHE  CE1', ' A  87  LEU HD11', -0.597, (3.859, 3.557, 39.182)), (' A  45  THR HG23', ' A  48  ASP  H  ', -0.592, (-7.205, 11.907, 42.881)), (' A 236  LYS  HG3', ' A 569  HOH  O  ', -0.582, (-14.227, 36.88, 6.9)), (' A  95  ASN  OD1', ' A  97  LYS  HD3', -0.57, (10.691, -7.883, 23.994)), (' A 286  ILE  O  ', ' A 286  ILE HD12', -0.564, (-15.409, 17.063, 9.007)), (' A  47  GLU  HG3', ' A 592  HOH  O  ', -0.561, (-10.816, 11.67, 42.773)), (' A 131  ARG  HD3', ' A 664  HOH  O  ', -0.556, (-1.304, 23.508, 14.075)), (' A 131  ARG  HD2', ' A 200  ILE HD11', -0.555, (-2.41, 21.099, 13.207)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.534, (8.579, 11.94, 30.735)), (' A 128  CYS  SG ', ' A 140  PHE  HZ ', -0.526, (-0.743, 9.628, 14.696)), (' A 163  HIS  CE1', ' A 172  HIS  CD2', -0.504, (-3.391, 12.279, 22.919)), (' A   4  ARG  O  ', ' A 299  GLN  NE2', -0.502, (-6.004, 5.731, 3.54)), (' A 137  LYS  HD2', ' A 200  ILE HD12', -0.502, (-4.386, 19.672, 13.012)), (' A 137  LYS  HD2', ' A 200  ILE  CD1', -0.498, (-4.238, 20.491, 12.953)), (' A  11  GLY  O  ', ' A  12  LYS  HB2', -0.493, (11.112, -3.714, 16.192)), (' A 106  ILE HD11', ' A 110  GLN  NE2', -0.492, (12.933, 14.963, 13.571)), (' A  45  THR  CG2', ' A  48  ASP  H  ', -0.489, (-7.018, 11.94, 43.128)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.488, (9.082, 11.825, 30.73)), (' A 142  ASN  HB2', ' A 515  HOH  O  ', -0.483, (-9.192, 11.377, 19.609)), (' A 286  ILE  C  ', ' A 286  ILE HD12', -0.475, (-15.312, 17.176, 9.608)), (' A 188  ARG  NH1', ' A 512  HOH  O  ', -0.473, (0.975, 22.571, 36.711)), (' A   4  ARG  HB2', ' A 299  GLN  NE2', -0.463, (-6.91, 4.507, 3.823)), (' A 165  MET  HB3', ' A 165  MET  HE3', -0.459, (-2.934, 13.753, 29.966)), (' A  46  ALA  HB3', ' A 592  HOH  O  ', -0.444, (-10.951, 11.044, 41.711)), (' A  95  ASN  OD1', ' A  97  LYS  CD ', -0.442, (10.478, -8.085, 23.618)), (' A 186  VAL HG21', ' A 188  ARG  NH1', -0.441, (-0.352, 22.677, 34.728)), (' A 163  HIS  CE1', ' A 172  HIS  HD2', -0.44, (-3.862, 12.347, 23.55)), (' A 297  VAL  CG1', ' A 304  THR  OG1', -0.439, (2.688, 11.095, -2.688)), (' A 106  ILE HG13', ' A 107  GLN  H  ', -0.429, (11.42, 17.412, 16.165)), (' A 107  GLN  HB2', ' A 108  PRO  CD ', -0.421, (10.146, 21.744, 16.758)), (' A  97  LYS  HG2', ' A 401  HOH  O  ', -0.42, (9.975, -6.693, 20.991)), (' A 106  ILE HG13', ' A 110  GLN  CD ', -0.42, (12.116, 16.596, 14.636)), (' A 286  ILE HD11', ' A 650  HOH  O  ', -0.419, (-15.172, 14.586, 11.743)), (' A 269  LYS  O  ', ' A 273  GLN  HG3', -0.418, (-17.312, 30.521, 3.152)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.415, (13.619, -5.405, 25.897)), (' A  56  ASP  O  ', ' A  59  ILE HG12', -0.413, (3.892, 11.109, 48.852)), (' A   2  GLY  HA2', ' A 282  LEU  O  ', -0.412, (-14.348, 9.452, 5.406)), (' A  15  GLY  O  ', ' A  97  LYS  HE2', -0.41, (7.918, -6.756, 23.715)), (' A 130  MET  HA ', ' A 136  ILE HG22', -0.408, (2.848, 17.026, 16.571)), (' A 131  ARG  HD2', ' A 200  ILE HD13', -0.408, (-1.964, 21.08, 12.262)), (' A  76  ARG  NE ', ' A 565  HOH  O  ', -0.404, (4.791, -9.889, 42.734))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
