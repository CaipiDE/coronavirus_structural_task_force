# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   5 ', 'LYS', 0.040634206719435684, (-9.251999999999997, 4.376, 22.664)), ('A', ' 154 ', 'TYR', 0.04562863056330191, (-13.318, -12.016, 12.698))]
data['omega'] = []
data['rota'] = [('A', '  30 ', 'LEU', 0.013911598532145434, (6.463999999999996, -14.575, 18.429)), ('A', '  49 ', 'MET', 0.0, (25.038, -2.455, 19.006)), ('A', '  50 ', 'LEU', 0.008267666375554109, (27.130000000000003, 0.32300000000000006, 17.552)), ('A', '  59 ', 'ILE', 0.15791070593856107, (27.31599999999999, -17.145, 11.542)), ('A', '  68 ', 'VAL', 0.005072748736416275, (13.342000000000002, -20.073000000000008, 23.895999999999997)), ('A', '  75 ', 'LEU', 0.027575741100163555, (11.526000000000003, -25.107, 23.466)), ('A', '  76 ', 'ARG', 0.18800095624057306, (14.488000000000003, -26.42000000000001, 21.496)), ('A', '  91 ', 'VAL', 0.23933756486684563, (11.571000000000002, -25.09400000000001, 17.086)), ('A', '  94 ', 'SER', 0.05359990173019469, (4.1579999999999995, -26.454000000000008, 16.872)), ('A', ' 175 ', 'THR', 0.008159601566148922, (9.318000000000003, -3.532000000000001, 11.912)), ('A', ' 192 ', 'GLN', 0.16473659565909357, (18.811999999999998, 8.609, 14.522)), ('A', ' 198 ', 'THR', 0.10387178385127693, (2.0329999999999995, 15.804, 10.783)), ('A', ' 214 ', 'ASN', 0.2418666973100014, (-22.994, 10.304000000000006, 19.025)), ('A', ' 235 ', 'MET', 0.10161107016590763, (-0.48699999999999966, 23.246, 5.424999999999999)), ('A', ' 268 ', 'LEU', 0.04735057798246064, (-12.622, 21.697, 10.506)), ('A', ' 282 ', 'LEU', 0.0, (-16.397, 13.639, 22.395)), ('A', ' 286 ', 'ILE', 0.1901220680224569, (-8.119, 18.998, 21.231))]
data['cbeta'] = [('A', ' 217 ', 'ARG', ' ', 0.2764260173003528, (-23.94, 18.829000000000008, 15.036999999999999))]
data['probe'] = [(' A  17  MET  HE1', ' A  30  LEU HD23', -0.97, (3.566, -12.181, 19.276)), (' A 175  THR HG23', ' A 176  ASP  O  ', -0.935, (9.231, -6.862, 10.435)), (' A  17  MET  CE ', ' A  30  LEU HD23', -0.88, (2.78, -13.01, 19.722)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.752, (23.988, -3.69, 17.536)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.701, (-14.47, 4.268, 22.187)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.695, (24.286, -2.676, 17.796)), (' A  86  LEU HD21', ' A 175  THR HG21', -0.627, (10.545, -7.296, 12.436)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.611, (1.531, -22.272, 17.455)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.592, (5.56, 4.683, 21.086)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.583, (13.807, -13.025, 28.997)), (' A  44  CYS  SG ', ' A  49  MET  HE3', -0.571, (23.12, -5.192, 17.433)), (' A   5  LYS  HE2', ' A 290  GLU  HB2', -0.532, (-6.127, 7.919, 18.655)), (' A 131  ARG HH22', ' A 289  ASP  CG ', -0.514, (-2.852, 11.901, 14.867)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.504, (-0.119, -4.422, 17.958)), (' A  40  ARG  NE ', ' A 187  ASP  OD2', -0.493, (18.846, -6.04, 11.719)), (' A 131  ARG  HD2', ' A 197  ASP  OD2', -0.488, (2.803, 11.804, 14.69)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.487, (11.828, -8.502, 10.907)), (' A  17  MET  HE2', ' A  30  LEU HD23', -0.485, (3.635, -13.644, 20.279)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.482, (11.502, -8.721, 10.219)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.482, (-3.491, -11.819, 24.024)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.479, (-11.462, -14.54, 12.042)), (' A 276  MET  HE3', ' A 281  ILE HD12', -0.463, (-13.671, 20.11, 19.613)), (' A 117  CYS  SG ', ' A 122  PRO  HA ', -0.462, (3.169, -9.622, 26.723)), (' A  49  MET  HE1', ' A  54  TYR  OH ', -0.458, (21.801, -4.349, 16.266)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.454, (17.275, -7.956, 10.868)), (' A 166  GLU  HG3', ' A 172  HIS  ND1', -0.434, (10.406, 3.885, 22.639)), (' A  17  MET  HE1', ' A  30  LEU  CD2', -0.431, (3.299, -12.691, 18.944)), (' A 166  GLU  HG3', ' A 172  HIS  CE1', -0.43, (10.42, 3.946, 23.006)), (' A 131  ARG  CD ', ' A 197  ASP  OD2', -0.427, (2.64, 11.369, 14.727)), (' A 131  ARG  NH2', ' A 289  ASP  OD2', -0.423, (-2.355, 11.398, 16.051)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.421, (-12.837, 1.736, 22.118)), (' A 214  ASN  N  ', ' A 214  ASN HD22', -0.418, (-22.087, 9.459, 17.804)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.414, (-14.744, 14.073, 1.256)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.405, (9.597, -1.436, 25.11)), (' A  90 ALYS  HB3', ' A  90 ALYS  HE2', -0.403, (12.865, -25.824, 12.952)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.402, (17.666, -11.641, 15.21))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
