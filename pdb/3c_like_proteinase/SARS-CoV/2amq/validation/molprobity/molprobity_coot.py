# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.011583572367055588, (100.903, 1.073, 36.35500000000001)), ('B', ' 145 ', 'CYS', 0.0049778264630925, (80.88000000000001, -8.394000000000004, 38.425)), ('B', ' 154 ', 'TYR', 0.025333337774027846, (77.698, 12.430000000000003, 21.63500000000001))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.00013361462398083027, (88.94400000000002, -10.482000000000001, 23.516000000000005)), ('A', '  30 ', 'LEU', 0.02234165434627914, (97.724, 16.210000000000004, 22.548000000000002)), ('A', '  47 ', 'GLU', 0.08289028269602612, (97.21900000000002, 21.946, -2.665)), ('A', ' 106 ', 'ILE', 0.07070080630302758, (107.56500000000001, 1.4590000000000003, 20.35)), ('A', ' 123 ', 'SER', 0.10116637531316633, (85.215, 8.582000000000003, 18.969)), ('A', ' 153 ', 'ASP', 0.0652012718544755, (102.22100000000002, 0.768, 32.797)), ('A', ' 214 ', 'ASN', 0.06742641418830421, (92.908, -20.628000000000004, 29.585)), ('A', ' 227 ', 'LEU', 0.0009186604606591419, (115.493, -22.571, 16.884)), ('A', ' 268 ', 'LEU', 0.0, (103.34100000000001, -24.12600000000001, 16.549)), ('A', ' 289 ', 'ASP', 0.1606721752157427, (99.52100000000002, -12.208000000000004, 16.109)), ('B', '  45 ', 'THR', 0.07422577007469901, (77.788, -15.561999999999998, 51.512000000000015)), ('B', '  47 ', 'GLU', 0.05746016094781472, (76.34599999999999, -20.964000000000002, 51.377)), ('B', '  55 ', 'GLU', 0.04527189715970797, (64.551, -10.659, 49.95)), ('B', '  75 ', 'LEU', 0.0, (81.30600000000003, 6.743, 50.753)), ('B', ' 127 ', 'GLN', 0.005742010851006552, (83.38900000000002, -4.053, 22.156)), ('B', ' 213 ', 'ILE', 0.08989203932443474, (82.745, 0.7009999999999998, 0.881)), ('B', ' 228 ', 'ASN', 0.04451572466337177, (62.454, -16.398, 1.252)), ('B', ' 268 ', 'LEU', 0.0, (76.395, -14.128, 1.38)), ('C', '   4 ', 'LEU', 0.12180132332344572, (98.171, 12.760000000000002, 4.676)), ('D', '   4 ', 'LEU', 0.015327815960284197, (78.07900000000001, -16.066, 40.058))]
data['cbeta'] = [('A', ' 148 ', 'VAL', ' ', 0.286018887781329, (97.86, 9.81, 20.676))]
data['probe'] = [(' B  45  THR HG21', ' B  47  GLU  OE1', -1.147, (77.823, -18.732, 53.989)), (' A   6  MET  HE2', ' A 299  GLN  HG3', -1.087, (91.928, -8.536, 28.403)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -1.021, (79.226, -12.388, 31.279)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -1.003, (97.934, 5.399, 9.19)), (' B  19  GLN  NE2', ' B 119  ASN HD22', -0.991, (88.514, -4.432, 45.323)), (' B  55  GLU  HB2', ' B 472  HOH  O  ', -0.922, (63.218, -11.59, 47.531)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.921, (87.099, -0.699, 12.366)), (' A 127  GLN  HB2', ' A 554  HOH  O  ', -0.905, (93.1, -4.751, 21.738)), (' B  64  HIS  HE1', ' B 493  HOH  O  ', -0.902, (71.6, 0.092, 61.202)), (' B  45  THR  CG2', ' B  47  GLU  OE1', -0.881, (76.96, -18.608, 53.243)), (' B 135  THR HG22', ' B 539  HOH  O  ', -0.88, (73.797, -15.132, 27.93)), (' A  61  LYS  HE2', ' A 448  HOH  O  ', -0.875, (101.301, 29.394, 6.618)), (' B 233  VAL HG21', ' B 269  LYS  HE2', -0.873, (70.482, -20.571, -1.527)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.864, (79.068, -11.859, 31.757)), (' B 165  MET  HE2', ' B 181  PHE  CE2', -0.86, (71.887, -14.016, 34.698)), (' B 231  ASN  HB3', ' B 235  MET  HE3', -0.833, (65.1, -18.767, 6.078)), (' B 135  THR  HA ', ' B 539  HOH  O  ', -0.831, (74.065, -14.986, 27.872)), (' A 222  ARG  HG2', ' A 222  ARG HH11', -0.83, (108.155, -36.793, 23.924)), (' B  45  THR HG23', ' B  46  ALA  N  ', -0.818, (77.849, -18.34, 51.869)), (' B  51  ASN HD22', ' B 188  ARG HH12', -0.815, (66.733, -20.441, 45.635)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.81, (97.126, 5.818, 9.642)), (' A   5  LYS  HE2', ' A 127  GLN  HB3', -0.804, (93.929, -4.572, 19.468)), (' B  19  GLN HE21', ' B 119  ASN HD22', -0.801, (87.686, -3.99, 45.638)), (' B 224  THR HG22', ' B 526  HOH  O  ', -0.792, (69.222, -13.4, -9.542)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.784, (87.438, -0.456, 11.653)), (' D   6  010  C1 ', ' D 101  HOH  O  ', -0.781, (81.945, -13.23, 44.315)), (' A  51  ASN  ND2', ' A 188  ARG  HE ', -0.767, (107.889, 16.702, -0.37)), (' B  68  VAL HG23', ' B  75  LEU  HB2', -0.748, (81.285, 4.595, 48.553)), (' B 165  MET  HE2', ' B 181  PHE  CZ ', -0.747, (71.445, -13.798, 35.823)), (' A   5  LYS  HD3', ' A 547  HOH  O  ', -0.747, (92.483, -5.573, 17.58)), (' B  51  ASN HD22', ' B 188  ARG  NH1', -0.726, (67.029, -20.571, 44.97)), (' B 168  PRO  HG3', ' D   1  02J  C41', -0.725, (76.508, -24.134, 35.129)), (' A 165  MET  HG2', ' C   4  LEU HD12', -0.721, (100.535, 12.026, 5.046)), (' B 168  PRO  HG3', ' D   1  02J  O42', -0.718, (77.582, -23.431, 34.989)), (' B 231  ASN  HB3', ' B 235  MET  CE ', -0.717, (64.384, -18.604, 6.319)), (' A 236  LYS  N  ', ' A 488  HOH  O  ', -0.707, (109.544, -20.661, 5.108)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.702, (103.196, 1.983, 35.853)), (' B 110  GLN  HG2', ' B 512  HOH  O  ', -0.68, (70.335, -2.699, 19.981)), (' B 244  GLN  O  ', ' B 247  VAL HG22', -0.679, (63.292, -4.971, 4.905)), (' B  47  GLU  CD ', ' B  47  GLU  H  ', -0.677, (78.235, -19.848, 52.781)), (' B 107  GLN  NE2', ' B 535  HOH  O  ', -0.668, (64.248, -4.124, 23.628)), (' B 110  GLN  HG3', ' B 470  HOH  O  ', -0.668, (73.464, -1.4, 19.498)), (' A 155  ASP  HA ', ' A 446  HOH  O  ', -0.663, (97.825, 3.906, 35.437)), (' A 279  ARG  HB3', ' A 473  HOH  O  ', -0.652, (89.562, -27.972, 17.955)), (' B  45  THR  C  ', ' B 494  HOH  O  ', -0.646, (79.12, -16.227, 49.503)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.642, (102.848, 21.313, 12.861)), (' A 222  ARG  HG2', ' A 222  ARG  O  ', -0.632, (107.456, -35.879, 23.41)), (' A 243  THR  H  ', ' A 246  HIS  HD2', -0.632, (113.405, -14.138, 17.386)), (' B  45  THR HG23', ' B  47  GLU  H  ', -0.631, (77.35, -19.079, 52.145)), (' A  15  GLY  HA2', ' A 544  HOH  O  ', -0.629, (89.485, 14.951, 28.677)), (' A 305  PHE  HB3', ' A 446  HOH  O  ', -0.627, (96.296, 3.155, 34.931)), (' A   6  MET  CE ', ' A 299  GLN  HG3', -0.62, (92.459, -8.436, 29.145)), (' B 131  ARG  HD3', ' B 197  ASP  OD1', -0.614, (75.542, -16.139, 19.457)), (' B 269  LYS  NZ ', ' B 462  HOH  O  ', -0.61, (68.459, -18.945, -2.953)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.609, (106.729, 14.865, 15.865)), (' A  19  GLN  NE2', ' A 119  ASN HD22', -0.605, (86.885, 20.822, 14.749)), (' D   6  010  H1 ', ' D 101  HOH  O  ', -0.6, (81.922, -13.427, 44.117)), (' B  45  THR  CG2', ' B  47  GLU  CD ', -0.6, (77.675, -19.103, 53.294)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.596, (86.224, -13.378, 2.781)), (' B 285  THR  HB ', ' B 456  HOH  O  ', -0.595, (89.579, -18.511, 8.223)), (' B 167  LEU HD21', ' B 185  PHE  CE2', -0.594, (72.059, -18.749, 29.675)), (' B 209  TYR  O  ', ' B 213  ILE HG23', -0.593, (80.951, -1.133, 2.28)), (' B  45  THR  CG2', ' B  46  ALA  N  ', -0.583, (77.846, -17.581, 52.105)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.574, (104.311, -7.487, 15.791)), (' B 213  ILE  CD1', ' B 300  CYS  HB3', -0.565, (83.09, 2.915, 4.576)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.564, (72.527, -6.379, 45.078)), (' B  46  ALA  N  ', ' B 494  HOH  O  ', -0.564, (79.629, -16.919, 49.858)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.564, (113.104, -13.705, 17.579)), (' B 169  THR  CG2', ' B 171  VAL HG22', -0.563, (77.926, -20.234, 27.328)), (' A 286  ILE  C  ', ' A 286  ILE HD12', -0.561, (94.507, -17.132, 13.899)), (' A 242  LEU HD12', ' A 570  HOH  O  ', -0.561, (110.263, -14.523, 17.095)), (' B  51  ASN  HA ', ' B 188  ARG  NH1', -0.56, (68.28, -20.455, 44.722)), (' A 127  GLN  CB ', ' A 554  HOH  O  ', -0.56, (93.589, -4.683, 21.985)), (' B   4  ARG  N  ', ' B 299  GLN HE22', -0.555, (87.684, -1.275, 12.533)), (' B  44  CYS  HB3', ' B  48  ASP  HB2', -0.55, (74.489, -15.864, 48.978)), (' A 222  ARG  CG ', ' A 222  ARG  NH1', -0.543, (107.175, -37.15, 24.301)), (' B 169  THR HG23', ' B 171  VAL HG22', -0.541, (78.46, -20.033, 27.586)), (' B 244  GLN  NE2', ' B 247  VAL  CG2', -0.54, (63.477, -4.904, 2.985)), (' A  45  THR  OG1', ' A  47  GLU  OE1', -0.539, (97.249, 25.274, -0.09)), (' A 141  LEU HD23', ' B   1  SER  HB2', -0.537, (87.674, 5.651, 7.406)), (' B 180  LYS  HE3', ' B 543  HOH  O  ', -0.534, (62.041, -3.652, 34.439)), (' A 240  GLU  HG3', ' A 511  HOH  O  ', -0.528, (111.81, -11.349, 13.091)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.526, (89.515, 10.308, 11.989)), (' B   1  SER  HB3', ' B 430  HOH  O  ', -0.526, (86.905, 4.376, 5.122)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.525, (106.188, 14.483, 15.88)), (' A  60  ARG  NH1', ' A 448  HOH  O  ', -0.525, (102.244, 29.902, 5.759)), (' A   5  LYS  HZ2', ' B   4  ARG HH12', -0.521, (94.101, -5.831, 15.805)), (' B 252  PRO  HD2', ' B 528  HOH  O  ', -0.519, (71.366, 1.321, 5.813)), (' B  19  GLN HE21', ' B 119  ASN  ND2', -0.515, (88.344, -4.464, 45.09)), (' A  82  MET  HE3', ' A 495  HOH  O  ', -0.513, (111.428, 20.006, 11.005)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.513, (96.077, 21.154, 28.557)), (' B 229  ASP  HB3', ' B 462  HOH  O  ', -0.511, (67.074, -18.211, -2.877)), (' B 298  ARG  NH2', ' B 437  HOH  O  ', -0.511, (82.291, 1.952, 18.344)), (' A 236  LYS  HG2', ' A 237  TYR  CE1', -0.51, (104.738, -22.845, 5.278)), (' B 238  ASN  HB3', ' B 550  HOH  O  ', -0.508, (74.946, -20.805, 12.194)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.507, (75.502, 11.899, 22.311)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.507, (90.915, -24.731, 14.769)), (' B 244  GLN  HA ', ' B 247  VAL HG22', -0.507, (62.982, -6.486, 4.589)), (' B 110  GLN  CG ', ' B 512  HOH  O  ', -0.506, (70.379, -3.033, 19.904)), (' B  45  THR HG23', ' B  47  GLU  CD ', -0.504, (77.669, -18.781, 52.827)), (' A   6  MET  C  ', ' A 554  HOH  O  ', -0.503, (92.573, -4.455, 23.375)), (' A 222  ARG  HG2', ' A 222  ARG  NH1', -0.503, (107.926, -36.561, 24.624)), (' B 131  ARG HH22', ' B 289  ASP  CG ', -0.501, (77.58, -12.722, 15.52)), (' B   8  PHE  HD1', ' B 113  SER  HG ', -0.499, (81.386, 1.166, 22.862)), (' A  52  PRO  HG2', ' A  54  TYR  CE1', -0.499, (105.591, 18.894, 3.996)), (' A  55  GLU  CD ', ' A  55  GLU  H  ', -0.497, (110.344, 23.095, 6.431)), (' B 131  ARG  CD ', ' B 197  ASP  OD1', -0.497, (75.857, -15.718, 19.824)), (' B 244  GLN  NE2', ' B 247  VAL HG21', -0.494, (62.791, -5.403, 2.562)), (' A 423  HOH  O  ', ' B   1  SER  HA ', -0.493, (91.492, 4.963, 6.152)), (' B 213  ILE HD11', ' B 300  CYS  HB3', -0.493, (83.96, 2.642, 4.968)), (' A  75  LEU HD21', ' A  93  THR  HB ', -0.492, (95.287, 26.551, 28.682)), (' B  61  LYS  NZ ', ' B 426  HOH  O  ', -0.492, (76.373, -9.35, 55.682)), (' B 108  PRO  HA ', ' B 130  MET  CG ', -0.489, (71.308, -9.124, 21.843)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.487, (89.298, 1.649, 15.531)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.485, (79.946, 8.878, 42.375)), (' B  28  ASN  ND2', ' B 144  SER  O  ', -0.482, (83.693, -5.773, 38.272)), (' A 164  HIS  O  ', ' C   5  PJE  N5 ', -0.481, (98.071, 11.886, 7.473)), (' B 244  GLN  O  ', ' B 247  VAL  CG2', -0.48, (63.761, -4.969, 4.586)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.48, (79.379, 9.456, 42.462)), (' A  51  ASN HD22', ' A 188  ARG  HE ', -0.477, (107.938, 17.267, 0.458)), (' B   6  MET  HE3', ' B 299  GLN  NE2', -0.475, (87.51, 1.019, 13.126)), (' B  97  LYS  NZ ', ' B 522  HOH  O  ', -0.474, (88.207, 9.431, 38.272)), (' B 224  THR  N  ', ' B 526  HOH  O  ', -0.474, (70.121, -13.303, -8.98)), (' A  31  TRP  CE2', ' A  75  LEU HD11', -0.473, (95.382, 23.223, 26.668)), (' A 214  ASN  C  ', ' A 214  ASN  OD1', -0.471, (91.814, -22.109, 28.735)), (' B 180  LYS  CE ', ' B 543  HOH  O  ', -0.471, (61.996, -3.761, 34.121)), (' B 287  LEU HD12', ' B 428  HOH  O  ', -0.47, (79.475, -17.395, 8.031)), (' B  64  HIS  CE1', ' B 493  HOH  O  ', -0.469, (72.342, 0.212, 62.125)), (' A 146  GLY  O  ', ' A 162  MET  HE2', -0.468, (98.035, 13.153, 18.08)), (' A  19  GLN HE21', ' A 119  ASN HD22', -0.463, (87.217, 20.225, 14.947)), (' B 165  MET  CE ', ' B 181  PHE  CE2', -0.463, (71.998, -14.529, 34.937)), (' D   6  010  C  ', ' D 101  HOH  O  ', -0.463, (81.928, -12.531, 44.062)), (' B 298  ARG  NH2', ' B 434  HOH  O  ', -0.462, (82.484, 3.599, 18.416)), (' A 126  TYR  HE1', ' A 128  CYS  HG ', -0.461, (94.537, 0.351, 15.769)), (' A 240  GLU  HG2', ' A 481  HOH  O  ', -0.459, (108.881, -10.765, 13.735)), (' B  47  GLU  CD ', ' B  47  GLU  N  ', -0.459, (77.681, -20.3, 52.369)), (' A 286  ILE HD11', ' A 288  GLU  OE2', -0.458, (92.777, -13.998, 14.945)), (' B  83  GLN  HG2', ' B 178  GLU  O  ', -0.457, (65.497, -2.957, 38.72)), (' B  45  THR HG23', ' B  46  ALA  H  ', -0.457, (78.898, -17.532, 52.212)), (' D   4  LEU  HA ', ' D   4  LEU HD12', -0.457, (76.836, -15.416, 39.076)), (' A 240  GLU  CG ', ' A 511  HOH  O  ', -0.454, (111.687, -11.253, 13.32)), (' B 269  LYS  CE ', ' B 462  HOH  O  ', -0.452, (68.895, -18.523, -2.482)), (' A 166  GLU  HB2', ' C   5  PJE  C29', -0.45, (95.099, 7.157, 6.29)), (' B 143  GLY  HA2', ' D   5  PJE  O7 ', -0.45, (83.738, -10.155, 41.219)), (' A 114  VAL  O  ', ' A 125  VAL  HA ', -0.449, (90.846, 3.673, 20.238)), (' C   5  PJE  C22', ' C 101  HOH  O  ', -0.449, (92.757, 14.544, 7.478)), (' A 285  THR  OG1', ' A 528  HOH  O  ', -0.449, (88.635, -18.167, 12.45)), (' A 236  LYS  HG2', ' A 237  TYR  CD1', -0.446, (105.093, -22.517, 5.523)), (' B  40  ARG  CZ ', ' B  54  TYR  CD1', -0.445, (68.236, -12.159, 44.134)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.444, (96.024, 20.59, 28.234)), (' D   6  010  C6 ', ' D 101  HOH  O  ', -0.443, (82.066, -12.529, 44.426)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.442, (65.755, -9.567, 9.294)), (' B 101  TYR  HA ', ' B 157  VAL  O  ', -0.442, (73.994, 7.838, 29.467)), (' A 214  ASN  O  ', ' A 214  ASN  OD1', -0.441, (90.876, -22.01, 28.83)), (' B 213  ILE HG13', ' B 214  ASN  N  ', -0.44, (84.189, 0.025, 2.434)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.44, (113.201, -11.642, 23.964)), (' A  45  THR  O  ', ' A  49  MET  HE2', -0.439, (96.461, 20.774, 1.818)), (' A  72  ASN  ND2', ' A 552  HOH  O  ', -0.439, (79.634, 27.333, 23.996)), (' A 276  MET  CE ', ' A 280  THR  HA ', -0.438, (91.256, -23.49, 15.956)), (' B 176  ASP  HB2', ' B 408  HOH  O  ', -0.438, (69.098, -1.48, 31.186)), (' B  46  ALA  HB3', ' B  47  GLU  OE2', -0.437, (79.709, -19.688, 52.735)), (' B 227  LEU HD21', ' B 242  LEU  O  ', -0.436, (63.561, -12.318, 5.411)), (' B  45  THR  CG2', ' B  47  GLU  H  ', -0.435, (77.332, -18.631, 52.42)), (' B 148  VAL HG22', ' B 414  HOH  O  ', -0.434, (81.532, -0.548, 33.787)), (' B 228  ASN  O  ', ' B 232  LEU  HG ', -0.433, (63.836, -19.592, 1.857)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.433, (69.477, -9.473, 34.024)), (' A  30  LEU HD11', ' A  32  LEU HD11', -0.432, (101.025, 13.711, 25.483)), (' A  48  ASP  OD2', ' A  57  LEU HD11', -0.432, (102.978, 24.181, 2.788)), (' B  45  THR HG23', ' B  47  GLU  OE2', -0.432, (78.286, -18.642, 52.859)), (' A 286  ILE  O  ', ' A 286  ILE HD12', -0.431, (93.877, -16.823, 14.62)), (' B 234  ALA  O  ', ' B 239  TYR  HB2', -0.429, (71.677, -19.292, 8.181)), (' B 269  LYS  HE3', ' B 462  HOH  O  ', -0.428, (68.773, -18.454, -2.184)), (' B  68  VAL HG23', ' B  75  LEU  CB ', -0.428, (80.489, 5.364, 49.032)), (' B 277  ASN  HA ', ' B 549  HOH  O  ', -0.427, (88.33, -22.61, -0.591)), (' A 127  GLN  HG2', ' A 413  HOH  O  ', -0.425, (96.157, -5.689, 21.946)), (' A 240  GLU  CG ', ' A 481  HOH  O  ', -0.424, (108.784, -10.677, 13.345)), (' B 269  LYS  O  ', ' B 273  GLN  HG3', -0.423, (75.605, -20.115, -0.117)), (' A 126  TYR  HE1', ' A 128  CYS  SG ', -0.423, (94.76, 0.561, 15.532)), (' B 207  TRP  O  ', ' B 210  ALA  HB3', -0.42, (81.951, -4.859, 5.919)), (' B 253  LEU HD21', ' B 296  VAL HG12', -0.42, (78.323, 0.732, 6.784)), (' A  40  ARG  HG2', ' A  85  CYS  O  ', -0.419, (105.033, 17.31, 11.341)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.419, (88.931, 1.423, 38.676)), (' A  49  MET  HE1', ' C   6  010  H2 ', -0.419, (94.856, 18.489, 3.312)), (' B 144  SER  O  ', ' B 145  CYS  C  ', -0.416, (81.789, -6.722, 38.231)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.416, (69.537, -5.12, 37.854)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.415, (92.219, 8.966, 10.829)), (' A 153  ASP  N  ', ' A 153  ASP  OD1', -0.414, (102.216, 1.794, 31.233)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.41, (72.752, -9.724, 47.612)), (' B 173  ALA  HB2', ' B 539  HOH  O  ', -0.407, (73.988, -14.94, 29.793)), (' A   5  LYS  NZ ', ' A 290  GLU  OE1', -0.407, (95.775, -5.728, 16.434)), (' A 240  GLU  CB ', ' A 481  HOH  O  ', -0.402, (108.397, -10.961, 13.24)), (' B  18  VAL  HA ', ' B 500  HOH  O  ', -0.402, (85.548, 2.783, 42.677)), (' B 113  SER  OG ', ' B 127  GLN  NE2', -0.401, (81.861, -0.698, 22.334)), (' B 244  GLN  C  ', ' B 247  VAL HG22', -0.401, (63.317, -5.767, 5.481)), (' B 108  PRO  HA ', ' B 130  MET  HG3', -0.401, (71.316, -9.44, 22.356)), (' B  82  MET  HG2', ' B 527  HOH  O  ', -0.401, (64.891, -7.032, 44.057)), (' A  30  LEU  CD1', ' A  32  LEU HD11', -0.4, (101.27, 13.844, 25.015))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
