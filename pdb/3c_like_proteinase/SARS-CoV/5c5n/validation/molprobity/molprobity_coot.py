# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 106 ', 'ILE', 0.0634028944288234, (-6.921000000000003, -41.888000000000005, 18.115000000000002))]
data['cbeta'] = []
data['probe'] = [(' A 217  ARG  HD2', ' A 534  HOH  O  ', -1.07, (20.499, -24.416, 11.344)), (' A 165  MET  HE1', ' A 192  GLN HE21', -1.056, (-23.709, -36.776, 9.476)), (' A 154  TYR  CZ ', ' A 156  CYS  HB3', -1.003, (3.207, -53.839, 15.488)), (' A 153  ASP  O  ', ' A 154  TYR  CG ', -1.002, (4.565, -53.167, 13.919)), (' A 153  ASP  O  ', ' A 154  TYR  CD2', -0.988, (5.41, -52.556, 15.048)), (' A 154  TYR  CE1', ' A 156  CYS  HB2', -0.976, (2.229, -55.392, 15.153)), (' A  41  HIS  HB2', ' A  49  MET  HE1', -0.952, (-27.079, -46.252, 6.346)), (' A 154  TYR  CE1', ' A 156  CYS  CB ', -0.922, (2.416, -54.999, 14.718)), (' A 154  TYR  CZ ', ' A 156  CYS  CB ', -0.892, (2.22, -54.026, 15.429)), (' A 154  TYR  HD1', ' A 155  ASP  H  ', -0.881, (5.198, -55.765, 13.974)), (' A 154  TYR  CD1', ' A 155  ASP  N  ', -0.862, (4.919, -54.662, 13.307)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.839, (-24.336, -36.953, 10.312)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.839, (7.839, -36.121, 2.645)), (' A  69  GLN HE21', ' A  72  ASN  HA ', -0.824, (-16.049, -61.796, -6.404)), (' A  49  MET  O  ', ' A  52  PRO  HD3', -0.814, (-32.263, -42.901, 9.717)), (' A  17  MET  HE2', ' A 573  HOH  O  ', -0.812, (-10.722, -50.123, 2.875)), (' A  17  MET  CE ', ' A 573  HOH  O  ', -0.798, (-10.488, -50.61, 3.488)), (' A 165  MET  CE ', ' A 192  GLN HE21', -0.784, (-23.057, -36.538, 9.63)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.756, (-0.499, -22.854, 23.405)), (' A  49  MET  HE3', ' A 401  SLH  H25', -0.752, (-26.676, -43.754, 4.684)), (' A 215  GLY  HA3', ' A 305  PHE  HD2', -0.728, (19.823, -28.034, 5.427)), (' A 154  TYR  HE1', ' A 156  CYS  HB2', -0.696, (2.822, -55.841, 15.3)), (' A 153  ASP  C  ', ' A 154  TYR  CD2', -0.648, (5.296, -52.043, 14.452)), (' A 154  TYR  CE1', ' A 156  CYS  HB3', -0.641, (3.127, -54.069, 15.223)), (' A  50  LEU  O  ', ' A 188  ILE  CG2', -0.635, (-31.695, -39.567, 10.728)), (' A  50  LEU  O  ', ' A 188  ILE HG23', -0.629, (-32.056, -40.306, 11.192)), (' A  49  MET  SD ', ' A 401  SLH  H9 ', -0.617, (-27.417, -43.312, 6.827)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.611, (8.558, -36.353, 3.142)), (' A 211  ALA  HA ', ' A 282  LEU HD21', -0.61, (12.146, -27.866, 6.722)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.606, (-18.148, -48.727, 14.443)), (' A 177  LEU  N  ', ' A 177  LEU HD12', -0.603, (-12.961, -48.259, 14.748)), (' A 154  TYR  OH ', ' A 156  CYS  CB ', -0.602, (1.991, -53.898, 16.701)), (' A 164  HIS  CE1', ' A 175  THR HG23', -0.59, (-18.208, -44.941, 12.008)), (' A  50  LEU  HA ', ' A 189  GLN  HB3', -0.588, (-31.773, -38.728, 7.493)), (' A 215  GLY  HA3', ' A 305  PHE  CD2', -0.573, (20.072, -27.572, 5.447)), (' A 165  MET  CE ', ' A 192  GLN  NE2', -0.572, (-23.25, -37.212, 9.977)), (' A 176  ASP  HB2', ' A 512  HOH  O  ', -0.571, (-10.925, -47.22, 16.954)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.569, (-22.848, -51.462, 5.183)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.569, (-19.74, -50.247, 5.921)), (' A 154  TYR  HH ', ' A 156  CYS  CB ', -0.566, (1.659, -53.57, 16.14)), (' A 102  LYS  HE2', ' A 540  HOH  O  ', -0.561, (0.758, -51.436, 18.126)), (' A  27  LEU  CD1', ' A  39  PRO  HD2', -0.56, (-19.865, -50.481, 5.949)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.558, (-12.486, -36.12, 4.028)), (' A 145  CYS  SG ', ' A 164  HIS  O  ', -0.552, (-20.845, -43.293, 4.891)), (' A 153  ASP  C  ', ' A 154  TYR  CG ', -0.548, (5.244, -52.112, 14.373)), (' A  39  PRO  HB3', ' A 164  HIS  CD2', -0.547, (-20.867, -46.548, 9.105)), (' A 154  TYR  HD1', ' A 155  ASP  N  ', -0.533, (5.171, -55.349, 13.398)), (' A 190  THR HG22', ' A 191  ALA  N  ', -0.523, (-29.54, -33.041, 12.074)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.516, (7.597, -20.779, 5.52)), (' A 222  ARG  C  ', ' A 515  HOH  O  ', -0.507, (15.583, -15.617, 20.024)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.506, (-23.961, -52.315, 10.454)), (' A  51  ASN  HB2', ' A 502  HOH  O  ', -0.48, (-37.257, -39.413, 11.345)), (' A 231  ASN  ND2', ' A 242  LEU  H  ', -0.48, (-1.085, -22.219, 23.758)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.479, (-4.206, -32.8, 14.705)), (' A  49  MET  HG2', ' A 401  SLH  H3 ', -0.478, (-28.135, -42.013, 5.53)), (' A 176  ASP  C  ', ' A 177  LEU HD12', -0.472, (-13.232, -47.755, 14.472)), (' A  95  ASN  OD1', ' A  96  PRO  HD2', -0.456, (-7.601, -63.802, 4.463)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.451, (-23.777, -48.653, 14.533)), (' A 177  LEU  CD1', ' A 177  LEU  N  ', -0.446, (-12.182, -48.652, 14.363)), (' A 203  ASN  HB3', ' A 291  PHE  O  ', -0.443, (1.773, -31.521, 12.861)), (' A  50  LEU  HG ', ' A 189  GLN  O  ', -0.44, (-32.346, -36.961, 8.992)), (' A  69  GLN  NE2', ' A  72  ASN  HA ', -0.437, (-16.37, -62.096, -6.167)), (' A 166  GLU  OE2', ' A 172  HIS  HE1', -0.434, (-16.966, -36.736, 1.231)), (' A 180  LYS  O  ', ' A 181  PHE  C  ', -0.434, (-16.683, -42.398, 17.479)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.432, (-4.442, -17.966, 23.106)), (' A  35  THR HG22', ' A  36  VAL  N  ', -0.431, (-15.927, -59.305, 11.188)), (' A 190  THR HG22', ' A 191  ALA  H  ', -0.429, (-29.979, -32.975, 12.205)), (' A  86  LEU HD12', ' A 179  GLY  N  ', -0.427, (-16.774, -49.915, 15.737)), (' A 303  VAL HG23', ' A 576  HOH  O  ', -0.423, (22.098, -36.111, 8.048)), (' A 303  VAL  CG2', ' A 576  HOH  O  ', -0.423, (21.946, -36.467, 8.079)), (' A 242  LEU  HA ', ' A 242  LEU HD12', -0.421, (0.172, -26.37, 22.941)), (' A 154  TYR  CZ ', ' A 156  CYS  HB2', -0.421, (2.52, -54.904, 16.456)), (' A 284  SER  OG ', ' A 286  ILE HG13', -0.419, (1.687, -23.87, 3.162)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.418, (-15.758, -39.546, 5.557)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.416, (-6.185, -44.778, 7.582)), (' A  51  ASN  CB ', ' A 502  HOH  O  ', -0.414, (-37.408, -39.751, 11.658)), (' A 153  ASP  O  ', ' A 154  TYR  CD1', -0.411, (4.387, -53.622, 14.54)), (' A 154  TYR  CG ', ' A 155  ASP  N  ', -0.407, (5.274, -53.778, 13.922)), (' A 164  HIS  HE1', ' A 175  THR  OG1', -0.405, (-17.258, -46.284, 12.591)), (' A  41  HIS  CB ', ' A  49  MET  HE1', -0.402, (-26.215, -46.098, 6.906))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
