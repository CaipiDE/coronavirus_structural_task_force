# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 277 ', 'ASN', 0.0007239233194954851, (-4.557, 27.508, -2.414))]
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.2722507305509532, (0.8259999999999992, 8.529, -4.857999999999998)), ('A', '  55 ', 'GLU', 0.020354922595869285, (32.198, -11.235000000000003, -16.763)), ('A', '  72 ', 'ASN', 0.05961793684300978, (14.497000000000002, -22.432000000000002, 6.312)), ('A', ' 123 ', 'SER', 0.26923797526637117, (8.409, -6.533, 4.937999999999999)), ('A', ' 180 ', 'LYS', 0.0, (18.124000000000002, -4.136, -18.248999999999995)), ('A', ' 189 ', 'GLN', 0.0, (29.722999999999992, 2.866999999999999, -7.369)), ('A', ' 227 ', 'LEU', 0.0017947705094422009, (-3.801000000000001, 20.846, -27.411999999999995)), ('A', ' 228 ', 'ASN', 0.26778966709445956, (-1.0710000000000015, 23.259, -28.577999999999992)), ('A', ' 236 ', 'LYS', 0.0, (6.307999999999998, 26.534, -18.367)), ('A', ' 268 ', 'LEU', 0.007974172803792666, (-5.811999999999999, 21.961, -15.401)), ('A', ' 285 ', 'THR', 0.00536333923261464, (-3.42, 20.089, -1.4289999999999998))]
data['cbeta'] = [('A', ' 277 ', 'ASN', ' ', 0.31686951581479356, (-3.653, 28.776, -2.399)), ('A', ' 290 ', 'GLU', ' ', 0.31606758304811255, (2.134, 8.653999999999998, -8.311)), ('B', ' 310 ', 'LEU', ' ', 0.2983766931126476, (25.106, -1.086, -4.665999999999999))]
data['probe'] = [(' A 145 BCYS  SG ', ' B 311 BECQ  CMK', -1.362, (21.269, -3.76, -3.977)), (' A 145 BCYS  SG ', ' B 311 BECQ  C  ', -1.261, (21.373, -2.461, -2.735)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.81, (9.296, 19.386, -16.869)), (' A  72  ASN  H  ', ' A  72  ASN HD22', -0.692, (12.063, -22.951, 5.574)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.669, (-7.512, 20.403, -6.075)), (' A  49  MET  HE2', ' B 310  LEU HD13', -0.645, (27.266, -0.929, -6.648)), (' A 126  TYR  CB ', ' A 801  GOL  H32', -0.624, (3.403, 1.658, -1.254)), (' A 189  GLN  HG3', ' A 189  GLN  O  ', -0.621, (32.256, 3.676, -6.668)), (' A 126  TYR  HB2', ' A 801  GOL  H32', -0.575, (3.571, 2.159, -0.982)), (' A 189  GLN  HB2', ' B1095  HOH  O  ', -0.563, (28.577, 1.849, -4.813)), (' A 270  GLU  HG3', ' A 274  ASN HD22', -0.549, (-7.557, 29.651, -13.498)), (' A 153  ASP  HB2', ' A1034  HOH  O  ', -0.546, (-6.124, -7.123, -15.489)), (' A 127  GLN  H  ', ' A 801  GOL  H31', -0.531, (1.777, 2.406, -2.667)), (' A 145 BCYS  CB ', ' B 311 BECQ  CMK', -0.526, (20.842, -4.986, -3.348)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.493, (18.57, -8.201, -14.628)), (' A 105  ARG  NH2', ' A1008  HOH  O  ', -0.476, (14.984, 1.624, -19.882)), (' A  49  MET  HE2', ' B 310  LEU HD22', -0.468, (26.51, -2.184, -6.958)), (' B 307  ACE  O  ', ' B 309  Z3E  H8 ', -0.464, (25.199, 8.072, -4.009)), (' A 198  THR HG23', ' A 914  HOH  O  ', -0.462, (11.243, 17.881, -17.086)), (' A  45  THR  O  ', ' A  48  ASP  HB2', -0.454, (33.237, -5.38, -4.757)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.452, (24.172, -11.64, -10.56)), (' A 198  THR  CG2', ' A 914  HOH  O  ', -0.44, (11.095, 18.053, -17.266)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.437, (17.027, -19.491, -5.379)), (' A   5  LYS  HD3', ' A 839  HOH  O  ', -0.434, (0.181, 5.59, -6.533)), (' A  72  ASN  H  ', ' A  72  ASN  ND2', -0.429, (12.467, -23.102, 5.814)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.423, (4.259, 8.821, -14.643)), (' A 270  GLU  HG3', ' A 274  ASN  ND2', -0.42, (-7.339, 30.048, -13.291)), (' A 145 BCYS  SG ', ' B 311 BECQ  CA ', -0.415, (20.938, -2.193, -2.723)), (' A 106  ILE HG13', ' A 110  GLN  HB2', -0.4, (4.365, 1.259, -16.576))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
