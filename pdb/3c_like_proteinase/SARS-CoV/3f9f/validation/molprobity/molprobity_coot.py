# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  30 ', 'LEU', 0.0, (4.347, -4.470999999999998, -0.284)), ('A', '  55 ', 'GLU', 0.10809042050569453, (2.627, 13.397, 12.2)), ('A', '  77 ', 'VAL', 0.003150532575091347, (-6.985, -2.395999999999999, 7.019999999999998)), ('A', '  87 ', 'LEU', 0.07858957534096349, (3.531999999999999, 3.596, 6.311999999999999)), ('A', ' 133 ', 'ASN', 0.04061355211652226, (25.492, 8.924999999999997, -5.121999999999999)), ('A', ' 167 ', 'LEU', 0.00018577971066921975, (14.43, 13.824999999999996, -8.441)), ('A', ' 169 ', 'THR', 0.008159601566148922, (17.561, 15.212, -12.653)), ('A', ' 196 ', 'THR', 0.008563804329934657, (28.521, 12.972, -8.371)), ('A', ' 228 ', 'ASN', 0.26298152157718585, (47.92, 4.237, -5.963)), ('A', ' 235 ', 'MET', 0.16924437838735076, (39.92799999999998, 9.582, -10.541)), ('A', ' 268 ', 'LEU', 0.020277582994684323, (41.508, -0.91, -17.316)), ('B', '   4 ', 'ARG', 0.058634461431704865, (14.893999999999997, 0.6569999999999998, -18.58)), ('B', '  30 ', 'LEU', 0.0, (8.158, -26.301, -20.852)), ('B', '  55 ', 'GLU', 0.086503846734455, (14.333, -40.77399999999999, -36.163)), ('B', '  77 ', 'VAL', 0.007351242675213143, (5.928, -39.721, -18.976)), ('B', '  87 ', 'LEU', 0.005242626161709576, (10.409, -33.471, -28.274)), ('B', ' 167 ', 'LEU', 0.12142318929438786, (27.029999999999994, -20.729, -31.86)), ('B', ' 175 ', 'THR', 0.008159601566148922, (13.138, -22.49, -32.454)), ('B', ' 180 ', 'LYS', 0.22506461504449685, (10.685, -24.71, -36.392)), ('B', ' 247 ', 'VAL', 0.06560611856454193, (7.127, 4.574, -41.316)), ('B', ' 263 ', 'ASP', 0.2895000238949543, (12.290999999999993, 14.404999999999996, -39.616)), ('B', ' 268 ', 'LEU', 0.013142315173420615, (19.073999999999998, 9.81, -36.8)), ('B', ' 277 ', 'ASN', 0.22375056570221752, (29.588, 14.335999999999997, -28.497)), ('B', ' 282 ', 'LEU', 0.0, (17.857, 8.555, -21.975))]
data['cbeta'] = [('A', '  69 ', 'GLN', ' ', 0.2622878800994303, (-7.692, -3.841999999999999, -3.794)), ('B', '  77 ', 'VAL', ' ', 0.25510027457414525, (7.136, -39.202, -19.858999999999998))]
data['probe'] = [(' A 116  ALA  HB3', ' B   6  MET  HE1', -0.908, (9.223, -2.004, -14.566)), (' A 126  TYR  HD2', ' B   6  MET  HE3', -0.898, (11.937, -2.351, -15.104)), (' B 175  THR HG23', ' B 176  ASP  O  ', -0.882, (10.059, -24.175, -31.82)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.809, (22.06, -24.702, -37.703)), (' A 126  TYR  CD2', ' B   6  MET  HE3', -0.787, (12.55, -1.797, -14.86)), (' A 116  ALA  CB ', ' B   6  MET  HE1', -0.753, (9.102, -1.206, -13.94)), (' B   8  PHE  HD2', ' B 113  SER  HG ', -0.557, (9.16, -10.267, -21.681)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.526, (14.348, -4.72, -7.014)), (' A 131  ARG  HD3', ' A 197  ASP  OD2', -0.52, (25.882, 6.05, -10.695)), (' B   3  PHE  HB2', ' B 282  LEU  HG ', -0.514, (14.816, 6.071, -21.92)), (' B  21  THR  HB ', ' B  67  LEU  HB3', -0.513, (15.876, -37.87, -16.383)), (' A   4  ARG  HB2', ' B 142  ASN  OD1', -0.509, (23.327, -12.883, -21.445)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.503, (15.356, -39.021, -37.752)), (' B  20  VAL HG22', ' B  68  VAL HG12', -0.461, (11.048, -33.694, -18.957)), (' B  66  PHE  CE1', ' B  87  LEU HD11', -0.451, (12.782, -37.729, -25.334)), (' A 222  ARG  HB2', ' A 222  ARG  HE ', -0.449, (53.631, -6.033, -22.044)), (' A   4  ARG HH12', ' B 137  LYS  HB2', -0.441, (21.987, -10.561, -27.41)), (' A 126  TYR  CD1', ' B   4  ARG  HG2', -0.437, (15.373, -0.661, -14.69)), (' B 247  VAL  HB ', ' B 261  VAL HG11', -0.436, (8.295, 6.707, -41.458)), (' B 299  GLN  NE2', ' B 320  HOH  O  ', -0.431, (10.712, 0.522, -19.951)), (' B 186  VAL  H  ', ' B 192  GLN  NE2', -0.426, (21.928, -24.704, -37.928)), (' A 133  ASN  C  ', ' A 133  ASN HD22', -0.425, (24.11, 8.181, -6.1)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.425, (16.627, -35.724, -29.234)), (' A   4  ARG  NH1', ' B 137  LYS  HB2', -0.424, (22.105, -10.63, -27.182)), (' A 185  PHE  HA ', ' A 192  GLN HE22', -0.416, (16.632, 14.543, 0.083)), (' B 143  GLY  HA2', ' B 163  HIS  CD2', -0.41, (19.116, -19.045, -24.134)), (' A 126  TYR  CG ', ' B   4  ARG  HG2', -0.409, (14.863, -1.213, -14.774)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.408, (1.791, 9.636, 3.955)), (' B 229  ASP  HA ', ' B 232  LEU HD12', -0.406, (19.738, 8.897, -50.141)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.404, (13.615, -23.858, -11.91)), (' B 210  ALA  HB2', ' B 296  VAL HG13', -0.4, (9.332, 5.242, -26.741))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
