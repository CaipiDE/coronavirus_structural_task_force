# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 177 ', 'LEU', 0.022531374832939075, (-13.594000000000003, -49.812000000000005, 15.180000000000001)), ('A', ' 306 ', 'GLN', 0.06815755256932327, (24.089999999999993, -28.127000000000002, 10.229000000000001))]
data['cbeta'] = []
data['probe'] = [(' A 305  PHE  O  ', ' A 306  GLN  HB2', -1.103, (22.165, -26.786, 8.75)), (' A  49  MET  CE ', ' A 401  3X5  H18', -1.064, (-26.41, -43.265, 6.627)), (' A  49  MET  HE1', ' A 401  3X5  H18', -1.049, (-26.265, -43.748, 7.55)), (' A 145  CYS  SG ', ' A 401  3X5  C24', -0.953, (-19.665, -44.42, 2.667)), (' A 189  GLN  OE1', ' A 401  3X5  H24', -0.87, (-27.099, -38.321, 5.367)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.835, (-27.299, -34.477, 10.3)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.823, (8.13, -36.567, 3.055)), (' A 107  GLN  HB3', ' A 564  HOH  O  ', -0.783, (-7.254, -37.024, 22.134)), (' A 305  PHE  O  ', ' A 306  GLN  CB ', -0.78, (23.126, -27.174, 8.479)), (' A 286  ILE  O  ', ' A 286  ILE HD12', -0.779, (1.626, -23.775, 4.345)), (' A  49  MET  HE2', ' A 401  3X5  H15', -0.735, (-26.883, -43.455, 5.53)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.735, (-0.573, -22.645, 23.281)), (' A  17  MET  HE2', ' A 519  HOH  O  ', -0.729, (-11.049, -49.674, 2.927)), (' A 106  ILE  O  ', ' A 106  ILE HD12', -0.717, (-8.307, -40.445, 18.062)), (' A 106  ILE HD11', ' A 130  MET  HE3', -0.711, (-9.419, -39.667, 15.015)), (' A 187  ASP  HA ', ' A 401  3X5  H20', -0.671, (-24.872, -41.577, 9.7)), (' A  33  ASP  OD1', ' A  98  THR HG21', -0.623, (-7.218, -62.375, 12.0)), (' A 106  ILE  C  ', ' A 106  ILE HD12', -0.606, (-8.114, -40.424, 17.242)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.603, (7.795, -20.368, 5.381)), (' A 145  CYS  SG ', ' A 401  3X5  N1 ', -0.6, (-21.234, -44.025, 2.99)), (' A 145  CYS  SG ', ' A 401  3X5  C23', -0.597, (-21.109, -43.551, 2.532)), (' A 286  ILE  C  ', ' A 286  ILE HD12', -0.593, (1.251, -23.062, 5.044)), (' A 401  3X5  H26', ' A 526  HOH  O  ', -0.59, (-23.895, -39.033, 3.83)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.587, (-18.004, -33.481, 8.172)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.586, (-12.292, -35.574, 4.176)), (' A 145  CYS  SG ', ' A 401  3X5  O1 ', -0.579, (-20.688, -44.605, 2.119)), (' A 145  CYS  SG ', ' A 401  3X5  H3 ', -0.566, (-20.023, -43.263, 3.116)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.528, (-18.254, -48.977, 14.687)), (' A 214  ASN HD22', ' A 282  LEU  CD2', -0.526, (12.722, -29.453, 5.073)), (' A  49  MET  HE2', ' A 401  3X5  H18', -0.521, (-26.519, -42.713, 6.48)), (' A  27  LEU  CD1', ' A  39  PRO  HD2', -0.52, (-19.339, -50.553, 5.897)), (' A 214  ASN  O  ', ' A 305  PHE  HB3', -0.514, (19.592, -29.785, 6.221)), (' A 127  GLN  NE2', ' A 532  HOH  O  ', -0.5, (0.385, -40.55, 9.761)), (' A 106  ILE HD11', ' A 130  MET  CE ', -0.494, (-9.672, -39.557, 14.493)), (' A 190  THR  O  ', ' A 191  ALA  C  ', -0.486, (-27.951, -33.4, 10.447)), (' A 186  VAL HG22', ' A 192  GLN  NE2', -0.486, (-25.882, -37.399, 14.057)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.485, (-18.19, -49.323, 15.208)), (' A 211  ALA  HA ', ' A 282  LEU HD21', -0.485, (12.194, -28.405, 6.492)), (' A 231  ASN  ND2', ' A 242  LEU  H  ', -0.481, (-1.147, -22.036, 23.653)), (' A 176  ASP  HB2', ' A 541  HOH  O  ', -0.476, (-11.181, -47.458, 16.803)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.472, (-24.017, -48.34, 14.766)), (' A 165  MET  HB3', ' A 401  3X5  H19', -0.463, (-23.378, -40.543, 7.782)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.462, (-6.491, -45.282, 7.578)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.451, (-21.12, -31.62, 7.306)), (' A 286  ILE  C  ', ' A 286  ILE  CD1', -0.449, (0.943, -23.303, 4.666)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.443, (8.595, -36.109, 3.299)), (' A 305  PHE  CD2', ' A 305  PHE  O  ', -0.443, (22.237, -28.271, 6.925)), (' A 129  ALA  HB3', ' A 290  GLU  HG2', -0.44, (-4.297, -32.772, 9.879)), (' A 107  GLN  O  ', ' A 108  PRO  C  ', -0.438, (-5.927, -35.719, 17.554)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.436, (-23.875, -52.671, 10.818)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.433, (-19.32, -50.307, 5.901)), (' A 145  CYS  SG ', ' A 401  3X5  C25', -0.431, (-20.517, -42.773, 3.179)), (' A 106  ILE  C  ', ' A 106  ILE  CD1', -0.426, (-7.881, -40.428, 17.146)), (' A 133  ASN  HB2', ' A 521  HOH  O  ', -0.419, (-16.265, -30.333, 14.477)), (' A  49  MET  CE ', ' A 401  3X5  C18', -0.418, (-26.023, -42.446, 6.711)), (' A 201  THR  O  ', ' A 202  LEU  C  ', -0.416, (2.089, -28.08, 16.695)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.416, (-7.903, -62.427, 8.325)), (' A  28  ASN  O  ', ' A 146  GLY  HA3', -0.41, (-16.987, -50.417, 4.926)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.409, (-18.212, -42.853, 15.165)), (' A 186  VAL  CG2', ' A 192  GLN  NE2', -0.408, (-26.238, -37.42, 13.504)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.407, (-9.967, -51.658, 1.331)), (' A 214  ASN  O  ', ' A 305  PHE  CB ', -0.407, (19.947, -29.944, 6.432)), (' A 401  3X5  C12', ' A 401  3X5  H27', -0.404, (-26.839, -39.582, 3.292))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
