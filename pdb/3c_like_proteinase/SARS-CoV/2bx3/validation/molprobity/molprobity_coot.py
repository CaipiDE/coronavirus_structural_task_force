# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 139 ', 'SER', 0.00949855320356603, (8.293, 77.679, 21.522)), ('A', ' 142 ', 'ASN', 0.0081194757904132, (15.173000000000004, 78.03, 21.76)), ('A', ' 154 ', 'TYR', 0.010057539642483862, (4.812, 50.951, 14.853000000000002)), ('A', ' 251 ', 'GLY', 0.007719419999999999, (-13.760000000000002, 60.093, 4.586))]
data['omega'] = [('A', ' 138 ', 'GLY', None, (5.765999999999998, 75.921, 18.595)), ('A', ' 139 ', 'SER', None, (7.333999999999999, 76.659, 21.025))]
data['rota'] = [('A', '   5 ', 'LYS', 0.12093389455599593, (-2.024, 66.277, 22.72)), ('A', '   6 ', 'MET', 0.12664691341809062, (0.125, 63.216000000000015, 22.823)), ('A', '  47 ', 'GLU', 0.07260057069376166, (30.123000000000008, 87.355, 11.761)), ('A', ' 118 ', 'TYR', 0.09461427002511218, (20.308999999999997, 71.011, 24.899)), ('A', ' 123 ', 'SER', 0.16391767768632118, (15.132, 67.555, 27.862000000000002)), ('A', ' 217 ', 'ARG', 0.28835978808063295, (-23.372, 66.08, 19.588)), ('A', ' 222 ', 'ARG', 0.05710696210024222, (-28.505, 73.34699999999998, 12.312)), ('A', ' 284 ', 'SER', 0.11245075767423035, (-11.976999999999997, 73.481, 25.659)), ('A', ' 286 ', 'ILE', 0.04613354319380425, (-10.776, 76.857, 21.669)), ('A', ' 298 ', 'ARG', 0.0, (-5.152, 56.692, 16.098))]
data['cbeta'] = [('A', '  41 ', 'HIS', ' ', 0.2873117931471914, (24.124, 77.863, 10.708)), ('A', ' 291 ', 'PHE', ' ', 0.2639860410130659, (-5.864, 66.689, 16.308))]
data['probe'] = [(' A  22  CYS  SG ', ' A  61  LYS  NZ ', -1.244, (32.901, 72.917, 11.857)), (' A  19  GLN HE21', ' A  26  THR HG21', -1.15, (27.457, 71.67, 22.258)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.757, (28.216, 71.054, 22.773)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.744, (15.189, 82.358, 5.752)), (' A 137  LYS  O  ', ' A2139  HOH  O  ', -0.703, (7.131, 78.844, 18.557)), (' A   3  PHE  CZ ', ' A 300  CYS  SG ', -0.69, (-8.778, 62.404, 19.375)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.675, (27.701, 71.253, 22.119)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.646, (12.487, 76.099, 15.206)), (' A  47 AGLU  OE2', ' A2059  HOH  O  ', -0.644, (34.869, 88.858, 13.965)), (' A 240  GLU  OE2', ' A2208  HOH  O  ', -0.64, (-3.815, 74.546, 2.921)), (' A 298 BARG  HG2', ' A 298 BARG HH21', -0.634, (-2.544, 56.201, 17.399)), (' A 123  SER  HB2', ' A2130  HOH  O  ', -0.625, (14.217, 70.277, 27.476)), (' A 118 BTYR  HE2', ' A2130  HOH  O  ', -0.617, (14.8, 70.959, 26.577)), (' A 224  THR  O  ', ' A2191  HOH  O  ', -0.595, (-24.752, 76.182, 5.602)), (' A 298 BARG  CG ', ' A 298 BARG HH21', -0.587, (-2.727, 56.81, 17.002)), (' A 138  GLY  O  ', ' A 140  PHE  N  ', -0.554, (9.232, 75.839, 21.438)), (' A 118 ATYR  CD1', ' A 118 ATYR  O  ', -0.548, (21.925, 70.248, 26.447)), (' A 298 BARG  HG2', ' A 298 BARG  NH2', -0.547, (-2.386, 56.165, 17.432)), (' A  82  MET  HE3', ' A2096  HOH  O  ', -0.545, (25.352, 73.349, -0.223)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.544, (26.763, 72.0, 8.465)), (' A  61  LYS  HE2', ' A  65  SER  OG ', -0.541, (36.039, 72.601, 10.964)), (' A 117  CYS  O  ', ' A 144  SER  HB3', -0.538, (17.73, 72.247, 22.316)), (' A 288 BGLU  HG2', ' A 291  PHE  CE2', -0.532, (-6.269, 69.286, 19.419)), (' A 117  CYS  O  ', ' A 144  SER  CB ', -0.529, (18.04, 71.64, 22.182)), (' A  45 BTHR HG22', ' A  48  ASP  OD2', -0.527, (32.679, 82.913, 10.59)), (' A 227  LEU HD11', ' A 242  LEU HD23', -0.513, (-14.728, 71.411, 1.972)), (' A 144  SER  HA ', ' A2141  HOH  O  ', -0.505, (20.224, 72.824, 21.081)), (' A  19  GLN  NE2', ' A 119  ASN  HB3', -0.496, (26.427, 70.438, 23.809)), (' A 165 AMET  SD ', ' A 186  VAL  O  ', -0.494, (16.844, 80.384, 8.184)), (' A 277  ASN  CG ', ' A 277  ASN  O  ', -0.487, (-21.572, 81.819, 22.931)), (' A 274  ASN  ND2', ' A2232  HOH  O  ', -0.486, (-24.902, 78.396, 16.649)), (' A 139  SER  HA ', ' A 172  HIS  NE2', -0.485, (9.482, 77.721, 19.743)), (' A 256  GLN  NE2', ' A2221  HOH  O  ', -0.478, (-10.956, 54.557, 11.172)), (' A 245  ASP  HB3', ' A2214  HOH  O  ', -0.476, (-6.116, 66.116, -1.24)), (' A  60  ARG  HG3', ' A  60  ARG HH11', -0.474, (38.601, 77.518, 2.139)), (' A 118 ATYR  O  ', ' A 119  ASN  C  ', -0.471, (22.906, 69.145, 24.327)), (' A 118 BTYR  CD2', ' A 118  TYR  N  ', -0.465, (18.424, 70.797, 24.902)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.463, (9.604, 65.677, 16.102)), (' A 123  SER  CB ', ' A2130  HOH  O  ', -0.457, (14.703, 70.407, 27.281)), (' A 108  PRO  HD3', ' A2123  HOH  O  ', -0.453, (4.764, 71.441, 3.241)), (' A 106  ILE HD11', ' A 112  PHE  CE1', -0.451, (6.05, 68.752, 11.003)), (' A 106  ILE  CD1', ' A 112  PHE  CD1', -0.447, (5.662, 67.841, 11.1)), (' A  56  ASP  OD1', ' A  60  ARG  NH1', -0.446, (37.573, 79.222, 0.555)), (' A  96  PRO  HA ', ' A2109  HOH  O  ', -0.445, (24.959, 50.134, 16.354)), (' A 298 AARG  NH2', ' A2257  HOH  O  ', -0.444, (-0.271, 60.179, 13.947)), (' A 220  LEU HD21', ' A 259  ILE HD13', -0.444, (-21.668, 65.192, 14.26)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.443, (17.744, 65.21, 21.433)), (' A 102  LYS  HZ3', ' A 104  VAL  CG1', -0.436, (8.681, 58.734, 5.846)), (' A 256  GLN  HG3', ' A2220  HOH  O  ', -0.433, (-13.96, 54.941, 10.026)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.432, (19.416, 69.701, 6.028)), (' A 222  ARG  HA ', ' A 222  ARG  HD2', -0.425, (-29.231, 72.066, 13.667)), (' A 233  VAL  O  ', ' A 234  ALA  C  ', -0.423, (-13.611, 82.033, 7.32)), (' A 244  GLN  O  ', ' A 247  VAL  HB ', -0.408, (-12.822, 66.772, -0.444)), (' A 167  LEU  HB3', ' A 168  PRO  CD ', -0.408, (11.276, 85.534, 12.355)), (' A 164  HIS  CD2', ' A 175  THR HG23', -0.405, (17.051, 73.323, 8.736)), (' A 220  LEU  HA ', ' A 220  LEU HD23', -0.404, (-22.553, 68.835, 14.473)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.402, (25.144, 56.803, 16.303))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
