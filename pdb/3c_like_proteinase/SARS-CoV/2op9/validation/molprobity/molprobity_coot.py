# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  47 ', 'GLU', 0.0, (14.652999999999999, 66.173, 30.715))]
data['omega'] = [('A', '  50 ', 'LEU', None, (-12.872, 24.039, 79.401)), ('A', '  62 ', 'SER', None, (-14.275999999999993, 41.644, 90.767)), ('A', ' 174 ', 'GLY', None, (-12.139999999999997, 33.882, 65.837)), ('A', ' 278 ', 'GLY', None, (4.647000000000004, 24.878999999999998, 33.088)), ('B', '  47 ', 'GLU', None, (13.615000000000002, 66.007, 31.723))]
data['rota'] = [('A', '  27 ', 'LEU', 0.2536695189669434, (-3.443999999999999, 38.768000000000015, 76.568)), ('A', '  56 ', 'ASP', 0.06149968959753429, (-20.956999999999997, 33.155, 86.69)), ('A', '  67 ', 'LEU', 0.000615846932738975, (-4.559999999999997, 44.698, 85.503)), ('A', '  75 ', 'LEU', 0.029675959325417958, (-4.575999999999993, 51.954, 83.72599999999997)), ('A', '  76 ', 'ARG', 0.0006752113095207109, (-7.017000000000001, 51.654000000000025, 86.639)), ('A', '  89 ', 'LEU', 0.00193658078864935, (-13.237999999999996, 47.481000000000016, 80.704)), ('A', '  90 ', 'LYS', 0.020494790611195524, (-13.72, 51.13000000000002, 81.593)), ('A', '  93 ', 'THR', 0.0027198671887163073, (-7.732999999999992, 57.65700000000001, 81.43)), ('A', ' 216 ', 'ASP', 0.22693792620214495, (1.1680000000000001, 39.046, 32.284)), ('A', ' 227 ', 'LEU', 0.06594629568197352, (-21.746, 32.448, 34.055)), ('A', ' 236 ', 'LYS', 0.0, (-15.607999999999993, 20.999000000000006, 40.37)), ('A', ' 301 ', 'SER', 0.22000707165968442, (-4.571999999999997, 52.898999999999994, 40.958)), ('B', '  47 ', 'GLU', 0.1863520821327957, (14.652999999999999, 66.173, 30.715)), ('B', '  57 ', 'LEU', 0.008743839903524581, (20.612999999999992, 72.42599999999999, 39.096)), ('B', '  59 ', 'ILE', 0.057962263213986315, (22.665, 76.162, 42.417)), ('B', '  67 ', 'LEU', 0.008098458406846303, (7.739999999999998, 73.054, 49.773)), ('B', '  68 ', 'VAL', 0.04841772830841093, (7.612, 70.525, 52.581)), ('B', '  69 ', 'GLN', 0.023281447902262616, (4.3370000000000015, 69.44600000000003, 54.036)), ('B', '  72 ', 'ASN', 0.22860285721934656, (-1.4600000000000026, 69.93900000000002, 57.038)), ('B', ' 106 ', 'ILE', 0.165718312385296, (21.884, 46.296, 53.939)), ('B', ' 236 ', 'LYS', 0.0, (22.334999999999987, 24.48000000000001, 38.14)), ('B', ' 262 ', 'LEU', 0.0, (25.197999999999997, 20.358000000000008, 55.283)), ('B', ' 279 ', 'ARG', 0.00018359397716985194, (3.4410000000000007, 17.848, 49.368)), ('B', ' 282 ', 'LEU', 0.0, (4.7759999999999945, 25.491, 55.558))]
data['cbeta'] = [('A', ' 276 ', 'MET', ' ', 0.40696364182228073, (0.5239999999999991, 27.22200000000001, 35.648)), ('A', ' 277 ', 'ASN', ' ', 0.3386851667819638, (1.7490000000000023, 23.333, 31.577999999999992)), ('B', '  68 ', 'VAL', ' ', 0.34706813462319336, (8.947000000000001, 69.92800000000003, 53.167)), ('B', ' 289 ', 'ASP', ' ', 0.26856265553154945, (14.490000000000002, 32.67100000000001, 48.377))]
data['probe'] = [(' A  47  GLU  O  ', ' A  50  LEU  CB ', -1.08, (-12.694, 24.09, 82.135)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.965, (0.623, 39.875, 79.274)), (' B  45  THR HG22', ' B 830  HOH  O  ', -0.928, (10.34, 69.702, 34.527)), (' A 161  TYR  CE1', ' A 174  GLY  HA3', -0.896, (-11.779, 35.915, 63.959)), (' A 126  TYR  CD2', ' B   6  MET  HE3', -0.778, (1.847, 39.051, 61.298)), (' A 145  CYS  SG ', ' A 601  WR1  C3 ', -0.768, (-4.209, 33.78, 72.744)), (' B  69  GLN HE21', ' B  74  GLN HE22', -0.752, (0.617, 72.662, 53.784)), (' A 165  MET  HE2', ' A 181  PHE  CE2', -0.737, (-13.819, 31.522, 67.683)), (' A 126  TYR  HD2', ' B   6  MET  HE3', -0.719, (1.406, 39.2, 60.718)), (' B  69  GLN  NE2', ' B  74  GLN HE22', -0.694, (1.083, 72.485, 53.023)), (' A  45  THR HG22', ' A  47  GLU  H  ', -0.688, (-8.729, 26.092, 84.86)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.686, (0.711, 41.094, 79.79)), (' A 276  MET  O  ', ' A 278  GLY  HA2', -0.681, (2.567, 24.84, 34.753)), (' A 145  CYS  SG ', ' A 601  WR1  C2 ', -0.675, (-4.415, 33.109, 71.95)), (' A  48  ASP  C  ', ' A  50  LEU  CB ', -0.666, (-13.473, 25.131, 81.46)), (' B  58  LEU HD22', ' B  82  MET  HE3', -0.661, (21.565, 69.47, 45.032)), (' A 145  CYS  SG ', ' A 601  WR1 H21A', -0.66, (-5.129, 32.437, 72.177)), (' B  47  GLU  N  ', ' B 675  HOH  O  ', -0.658, (14.636, 64.843, 31.8)), (' A  45  THR HG22', ' A  47  GLU  N  ', -0.657, (-9.439, 26.192, 84.736)), (' A 116  ALA  HB3', ' B   6  MET  HE1', -0.652, (1.861, 39.905, 63.657)), (' B 138  GLY  H  ', ' B 172  HIS  HD2', -0.649, (9.805, 46.435, 43.04)), (' A 298  ARG  HD3', ' A 811  HOH  O  ', -0.644, (-7.191, 48.617, 49.251)), (' A  51  ASN  ND2', ' A 821  HOH  O  ', -0.623, (-20.095, 25.711, 78.429)), (' A   5  LYS  HZ1', ' A 290  GLU  HB2', -0.621, (-3.873, 36.458, 49.069)), (' A   6  MET  CE ', ' A 781  HOH  O  ', -0.617, (-2.067, 49.24, 48.186)), (' A 165  MET  HE1', ' A 185  PHE  HB3', -0.616, (-14.563, 28.658, 67.518)), (' B 240  GLU  HG3', ' B 817  HOH  O  ', -0.613, (22.318, 34.138, 47.117)), (' A 124  GLY  C  ', ' B   6  MET  HE2', -0.599, (2.669, 41.794, 61.821)), (' A   6  MET  HE1', ' A 781  HOH  O  ', -0.597, (-1.694, 49.599, 47.591)), (' A  49  MET  N  ', ' A  50  LEU  CB ', -0.58, (-12.801, 24.827, 81.271)), (' B  21  THR HG23', ' B  26  THR HG22', -0.574, (5.269, 68.883, 43.975)), (' B  76  ARG  NH1', ' B  92  ASP  OD2', -0.57, (10.154, 78.029, 60.251)), (' A   5  LYS  NZ ', ' A 290  GLU  HB2', -0.563, (-3.726, 37.44, 49.228)), (' B  54  TYR  HB3', ' B  82  MET  HE1', -0.56, (22.377, 67.616, 42.241)), (' B  49  MET  HE3', ' B 736  HOH  O  ', -0.539, (12.797, 63.112, 36.642)), (' B  49  MET  CE ', ' B 736  HOH  O  ', -0.536, (12.847, 63.351, 36.785)), (' A 165  MET  HE2', ' A 181  PHE  HE2', -0.535, (-13.305, 31.76, 68.176)), (' A 152  ILE HG22', ' A 154  TYR  O  ', -0.53, (-7.093, 55.586, 56.42)), (' A 277  ASN  CG ', ' A 277  ASN  O  ', -0.527, (2.881, 25.191, 30.673)), (' A 673  HOH  O  ', ' B 141  LEU HD13', -0.522, (-1.533, 53.797, 40.643)), (' B  69  GLN  NE2', ' B  74  GLN  NE2', -0.51, (1.174, 72.888, 53.49)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.508, (-4.187, 31.785, 61.23)), (' A 165  MET  CE ', ' A 185  PHE  HB3', -0.506, (-14.298, 29.43, 67.562)), (' A 240  GLU  CG ', ' A 830  HOH  O  ', -0.5, (-16.767, 32.428, 47.125)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.494, (-13.972, 39.138, 78.674)), (' A 300  CYS  SG ', ' A 819  HOH  O  ', -0.492, (-1.354, 47.337, 39.2)), (' A 108  PRO  HA ', ' A 130  MET  HG2', -0.486, (-14.447, 35.631, 55.367)), (' B   3  PHE  HD2', ' B 829  HOH  O  ', -0.485, (6.912, 31.32, 56.069)), (' A  45  THR  CG2', ' A  46  ALA  N  ', -0.482, (-8.739, 27.104, 84.775)), (' B  64  HIS  HB2', ' B 841  HOH  O  ', -0.479, (13.408, 81.584, 49.832)), (' A 240  GLU  HG2', ' A 830  HOH  O  ', -0.477, (-16.863, 32.737, 47.054)), (' B  47  GLU  CA ', ' B 675  HOH  O  ', -0.473, (14.92, 64.826, 31.717)), (' A 126  TYR  CE2', ' B   6  MET  HE3', -0.467, (0.929, 38.693, 61.434)), (' B 256  GLN  HG2', ' B 737  HOH  O  ', -0.464, (14.414, 26.899, 67.563)), (' B  21  THR  CG2', ' B  26  THR HG22', -0.453, (5.328, 69.494, 44.648)), (' B  44  CYS  HB2', ' B  49  MET  HE1', -0.452, (14.655, 64.689, 37.794)), (' A 601  WR1  C15', ' A 601  WR1  H22', -0.451, (-4.83, 27.896, 72.03)), (' A  45  THR HG22', ' A  46  ALA  N  ', -0.447, (-8.409, 26.775, 84.362)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.446, (-2.079, 34.498, 68.185)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.446, (-6.214, 54.734, 76.038)), (' B  72  ASN  ND2', ' B 831  HOH  O  ', -0.443, (-3.934, 68.738, 55.547)), (' B  69  GLN HE21', ' B  74  GLN  NE2', -0.442, (0.861, 72.785, 53.6)), (' B  21  THR  OG1', ' B  26  THR HG22', -0.439, (5.12, 68.548, 45.212)), (' B  69  GLN  NE2', ' B  74  GLN  OE1', -0.434, (2.009, 73.161, 52.405)), (' B 228  ASN  ND2', ' B 779  HOH  O  ', -0.426, (34.364, 23.802, 44.758)), (' A  62  SER  OG ', ' A  64  HIS  CD2', -0.421, (-11.72, 43.874, 93.247)), (' B 165  MET  HE2', ' B 167  LEU  CD2', -0.42, (17.137, 51.676, 37.328)), (' B  47  GLU  HG3', ' B  48  ASP  N  ', -0.418, (16.093, 68.031, 31.228)), (' A 231  ASN  O  ', ' A 235  MET  HE2', -0.418, (-20.142, 25.333, 38.783)), (' A 161  TYR  CZ ', ' A 174  GLY  HA3', -0.412, (-10.514, 35.922, 64.777)), (' A 136  ILE HD13', ' A 161  TYR  CE1', -0.411, (-10.234, 35.823, 62.536)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.41, (-6.117, 43.327, 60.972)), (' A 155  ASP  HB2', ' A 671  HOH  O  ', -0.41, (-9.647, 60.238, 58.011)), (' A 161  TYR  HE1', ' A 174  GLY  HA3', -0.406, (-11.645, 35.701, 63.923)), (' A   2  GLY  HA3', ' B 138  GLY  O  ', -0.404, (6.367, 45.485, 42.622))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
