# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('B', ' 100 ', 'LYS', 0.11475943254674356, (-20.004999999999995, 17.086999999999993, 16.11))]
data['cbeta'] = [('B', '  41 ', 'HIS', ' ', 0.25205684749569124, (-30.503999999999998, -8.371000000000002, 22.579)), ('B', ' 276 ', 'MET', ' ', 0.25616282500887516, (-23.111, -9.699, -19.814)), ('B', ' 289 ', 'ASP', ' ', 0.31518986714837904, (-26.187000000000005, -2.486, -7.497))]
data['probe'] = [(' B  46  ALA  HA ', ' B  49  MET  HE2', -1.073, (-29.591, -16.98, 24.485)), (' B  58  LEU HD22', ' B  82  MET  HE3', -1.065, (-34.664, -0.812, 28.953)), (' B  80  HIS  HE1', ' B 512  HOH  O  ', -0.943, (-34.11, -0.487, 34.328)), (' A  47  GLU  N  ', ' A  47  GLU  OE1', -0.926, (8.024, 25.212, -15.481)), (' B  69  GLN  N  ', ' B  69  GLN  OE1', -0.873, (-16.17, -0.752, 30.01)), (' B 296  VAL  O  ', ' B 300  CYS  SG ', -0.841, (-16.899, 9.818, -11.632)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.817, (-14.219, -8.938, 4.95)), (' A  49  MET  HE1', ' A 401  SDJ  C7 ', -0.812, (2.89, 22.027, -10.336)), (' B  67  LEU  HB3', ' B  69  GLN HE22', -0.806, (-18.044, -3.544, 32.743)), (' A  49  MET  HE1', ' A 401  SDJ  C8 ', -0.787, (2.723, 21.04, -9.896)), (' B 401  SDJ  C8 ', ' B 401  SDJ  H2 ', -0.786, (-26.549, -15.021, 22.165)), (' A 231  ASN HD21', ' A 242  LEU  H  ', -0.762, (3.571, -22.045, -8.463)), (' B 401  SDJ  H2 ', ' B 401  SDJ  H33', -0.758, (-26.232, -14.649, 21.845)), (' B  82  MET  HE2', ' B  87  LEU HD21', -0.753, (-33.545, -2.121, 26.779)), (' A  50  LEU  O  ', ' A 188  ILE HG23', -0.73, (11.054, 15.669, -15.848)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.722, (4.953, 18.614, -2.405)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.697, (-30.868, -2.201, 25.298)), (' B 217  ARG  HD2', ' B 562  HOH  O  ', -0.681, (-15.945, 6.647, -24.035)), (' A  49  MET  CE ', ' A 401  SDJ  C6 ', -0.671, (3.604, 22.403, -10.37)), (' A  49  MET  HE1', ' A 401  SDJ  C6 ', -0.659, (3.314, 22.328, -10.578)), (' B  97  LYS  HD2', ' B 571  HOH  O  ', -0.653, (-12.379, 9.214, 24.096)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.649, (-13.176, 4.517, -6.646)), (' A  45  THR  O  ', ' A  49  MET  HG3', -0.647, (7.297, 22.285, -12.202)), (' B  58  LEU HD22', ' B  82  MET  CE ', -0.632, (-34.478, -1.282, 28.157)), (' B  58  LEU  CD2', ' B  82  MET  HE3', -0.624, (-35.367, -0.817, 29.16)), (' B  63  ASN  OD1', ' B  80  HIS  HD2', -0.617, (-29.377, 2.777, 35.634)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.608, (-3.747, 3.11, -7.605)), (' A 231  ASN  ND2', ' A 242  LEU  H  ', -0.607, (3.763, -21.676, -8.78)), (' B  68  VAL  C  ', ' B  69  GLN  OE1', -0.598, (-17.454, -0.59, 30.512)), (' A  49  MET  HE1', ' A 401  SDJ  C3 ', -0.587, (2.864, 21.235, -11.316)), (' A  49  MET  CE ', ' A 401  SDJ  C5 ', -0.587, (3.995, 22.457, -11.346)), (' A  27  LEU  C  ', ' A  27  LEU HD12', -0.585, (1.725, 18.619, 0.482)), (' A  27  LEU  O  ', ' A  27  LEU HD12', -0.577, (1.722, 18.917, 0.961)), (' A  49  MET  HE3', ' A 401  SDJ  C5 ', -0.574, (4.241, 22.681, -11.259)), (' B  80  HIS  CE1', ' B 512  HOH  O  ', -0.574, (-33.68, -0.73, 34.686)), (' B 138  GLY  H  ', ' B 172  HIS  HD2', -0.553, (-23.278, -8.191, 6.577)), (' A  50  LEU  O  ', ' A 188  ILE  CG2', -0.547, (11.349, 15.101, -15.68)), (' A  49  MET  O  ', ' A  52  PRO  HD3', -0.545, (11.557, 17.12, -13.573)), (' A  61  LYS  HE2', ' A 517  HOH  O  ', -0.545, (13.54, 26.132, -4.953)), (' B  82  MET  HE2', ' B  87  LEU  CD2', -0.539, (-33.207, -1.38, 27.124)), (' A  59  ILE HG23', ' A 515  HOH  O  ', -0.531, (21.082, 21.388, -1.968)), (' B  49  MET  SD ', ' B 401  SDJ  H26', -0.518, (-30.061, -13.335, 22.219)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.517, (-31.914, 1.345, 18.572)), (' A 401  SDJ  C8 ', ' A 401  SDJ  H2 ', -0.505, (1.681, 20.276, -10.594)), (' B  50  LEU  O  ', ' B 188  ILE HG23', -0.505, (-37.419, -14.439, 20.682)), (' B  45  THR  O  ', ' B  49  MET  HG3', -0.504, (-31.149, -14.883, 25.601)), (' B   4  ARG  HD3', ' B 528  HOH  O  ', -0.496, (-9.537, -0.843, -2.926)), (' B 212  VAL HG13', ' B 217  ARG  NH2', -0.491, (-18.58, 6.484, -22.841)), (' B   3  PHE  HA ', ' B 299  GLN  NE2', -0.478, (-12.626, 4.989, -7.758)), (' A 126  TYR  HE1', ' A 128  CYS  HG ', -0.478, (-6.134, 2.204, -2.62)), (' A  49  MET  HE1', ' A 401  SDJ  C5 ', -0.474, (3.513, 22.346, -10.827)), (' A  49  MET  HE3', ' A 401  SDJ  C6 ', -0.471, (4.189, 22.741, -10.268)), (' A 169  THR  OG1', ' A 171  VAL HG22', -0.47, (-0.587, 2.707, -14.804)), (' B  50  LEU  O  ', ' B 188  ILE  CG2', -0.468, (-37.494, -15.089, 20.625)), (' B  83  GLN  OE1', ' B  88  ARG  HD3', -0.467, (-32.653, 6.872, 23.543)), (' B  33  ASP  HB2', ' B 532  HOH  O  ', -0.466, (-24.852, 12.464, 25.391)), (' A  49  MET  HE1', ' A 401  SDJ  C4 ', -0.462, (3.622, 21.82, -10.989)), (' B  46  ALA  N  ', ' B 401  SDJ  H36', -0.458, (-28.101, -16.379, 27.036)), (' A 153  ASP  O  ', ' A 154  TYR  C  ', -0.442, (-0.68, -2.583, 17.245)), (' A  27  LEU  C  ', ' A  27  LEU  CD1', -0.44, (1.728, 18.118, 0.461)), (' B 160  CYS  O  ', ' B 182  TYR  OH ', -0.437, (-29.523, 3.971, 9.994)), (' A 126  TYR  HE1', ' A 128  CYS  SG ', -0.436, (-5.896, 1.784, -2.761)), (' A  49  MET  CE ', ' A 401  SDJ  C7 ', -0.435, (3.849, 21.491, -9.719)), (' A 106  ILE HG13', ' A 110  GLN  HB2', -0.426, (3.444, -5.301, 1.809)), (' A 228  ASN  O  ', ' A 232  LEU  HG ', -0.424, (3.915, -27.445, -13.337)), (' B  69  GLN  CD ', ' B  69  GLN  N  ', -0.415, (-16.169, -1.113, 30.824)), (' B  70  ALA  HB2', ' B  75  LEU HD11', -0.415, (-15.707, 5.154, 28.787)), (' A  47  GLU  CD ', ' A  47  GLU  N  ', -0.413, (7.992, 25.73, -15.502)), (' B 401  SDJ  C1 ', ' B 401  SDJ  H33', -0.41, (-26.05, -14.831, 21.837)), (' B 228  ASN  ND2', ' B 511  HOH  O  ', -0.409, (-45.412, 3.347, -20.037)), (' B 401  SDJ  C1 ', ' B 401  SDJ  C8 ', -0.409, (-25.959, -15.201, 22.569)), (' B  49  MET  O  ', ' B  52  PRO  HD3', -0.407, (-36.214, -13.557, 22.917)), (' B 276  MET  HB3', ' B 276  MET  HE3', -0.405, (-21.09, -8.932, -19.822)), (' A 166  GLU  CD ', ' B   1  SER  HB2', -0.403, (-4.974, 8.287, -12.32)), (' B 401  SDJ  H2 ', ' B 401  SDJ  H30', -0.401, (-27.796, -14.156, 22.005)), (' A 200  ILE  O  ', ' A 200  ILE HG22', -0.401, (-1.626, -13.407, -4.651)), (' A 166  GLU  OE1', ' B   1  SER  HB2', -0.4, (-5.114, 8.53, -12.565)), (' B 106  ILE HG22', ' B 182  TYR  CZ ', -0.4, (-30.307, 3.054, 8.159)), (' A 168  PRO  HD2', ' A 570  HOH  O  ', -0.4, (1.717, 5.115, -17.057))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
