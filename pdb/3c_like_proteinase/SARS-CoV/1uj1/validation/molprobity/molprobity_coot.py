# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 168 ', 'PRO', 0.07657779877490155, (73.639, -9.223, -0.34)), ('A', ' 302 ', 'GLY', 0.0014796240562020002, (69.67, -22.423, 36.025)), ('B', ' 138 ', 'GLY', 0.09247525502016175, (58.69499999999999, -25.263000000000005, 26.735)), ('B', ' 169 ', 'THR', 0.0002584864289856934, (53.525000000000006, -36.018, 30.055)), ('B', ' 171 ', 'VAL', 0.0, (53.967, -29.344000000000005, 28.341)), ('B', ' 187 ', 'ASP', 0.014678369298900875, (44.908, -26.773, 39.988)), ('B', ' 217 ', 'ARG', 0.014545052471028804, (59.193999999999996, -19.571, -3.5780000000000007)), ('B', ' 257 ', 'THR', 0.036136203996694, (52.624, -11.229, -2.520000000000001)), ('B', ' 275 ', 'GLY', 0.06381163982982682, (57.51199999999999, -33.691, 1.882))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.23135195749394824, (68.683, 5.219, 13.168000000000003)), ('A', '  30 ', 'LEU', 0.003463974535123075, (72.72, 3.521, 22.672)), ('A', '  49 ', 'MET', 0.0, (78.16299999999997, 5.492, 1.064)), ('A', '  59 ', 'ILE', 0.06457860100934679, (84.02199999999998, 18.124999999999993, 9.809000000000003)), ('A', '  67 ', 'LEU', 0.0, (68.90299999999998, 15.453, 16.889)), ('A', '  87 ', 'LEU', 0.03831377970228973, (79.883, 8.259999999999996, 16.216)), ('A', ' 106 ', 'ILE', 0.023990643362052158, (82.742, -11.654000000000002, 21.024)), ('A', ' 127 ', 'GLN', 0.08164607156704647, (68.758, -14.786, 20.362000000000002)), ('A', ' 132 ', 'PRO', 0.155177859746878, (81.986, -18.513, 11.742)), ('A', ' 189 ', 'GLN', 0.269213614871053, (78.80199999999999, 0.3790000000000001, -0.4370000000000001)), ('A', ' 213 ', 'ILE', 0.007755107485406435, (71.644, -33.799, 30.511000000000006)), ('A', ' 222 ', 'ARG', 0.19230214517086933, (80.75100000000002, -47.217, 23.235)), ('A', ' 226 ', 'THR', 0.02493027547833968, (91.043, -39.19400000000002, 17.741)), ('A', ' 227 ', 'LEU', 0.0, (90.57600000000001, -35.375000000000014, 17.425000000000008)), ('A', ' 268 ', 'LEU', 0.010958291701247746, (78.572, -36.94, 16.489)), ('A', ' 279 ', 'ARG', 0.05649346741318701, (64.718, -40.043, 15.406000000000004)), ('A', ' 286 ', 'ILE', 0.05441245016492243, (68.294, -31.315999999999992, 13.043)), ('B', '  30 ', 'LEU', 0.0, (52.778, -10.032, 39.069)), ('B', '  61 ', 'LYS', 0.1283718682781269, (45.61500000000001, -18.016999999999992, 56.28)), ('B', '  64 ', 'HIS', 0.0, (50.68599999999999, -12.146, 57.640000000000015)), ('B', '  68 ', 'VAL', 0.05559949512738231, (55.981, -10.769000000000004, 49.12000000000001)), ('B', '  75 ', 'LEU', 0.19754552944418607, (55.89699999999999, -5.47, 50.554)), ('B', '  77 ', 'VAL', 0.017003828916124644, (50.17499999999999, -7.4719999999999995, 52.507)), ('B', '  87 ', 'LEU', 0.13479886275934985, (45.30899999999998, -15.343, 44.67800000000001)), ('B', '  93 ', 'THR', 0.0013599335943581536, (52.618, 0.25200000000000006, 48.259)), ('B', ' 136 ', 'ILE', 0.018928549720826467, (52.25800000000001, -24.681, 25.777000000000008)), ('B', ' 166 ', 'GLU', 0.27805212307064936, (53.870000000000005, -28.935, 34.789)), ('B', ' 180 ', 'LYS', 0.23588673840970728, (40.64, -19.262999999999998, 34.490000000000016)), ('B', ' 184 ', 'PRO', 0.11916072737235214, (40.523999999999994, -28.943, 30.784000000000002)), ('B', ' 213 ', 'ILE', 0.0, (57.846, -12.008, 0.888)), ('B', ' 216 ', 'ASP', 0.07311966707926429, (61.636, -18.206, -1.027)), ('B', ' 268 ', 'LEU', 0.00658687915612263, (50.76599999999999, -26.577, 1.265)), ('B', ' 282 ', 'LEU', 0.0, (63.028999999999996, -19.689, 5.727))]
data['cbeta'] = []
data['probe'] = [(' A 226  THR HG22', ' A 229  ASP  H  ', -1.046, (92.128, -38.153, 14.751)), (' A  19  GLN HE21', ' A  26  THR HG21', -1.04, (64.441, 9.076, 13.235)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -1.025, (53.181, -25.11, 33.152)), (' B  55  GLU  HG2', ' B 318  HOH  O  ', -0.936, (36.935, -23.997, 47.467)), (' B   4  ARG  H  ', ' B 299  GLN HE22', -0.932, (62.14, -13.171, 11.633)), (' B 186  VAL  H  ', ' B 192  GLN HE22', -0.92, (44.708, -29.583, 35.385)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.898, (53.679, -24.434, 32.321)), (' A  30  LEU  CD2', ' A  32  LEU  HG ', -0.855, (75.018, 2.889, 25.604)), (' B  64  HIS  CD2', ' B  64  HIS  H  ', -0.843, (48.41, -11.464, 57.722)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.794, (82.296, -3.57, 4.717)), (' B 186  VAL  H  ', ' B 192  GLN  NE2', -0.791, (44.076, -29.938, 34.956)), (' A 131  ARG  HD2', ' A 197  ASP  OD1', -0.779, (76.599, -19.19, 9.922)), (' B  19  GLN HE21', ' B  26  THR HG21', -0.777, (60.604, -17.724, 46.001)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.773, (67.231, -3.667, 10.596)), (' A  30  LEU HD21', ' A  32  LEU  HG ', -0.771, (74.694, 2.04, 26.151)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.765, (63.664, 8.551, 13.449)), (' A  67  LEU HD11', ' A  69  GLN HE21', -0.748, (64.236, 14.267, 16.848)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.741, (64.964, 8.187, 13.386)), (' B 244  GLN  O  ', ' B 247  VAL HG22', -0.729, (38.286, -17.322, 4.729)), (' A 139  SER  HA ', ' B   1  SER  O  ', -0.727, (65.369, -9.72, 9.669)), (' A 135  THR  HB ', ' A 171  VAL  CG1', -0.717, (76.016, -12.406, 7.371)), (' A 213  ILE  C  ', ' A 213  ILE HD13', -0.717, (69.928, -32.787, 30.777)), (' A   4  ARG  NH1', ' B 137  LYS  O  ', -0.714, (57.088, -24.321, 24.075)), (' B 101  TYR  O  ', ' B 102  LYS  HD2', -0.703, (45.653, -2.43, 29.43)), (' A 222  ARG  HG2', ' A 222  ARG  O  ', -0.693, (82.71, -48.801, 23.581)), (' B  19  GLN  NE2', ' B  26  THR HG21', -0.684, (60.829, -16.635, 46.42)), (' B 167  LEU  HB3', ' B 170  GLY  O  ', -0.683, (52.099, -31.776, 30.371)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.675, (78.455, 5.05, 2.968)), (' A 138  GLY  O  ', ' B   2  GLY  HA3', -0.671, (67.089, -11.652, 9.22)), (' A 131  ARG  CD ', ' A 197  ASP  OD1', -0.671, (77.213, -18.918, 9.371)), (' B   4  ARG  N  ', ' B 299  GLN HE22', -0.669, (62.459, -13.769, 11.68)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.666, (73.361, -6.725, 9.812)), (' A 105  ARG  NH1', ' A 180  LYS  HG3', -0.657, (86.129, -5.368, 15.388)), (' B  64  HIS  CD2', ' B  64  HIS  N  ', -0.652, (48.668, -11.395, 57.725)), (' B 131  ARG  CD ', ' B 197  ASP  OD1', -0.652, (50.622, -28.133, 19.503)), (' B  76  ARG  HB3', ' B  92  ASP  OD2', -0.65, (52.865, -2.713, 53.46)), (' B  78  ILE  O  ', ' B  78  ILE HG22', -0.65, (45.211, -4.548, 53.597)), (' B  68  VAL  CG2', ' B  75  LEU  HB2', -0.648, (55.451, -7.593, 48.209)), (' B 168  PRO  O  ', ' B 169  THR HG23', -0.646, (51.353, -36.42, 31.257)), (' A  48  ASP  O  ', ' A  52  PRO  HG3', -0.646, (80.311, 6.624, 1.706)), (' B 244  GLN  NE2', ' B 247  VAL  CG2', -0.646, (38.274, -17.39, 2.804)), (' A   4  ARG  N  ', ' B 140  PHE  CE1', -0.634, (64.33, -25.079, 25.177)), (' A   6  MET  HE2', ' B 140  PHE  HD2', -0.631, (65.185, -21.9, 29.094)), (' B   4  ARG  H  ', ' B 299  GLN  NE2', -0.63, (62.286, -12.959, 11.643)), (' A 279  ARG  HE ', ' A 280  THR  H  ', -0.625, (64.335, -39.403, 18.001)), (' A  67  LEU HD11', ' A  69  GLN  NE2', -0.624, (63.86, 13.861, 16.875)), (' A   6  MET  HE2', ' B 140  PHE  CD2', -0.611, (64.939, -21.63, 28.368)), (' A  30  LEU HD21', ' A  32  LEU  CG ', -0.61, (75.115, 2.382, 26.488)), (' A   5  LYS  HD3', ' A 127  GLN  NE2', -0.608, (68.943, -18.971, 19.078)), (' B  45  THR  OG1', ' B  47  GLU  HG2', -0.605, (50.931, -30.287, 51.577)), (' B 131  ARG  HD2', ' B 197  ASP  OD1', -0.598, (51.095, -28.438, 20.002)), (' A 222  ARG  HG2', ' A 222  ARG HH11', -0.592, (82.826, -49.135, 23.897)), (' A 210  ALA  O  ', ' A 213  ILE  CG2', -0.592, (71.115, -31.699, 28.044)), (' B 140  PHE  CD1', ' B 140  PHE  N  ', -0.591, (61.676, -24.969, 28.664)), (' B 188  ARG  HG2', ' B 190  THR HG23', -0.591, (45.625, -34.0, 41.082)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.588, (82.646, 1.655, 16.351)), (' A 213  ILE  O  ', ' A 213  ILE HD13', -0.587, (69.675, -33.397, 31.611)), (' B 213  ILE HD13', ' B 214  ASN  N  ', -0.585, (59.752, -12.084, 2.252)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.584, (78.27, 5.228, 2.975)), (' A   5  LYS  HD3', ' A 127  GLN HE22', -0.581, (69.261, -19.114, 18.839)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.58, (73.162, -6.809, 9.43)), (' A 232  LEU  O  ', ' A 236  LYS  HE2', -0.579, (86.798, -35.959, 6.446)), (' A   3  PHE  HA ', ' B 140  PHE  HE1', -0.577, (63.988, -26.163, 25.453)), (' A  45  THR HG23', ' A  48  ASP  H  ', -0.576, (75.664, 9.717, -0.116)), (' B 131  ARG  HD3', ' B 197  ASP  OD1', -0.571, (49.87, -28.03, 19.507)), (' A 295  ASP  OD1', ' A 298  ARG  NH2', -0.568, (73.858, -18.044, 26.272)), (' A 210  ALA  HA ', ' A 213  ILE  CG2', -0.567, (71.891, -31.104, 28.429)), (' A 291  PHE  HE2', ' A 299  GLN HE22', -0.566, (69.561, -22.065, 24.739)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.563, (66.003, -37.438, 14.274)), (' B 180  LYS  HE2', ' B 355  HOH  O  ', -0.561, (37.859, -16.17, 31.965)), (' A  30  LEU HD23', ' A  31  TRP  N  ', -0.561, (72.757, 3.415, 24.686)), (' B 170  GLY  O  ', ' B 171  VAL  O  ', -0.559, (52.999, -30.376, 30.432)), (' A 226  THR HG22', ' A 229  ASP  N  ', -0.559, (91.458, -38.314, 14.133)), (' B 244  GLN  NE2', ' B 247  VAL HG21', -0.557, (37.695, -17.532, 2.427)), (' B 167  LEU HD21', ' B 194  ALA  HB2', -0.552, (48.462, -32.326, 28.454)), (' A 299  GLN  OE1', ' B 140  PHE  HE2', -0.552, (66.645, -22.88, 27.568)), (' B 213  ILE  C  ', ' B 213  ILE HD13', -0.551, (59.322, -11.832, 2.157)), (' A  30  LEU  C  ', ' A  30  LEU HD23', -0.551, (72.995, 3.316, 24.498)), (' A 189  GLN  HA ', ' A 189  GLN  OE1', -0.545, (77.46, -1.086, -0.426)), (' A 210  ALA  HA ', ' A 213  ILE HG22', -0.541, (72.336, -30.936, 28.004)), (' A 105  ARG HH12', ' A 180  LYS  HG3', -0.54, (85.531, -5.373, 15.66)), (' A  30  LEU  C  ', ' A  30  LEU  CD2', -0.539, (73.917, 3.341, 24.284)), (' A  69  GLN  HG2', ' A  74  GLN  NE2', -0.538, (63.046, 14.599, 20.004)), (' B  66  PHE  CE1', ' B  87  LEU HD11', -0.533, (48.274, -16.588, 49.449)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.533, (87.667, -26.332, 17.899)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.532, (65.166, -2.232, 12.101)), (' A 210  ALA  O  ', ' A 213  ILE HG23', -0.525, (70.782, -31.634, 28.81)), (' A 135  THR  HB ', ' A 171  VAL HG12', -0.524, (75.751, -11.774, 7.57)), (' A  30  LEU HD22', ' A  32  LEU  HG ', -0.524, (75.138, 3.112, 25.614)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.518, (60.591, -25.644, 2.856)), (' B  68  VAL HG22', ' B  75  LEU  HB2', -0.515, (55.391, -7.729, 49.191)), (' B 166  GLU  OE2', ' B 172  HIS  HD2', -0.513, (55.466, -26.812, 33.628)), (' A  56  ASP  OD2', ' A  60  ARG  NH1', -0.513, (83.622, 16.051, 2.648)), (' A   3  PHE  HA ', ' B 140  PHE  CE1', -0.512, (64.203, -25.701, 25.884)), (' B  78  ILE  CG2', ' B  78  ILE  O  ', -0.511, (45.273, -4.547, 54.11)), (' B 138  GLY  C  ', ' B 140  PHE  H  ', -0.509, (60.511, -24.849, 28.332)), (' A 276  MET  CE ', ' A 280  THR  HA ', -0.509, (66.287, -36.197, 15.465)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.509, (81.859, 1.028, 16.324)), (' B 166  GLU  OE2', ' B 172  HIS  CD2', -0.506, (55.59, -26.384, 33.408)), (' A 135  THR  CB ', ' A 171  VAL HG11', -0.506, (76.453, -12.607, 7.702)), (' B 101  TYR  C  ', ' B 102  LYS  HD2', -0.505, (45.699, -2.839, 29.273)), (' B 131  ARG  HD2', ' B 137  LYS  HE2', -0.502, (52.617, -28.231, 20.197)), (' A 207  TRP  CE2', ' A 288  GLU  HB2', -0.501, (70.117, -28.901, 18.952)), (' B 276  MET  O  ', ' B 279  ARG  HG3', -0.5, (63.145, -30.391, -0.828)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.495, (64.311, -10.758, 15.738)), (' A 210  ALA  CA ', ' A 213  ILE HG22', -0.492, (72.519, -31.18, 27.822)), (' A  49  MET  HE1', ' A  54  TYR  OH ', -0.49, (79.664, 5.23, 5.649)), (' B  78  ILE HD11', ' B  92  ASP  HB3', -0.49, (49.889, -1.679, 53.569)), (' B 244  GLN  HA ', ' B 247  VAL HG22', -0.488, (37.954, -19.033, 4.669)), (' A   4  ARG  H  ', ' B 140  PHE  HE1', -0.488, (63.641, -25.418, 25.727)), (' B 217  ARG  HG3', ' B 220  LEU HD12', -0.487, (56.369, -18.861, -5.999)), (' A 210  ALA  O  ', ' A 213  ILE HG22', -0.486, (71.789, -32.038, 28.11)), (' B 163  HIS  NE2', ' B 166  GLU  OE2', -0.483, (55.01, -25.067, 34.301)), (' B 138  GLY  C  ', ' B 140  PHE  N  ', -0.481, (60.582, -25.318, 28.789)), (' A 180  LYS  HE3', ' A 181  PHE  O  ', -0.48, (86.282, -6.268, 13.22)), (' A  67  LEU HD11', ' A  69  GLN  HG3', -0.479, (64.832, 13.843, 17.818)), (' A  45  THR HG22', ' A  48  ASP  CG ', -0.479, (76.133, 11.183, 1.296)), (' A 301  SER  O  ', ' A 303  VAL  N  ', -0.479, (71.032, -22.981, 37.553)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.479, (72.426, 6.085, 30.93)), (' A 167  LEU  N  ', ' A 167  LEU HD12', -0.478, (74.722, -7.202, 4.68)), (' A 222  ARG  HG2', ' A 222  ARG  NH1', -0.478, (83.165, -49.598, 24.299)), (' B  41  HIS  HE1', ' B 164  HIS  O  ', -0.477, (51.267, -24.041, 39.032)), (' A  79  GLY  HA3', ' A  90  LYS  HE2', -0.474, (80.667, 16.939, 23.141)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.473, (42.642, -20.49, 41.962)), (' B  78  ILE  CD1', ' B  92  ASP  HB3', -0.472, (49.383, -1.905, 53.521)), (' A 135  THR  CB ', ' A 171  VAL  CG1', -0.471, (76.245, -12.766, 8.074)), (' A  76  ARG  NH1', ' A  92  ASP  OD2', -0.47, (71.943, 20.676, 27.613)), (' A 167  LEU HD11', ' A 173  ALA  CB ', -0.469, (77.504, -6.722, 7.197)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.469, (48.271, -21.896, 17.01)), (' A 209  TYR  O  ', ' A 213  ILE HG22', -0.468, (72.97, -32.322, 27.943)), (' A  69  GLN  CD ', ' A  74  GLN HE22', -0.468, (62.41, 14.108, 19.006)), (' A  67  LEU  CD1', ' A  69  GLN  HG3', -0.466, (65.144, 13.987, 17.952)), (' A 171  VAL HG12', ' A 172  HIS  N  ', -0.463, (74.716, -11.062, 7.669)), (' B  19  GLN HE21', ' B  26  THR  CG2', -0.461, (60.424, -17.535, 46.009)), (' A  50  LEU  O  ', ' A 188  ARG  NH2', -0.46, (82.536, 3.208, -2.542)), (' B 254  SER  O  ', ' B 256  GLN  O  ', -0.459, (49.466, -10.975, -1.892)), (' A 210  ALA  C  ', ' A 213  ILE HG22', -0.459, (71.953, -31.824, 27.587)), (' A  45  THR  CG2', ' A  48  ASP  H  ', -0.455, (75.477, 10.3, 0.359)), (' A  55  GLU  CD ', ' A  55  GLU  H  ', -0.455, (87.024, 10.662, 7.806)), (' B  62  SER  HB2', ' B 339  HOH  O  ', -0.453, (45.272, -12.294, 58.245)), (' B 166  GLU  O  ', ' B 168  PRO  HD3', -0.452, (52.227, -31.735, 35.442)), (' A 171  VAL  CG1', ' A 172  HIS  N  ', -0.45, (74.205, -11.353, 7.414)), (' B 168  PRO  O  ', ' B 169  THR  CG2', -0.449, (51.656, -36.819, 31.024)), (' B 144  SER  HB2', ' B 147  SER  OG ', -0.449, (58.538, -18.711, 35.171)), (' B 256  GLN  O  ', ' B 258  GLY  N  ', -0.447, (50.66, -10.767, -2.71)), (' B 175  THR HG23', ' B 176  ASP  O  ', -0.447, (45.181, -16.641, 34.598)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.444, (72.08, -8.617, 21.329)), (' A  40  ARG  HG3', ' A  54  TYR  CE2', -0.444, (80.808, 6.453, 8.713)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.444, (54.241, -2.714, 42.731)), (' B 178  GLU  HG2', ' B 180  LYS  NZ ', -0.443, (37.619, -14.764, 34.65)), (' A 167  LEU HD11', ' A 173  ALA  HB2', -0.443, (77.643, -7.464, 7.165)), (' A 299  GLN  OE1', ' B 140  PHE  CE2', -0.442, (66.522, -22.778, 27.319)), (' A  63  ASN  O  ', ' A  77  VAL HG11', -0.441, (73.82, 18.176, 17.856)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.439, (74.601, -18.224, 18.519)), (' A 141  LEU HD21', ' B 299  GLN  O  ', -0.438, (59.65, -7.444, 9.244)), (' B 128  CYS  SG ', ' B 136  ILE HD11', -0.436, (54.556, -20.226, 25.71)), (' B 139  SER  O  ', ' B 142  ASN  ND2', -0.435, (60.782, -27.381, 31.873)), (' A 135  THR  OG1', ' A 171  VAL HG11', -0.435, (76.294, -13.607, 7.864)), (' B 126  TYR  OH ', ' B 141  LEU  HG ', -0.434, (57.585, -21.525, 29.192)), (' A  66  PHE  CE1', ' A  87  LEU HD11', -0.432, (76.504, 12.493, 13.983)), (' B  24  THR HG23', ' B 352  HOH  O  ', -0.432, (56.902, -26.052, 50.338)), (' B 138  GLY  O  ', ' B 140  PHE  N  ', -0.431, (59.702, -25.147, 29.219)), (' A 222  ARG  CG ', ' A 222  ARG  NH1', -0.431, (82.655, -49.503, 24.4)), (' A  58  LEU  HA ', ' A  58  LEU HD12', -0.426, (80.642, 14.451, 10.816)), (' A 294  PHE  HB2', ' A 433  HOH  O  ', -0.423, (80.307, -20.512, 27.358)), (' B 168  PRO  O  ', ' B 169  THR  CB ', -0.42, (51.649, -36.179, 31.166)), (' B 167  LEU  O  ', ' B 169  THR  N  ', -0.417, (53.41, -34.076, 31.659)), (' B 128  CYS  SG ', ' B 136  ILE  CD1', -0.416, (54.371, -20.216, 25.646)), (' A  53  ASN  HB3', ' A  56  ASP  HB3', -0.416, (85.581, 12.992, 3.59)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.415, (83.031, 5.012, 11.839)), (' A 141  LEU  H  ', ' A 141  LEU HD12', -0.415, (63.239, -5.532, 10.657)), (' B 164  HIS  NE2', ' B 175  THR HG22', -0.415, (47.083, -19.02, 36.131)), (' A  44  CYS  SG ', ' A  49  MET  HE3', -0.411, (78.422, 6.878, 4.512)), (' A  48  ASP  O  ', ' A  52  PRO  CG ', -0.41, (80.678, 7.158, 1.921)), (' B 213  ILE  C  ', ' B 213  ILE  CD1', -0.41, (59.054, -11.577, 2.205)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.409, (77.582, -19.348, 10.187)), (' A 102  LYS  HG3', ' A 156  CYS  SG ', -0.408, (79.987, -5.571, 32.488)), (' A 118  TYR  CZ ', ' A 144  SER  HB3', -0.406, (64.948, -2.907, 12.517)), (' B 167  LEU  CD2', ' B 194  ALA  HB2', -0.406, (48.693, -32.277, 28.408)), (' A  49  MET  HA ', ' A  52  PRO  HG3', -0.405, (79.738, 6.026, 2.272)), (' B 135  THR  HB ', ' B 171  VAL  HB ', -0.402, (51.247, -28.151, 27.162)), (' B  87  LEU HD23', ' B  88  ARG  N  ', -0.401, (44.973, -13.758, 46.288))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
