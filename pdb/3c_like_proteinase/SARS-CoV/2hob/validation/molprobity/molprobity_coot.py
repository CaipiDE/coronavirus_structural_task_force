# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.04974202797178582, (30.356999999999996, -14.586, 106.68999999999997)), ('A', ' 228 ', 'ASN', 0.14548016308147108, (28.860000000000007, 4.257, 131.424)), ('B', '   4 ', 'LEU', 0.0005915526453221069, (3.6140000000000008, -19.64, 107.871))]
data['cbeta'] = []
data['probe'] = [(' A 568  HOH  O  ', ' B   6  010  H5 ', -1.147, (2.732, -26.928, 100.023)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -1.035, (35.288, -14.532, 105.93)), (' A  49  MET  HE1', ' B   6  010  H2 ', -1.009, (0.737, -23.25, 105.121)), (' A  49  MET  HE1', ' B   6  010  C2 ', -0.812, (0.741, -23.83, 104.371)), (' A  43  ILE HD13', ' A  57  LEU  HB3', -0.704, (-4.843, -30.307, 112.379)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.696, (36.191, -14.53, 106.397)), (' A 152  ILE HD12', ' A 157  VAL HG22', -0.689, (27.062, -30.861, 112.436)), (' A  49  MET  CE ', ' B   6  010  H2 ', -0.682, (-0.403, -24.11, 105.084)), (' A  43  ILE  C  ', ' A  43  ILE HD12', -0.665, (-3.058, -29.094, 110.663)), (' A 151  ASN  O  ', ' A 152  ILE HD13', -0.656, (26.732, -27.751, 113.713)), (' A 152  ILE  CD1', ' A 157  VAL HG22', -0.589, (26.706, -30.063, 112.208)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.568, (3.646, -27.307, 117.387)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.568, (3.743, -30.985, 113.396)), (' A 165  MET  HE1', ' A 186  VAL  O  ', -0.558, (2.857, -17.728, 113.839)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.535, (3.296, -15.599, 116.237)), (' A  64  HIS  HE1', ' A 554  HOH  O  ', -0.528, (-6.318, -44.288, 106.833)), (' A  43  ILE  O  ', ' A  43  ILE HD12', -0.51, (-3.441, -29.267, 110.183)), (' A  49  MET  HB3', ' A 189  GLN  HG3', -0.485, (-1.849, -19.193, 108.614)), (' A 106  ILE  C  ', ' A 106  ILE HD12', -0.475, (19.779, -18.671, 120.242)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.469, (9.131, -27.262, 118.286)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.46, (9.367, -27.442, 117.754)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.447, (30.021, 7.893, 122.552)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.437, (-5.215, -23.274, 111.786)), (' A 165  MET  HE2', ' B   4  LEU  CD1', -0.429, (3.44, -18.618, 111.446)), (' A 106  ILE  O  ', ' A 106  ILE HD12', -0.421, (19.263, -18.512, 120.866)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.414, (20.988, -28.491, 102.228)), (' A  43  ILE HD13', ' A  57  LEU  CB ', -0.412, (-4.509, -29.958, 113.083)), (' A 151  ASN  C  ', ' A 152  ILE HD13', -0.403, (27.034, -27.476, 114.176)), (' A  44  CYS  HB3', ' A  48  ASP  HB2', -0.4, (-3.989, -25.585, 108.764)), (' A 117  CYS  SG ', ' A 122  PRO  HA ', -0.4, (17.802, -28.381, 102.254)), (' A 152  ILE  CD1', ' A 157  VAL  HA ', -0.4, (26.708, -29.895, 114.139))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
