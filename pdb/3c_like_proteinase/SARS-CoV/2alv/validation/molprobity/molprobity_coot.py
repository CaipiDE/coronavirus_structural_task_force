# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  47 ', 'GLU', 0.010569697539239937, (84.43800000000002, 34.69800000000001, 22.378)), ('A', ' 189 ', 'GLN', 0.011951491950534014, (76.24000000000001, 41.205, 18.161)), ('A', ' 217 ', 'ARG', 0.04373816758318216, (31.479000000000013, 58.449, 16.778)), ('A', ' 283 ', 'GLY', 0.06742617378569285, (39.484, 53.97100000000002, 25.84)), ('A', ' 287 ', 'LEU', 0.0006370080361302048, (45.330999999999996, 56.45700000000001, 17.774)), ('A', ' 301 ', 'SER', 0.009365713324340167, (31.379000000000012, 40.581999999999994, 14.873000000000001))]
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.18397336715988177, (44.152, 43.712000000000025, 22.559000000000005)), ('A', '  38 ', 'CYS', 0.02440959360683337, (66.03400000000003, 27.009999999999998, 17.6)), ('A', '  47 ', 'GLU', 0.06325659831667106, (84.43800000000002, 34.69800000000001, 22.378)), ('A', '  50 ', 'LEU', 0.0, (80.46800000000002, 39.829, 16.219000000000005)), ('A', '  57 ', 'LEU', 0.0, (80.677, 26.595, 14.784)), ('A', '  67 ', 'LEU', 0.12806187171722816, (70.373, 18.578, 25.156)), ('A', '  72 ', 'ASN', 0.02481968257052272, (60.837999999999994, 16.671, 32.764)), ('A', ' 189 ', 'GLN', 0.023443826116853833, (76.24000000000001, 41.205, 18.161)), ('A', ' 284 ', 'SER', 0.15603182090517728, (42.690999999999995, 55.325000000000024, 24.349)), ('A', ' 285 ', 'THR', 0.053037411998957396, (44.182000000000016, 58.875000000000014, 23.997)), ('A', ' 293 ', 'PRO', 0.0017180063878186047, (40.768000000000015, 44.92, 9.756))]
data['cbeta'] = [('A', '  38 ', 'CYS', 'B', 0.5651902155363783, (67.40799999999999, 26.713, 18.014000000000003)), ('A', ' 128 ', 'CYS', 'A', 0.3656648484250155, (53.27200000000002, 41.45999999999999, 18.478)), ('A', ' 160 ', 'CYS', ' ', 0.6945678712276029, (54.69499999999999, 34.822, 12.608))]
data['probe'] = [(' A 303  VAL  O  ', ' A 303  VAL HG13', -0.99, (24.749, 45.15, 19.52)), (' A 264 AMET  HE3', ' A 267  ALA  HB3', -0.924, (36.932, 59.043, 10.08)), (' A  76  ARG  HB3', ' A  92  ASP  OD2', -0.882, (66.894, 9.937, 20.372)), (' A 264 AMET  HE3', ' A 264 AMET  O  ', -0.877, (37.622, 58.807, 8.972)), (' A  38 ACYS  SG ', ' A  39  PRO  O  ', -0.876, (68.61, 28.452, 17.805)), (' A 264 AMET  CE ', ' A 267  ALA  HB3', -0.858, (37.975, 59.228, 10.593)), (' A 276  MET  CE ', ' A 281  ILE HG13', -0.803, (40.063, 58.955, 19.852)), (' A 208  LEU HD13', ' A 264 AMET  HE2', -0.798, (38.727, 57.442, 11.414)), (' A 269  LYS  O  ', ' A 273  GLN  HG3', -0.767, (44.207, 65.922, 9.825)), (' A 112  PHE  CZ ', ' A 128 BCYS  SG ', -0.761, (55.147, 39.636, 17.005)), (' A 303  VAL  CG1', ' A 303  VAL  O  ', -0.757, (25.423, 44.117, 19.475)), (' A  49  MET  HB3', ' A 189  GLN  HG3', -0.749, (77.492, 38.46, 20.02)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.735, (67.271, 25.683, 29.152)), (' A  72  ASN HD22', ' A  73  VAL  H  ', -0.727, (59.876, 15.965, 30.421)), (' A  50  LEU  N  ', ' A  50  LEU HD13', -0.723, (81.045, 39.495, 17.812)), (' A 276  MET  HE1', ' A 281  ILE HG13', -0.716, (40.111, 59.198, 20.916)), (' A  72  ASN  N  ', ' A  72  ASN HD22', -0.704, (59.475, 16.401, 31.289)), (' A  72  ASN  ND2', ' A  73  VAL  H  ', -0.704, (59.184, 15.42, 30.654)), (' A 112  PHE  CE1', ' A 128 BCYS  SG ', -0.688, (53.732, 39.571, 17.063)), (' A  65  SER  HB3', ' A1276  HOH  O  ', -0.676, (77.722, 21.083, 21.291)), (' A 213  ILE HG21', ' A 300  CYS  HB3', -0.661, (31.831, 45.683, 15.611)), (' A  40  ARG  HG3', ' A  54  TYR  CE2', -0.646, (74.015, 31.355, 14.257)), (' A 168  PRO  CG ', ' A1145  CY6  H52', -0.641, (71.479, 48.706, 18.674)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.629, (40.085, 59.624, 19.99)), (' A 191  ALA  HA ', ' A1145  CY6  H53', -0.625, (74.542, 47.128, 16.91)), (' A  53  ASN  OD1', ' A  55  GLU  HB2', -0.616, (80.888, 29.485, 8.759)), (' A 168  PRO  HG2', ' A1145  CY6  H52', -0.585, (71.948, 49.323, 18.701)), (' A  72  ASN  N  ', ' A  72  ASN  ND2', -0.583, (58.949, 16.699, 31.545)), (' A 212  VAL  HA ', ' A 216  ASP  O  ', -0.577, (31.251, 55.08, 16.623)), (' A  73  VAL HG12', ' A  74  GLN  N  ', -0.569, (62.372, 13.716, 27.597)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.566, (71.809, 13.199, 18.097)), (' A  66  PHE  HB2', ' A  77  VAL HG21', -0.564, (70.638, 18.088, 19.79)), (' A 207  TRP  CZ3', ' A 287  LEU  HA ', -0.563, (43.491, 55.542, 17.55)), (' A 265 ACYS  O  ', ' A 268  LEU  N  ', -0.557, (39.881, 60.902, 8.701)), (' A  72  ASN  ND2', ' A  73  VAL  N  ', -0.555, (60.105, 15.412, 31.159)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.554, (70.847, 27.205, 15.353)), (' A  72  ASN HD22', ' A  73  VAL  N  ', -0.553, (60.236, 15.918, 31.332)), (' A 209  TYR  HB2', ' A 253  LEU HD13', -0.546, (36.684, 49.349, 10.435)), (' A 191  ALA  CA ', ' A1145  CY6  H53', -0.54, (74.636, 47.598, 16.724)), (' A 208  LEU  CD1', ' A 264 AMET  HE2', -0.54, (39.407, 57.116, 11.498)), (' A 213  ILE HG12', ' A 256  GLN  NE2', -0.538, (30.208, 47.499, 12.872)), (' A  43  ILE HD12', ' A  57  LEU  HB3', -0.535, (78.096, 26.746, 15.73)), (' A 209  TYR  CE2', ' A 264 BMET  HE2', -0.529, (34.786, 54.333, 8.863)), (' A  51  ASN  N  ', ' A  52  PRO  CD ', -0.521, (80.81, 37.554, 14.912)), (' A  76  ARG  HG3', ' A  76  ARG HH11', -0.517, (69.954, 9.747, 22.831)), (' A  31  TRP  CZ2', ' A  75  LEU HD21', -0.515, (60.428, 16.005, 21.666)), (' A 286 BILE HG13', ' A 287 BLEU  H  ', -0.515, (46.386, 55.904, 20.224)), (' A  26  THR  O  ', ' A1145  CY6 H392', -0.51, (69.329, 30.607, 27.094)), (' A 191  ALA  HA ', ' A1145  CY6  C5 ', -0.509, (74.173, 46.934, 17.79)), (' A  38 ACYS  SG ', ' A  42  VAL HG11', -0.507, (70.2, 26.379, 19.196)), (' A 209  TYR  CB ', ' A 253  LEU HD13', -0.505, (35.933, 49.562, 10.54)), (' A 281  ILE  C  ', ' A 283  GLY  H  ', -0.501, (39.054, 54.369, 22.886)), (' A  22  CYS  SG ', ' A  66  PHE  CD1', -0.497, (73.699, 22.889, 20.637)), (' A 288  GLU  HG2', ' A 291  PHE  CD2', -0.496, (44.345, 48.803, 18.485)), (' A 208  LEU HD13', ' A 264 AMET  CE ', -0.493, (38.174, 57.544, 11.923)), (' A 188  ARG  NH2', ' A1225  HOH  O  ', -0.488, (75.514, 36.907, 10.521)), (' A 264 AMET  HE1', ' A 267  ALA  HB3', -0.487, (37.51, 59.473, 11.464)), (' A 207  TRP  CE2', ' A 288  GLU  HB3', -0.486, (42.825, 52.059, 18.435)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.486, (62.366, 35.537, 27.572)), (' A 218  TRP  CB ', ' A 279  ARG HH21', -0.484, (33.203, 62.785, 20.629)), (' A 207  TRP  HZ3', ' A 287  LEU  HA ', -0.48, (43.219, 55.987, 17.569)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.479, (56.833, 28.672, 24.718)), (' A  40  ARG  HG3', ' A  54  TYR  CD2', -0.477, (74.048, 30.592, 13.974)), (' A 180  LYS  HB3', ' A 180  LYS  NZ ', -0.475, (65.302, 35.529, 4.735)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.475, (70.783, 30.913, 11.315)), (' A  15  GLY  HA3', ' A1274  HOH  O  ', -0.475, (51.389, 21.416, 22.579)), (' A  73  VAL  CG1', ' A  74  GLN  N  ', -0.469, (62.309, 13.333, 28.048)), (' A  72  ASN  H  ', ' A  72  ASN  ND2', -0.465, (58.95, 17.159, 31.745)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.463, (40.833, 41.034, 22.055)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.459, (65.182, 30.34, 11.208)), (' A  31  TRP  CE2', ' A  75  LEU HD21', -0.455, (60.214, 16.43, 21.235)), (' A 264 AMET  CE ', ' A 264 AMET  O  ', -0.455, (38.039, 58.223, 9.818)), (' A  50  LEU  CD1', ' A  50  LEU  N  ', -0.453, (81.013, 40.052, 18.222)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.451, (71.874, 42.388, 15.333)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.451, (74.532, 28.579, 16.874)), (' A 230  PHE  CD1', ' A 265 BCYS  HB3', -0.451, (42.526, 60.148, 4.886)), (' A 192  GLN  N  ', ' A1145  CY6  H53', -0.449, (73.757, 47.802, 16.741)), (' A  17  MET  HE2', ' A1188  HOH  O  ', -0.449, (57.43, 29.507, 22.665)), (' A 204  VAL  O  ', ' A 207  TRP  HB3', -0.444, (41.668, 52.637, 13.881)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.443, (63.077, 37.793, 25.343)), (' A 288  GLU  HG2', ' A 291  PHE  CE2', -0.44, (44.086, 48.683, 19.218)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.44, (62.698, 40.558, 19.889)), (' A  38 ACYS  SG ', ' A  42  VAL  CG1', -0.439, (70.255, 27.127, 19.229)), (' A  72  ASN  ND2', ' A  73  VAL HG23', -0.436, (59.076, 14.477, 30.651)), (' A  62  SER  HA ', ' A1290  HOH  O  ', -0.433, (77.694, 16.525, 15.048)), (' A  22  CYS  SG ', ' A  66  PHE  CE1', -0.43, (73.595, 22.937, 20.152)), (' A 168  PRO  HG3', ' A1145  CY6  H52', -0.43, (71.924, 48.414, 19.522)), (' A 169  THR  OG1', ' A 171  VAL HG22', -0.429, (64.272, 49.608, 19.04)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.426, (57.496, 17.382, 19.865)), (' A 300  CYS  C  ', ' A 302  GLY  H  ', -0.421, (31.036, 42.285, 16.259)), (' A  90  LYS  HD2', ' A  90  LYS  N  ', -0.42, (66.87, 17.134, 13.501)), (' A 207  TRP  O  ', ' A 210  ALA  HB3', -0.42, (37.696, 50.323, 16.228)), (' A 300  CYS  O  ', ' A 302  GLY  N  ', -0.417, (30.34, 42.276, 15.818)), (' A 176  ASP  HB2', ' A1154  HOH  O  ', -0.41, (58.071, 31.833, 8.931)), (' A 227  LEU  HA ', ' A 227  LEU HD12', -0.41, (43.157, 58.671, 0.061)), (' A  30  LEU  O  ', ' A  36  VAL  HA ', -0.409, (61.136, 22.199, 17.359)), (' A 281  ILE  O  ', ' A 282  LEU  HB2', -0.408, (39.224, 53.156, 21.673)), (' A  50  LEU  H  ', ' A  50  LEU HD13', -0.408, (81.422, 39.015, 18.089)), (' A 285  THR  O  ', ' A 285  THR  OG1', -0.402, (45.976, 59.958, 24.173))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
