# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.007166277629479785, (-0.9989999999999997, 14.476000000000003, 21.607999999999993)), ('A', ' 184 ', 'PRO', 0.0699127620617696, (-12.525000000000002, -14.431, 31.042)), ('B', '  48 ', 'ASP', 0.025403675799500234, (23.15299999999999, 24.259, -0.136)), ('B', '  50 ', 'LEU', 0.02567295475416888, (24.796000000000003, 19.343, -1.917)), ('B', '  52 ', 'PRO', 0.014453283328625966, (28.48200000000001, 23.602, 1.415)), ('B', ' 154 ', 'TYR', 0.03261906514544647, (21.116, 3.6609999999999996, 36.861))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.11704150309340962, (3.9419999999999966, -4.385, 43.35499999999999)), ('A', ' 125 ', 'VAL', 0.23404653579328746, (9.161999999999999, 0.043, 27.361)), ('A', ' 188 ', 'ARG', 0.13670279140710379, (-6.831000000000003, -16.131999999999998, 41.594)), ('A', ' 222 ', 'ARG', 0.050553937438924654, (-1.954000000000001, -9.616000000000003, -10.782)), ('A', ' 228 ', 'ASN', 0.25766810649719235, (-15.655, -14.226, 0.8219999999999997)), ('A', ' 253 ', 'LEU', 0.2987725225756288, (-3.459, 3.133, 2.868)), ('A', ' 286 ', 'ILE', 0.18485035070095363, (6.8590000000000035, -14.119, 8.97)), ('B', '  59 ', 'ILE', 0.1809753223131772, (30.215000000000003, 32.779, 9.792999999999997)), ('B', '  69 ', 'GLN', 0.0, (11.841999999999995, 26.177, 20.851)), ('B', '  77 ', 'VAL', 0.0037659766435217987, (20.615, 31.74, 22.070999999999994)), ('B', '  86 ', 'LEU', 0.0, (27.454000000000008, 19.426000000000005, 15.306999999999997)), ('B', ' 153 ', 'ASP', 0.0026927276711734218, (22.926000000000002, 2.865, 33.608)), ('B', ' 158 ', 'SER', 0.16198914341041806, (24.621, 7.745000000000001, 27.968)), ('B', ' 216 ', 'ASP', 0.1461068792200971, (14.663, -22.915000000000006, 25.678)), ('E', '   6 ', 'LEU', 0.06986292306630684, (-0.5890000000000004, -13.429999999999996, 39.882))]
data['cbeta'] = []
data['probe'] = [(' A 209  TYR  HB3', ' A 253  LEU HD22', -0.679, (-0.176, 0.586, 3.392)), (' B 118  TYR  HD2', ' B 123  SER  HG ', -0.66, (8.095, 12.787, 15.331)), (' A 108  PRO  HA ', ' A 130  MET  HG2', -0.655, (-7.154, -6.707, 22.373)), (' A 138  GLY  O  ', ' B   2  GLY  HA3', -0.654, (6.648, -12.413, 27.075)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.65, (18.303, 22.845, 28.749)), (' A 175  THR HG22', ' A 181  PHE  HA ', -0.649, (-9.167, -6.778, 34.256)), (' A  49  MET  SD ', ' E   6  LEU HD12', -0.637, (-3.243, -13.533, 43.69)), (' A  27  LEU HD11', ' A  42  VAL  HB ', -0.632, (-0.76, -5.031, 45.0)), (' A 212  VAL  HA ', ' A 216  ASP  O  ', -0.623, (6.234, -2.645, -1.432)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.603, (1.44, 11.221, 42.787)), (' B 111  THR HG23', ' B 292  THR HG23', -0.592, (23.57, -4.716, 21.387)), (' B 165  MET  HB3', ' F   6  LEU HD23', -0.59, (22.231, 13.127, 5.793)), (' B 298  ARG  HD3', ' B 305  PHE  HZ ', -0.577, (19.016, -1.296, 31.381)), (' B  81  SER  O  ', ' B  87  LEU HD12', -0.572, (28.219, 25.214, 16.364)), (' A 108  PRO  HA ', ' A 130  MET  CG ', -0.569, (-6.951, -7.206, 22.181)), (' B  43  ILE  HB ', ' B  61  LYS  HE3', -0.564, (22.619, 28.482, 8.903)), (' A 126  TYR  CE2', ' B   6  MET  HE2', -0.56, (9.009, -5.553, 27.965)), (' B  49  MET  HG2', ' F   6  LEU HD12', -0.556, (21.798, 19.105, 3.489)), (' A 165  MET  HB3', ' E   6  LEU HD22', -0.553, (-2.947, -12.476, 37.979)), (' A 180  LYS  HD2', ' A 537  HOH  O  ', -0.546, (-15.045, -1.705, 31.757)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.541, (17.872, 22.594, 28.055)), (' A  49  MET  CA ', ' A  49  MET  HE3', -0.54, (-5.005, -16.323, 45.107)), (' A  49  MET  HA ', ' A  49  MET  HE3', -0.539, (-5.134, -15.936, 45.423)), (' B 188  ARG  HG3', ' B 190  THR HG23', -0.538, (28.318, 15.068, -0.292)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.537, (-3.076, 14.615, 22.228)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.536, (18.828, 5.874, 20.847)), (' B  63  ASN  OD1', ' B  80  HIS  ND1', -0.534, (26.102, 32.893, 17.449)), (' A   1  SER  N  ', ' B 140  PHE  O  ', -0.53, (12.461, 7.692, 6.801)), (' B  86  LEU HD22', ' B 179  GLY  CA ', -0.529, (28.444, 15.862, 16.726)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.527, (1.271, 11.127, 41.946)), (' B  66  PHE  HB2', ' B  77  VAL HG11', -0.526, (19.783, 31.141, 18.097)), (' B 153  ASP  O  ', ' B 154  TYR  HB2', -0.52, (22.926, 4.297, 36.731)), (' A 165  MET  HB3', ' E   6  LEU  CD2', -0.519, (-3.026, -13.302, 38.237)), (' B 106  ILE  C  ', ' B 106  ILE HD12', -0.517, (29.083, 2.079, 18.625)), (' A  62  SER  HB2', ' A  64  HIS  CE1', -0.509, (-5.541, 1.728, 59.259)), (' B 217  ARG  HD3', ' B 434  HOH  O  ', -0.509, (17.626, -24.858, 29.46)), (' B  86  LEU HD22', ' B 179  GLY  N  ', -0.508, (29.1, 15.611, 16.92)), (' A  45  THR  HB ', ' A  47  GLU  HG3', -0.506, (-0.099, -15.768, 51.413)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.505, (14.254, 10.865, 10.406)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.501, (-10.594, -3.573, 1.72)), (' A  46  ALA  O  ', ' A  49  MET  HB2', -0.498, (-2.364, -17.52, 46.444)), (' B  12  LYS  NZ ', ' B 155  ASP  HA ', -0.495, (18.47, 7.459, 36.052)), (' B  50  LEU  C  ', ' B  50  LEU HD23', -0.487, (26.521, 19.056, -2.57)), (' A  49  MET  CE ', ' E   6  LEU HD12', -0.487, (-3.909, -13.583, 42.809)), (' A 118  TYR  OH ', ' A 141  LEU  HB2', -0.483, (9.715, -8.69, 35.189)), (' A  44  CYS  SG ', ' A  54  TYR  CE1', -0.481, (-6.372, -10.774, 46.454)), (' B  47  GLU  O  ', ' B  48  ASP  C  ', -0.481, (23.15, 22.69, -0.844)), (' B  50  LEU  O  ', ' B 188  ARG  HB2', -0.478, (27.168, 17.682, 0.15)), (' B 167  LEU  HB3', ' B 168  PRO  HD2', -0.475, (22.588, 5.582, 1.098)), (' A 126  TYR  CD1', ' B   4  ARG  HD2', -0.471, (6.53, -6.119, 25.019)), (' B 114  VAL  O  ', ' B 125  VAL  HA ', -0.471, (12.844, 5.909, 20.088)), (' A  21  THR  HB ', ' A  67  LEU  HB3', -0.469, (4.483, -1.46, 51.596)), (' A 260  ALA  O  ', ' A 263  ASP  HB2', -0.467, (-5.806, -4.401, -3.787)), (' B  10  SER  O  ', ' B  14  GLU  HG3', -0.464, (12.082, 10.632, 26.689)), (' A  41  HIS  ND1', ' E   6  LEU HD13', -0.455, (-3.521, -10.547, 41.505)), (' B 207  TRP  CE2', ' B 288  GLU  HB2', -0.452, (16.621, -13.735, 18.631)), (' B 234  ALA  HB1', ' B 239  TYR  HB2', -0.451, (29.053, -16.369, 10.599)), (' B 297  VAL  O  ', ' B 298  ARG  C  ', -0.451, (18.891, -7.997, 32.472)), (' B  12  LYS  HZ3', ' B 155  ASP  HA ', -0.449, (19.015, 7.85, 36.439)), (' B   1  SER  OG ', ' B   2  GLY  N  ', -0.449, (8.864, -15.172, 29.442)), (' A  16  CYS  SG ', ' A  99  PRO  HD3', -0.443, (0.798, 11.101, 35.06)), (' A   6  MET  HE2', ' B 126  TYR  CD2', -0.442, (10.735, 4.467, 16.425)), (' B  51  ASN  HA ', ' B  52  PRO  HD3', -0.442, (28.253, 19.846, 0.402)), (' B 136  ILE  O  ', ' B 136  ILE HG13', -0.439, (19.45, 3.216, 11.052)), (' B 164  HIS  CD2', ' B 175  THR HG23', -0.437, (26.075, 13.102, 12.532)), (' A   1  SER  O  ', ' B 139  SER  HA ', -0.436, (12.835, 4.557, 9.064)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.435, (0.876, -10.351, 32.025)), (' B 106  ILE  O  ', ' B 106  ILE HD12', -0.434, (29.499, 2.464, 18.578)), (' A 290  GLU  HB2', ' A 530  HOH  O  ', -0.434, (3.745, -7.329, 15.271)), (' A 281  ILE  O  ', ' A 282  LEU  C  ', -0.431, (10.588, -7.174, 6.589)), (' A 189  GLN HE21', ' E   6  LEU  H  ', -0.431, (-0.999, -15.71, 40.723)), (' A 293  PRO  O  ', ' A 297  VAL HG23', -0.43, (-2.234, 3.514, 8.988)), (' A 135  THR  C  ', ' A 136  ILE HD12', -0.43, (-2.937, -10.011, 25.886)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.43, (8.687, -5.349, 27.69)), (' B 222  ARG  HD2', ' B 223  PHE  CZ ', -0.429, (28.451, -35.953, 20.452)), (' A 169  THR  OG1', ' A 171  VAL HG22', -0.424, (-0.39, -17.871, 27.511)), (' A  66  PHE  HB2', ' A  77  VAL HG21', -0.423, (-1.749, 2.282, 51.904)), (' A 153  ASP  O  ', ' A 154  TYR  CB ', -0.421, (-2.723, 14.379, 21.977)), (' B  66  PHE  CE1', ' B  87  LEU HD21', -0.419, (23.116, 27.363, 14.302)), (' B  53  ASN  ND2', ' B  56  ASP  HB2', -0.418, (33.717, 28.15, 3.826)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.416, (9.329, 3.013, 16.224)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.415, (1.006, 0.162, 28.062)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.415, (5.285, -8.928, 34.864)), (' B 270  GLU  HG2', ' B 453  HOH  O  ', -0.413, (26.302, -28.63, 13.095)), (' B  41  HIS  CD2', ' B  41  HIS  O  ', -0.412, (20.929, 20.833, 7.692)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.411, (10.484, 3.586, 38.591)), (' A  49  MET  CE ', ' A 188  ARG  HA ', -0.409, (-5.557, -15.191, 43.026)), (' B   5  LYS  NZ ', ' B 428  HOH  O  ', -0.408, (15.159, -6.759, 15.62)), (' A  66  PHE  CE1', ' A  87  LEU HD21', -0.406, (-4.896, -2.463, 49.087)), (' A 118  TYR  CZ ', ' A 141  LEU  HB2', -0.406, (10.266, -8.727, 35.853)), (' A  25  THR HG22', ' A  42  VAL HG23', -0.405, (1.356, -6.483, 47.155)), (' A 281  ILE  O  ', ' A 284  SER  N  ', -0.405, (10.419, -8.867, 7.231)), (' B 142  ASN  ND2', ' B 430  HOH  O  ', -0.402, (14.045, 15.984, 5.737)), (' B  40  ARG  CZ ', ' B  54  TYR  CD2', -0.401, (29.942, 20.41, 7.945)), (' E   5  VAL  O  ', ' E   5  VAL HG12', -0.401, (2.371, -15.152, 38.681)), (' A 212  VAL HG11', ' A 259  ILE  CD1', -0.4, (1.596, -1.256, -2.802))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
