# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   5 ', 'LYS', 0.039125622525325005, (-0.394, 13.960999999999997, 9.579999999999997)), ('A', '   9 ', 'PRO', 0.00301368, (-8.642, 24.551, 13.166)), ('A', '  51 ', 'ASN', 0.0406958792190048, (-2.586, 1.3429999999999995, 43.41099999999999)), ('A', ' 156 ', 'CYS', 0.03771276493624017, (-23.858, 20.275999999999993, 17.42899999999999)), ('A', ' 213 ', 'ILE', 0.03008712599745682, (5.246, 8.918, -4.740999999999998)), ('A', ' 214 ', 'ASN', 0.03194826747455817, (8.144999999999998, 10.866, -3.215)), ('A', ' 227 ', 'LEU', 0.03840183916293424, (-1.5130000000000003, -13.359, 0.432)), ('A', ' 255 ', 'ALA', 0.031658523287720244, (-3.581, 2.711, -9.175)), ('A', ' 297 ', 'VAL', 0.021642095780961396, (-4.980000000000001, 9.808999999999996, 0.16799999999999995))]
data['omega'] = [('A', ' 156 ', 'CYS', None, (-23.911, 21.173, 16.275))]
data['rota'] = [('A', '  27 ', 'LEU', 0.0003042758888755653, (-3.4819999999999993, 18.183, 32.164)), ('A', '  52 ', 'PRO', 0.11285739815070388, (-5.062000000000002, 4.167999999999998, 44.064)), ('A', '  87 ', 'LEU', 0.00030116052038958236, (-13.081, 14.287999999999997, 37.69)), ('A', ' 125 ', 'VAL', 0.11773503137099141, (-7.237, 18.799999999999994, 15.329)), ('A', ' 131 ', 'ARG', 0.16782414359504108, (-8.15, 0.302, 16.664999999999992)), ('A', ' 153 ', 'ASP', 0.0007900200191004333, (-22.74, 17.779, 12.743)), ('A', ' 171 ', 'VAL', 0.036176730489505794, (-0.516, 3.656999999999999, 21.758)), ('A', ' 196 ', 'THR', 0.08004202601288975, (-1.2670000000000003, -3.6789999999999994, 22.006)), ('A', ' 200 ', 'ILE', 0.10893352999927434, (-0.774, -2.523, 11.724)), ('A', ' 227 ', 'LEU', 0.035819785982668745, (-1.5130000000000003, -13.359, 0.432)), ('A', ' 264 ', 'MET', 0.0, (4.377, -4.0219999999999985, -2.021)), ('A', ' 268 ', 'LEU', 0.015499126422363754, (7.671000000000001, -5.225999999999998, 2.913))]
data['cbeta'] = []
data['probe'] = [(' A 298  ARG  HG3', ' A 299  GLN HE21', -1.056, (-1.269, 13.589, 1.007)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.867, (-2.667, 5.942, 39.908)), (' A 145  CYS  HA ', ' A 163  HIS  HD2', -0.865, (-3.536, 13.338, 27.3)), (' A 298  ARG  HG3', ' A 299  GLN  NE2', -0.845, (-1.459, 14.581, 0.145)), (' A  44  CYS  SG ', ' A  49  MET  HE3', -0.809, (-3.693, 8.331, 40.031)), (' A  27  LEU  N  ', ' A  27  LEU HD12', -0.784, (-2.725, 18.356, 34.03)), (' A 227  LEU HD22', ' A 231  ASN HD21', -0.746, (-2.986, -13.246, 4.04)), (' A 264  MET  HA ', ' A 264  MET  HE2', -0.726, (5.667, -3.091, -2.289)), (' A 145  CYS  HA ', ' A 163  HIS  CD2', -0.724, (-3.125, 12.551, 27.006)), (' A   8  PHE  HB3', ' A   9  PRO  HD2', -0.715, (-8.605, 22.081, 10.255)), (' A 200  ILE HG23', ' A 289  ASP  HB2', -0.709, (0.77, 0.626, 11.275)), (' A  27  LEU HD11', ' A  42  VAL HG23', -0.705, (-4.101, 16.258, 36.614)), (' A   5  LYS  C  ', ' A 298  ARG HH12', -0.701, (-0.707, 14.703, 7.68)), (' A 225  THR HG22', ' A 266  ALA  HB2', -0.698, (5.488, -10.334, -3.208)), (' A 298  ARG  CG ', ' A 299  GLN HE21', -0.663, (-0.969, 13.752, 1.428)), (' A 297  VAL  O  ', ' A 297  VAL HG12', -0.655, (-6.52, 10.795, -1.198)), (' A 203  ASN  OD1', ' A 292  THR  HA ', -0.648, (-3.071, 3.139, 8.06)), (' A  27  LEU  CD1', ' A  42  VAL HG23', -0.645, (-3.945, 16.826, 35.91)), (' A 217  ARG  HA ', ' A 220  LEU HD13', -0.644, (10.861, 2.534, -4.586)), (' A  90  LYS  HE3', ' A 384  HOH  O  ', -0.641, (-22.614, 22.962, 36.299)), (' A 264  MET  CE ', ' A 264  MET  HA ', -0.639, (5.653, -2.431, -2.6)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.638, (1.164, -8.688, 16.846)), (' A 137  LYS  HG3', ' A 290  GLU  HB2', -0.638, (-0.14, 5.296, 14.526)), (' A 293  PRO  O  ', ' A 297  VAL HG23', -0.636, (-5.144, 7.029, 1.275)), (' A  97  LYS  HB2', ' A  97  LYS  NZ ', -0.634, (-15.069, 29.976, 23.89)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.628, (-6.585, 0.063, 31.871)), (' A  55  GLU  O  ', ' A  59  ILE HG12', -0.615, (-12.528, 10.082, 48.836)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.603, (13.624, 2.814, 4.432)), (' A 225  THR  O  ', ' A 262  LEU HD23', -0.602, (1.111, -12.37, -4.516)), (' A 111  THR HG23', ' A 127  GLN  HG2', -0.591, (-10.862, 10.829, 11.039)), (' A  49  MET  HE1', ' A  54  TYR  OH ', -0.588, (-5.385, 6.842, 38.597)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.586, (-14.702, 9.508, 32.449)), (' A 227  LEU HD22', ' A 231  ASN  ND2', -0.574, (-2.474, -13.29, 3.739)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.568, (-15.279, 9.684, 32.207)), (' A 209  TYR  CZ ', ' A 264  MET  HG3', -0.567, (2.072, -0.932, -2.919)), (' A 296  VAL  C  ', ' A 298  ARG  H  ', -0.567, (-3.68, 11.094, 1.206)), (' A 259  ILE  N  ', ' A 259  ILE HD12', -0.565, (3.326, 0.537, -9.053)), (' A 166  GLU  HG2', ' A 172  HIS  CD2', -0.563, (-0.086, 9.257, 25.034)), (' A 166  GLU  HG2', ' A 172  HIS  HD2', -0.56, (-0.552, 9.081, 25.455)), (' A  26  THR  C  ', ' A  27  LEU HD12', -0.558, (-2.339, 18.021, 34.016)), (' A  61  LYS  HE2', ' A 359  HOH  O  ', -0.554, (-5.164, 13.325, 47.389)), (' A   4  ARG  HG2', ' A   4  ARG  O  ', -0.545, (2.806, 13.447, 7.207)), (' A  13  VAL HG21', ' A 150  PHE  CZ ', -0.533, (-13.401, 19.917, 17.547)), (' A  27  LEU  CD1', ' A  27  LEU  N  ', -0.531, (-3.552, 17.642, 34.17)), (' A   5  LYS  CA ', ' A 298  ARG HH12', -0.528, (-0.929, 13.831, 8.458)), (' A 100  LYS  HG3', ' A 341  HOH  O  ', -0.523, (-24.089, 25.169, 18.478)), (' A   8  PHE  HB3', ' A   9  PRO  CD ', -0.517, (-8.436, 22.695, 10.681)), (' A 297  VAL  C  ', ' A 299  GLN  H  ', -0.508, (-4.088, 11.874, -0.957)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.504, (-3.448, -5.833, -2.102)), (' A  43  ILE HG22', ' A  66  PHE  HE1', -0.504, (-7.821, 16.253, 41.717)), (' A 217  ARG  O  ', ' A 220  LEU HD13', -0.501, (11.229, 1.068, -4.663)), (' A 242  LEU HD12', ' A 246  HIS  HB2', -0.5, (-5.125, -6.058, 3.797)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.496, (-16.106, 26.975, 29.492)), (' A 213  ILE HG23', ' A 257  THR HG22', -0.494, (2.894, 6.124, -5.377)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.494, (-2.391, 6.371, 39.926)), (' A   5  LYS  HA ', ' A 298  ARG HH12', -0.492, (-0.928, 13.933, 7.894)), (' A 181  PHE  HB2', ' A 330  HOH  O  ', -0.491, (-13.101, 2.269, 31.909)), (' A 190  THR  N  ', ' A 377  HOH  O  ', -0.491, (-1.318, -0.361, 35.127)), (' A 213  ILE  O  ', ' A 213  ILE HG13', -0.486, (4.341, 10.184, -3.262)), (' A 100  LYS  O  ', ' A 156  CYS  HA ', -0.484, (-23.464, 20.955, 18.857)), (' A 193  ALA  O  ', ' A 196  THR HG22', -0.48, (0.236, -3.469, 24.01)), (' A 269  LYS  O  ', ' A 273  GLN  HG3', -0.467, (11.044, -10.551, 5.127)), (' A  97  LYS  HB2', ' A  97  LYS  HZ3', -0.465, (-15.065, 29.455, 23.868)), (' A  13  VAL HG11', ' A 150  PHE  CE2', -0.463, (-12.851, 19.405, 19.331)), (' A  44  CYS  HB3', ' A  48  ASP  HB2', -0.463, (-1.91, 9.06, 42.306)), (' A 169  THR  OG1', ' A 196  THR  CG2', -0.462, (0.953, -0.739, 23.464)), (' A   6  MET  HE3', ' A   8  PHE  HZ ', -0.455, (-6.491, 18.534, 5.411)), (' A  68  VAL  HB ', ' A  75  LEU  HB2', -0.454, (-11.16, 27.075, 36.229)), (' A   9  PRO  HG2', ' A  10  SER  H  ', -0.45, (-11.027, 24.873, 12.513)), (' A 207  TRP  CZ3', ' A 287  LEU  HA ', -0.449, (8.29, 2.526, 7.4)), (' A 175  THR  OG1', ' A 179  GLY  C  ', -0.448, (-14.788, 6.949, 31.184)), (' A  21  THR  HA ', ' A  25  THR  O  ', -0.448, (-2.217, 19.961, 37.491)), (' A 219  PHE  HE1', ' A 264  MET  HE1', -0.444, (7.594, -0.001, -1.364)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.444, (3.038, -9.188, 1.595)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.442, (-9.739, -2.499, 1.85)), (' A 217  ARG  CA ', ' A 220  LEU HD13', -0.44, (11.323, 2.293, -4.597)), (' A 114  VAL  O  ', ' A 125  VAL  HA ', -0.436, (-7.244, 17.371, 16.771)), (' A 185  PHE  HA ', ' A 192  GLN  NE2', -0.432, (-5.985, -0.773, 30.753)), (' A 200  ILE  O  ', ' A 200  ILE HG13', -0.431, (-1.241, -0.965, 9.878)), (' A 286  ILE HG22', ' A 287  LEU  N  ', -0.43, (9.371, 1.852, 11.454)), (' A 169  THR  OG1', ' A 196  THR HG23', -0.428, (0.97, -0.7, 23.182)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.425, (-6.108, -7.215, 5.596)), (' A  27  LEU  CD1', ' A  42  VAL  CG2', -0.423, (-4.427, 16.661, 36.416)), (' A 296  VAL  C  ', ' A 298  ARG  N  ', -0.422, (-3.728, 11.005, 0.958)), (' A 104  VAL  O  ', ' A 160  CYS  HA ', -0.421, (-18.351, 10.115, 22.65)), (' A 296  VAL  O  ', ' A 298  ARG  N  ', -0.418, (-3.361, 11.333, 0.718)), (' A 242  LEU HD12', ' A 246  HIS  CB ', -0.412, (-5.038, -5.709, 4.062)), (' A 111  THR HG23', ' A 127  GLN  CG ', -0.411, (-10.821, 10.661, 10.798)), (' A   5  LYS  HA ', ' A 298  ARG  NH1', -0.408, (-0.919, 13.619, 7.752)), (' A 164  HIS  CD2', ' A 175  THR HG22', -0.408, (-10.663, 9.389, 29.609)), (' A  85  CYS  HB2', ' A 179  GLY  O  ', -0.403, (-13.774, 6.726, 33.333)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.401, (-3.514, 8.119, 24.79)), (' A  57  LEU  O  ', ' A  61  LYS  HG2', -0.401, (-8.132, 14.0, 47.361)), (' A 111  THR  CG2', ' A 127  GLN  CG ', -0.401, (-10.971, 10.745, 10.584)), (' A  76  ARG  HB2', ' A  76  ARG  NH1', -0.4, (-12.045, 32.091, 41.805))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
