# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.02300873573458578, (8.342, 33.744, 3.6700000000000004)), ('A', ' 192 ', 'GLN', 0.006861298019661587, (22.861, 5.083999999999999, 24.275)), ('A', ' 215 ', 'GLY', 0.015205079490044607, (-2.522, 41.034, 29.954000000000004)), ('A', ' 216 ', 'ASP', 0.021082819400798494, (-1.381, 38.632, 32.668))]
data['omega'] = []
data['rota'] = [('A', '  50 ', 'LEU', 0.20184562084326163, (22.343, -4.055, 17.118)), ('A', '  53 ', 'ASN', 0.06672769527726576, (28.453, -1.772, 9.442)), ('A', '  77 ', 'VAL', 0.0069122041307679355, (16.101, 4.9, -8.241)), ('A', '  90 ', 'LYS', 0.013809919629407632, (19.052, 9.473, -7.029000000000001)), ('A', ' 130 ', 'MET', 0.21070361958400383, (15.326000000000011, 20.884, 20.143)), ('A', ' 165 ', 'MET', 0.0012936233175688027, (15.215000000000005, 6.805999999999999, 16.136)), ('A', ' 256 ', 'GLN', 0.271186579704591, (7.663, 46.77400000000001, 23.334)), ('A', ' 268 ', 'LEU', 0.008708836424412312, (11.398999999999997, 34.288, 36.833)), ('A', ' 279 ', 'ARG', 0.020431949603211517, (-1.9040000000000006, 30.776, 40.254))]
data['cbeta'] = []
data['probe'] = [(' A 225 BTHR HG22', ' A 226 BTHR  H  ', -0.987, (21.042, 39.118, 38.235)), (' A 279  ARG  HB3', ' A 279  ARG HH11', -0.92, (-1.755, 33.771, 39.648)), (' A 118  TYR  HD1', ' A 123 BSER  HG ', -0.853, (1.451, 9.327, 9.568)), (' A  49  MET  HA ', ' A  49  MET  HE2', -0.801, (21.308, -1.553, 12.871)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.768, (15.936, 10.23, 23.433)), (' A 225 BTHR HG22', ' A 226  THR  N  ', -0.75, (20.337, 39.35, 38.074)), (' A 165 AMET  HE1', ' A 187  ASP  HA ', -0.745, (20.795, 5.57, 14.682)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.733, (6.292, 1.973, 3.667)), (' A 270  GLU  HG2', ' A 274  ASN HD22', -0.705, (8.882, 34.291, 45.138)), (' A 130 AMET  HA ', ' A 130 AMET  HE3', -0.667, (15.255, 19.258, 19.494)), (' A 167  LEU HD12', ' A 171  VAL  CG2', -0.657, (15.926, 9.824, 23.665)), (' A 270  GLU  HG2', ' A 274  ASN  ND2', -0.654, (9.451, 33.975, 44.953)), (' A   6  MET  HE3', ' A2206  HOH  O  ', -0.653, (3.59, 30.563, 12.801)), (' A 217  ARG  HD3', ' A 220  LEU HD12', -0.653, (3.959, 43.391, 34.297)), (' A  44  CYS  SG ', ' A  49  MET  HE3', -0.652, (20.857, -0.344, 10.232)), (' A  46  ALA  HB3', ' A2032  HOH  O  ', -0.65, (15.579, -8.049, 12.848)), (' A 225 BTHR  CG2', ' A 226 BTHR  H  ', -0.646, (20.27, 39.136, 39.234)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.646, (1.81, 31.172, 35.68)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.601, (12.741, 10.8, 16.927)), (' A  44  CYS  CB ', ' A  49  MET  HE3', -0.594, (20.179, -1.021, 10.203)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.581, (8.176, 8.392, 14.516)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.58, (5.684, 1.787, 3.117)), (' A 165 BMET  SD ', ' A 187  ASP  HA ', -0.579, (20.24, 5.776, 15.175)), (' A  53  ASN  C  ', ' A  53  ASN HD22', -0.578, (29.254, -0.995, 7.416)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.577, (15.282, 24.821, 23.225)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.572, (6.61, 2.427, 3.44)), (' A 130 AMET  HE3', ' A 136  ILE HD13', -0.571, (15.425, 18.533, 19.481)), (' A 140  PHE  HA ', ' A2111  HOH  O  ', -0.564, (5.418, 10.263, 16.05)), (' A  55  GLU  O  ', ' A  59  ILE HD13', -0.557, (29.615, -0.945, 1.248)), (' A 279  ARG  CB ', ' A 279  ARG HH11', -0.549, (-1.117, 33.198, 40.523)), (' A 118  TYR  CE2', ' A 141  LEU  HB2', -0.545, (3.26, 6.468, 13.542)), (' A 225 BTHR HG23', ' A 229  ASP  OD2', -0.543, (20.106, 37.878, 41.284)), (' A   5  LYS  HD3', ' A2201  HOH  O  ', -0.534, (6.039, 23.051, 20.975)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.532, (21.577, 13.094, 7.313)), (' A 209  TYR  O  ', ' A 213  ILE HG12', -0.531, (4.741, 39.759, 26.334)), (' A   5  LYS  HG2', ' A 127  GLN  HB3', -0.518, (3.575, 24.155, 18.697)), (' A  59  ILE HD12', ' A2046  HOH  O  ', -0.513, (28.499, -0.201, -1.188)), (' A  83  GLN  NE2', ' A 178  GLU  HA ', -0.509, (23.314, 16.428, 4.006)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.5, (20.945, 37.399, 22.324)), (' A  49  MET  HE1', ' A  54  TYR  OH ', -0.5, (21.206, 1.765, 11.275)), (' A 217  ARG  HB2', ' A 220  LEU HD12', -0.497, (3.943, 42.215, 34.42)), (' A 163  HIS  HE1', ' A 172  HIS  HB3', -0.494, (12.551, 10.235, 17.407)), (' A 279  ARG  HB3', ' A 279  ARG  NH1', -0.492, (-1.94, 33.714, 39.895)), (' A  41  HIS  HE1', ' A 164  HIS  O  ', -0.473, (15.073, 5.949, 12.616)), (' A 118  TYR  HE2', ' A 141  LEU  HB2', -0.472, (4.032, 6.522, 13.672)), (' A 294  PHE  HB3', ' A2204  HOH  O  ', -0.464, (11.874, 34.161, 14.543)), (' A 130 AMET  HE3', ' A 136  ILE  CD1', -0.456, (15.312, 17.918, 19.202)), (' A  49  MET  CE ', ' A  49  MET  HA ', -0.449, (20.663, -1.208, 12.608)), (' A  83  GLN HE21', ' A 178  GLU  HA ', -0.448, (23.609, 16.164, 4.349)), (' A  58  LEU HD11', ' A  80  HIS  HD2', -0.437, (23.379, 1.958, -1.595)), (' A 191  ALA  O  ', ' A 192  GLN  C  ', -0.436, (21.957, 4.796, 25.869)), (' A 236  LYS  HB2', ' A 236  LYS  HE2', -0.434, (20.167, 27.781, 42.364)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.433, (10.948, 24.549, 20.775)), (' A 169  THR HG23', ' A2123  HOH  O  ', -0.432, (16.662, 6.618, 27.004)), (' A  67  LEU  HG ', ' A2055  HOH  O  ', -0.428, (7.426, 0.92, -3.769)), (' A  24  THR  O  ', ' A  24  THR HG22', -0.41, (9.504, -4.891, 7.745)), (' A 217  ARG  HB2', ' A 220  LEU  CD1', -0.409, (4.08, 41.991, 34.41)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.407, (19.558, 21.052, 33.896)), (' A  75  LEU  HB3', ' A2073  HOH  O  ', -0.405, (11.252, 8.359, -9.371)), (' A 277  ASN  C  ', ' A 279  ARG  H  ', -0.402, (-0.943, 29.291, 42.686)), (' A 213  ILE  CD1', ' A 257  THR HG22', -0.401, (4.601, 42.789, 25.243)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.4, (22.022, 36.714, 33.997))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
