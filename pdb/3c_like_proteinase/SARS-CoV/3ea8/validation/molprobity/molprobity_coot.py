# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   6 ', 'MET', 0.2686440040779389, (3.525999999999998, -36.995, 3.7190000000000003)), ('A', '  61 ', 'LYS', 0.25454141287094506, (-32.857, -56.631, 8.573)), ('A', '  78 ', 'ILE', 0.13864055684220636, (-23.161000000000005, -64.511, 10.058)), ('A', '  86 ', 'LEU', 0.10913181468290173, (-21.119, -48.093, 13.069)), ('A', '  88 ', 'ARG', 0.15116202521705827, (-20.143, -54.58199999999999, 12.75)), ('A', '  94 ', 'SER', 0.18013512435133813, (-10.877, -64.088, 8.759)), ('A', ' 106 ', 'ILE', 0.0969073004429785, (-7.590999999999999, -38.89800000000001, 17.782)), ('A', ' 256 ', 'GLN', 0.06027453658763109, (17.831000000000007, -28.87, 17.935)), ('A', ' 282 ', 'LEU', 0.0, (8.862, -23.775, 2.97)), ('A', ' 298 ', 'ARG', 0.11025971062290552, (9.221, -37.769, 11.574)), ('A', ' 304 ', 'THR', 0.02636943763730312, (19.448000000000004, -28.93899999999999, 11.282)), ('A', ' 306 ', 'GLN', 0.018973835930224996, (23.47200000000001, -25.181, 10.183))]
data['cbeta'] = [('A', ' 306 ', 'GLN', ' ', 0.27473453883679283, (23.906, -24.165, 9.104))]
data['probe'] = [(' A   4  ARG  H  ', ' A 299  GLN HE22', -0.977, (7.31, -33.084, 3.022)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.866, (-20.901, -51.296, -4.097)), (' A 305  PHE  O  ', ' A 306  GLN  HG3', -0.745, (21.691, -24.115, 8.098)), (' A 256  GLN  O  ', ' A 304  THR HG21', -0.745, (19.507, -27.941, 15.462)), (' A 198  THR HG22', ' A 333  HOH  O  ', -0.726, (-12.198, -20.051, 15.461)), (' A 226  THR HG22', ' A 228  ASN  H  ', -0.666, (2.371, -14.179, 28.455)), (' A   4  ARG  H  ', ' A 299  GLN  NE2', -0.664, (8.324, -33.116, 3.489)), (' A  67  LEU HD21', ' A  69  GLN HE21', -0.649, (-22.118, -57.747, -4.345)), (' A 226  THR HG22', ' A 228  ASN  N  ', -0.636, (1.73, -14.188, 28.249)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.619, (-24.666, -34.763, 12.7)), (' A   4  ARG  N  ', ' A 299  GLN HE22', -0.595, (7.971, -32.59, 3.234)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.583, (-9.791, -26.188, 10.821)), (' A 131  ARG HH22', ' A 289  ASP  CG ', -0.579, (-4.676, -25.485, 10.399)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.579, (-20.357, -51.273, -4.516)), (' A 165  MET  HE1', ' A 192  GLN  OE1', -0.578, (-25.239, -34.333, 9.585)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.568, (-24.464, -49.348, 9.613)), (' A  19  GLN HE21', ' A  26  THR  CG2', -0.552, (-20.46, -50.82, -3.416)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.52, (-10.58, -59.929, 6.113)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.511, (-24.417, -45.45, 14.093)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.494, (-2.983, -49.271, 1.529)), (' A 154  TYR  CD1', ' A 155  ASP  OD1', -0.479, (4.2, -52.969, 14.783)), (' A  45  THR  O  ', ' A  48  ASP  HB2', -0.478, (-33.295, -43.328, 3.84)), (' A 154  TYR  HD1', ' A 155  ASP  H  ', -0.456, (5.231, -52.306, 14.721)), (' A 282  LEU  HA ', ' A 282  LEU HD12', -0.455, (10.307, -24.642, 2.697)), (' A 154  TYR  HD1', ' A 155  ASP  OD1', -0.448, (4.434, -53.053, 14.673)), (' A  64  HIS  CD2', ' A  64  HIS  H  ', -0.442, (-29.543, -62.729, 6.088)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.441, (-23.292, -48.187, 4.564)), (' A 131  ARG  NH2', ' A 289  ASP  OD1', -0.441, (-4.881, -26.52, 9.894)), (' A 131  ARG  CD ', ' A 197  ASP  OD1', -0.433, (-9.843, -26.156, 10.569)), (' A 233  VAL HG21', ' A 269  LYS  HE3', -0.431, (1.52, -10.366, 19.632)), (' A  49  MET  HE3', ' A 188  ARG  HA ', -0.423, (-28.854, -39.182, 7.636)), (' A   5  LYS  HE2', ' A 290  GLU  HB2', -0.415, (-1.509, -29.853, 6.315)), (' A  55  GLU  CD ', ' A  55  GLU  H  ', -0.41, (-32.073, -47.019, 16.661)), (' A 266  ALA  O  ', ' A 269  LYS  HG2', -0.41, (5.914, -12.357, 17.488)), (' A 202  LEU HD13', ' A 246  HIS  HB3', -0.409, (2.281, -26.444, 21.401)), (' A  95  ASN  HA ', ' A  96  PRO  HD3', -0.408, (-9.193, -62.349, 5.187)), (' A 256  GLN  O  ', ' A 304  THR  CG2', -0.408, (19.341, -28.228, 15.004))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
