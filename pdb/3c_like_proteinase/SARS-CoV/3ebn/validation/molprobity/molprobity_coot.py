# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 222 ', 'ARG', 0.04923456160194366, (9.541, -11.374000000000002, -5.672)), ('D', ' 222 ', 'ARG', 0.03723753622821849, (5.510999999999998, -7.535999999999999, -8.254))]
data['omega'] = []
data['rota'] = [('A', ' 228 ', 'ASN', 0.16411130226552403, (32.55100000000001, -0.7910000000000004, 2.224)), ('A', ' 236 ', 'LYS', 0.21987271649107093, (24.018, -5.3900000000000015, -5.933)), ('A', ' 240 ', 'GLU', 0.004089814890568872, (33.821, -7.555000000000001, -8.439)), ('A', ' 249 ', 'ILE', 0.2127705711000701, (46.82600000000001, 0.17900000000000027, -7.143)), ('A', ' 259 ', 'ILE', 0.0, (40.489, 13.090000000000003, -7.878999999999998)), ('A', ' 268 ', 'LEU', 0.0, (30.672999999999995, 4.936, -10.144)), ('A', ' 279 ', 'ARG', 0.20667443068153887, (24.906, 10.437000000000003, -21.624)), ('B', ' 227 ', 'LEU', 0.035195436259029066, (17.471000000000004, -8.976000000000004, 8.185)), ('B', ' 268 ', 'LEU', 0.0, (9.039, -2.776, 2.302)), ('B', ' 269 ', 'LYS', 0.022815944233860505, (12.515, -2.808, 0.7629999999999999)), ('B', ' 286 ', 'ILE', 0.09704322042916896, (2.551000000000001, 7.669000000000002, 2.5949999999999998)), ('C', ' 222 ', 'ARG', 0.0, (25.92399999999999, 17.107, -9.919)), ('C', ' 227 ', 'LEU', 0.011469127380659064, (10.90499999999999, 19.97200000000001, -14.663)), ('C', ' 268 ', 'LEU', 0.01964714965206606, (15.67399999999999, 16.496, -4.149)), ('C', ' 286 ', 'ILE', 0.06937935754682409, (12.965000000000002, 13.284000000000008, 7.281)), ('D', ' 222 ', 'ARG', 0.0, (5.510999999999998, -7.535999999999999, -8.254)), ('D', ' 223 ', 'PHE', 0.27899534658651387, (3.587999999999997, -5.997, -11.139)), ('D', ' 227 ', 'LEU', 0.009013459883554438, (5.640999999999994, 0.24399999999999977, -22.555)), ('D', ' 228 ', 'ASN', 0.07002183459933366, (5.970999999999989, 3.9029999999999987, -21.642)), ('D', ' 236 ', 'LYS', 0.0, (18.004999999999992, 5.880000000000004, -17.773)), ('D', ' 268 ', 'LEU', 0.0005380944155483511, (13.692999999999994, -6.376999999999997, -16.612)), ('D', ' 269 ', 'LYS', 0.1097942596944388, (12.839999999999996, -2.936, -15.229999999999999)), ('D', ' 286 ', 'ILE', 0.050892505998322866, (25.205, -9.747999999999998, -16.747))]
data['cbeta'] = []
data['probe'] = [(' C 223  PHE  O  ', ' C 224  THR HG22', -0.938, (22.612, 18.312, -15.242)), (' C 222  ARG  HG3', ' C 222  ARG HH11', -0.883, (24.323, 20.011, -9.608)), (' B 226  THR HG23', ' B 229  ASP  H  ', -0.856, (19.773, -9.168, 4.653)), (' C 222  ARG  CG ', ' C 222  ARG HH11', -0.815, (24.949, 20.383, -10.091)), (' A 278  GLY  H  ', ' D 238  ASN  ND2', -0.807, (21.345, 7.207, -21.352)), (' A 278  GLY  H  ', ' D 238  ASN HD21', -0.787, (21.819, 7.463, -21.4)), (' C 276  MET  HE3', ' C 281  ILE HG13', -0.764, (18.105, 15.335, 4.558)), (' B 238  ASN HD21', ' C 278  GLY  H  ', -0.749, (19.774, 8.687, 6.944)), (' B 238  ASN  ND2', ' C 278  GLY  H  ', -0.749, (20.247, 7.982, 6.512)), (' D 231  ASN  O  ', ' D 235  MET  HG3', -0.746, (13.428, 5.0, -22.382)), (' B 233  VAL HG21', ' B 269  LYS  HD3', -0.743, (16.856, -2.844, -0.713)), (' A 231  ASN  O  ', ' A 235  MET  HG3', -0.721, (29.282, -4.897, -3.431)), (' A 226  THR HG22', ' A 228  ASN  H  ', -0.714, (33.554, 1.642, 2.808)), (' D 236  LYS  HB2', ' D 236  LYS  NZ ', -0.69, (16.174, 6.254, -16.038)), (' D 218  TRP  HB2', ' D 223  PHE  HE2', -0.685, (-0.3, -4.111, -6.579)), (' B 226  THR  CG2', ' B 229  ASP  H  ', -0.684, (20.502, -9.206, 4.181)), (' D 236  LYS  HB2', ' D 236  LYS  HZ2', -0.661, (16.019, 6.833, -16.377)), (' C 270  GLU  OE1', ' C 274  ASN  ND2', -0.651, (22.125, 9.708, -5.846)), (' D 276  MET  HE3', ' D 281  ILE HG13', -0.639, (20.731, -12.296, -14.065)), (' B 276  MET  HE3', ' B 281  ILE HG13', -0.632, (0.941, 2.065, -0.704)), (' A 270  GLU  OE1', ' A 274  ASN  ND2', -0.625, (21.916, 9.158, -8.959)), (' A 259  ILE  O  ', ' A 259  ILE HG13', -0.617, (40.129, 10.658, -8.796)), (' A 200  ILE  H  ', ' A 200  ILE HD12', -0.615, (3.177, 17.747, 0.575)), (' D 218  TRP  HB2', ' D 223  PHE  CE2', -0.615, (-0.167, -3.912, -7.235)), (' D 270  GLU  OE2', ' D 274  ASN  ND2', -0.611, (13.646, -3.298, -8.112)), (' A 296  VAL HG13', ' C 210  ALA  HB2', -0.61, (42.223, 5.476, -19.385)), (' D 286  ILE  H  ', ' D 286  ILE HD13', -0.604, (26.528, -11.817, -17.459)), (' B 245  ASP  O  ', ' B 249  ILE HG12', -0.601, (10.545, -8.463, 18.219)), (' B 243  THR  H  ', ' B 246  HIS  CD2', -0.597, (13.909, -4.396, 14.967)), (' A 203  ASN  ND2', ' C 292  THR  HA ', -0.59, (5.509, 25.06, 1.13)), (' D 245  ASP  O  ', ' D 249  ILE HG12', -0.587, (7.297, -6.306, -32.974)), (' A 200  ILE  N  ', ' A 200  ILE HD12', -0.582, (2.976, 17.514, 0.332)), (' A 236  LYS  HG3', ' D 277  ASN HD21', -0.573, (21.236, -5.941, -4.547)), (' A 293  PRO  O  ', ' A 297  VAL HG23', -0.559, (47.038, 2.99, -16.044)), (' C 293  PRO  O  ', ' C 297  VAL HG23', -0.552, (9.144, 31.769, 1.305)), (' A 278  GLY  N  ', ' D 238  ASN HD21', -0.546, (22.068, 7.692, -20.891)), (' D 288  GLU  HG2', ' D 291  PHE  HE1', -0.545, (23.908, -13.96, -24.428)), (' A 243  THR  H  ', ' A 246  HIS  CD2', -0.545, (39.534, -4.552, -5.285)), (' A 210  ALA  HB2', ' C 296  VAL  CG1', -0.544, (13.009, 27.842, 4.157)), (' D 226  THR  HB ', ' D 229  ASP  H  ', -0.543, (4.86, 2.417, -19.37)), (' A 257  THR HG22', ' C 213  ILE  CD1', -0.543, (43.523, 12.162, -15.549)), (' C 243  THR  H  ', ' C 246  HIS  CD2', -0.542, (3.764, 22.886, -9.225)), (' C 227  LEU HD22', ' C 231  ASN  ND2', -0.536, (7.478, 18.922, -13.487)), (' C 222  ARG  CG ', ' C 222  ARG  NH1', -0.532, (24.791, 20.928, -10.048)), (' B 279  ARG  NH1', ' D 223  PHE  CZ ', -0.528, (-0.418, -2.939, -9.322)), (' B 238  ASN HD21', ' C 278  GLY  N  ', -0.526, (20.556, 8.64, 6.526)), (' A 240  GLU  HG2', ' A 241  PRO  O  ', -0.525, (36.375, -6.48, -6.848)), (' B 222  ARG HH21', ' B 267  ALA  HA ', -0.522, (7.807, -5.85, -1.953)), (' D 288  GLU  HG2', ' D 291  PHE  CE1', -0.515, (23.83, -13.66, -24.754)), (' D 260  ALA  HB3', ' D 263  ASP  OD2', -0.512, (2.028, -10.139, -18.297)), (' D 294  PHE  O  ', ' D 298  ARG  HG3', -0.51, (16.002, -18.163, -34.02)), (' B 200  ILE  H  ', ' B 200  ILE HD12', -0.51, (21.691, -4.256, -28.005)), (' B 233  VAL HG11', ' B 269  LYS  HG2', -0.508, (15.092, -1.529, 0.833)), (' D 286  ILE  N  ', ' D 286  ILE HD13', -0.508, (26.213, -11.251, -17.047)), (' D 222  ARG  HB2', ' D 222  ARG HH11', -0.506, (7.347, -9.329, -9.184)), (' A 227  LEU HD11', ' A 242  LEU  HB3', -0.506, (36.709, -1.5, -3.344)), (' D 236  LYS  CB ', ' D 236  LYS  NZ ', -0.5, (16.254, 5.989, -15.847)), (' D 227  LEU HD21', ' D 242  LEU  HB3', -0.499, (8.801, -0.939, -25.581)), (' B 222  ARG  HG3', ' B 223  PHE  H  ', -0.497, (10.407, -10.44, -3.807)), (' A 296  VAL  CG1', ' C 210  ALA  HB2', -0.49, (42.72, 5.461, -18.689)), (' C 245  ASP  O  ', ' C 249  ILE HG12', -0.485, (4.848, 29.639, -8.816)), (' D 222  ARG  CB ', ' D 222  ARG HH11', -0.484, (7.769, -9.146, -9.853)), (' A 257  THR HG22', ' C 213  ILE HD11', -0.483, (44.032, 11.648, -15.194)), (' A 270  GLU  CD ', ' A 274  ASN HD22', -0.479, (23.247, 8.834, -8.765)), (' D 222  ARG  CG ', ' D 223  PHE  H  ', -0.477, (5.981, -6.938, -10.708)), (' D 227  LEU HD22', ' D 231  ASN  ND2', -0.477, (8.263, 1.816, -24.821)), (' A 210  ALA  HB2', ' C 296  VAL HG13', -0.476, (13.24, 28.128, 4.908)), (' B 227  LEU HD21', ' B 242  LEU  HB3', -0.474, (15.618, -6.031, 10.878)), (' A 236  LYS  HG3', ' D 277  ASN  ND2', -0.469, (21.536, -6.079, -4.803)), (' A 294  PHE  CD2', ' A 294  PHE  N  ', -0.468, (47.084, -1.316, -15.434)), (' D 222  ARG  HG2', ' D 223  PHE  H  ', -0.463, (6.344, -6.44, -10.336)), (' B 222  ARG  CG ', ' B 223  PHE  H  ', -0.462, (10.226, -10.559, -3.716)), (' C 223  PHE  O  ', ' C 224  THR  CG2', -0.461, (21.435, 18.75, -14.577)), (' B 226  THR HG23', ' B 229  ASP  N  ', -0.46, (20.034, -8.421, 5.288)), (' B 288  GLU  HB2', ' D 207  TRP  CE2', -0.455, (0.21, 3.304, 7.171)), (' B 296  VAL HG13', ' D 210  ALA  HB2', -0.455, (-2.864, -3.555, 11.438)), (' A 207  TRP  CZ3', ' C 287  LEU  HA ', -0.446, (13.249, 16.996, 4.439)), (' C 292  THR  O  ', ' C 295  ASP  HB2', -0.446, (6.845, 28.055, 4.469)), (' B 200  ILE  N  ', ' B 200  ILE HD12', -0.445, (21.472, -3.551, -27.678)), (' D 229  ASP  HA ', ' D 232  LEU HD12', -0.445, (7.554, 5.238, -17.758)), (' B 281  ILE  HB ', ' D 207  TRP  CH2', -0.444, (0.024, 2.576, 3.236)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.444, (29.256, 7.336, -19.625)), (' D 276  MET  CE ', ' D 281  ILE HG13', -0.44, (20.948, -12.443, -14.071)), (' B 198  THR HG22', ' B 199  THR  N  ', -0.439, (21.869, -0.024, -26.127)), (' C 234  ALA  O  ', ' C 239  TYR  HB2', -0.436, (6.682, 12.846, -5.806)), (' B 268  LEU HD22', ' B 272  LEU  HG ', -0.433, (10.51, 0.599, 2.67)), (' B 227  LEU HD22', ' B 231  ASN  ND2', -0.433, (17.925, -6.141, 10.28)), (' D 222  ARG  O  ', ' D 223  PHE  CD2', -0.43, (2.916, -5.815, -8.637)), (' A 213  ILE  CD1', ' C 257  THR HG22', -0.425, (19.589, 30.827, 0.759)), (' C 227  LEU HD22', ' C 231  ASN HD21', -0.425, (7.25, 19.178, -12.971)), (' D 227  LEU HD22', ' D 231  ASN HD21', -0.422, (8.609, 1.475, -25.086)), (' B 233  VAL HG21', ' B 269  LYS  CD ', -0.415, (16.241, -3.132, 0.012)), (' B 207  TRP  CZ3', ' D 287  LEU  HA ', -0.414, (20.971, -11.042, -18.875)), (' A 213  ILE HD11', ' C 256  GLN  HG2', -0.413, (18.872, 32.936, 0.758)), (' B 202  LEU HD13', ' D 246  HIS  HB3', -0.408, (11.175, -5.576, -29.388)), (' A 257  THR  OG1', ' A 259  ILE HG23', -0.403, (41.332, 12.633, -10.82)), (' A 210  ALA  HB2', ' C 296  VAL HG11', -0.401, (13.312, 27.867, 3.951)), (' D 221  ASN  C  ', ' D 222  ARG  O  ', -0.4, (3.49, -7.233, -7.711))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
