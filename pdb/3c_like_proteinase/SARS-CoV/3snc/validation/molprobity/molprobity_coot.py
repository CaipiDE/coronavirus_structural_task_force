# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'THR', 0.020486589666396486, (32.78500000000001, 34.439, -2.6029999999999993)), ('A', '  46 ', 'ALA', 0.0, (35.812, 36.511, -1.6659999999999997)), ('A', '  48 ', 'ASP', 0.009230579822611462, (35.007, 36.105, -6.4719999999999995)), ('A', ' 251 ', 'GLY', 0.09604409671596965, (-11.551000000000002, 49.38899999999998, -23.605999999999998))]
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.10759522548843992, (-16.07, 47.201, -2.014)), ('A', '   5 ', 'LYS', 0.03220635928206651, (-2.8020000000000005, 45.371999999999986, -3.2899999999999996)), ('A', '  30 ', 'LEU', 0.027777374713610876, (13.115000000000004, 26.536, -7.184999999999999)), ('A', '  43 ', 'ILE', 0.036949630341394646, (29.10100000000001, 29.545, -6.2269999999999985)), ('A', '  44 ', 'CYS', 0.04881918721366674, (31.100000000000016, 32.597, -5.408999999999999)), ('A', '  49 ', 'MET', 0.0004970156666339961, (32.26400000000002, 38.697, -6.582)), ('A', '  59 ', 'ILE', 0.12052942866920256, (34.01400000000002, 23.749999999999993, -14.012)), ('A', '  60 ', 'ARG', 0.02960282442028056, (35.84800000000001, 23.524, -10.643999999999998)), ('A', '  63 ', 'ASN', 0.23236735852534543, (27.319, 17.533000000000005, -8.391)), ('A', '  65 ', 'SER', 0.13946451915048091, (29.408000000000012, 20.418, -4.349999999999998)), ('A', '  68 ', 'VAL', 0.003150532575091347, (20.042, 21.023999999999997, -1.9039999999999997)), ('A', '  72 ', 'ASN', 0.04918257430351796, (14.652000000000005, 18.37, 6.898999999999999)), ('A', '  75 ', 'LEU', 0.0, (18.271, 15.939, -2.3919999999999995)), ('A', '  93 ', 'THR', 0.12144839170314889, (13.719000000000001, 12.889999999999997, -6.592999999999998)), ('A', ' 104 ', 'VAL', 0.05957601470599995, (7.095000000000002, 33.71500000000001, -19.1)), ('A', ' 119 ', 'ASN', 0.0777039587469275, (16.97500000000001, 29.296, 3.892999999999999)), ('A', ' 131 ', 'ARG', 0.004335786008603605, (9.301, 49.21, -13.13)), ('A', ' 153 ', 'ASP', 0.13520351293509997, (-4.140000000000001, 31.8, -14.333999999999996)), ('A', ' 190 ', 'THR', 0.0757119965097337, (30.43800000000001, 47.097999999999985, -9.965999999999996)), ('A', ' 214 ', 'ASN', 0.1462697072790537, (-15.981000000000002, 51.625, -6.465)), ('A', ' 225 ', 'THR', 0.10201227829261898, (-7.844000000000002, 65.699, -25.051999999999992)), ('A', ' 228 ', 'ASN', 0.04683710875269029, (-0.8219999999999974, 64.199, -28.371999999999996)), ('A', ' 235 ', 'MET', 0.0, (6.241000000000001, 63.98699999999999, -20.538999999999998)), ('A', ' 244 ', 'GLN', 0.08569172594057317, (-3.2250000000000014, 53.549, -28.958)), ('A', ' 263 ', 'ASP', 0.09738318571784252, (-11.854000000000003, 61.81999999999999, -21.290999999999993)), ('A', ' 268 ', 'LEU', 0.00038863150089871363, (-5.529, 62.863, -15.385)), ('A', ' 277 ', 'ASN', 0.13932559070341638, (-6.806000000000003, 69.256, -3.8679999999999994)), ('A', ' 279 ', 'ARG', 0.011413776916975064, (-8.409000000000004, 64.646, -0.834)), ('A', ' 282 ', 'LEU', 0.24064306750778622, (-9.546, 55.163999999999994, -3.359)), ('H', '   2 ', 'SER', 0.18121974321789053, (25.88100000000001, 46.682, -5.233))]
data['cbeta'] = [('A', ' 175 ', 'THR', ' ', 0.2891405763305905, (17.037000000000003, 36.454, -14.212))]
data['probe'] = [(' A  45  THR HG23', ' A  46  ALA  N  ', -1.031, (35.26, 35.045, -1.774)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.954, (24.183, 33.486, -15.154)), (' A  45  THR HG23', ' A  46  ALA  H  ', -0.913, (34.884, 34.687, -1.35)), (' A  73  VAL HG12', ' A  74  GLN  H  ', -0.809, (15.384, 14.919, 1.289)), (' A 276  MET  HE1', ' A 281  ILE HG13', -0.806, (-6.588, 61.53, -5.153)), (' A 186  VAL  H  ', ' A 192  GLN HE22', -0.799, (24.471, 43.964, -13.833)), (' A  43  ILE  CG1', ' A  43  ILE  O  ', -0.781, (30.172, 30.161, -8.611)), (' A 276  MET  HE3', ' A 279  ARG  O  ', -0.759, (-7.005, 63.236, -2.788)), (' A 235  MET  HE1', ' A 241  PRO  HB3', -0.753, (4.764, 60.607, -25.193)), (' A  45  THR  CG2', ' A  46  ALA  H  ', -0.73, (34.64, 34.664, -1.425)), (' A  63  ASN  H  ', ' A  63  ASN HD22', -0.714, (28.587, 16.729, -10.514)), (' A 138  GLY  H  ', ' A 172  HIS  HD2', -0.711, (12.838, 45.702, -4.393)), (' A 131  ARG HH22', ' A 289  ASP  CG ', -0.708, (3.976, 52.938, -11.434)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.661, (16.345, 39.585, -0.949)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.651, (8.223, 18.667, -8.369)), (' A  45  THR  OG1', ' A  46  ALA  N  ', -0.638, (34.222, 35.117, -1.185)), (' A  73  VAL HG12', ' A  74  GLN  N  ', -0.616, (15.871, 15.294, 1.733)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.616, (32.833, 36.65, -8.826)), (' A 186  VAL  H  ', ' A 192  GLN  NE2', -0.615, (24.215, 44.691, -13.787)), (' A 233  VAL HG21', ' A 269  LYS  HD2', -0.614, (-2.153, 68.203, -20.95)), (' A  43  ILE  O  ', ' A  43  ILE HG13', -0.604, (30.819, 30.502, -8.282)), (' A  67  LEU  HG ', ' A  67  LEU  O  ', -0.602, (22.827, 21.414, 0.841)), (' A  47  GLU  O  ', ' A  49  MET  N  ', -0.58, (34.542, 38.872, -6.505)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.572, (4.168, 49.481, -15.104)), (' A  66  PHE  HB2', ' A  77  VAL HG21', -0.57, (24.129, 20.488, -6.394)), (' A  28  ASN  O  ', ' A 146  GLY  HA3', -0.57, (17.039, 30.813, -4.908)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.568, (33.716, 33.951, -4.578)), (' A  47  GLU  C  ', ' A  49  MET  N  ', -0.566, (34.311, 37.95, -5.649)), (' A  63  ASN  H  ', ' A  63  ASN  ND2', -0.563, (28.347, 17.163, -10.639)), (' A  43  ILE  O  ', ' A  43  ILE HG12', -0.561, (29.559, 30.421, -8.409)), (' A  83  GLN  O  ', ' A  84  ASN  C  ', -0.556, (21.838, 31.936, -17.048)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.549, (-1.549, 33.432, -7.209)), (' A  45  THR  H  ', ' A  48  ASP  CB ', -0.539, (33.535, 34.199, -5.395)), (' A  45  THR  O  ', ' A  46  ALA  C  ', -0.535, (34.838, 37.213, -3.332)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.533, (18.641, 32.313, -14.765)), (' A 296  VAL  O  ', ' A 300  CYS  HB2', -0.526, (-11.977, 45.57, -10.991)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.521, (-1.768, 67.492, -18.719)), (' A 131  ARG  NH2', ' A 289  ASP  OD2', -0.508, (4.383, 52.473, -10.399)), (' A 242  LEU HD12', ' A 246  HIS  HB2', -0.508, (-1.686, 53.695, -23.582)), (' A 100  LYS  NZ ', ' A 307  HOH  O  ', -0.507, (3.19, 22.193, -17.693)), (' A 242  LEU HD12', ' A 246  HIS  CB ', -0.506, (-1.375, 53.938, -23.064)), (' A 242  LEU  CD1', ' A 246  HIS  CB ', -0.497, (-2.146, 53.999, -23.062)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.497, (16.252, 42.03, -5.564)), (' A 131  ARG  HD3', ' A 197  ASP  OD1', -0.495, (9.551, 52.417, -11.282)), (' A  34  ASP  OD2', ' A  90  LYS  NZ ', -0.49, (15.392, 17.463, -14.256)), (' A  45  THR  O  ', ' A  46  ALA  O  ', -0.488, (34.438, 37.558, -3.062)), (' A 251  GLY  N  ', ' A 252  PRO  HD2', -0.486, (-10.534, 48.089, -22.555)), (' A  47  GLU  C  ', ' A  49  MET  H  ', -0.485, (34.29, 38.2, -5.638)), (' A 153  ASP  N  ', ' A 153  ASP  OD1', -0.484, (-2.533, 32.321, -14.542)), (' A 242  LEU  CD1', ' A 246  HIS  HB2', -0.483, (-1.98, 53.811, -23.622)), (' A 218  TRP  HH2', ' A 276  MET  O  ', -0.474, (-7.767, 66.371, -5.516)), (' A  73  VAL  CG1', ' A  74  GLN  H  ', -0.474, (15.388, 14.515, 2.242)), (' A 218  TRP  CH2', ' A 276  MET  O  ', -0.473, (-7.991, 66.305, -5.237)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.464, (2.902, 45.978, -10.967)), (' A 190  THR  C  ', ' H   1  ASN HD22', -0.462, (30.473, 48.48, -8.285)), (' A 138  GLY  N  ', ' A 172  HIS  HD2', -0.459, (11.997, 45.421, -4.184)), (' A 220  LEU  HA ', ' A 220  LEU HD23', -0.454, (-12.533, 63.222, -14.424)), (' A 138  GLY  H  ', ' A 172  HIS  CD2', -0.453, (12.808, 45.942, -4.136)), (' A 227  LEU  HA ', ' A 227  LEU HD12', -0.452, (-3.514, 60.987, -25.74)), (' A  72  ASN  HA ', ' A  72  ASN HD22', -0.447, (15.967, 19.302, 7.442)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.447, (24.134, 29.406, -10.781)), (' A 130  MET  HB2', ' A 130  MET  HE2', -0.444, (8.232, 43.143, -13.899)), (' A  34  ASP  C  ', ' A  34  ASP  OD2', -0.444, (14.485, 17.162, -12.825)), (' A  40  ARG  HD3', ' A  85  CYS  CA ', -0.443, (23.224, 33.136, -14.181)), (' A 106  ILE HD11', ' A 130  MET  CE ', -0.441, (8.74, 41.882, -14.252)), (' A  32  LEU HD22', ' A 101  TYR  CD2', -0.44, (6.857, 23.837, -12.262)), (' A 186  VAL HG22', ' A 192  GLN  NE2', -0.438, (25.425, 44.759, -13.734)), (' A  63  ASN  OD1', ' A  78  ILE  C  ', -0.431, (24.76, 15.618, -11.298)), (' A  45  THR  CG2', ' A  46  ALA  N  ', -0.43, (34.72, 34.225, -2.725)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.424, (6.653, 36.508, -7.546)), (' A  85  CYS  HB2', ' A 179  GLY  O  ', -0.42, (20.623, 35.177, -15.67)), (' A 289  ASP  C  ', ' A 289  ASP  OD2', -0.419, (2.373, 52.383, -10.259)), (' A 201  THR  O  ', ' A 202  LEU  C  ', -0.418, (-1.761, 53.603, -16.798)), (' A 288  GLU  HG2', ' A 291  PHE  HE1', -0.411, (-2.855, 50.961, -5.941)), (' A 260  ALA  O  ', ' A 263  ASP  HB2', -0.409, (-13.186, 59.878, -21.55)), (' A  95  ASN  HA ', ' A  96  PRO  HD2', -0.409, (9.171, 16.538, -5.14)), (' A 131  ARG  O  ', ' A 134  HIS  N  ', -0.403, (12.17, 48.288, -14.781)), (' A 218  TRP  HB2', ' A 279  ARG  NH2', -0.402, (-14.417, 65.51, -5.658)), (' A   7  ALA  HA ', ' A 127  GLN  NE2', -0.401, (-0.241, 39.595, -5.513)), (' A 133  ASN  HB2', ' A 327  HOH  O  ', -0.4, (16.398, 51.401, -15.04)), (' A 252  PRO  O  ', ' A 255  ALA  HB3', -0.4, (-16.257, 48.378, -21.062)), (' A  45  THR  C  ', ' A  48  ASP  HB2', -0.4, (33.561, 35.091, -4.089))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
