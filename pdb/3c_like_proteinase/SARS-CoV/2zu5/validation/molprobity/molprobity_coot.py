# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.02947994798887521, (-22.841, 5.587, 24.292000000000005)), ('A', '   5 ', 'LYS', 0.23057200123278745, (-9.392, 3.789, 22.344)), ('A', '  67 ', 'LEU', 0.03175622638339127, (17.061, -21.227000000000007, 24.539)), ('A', '  77 ', 'VAL', 0.125346238283264, (15.493000000000007, -25.33, 18.329)), ('A', ' 132 ', 'PRO', 0.09538151696440816, (2.9990000000000006, 9.240000000000002, 9.238)), ('A', ' 268 ', 'LEU', 0.016624664652434475, (-12.669, 20.945000000000004, 10.665)), ('A', ' 288 ', 'GLU', 0.11660975088026768, (-8.015, 13.077000000000004, 18.021))]
data['cbeta'] = [('A', '  77 ', 'VAL', ' ', 0.2587483166911612, (15.904, -23.798, 18.232))]
data['probe'] = [(' A 110  GLN  HG2', ' A1092  HOH  O  ', -0.939, (-5.487, 2.366, 7.147)), (' A   4  ARG  HD2', ' A1009  HOH  O  ', -0.883, (-10.51, 3.92, 27.461)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.832, (24.479, -2.159, 14.158)), (' A 253  LEU HD13', ' A1084  HOH  O  ', -0.8, (-17.401, 5.678, 6.518)), (' A 110  GLN  NE2', ' A1433  HOH  O  ', -0.673, (-5.025, 0.097, 5.083)), (' A  97  LYS  HE2', ' A1301  HOH  O  ', -0.655, (-3.186, -20.981, 26.655)), (' A 228  ASN  HB3', ' A1396  HOH  O  ', -0.653, (-6.352, 24.773, -4.319)), (' A 256  GLN  HG2', ' A 304  THR HG23', -0.623, (-25.439, 7.278, 10.868)), (' A  67  LEU HD21', ' A  74  GLN  OE1', -0.568, (14.605, -22.276, 27.77)), (' A  75  LEU  N  ', ' A  75  LEU HD12', -0.564, (10.721, -25.192, 24.961)), (' A   1  SER  HB3', ' A1001  HOH  O  ', -0.545, (-21.526, 4.24, 21.877)), (' A 256  GLN  HG2', ' A 304  THR  CG2', -0.523, (-25.568, 7.632, 11.237)), (' A   4  ARG  NH1', ' A1009  HOH  O  ', -0.52, (-10.534, 4.823, 28.285)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.51, (17.381, -12.041, 15.185)), (' A  67  LEU HD23', ' A  68  VAL  N  ', -0.504, (15.115, -21.68, 25.544)), (' A   6  MET  SD ', ' A1259  HOH  O  ', -0.499, (-14.213, -1.735, 20.24)), (' A  67  LEU  C  ', ' A  67  LEU HD23', -0.498, (15.149, -21.398, 25.645)), (' A 188  ARG  HG3', ' A 188  ARG  NH2', -0.483, (22.257, -2.028, 13.005)), (' A  67  LEU HD22', ' A1025  HOH  O  ', -0.475, (14.78, -19.137, 27.039)), (' A  67  LEU  C  ', ' A  67  LEU  CD2', -0.467, (15.694, -21.129, 25.884)), (' A  74  GLN  C  ', ' A  75  LEU HD12', -0.459, (10.585, -25.438, 25.2)), (' A  19  GLN HE21', ' A 119  ASN  HA ', -0.447, (11.733, -13.64, 29.554)), (' A  78  ILE HD11', ' A  90  LYS  HE2', -0.445, (11.774, -28.626, 13.092)), (' A  77  VAL HG13', ' A1145  HOH  O  ', -0.443, (17.327, -24.388, 20.858)), (' A 100  LYS  HB2', ' A 100  LYS  HE3', -0.441, (-8.029, -19.94, 11.782)), (' A   4  ARG  CD ', ' A1009  HOH  O  ', -0.438, (-11.098, 4.492, 28.166)), (' A  75  LEU  CD1', ' A  75  LEU  N  ', -0.426, (10.265, -24.742, 24.459)), (' A  83  GLN  NE2', ' A  88  ARG  HD2', -0.425, (11.254, -15.084, 7.82)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.423, (-0.107, -4.978, 18.353)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.418, (11.66, -8.832, 10.834)), (' A  83  GLN  NE2', ' A  88  ARG HH11', -0.414, (10.401, -15.638, 7.388)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.41, (-10.628, 19.145, -0.019)), (' A 213  ILE HG12', ' A 304  THR HG22', -0.409, (-24.096, 7.895, 12.821)), (' A 256  GLN  O  ', ' A 304  THR HG21', -0.403, (-25.704, 8.778, 10.838))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
