# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.038083713925006465, (-20.243, -51.28000000000001, 0.9209999999999999)), ('A', '  30 ', 'LEU', 0.0, (-12.871000000000002, -55.516, 7.136999999999999)), ('A', '  49 ', 'MET', 0.0, (-32.129, -43.424, 6.631)), ('A', '  51 ', 'ASN', 0.037378090615565365, (-34.917, -42.46900000000001, 11.546)), ('A', ' 106 ', 'ILE', 0.24886075140725308, (-6.998000000000001, -42.243, 18.086)), ('A', ' 153 ', 'ASP', 0.0007842108651541173, (3.8020000000000014, -50.416, 14.085999999999997)), ('A', ' 165 ', 'MET', 0.0, (-20.521, -40.426, 6.276)), ('A', ' 188 ', 'ARG', 0.003710527952650141, (-28.702000000000005, -41.255, 10.294)), ('A', ' 189 ', 'GLN', 0.13210137768592306, (-29.767, -38.364, 8.069999999999999)), ('A', ' 228 ', 'ASN', 0.2647543197385542, (0.8119999999999994, -17.79, 28.442999999999994)), ('A', ' 235 ', 'MET', 0.001559963669237557, (-6.375, -17.795, 20.363999999999997)), ('A', ' 236 ', 'LYS', 0.21790674167285937, (-6.189999999999999, -14.737, 18.156999999999993)), ('A', ' 240 ', 'GLU', 0.0037620481840229983, (-4.965999999999998, -24.730000000000004, 19.867)), ('A', ' 268 ', 'LEU', 0.031942887504413715, (5.656999999999998, -19.362999999999996, 15.308999999999997)), ('A', ' 298 ', 'ARG', 0.2258397509675648, (9.531000000000004, -41.309, 11.401)), ('A', ' 303 ', 'VAL', 0.09238058287080646, (20.969999999999995, -36.048, 12.007999999999996)), ('A', ' 304 ', 'THR', 0.03408618419742613, (20.189999999999998, -32.436, 11.196999999999997))]
data['cbeta'] = []
data['probe'] = [(' A 307  D3F  H5 ', ' A 307  D3F  O6 ', -1.051, (-23.972, -42.945, 6.578)), (' A 165  MET  HE2', ' A 173  ALA  HB3', -0.964, (-19.21, -38.078, 9.298)), (' A 307  D3F  H5 ', ' A 307  D3F  N2 ', -0.877, (-25.25, -42.396, 6.306)), (' A  24  THR HG23', ' A 500  HOH  O  ', -0.867, (-30.33, -49.767, -1.648)), (' A  49  MET  HB3', ' A 382  HOH  O  ', -0.825, (-29.433, -42.708, 6.043)), (' A 110  GLN  HG2', ' A 465  HOH  O  ', -0.779, (-1.299, -37.502, 17.507)), (' A  24  THR HG22', ' A 507  HOH  O  ', -0.737, (-30.832, -52.311, -0.137)), (' A 198  THR HG22', ' A 481  HOH  O  ', -0.685, (-11.481, -23.404, 16.515)), (' A 307  D3F  O2 ', ' A 307  D3F CL1 ', -0.678, (-24.515, -42.624, 1.995)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.668, (-19.735, -50.843, 5.81)), (' A  27  LEU  CD1', ' A  39  PRO  HD2', -0.623, (-19.94, -51.01, 5.267)), (' A 145  CYS  SG ', ' A 163  HIS  CD2', -0.598, (-17.915, -43.654, 3.424)), (' A 165  MET  HG2', ' A 307  D3F  O6 ', -0.559, (-23.661, -41.678, 7.577)), (' A 235  MET  HA ', ' A 235  MET  HE3', -0.559, (-7.437, -19.537, 19.631)), (' A 145  CYS  SG ', ' A 552  HOH  O  ', -0.558, (-19.624, -44.194, 2.061)), (' A 165  MET  CE ', ' A 173  ALA  HB3', -0.555, (-20.047, -37.875, 9.863)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.553, (-24.073, -53.166, 10.201)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.553, (-20.633, -54.029, -3.857)), (' A 117  CYS  HB3', ' A 569  HOH  O  ', -0.547, (-12.196, -51.78, -0.538)), (' A 106  ILE HG13', ' A 110  GLN  OE1', -0.538, (-4.326, -41.03, 17.395)), (' A  41  HIS  HB2', ' A 307  D3F  H73', -0.529, (-24.061, -46.122, 7.73)), (' A 213  ILE  HA ', ' A 304  THR  HB ', -0.518, (17.776, -31.051, 11.183)), (' A  45  THR  OG1', ' A  48  ASP  OD2', -0.497, (-35.358, -49.433, 4.504)), (' A  27  LEU  HB2', ' A 145  CYS  O  ', -0.494, (-19.126, -49.245, 2.971)), (' A  86  LEU  HG ', ' A 179  GLY  CA ', -0.493, (-18.262, -49.375, 15.18)), (' A 198  THR HG23', ' A 361  HOH  O  ', -0.483, (-11.212, -26.489, 16.921)), (' A 235  MET  HE3', ' A 449  HOH  O  ', -0.474, (-9.107, -19.313, 19.854)), (' A 180  LYS  HD2', ' A 482  HOH  O  ', -0.466, (-15.802, -48.105, 22.32)), (' A  41  HIS  CB ', ' A 307  D3F  H73', -0.454, (-24.229, -46.707, 7.283)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.447, (3.898, -21.252, 26.059)), (' A 165  MET  HB2', ' A 165  MET  HE3', -0.438, (-20.761, -38.435, 8.007)), (' A  27  LEU HD22', ' A 307  D3F CL2 ', -0.434, (-22.212, -48.52, 4.261)), (' A  61  LYS  HE2', ' A 405  HOH  O  ', -0.433, (-33.902, -55.474, 7.98)), (' A 142  ASN  ND2', ' A 542  HOH  O  ', -0.432, (-23.427, -41.728, -1.521)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.419, (-27.338, -51.525, 9.109)), (' A  30  LEU  HG ', ' A 148  VAL HG11', -0.417, (-11.256, -51.883, 8.261)), (' A 180  LYS  HD3', ' A 546  HOH  O  ', -0.414, (-16.705, -44.523, 22.244)), (' A 256  GLN  HG2', ' A 304  THR HG22', -0.412, (18.9, -33.013, 14.324)), (' A  86  LEU  HG ', ' A 179  GLY  HA2', -0.402, (-18.336, -49.259, 14.952)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.402, (-24.048, -49.115, 14.661))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
