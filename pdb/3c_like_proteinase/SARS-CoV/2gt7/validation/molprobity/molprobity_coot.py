# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  46 ', 'ALA', 0.015235607017550246, (-25.23000000000001, -17.265000000000004, 50.708)), ('B', '  47 ', 'GLU', 0.0, (-28.439, -19.329000000000008, 50.573)), ('B', '  48 ', 'ASP', 0.031371741234791084, (-31.16600000000001, -16.644, 50.127))]
data['omega'] = []
data['rota'] = [('A', '  50 ', 'LEU', 0.02316821384316049, (0.15200000000000002, 19.199, -2.345)), ('A', '  53 ', 'ASN', 0.006002986872847872, (5.223000000000002, 24.82, 3.441)), ('A', '  59 ', 'ILE', 0.13246176932248094, (4.279, 32.705000000000005, 9.601000000000003)), ('A', '  61 ', 'LYS', 0.27188431920087053, (-0.9940000000000013, 32.90800000000001, 11.201)), ('A', '  64 ', 'HIS', 0.005005014484718683, (-6.463000000000002, 35.238, 16.656)), ('A', '  87 ', 'LEU', 0.021258483840372294, (0.605, 22.628000000000007, 16.424)), ('A', ' 128 ', 'CYS', 0.10662531175479252, (-7.405000000000001, -0.8050000000000004, 17.559)), ('A', ' 167 ', 'LEU', 0.2570757112717042, (-2.2186666666666666, 5.405333333333333, 4.914666666666666)), ('A', ' 227 ', 'LEU', 0.0015240575606996192, (11.398, -21.037, 17.173)), ('A', ' 232 ', 'LEU', 0.0837857735962975, (9.371, -21.29800000000001, 8.874)), ('A', ' 270 ', 'GLU', 0.19015621778344988, (-0.8418000000000012, -29.5116, 13.724400000000001)), ('A', ' 286 ', 'ILE', 0.00658918776827564, (-10.796, -16.806, 13.097)), ('A', ' 303 ', 'VAL', 0.09175530951429907, (-8.464000000000006, -4.597, 36.42)), ('B', '  27 ', 'LEU', 0.26126812301782765, (-21.828000000000007, -4.84, 43.455)), ('B', '  75 ', 'LEU', 0.06877307973118492, (-22.877000000000002, 8.370000000000003, 50.793)), ('B', '  77 ', 'VAL', 0.04935150960741811, (-29.095000000000006, 4.385333333333333, 52.57633333333334)), ('B', ' 165 ', 'MET', 0.0, (-26.955, -12.66, 36.135)), ('B', ' 175 ', 'THR', 0.027198673342354596, (-33.227, -5.750000000000002, 33.635)), ('B', ' 188 ', 'ARG', 0.0023980253391615363, (-36.46183333333333, -19.37116666666667, 42.75516666666667)), ('B', ' 228 ', 'ASN', 0.08346232104938246, (-41.892, -14.222, 1.029)), ('B', ' 232 ', 'LEU', 0.010839427638530777, (-38.546000000000014, -19.103, 2.918)), ('B', ' 282 ', 'LEU', 0.0, (-15.72, -5.326, 5.98))]
data['cbeta'] = [('A', ' 153 ', 'ASP', ' ', 0.2680061652502619, (-1.2390000000000025, 2.7960000000000003, 33.928)), ('A', ' 222 ', 'ARG', ' ', 0.40455643428739707, (1.126999999999999, -34.362, 22.797)), ('A', ' 290 ', 'GLU', ' ', 0.30636247844153536, (-6.6860000000000035, -6.355000000000001, 17.341)), ('A', ' 303 ', 'VAL', ' ', 0.3634424189551881, (-6.916000000000005, -4.341, 36.105)), ('B', '  77 ', 'VAL', 'A', 0.25356949625087694, (-28.854000000000013, 4.822, 52.316)), ('B', ' 175 ', 'THR', ' ', 0.3144255539002255, (-33.344, -5.589, 35.139)), ('B', ' 217 ', 'ARG', ' ', 0.3018236503901151, (-20.701000000000008, -3.7590000000000012, -4.824))]
data['probe'] = [(' A  22  CYS  SG ', ' A  61  LYS  NZ ', -1.109, (-5.713, 27.954, 10.495)), (' A  77 AVAL HG12', ' A 385  HOH  O  ', -1.049, (-7.507, 32.212, 19.072)), (' B  22  CYS  SG ', ' B  61  LYS  HE3', -0.947, (-28.856, -5.981, 52.433)), (' B 175  THR HG23', ' B 176  ASP  O  ', -0.885, (-33.985, -2.967, 34.353)), (' B  19  GLN HE21', ' B  26  THR HG21', -0.867, (-17.716, -3.455, 46.115)), (' B  77 AVAL HG12', ' B 628  HOH  O  ', -0.833, (-26.15, 3.885, 53.853)), (' B  86  LEU  CD2', ' B 162 BMET  HE3', -0.807, (-31.523, -1.813, 38.134)), (' B 165 BMET  HE1', ' B 185  PHE  HB3', -0.783, (-32.795, -14.61, 34.056)), (' B  68 AVAL HG23', ' B  75  LEU  HB2', -0.78, (-23.676, 6.781, 48.614)), (' B  86  LEU HD21', ' B 162 BMET  HE3', -0.771, (-31.396, -2.201, 37.666)), (' A  50  LEU  N  ', ' A 593  HOH  O  ', -0.704, (-0.388, 18.585, -0.516)), (' A 348  HOH  O  ', ' B 298  ARG  HD2', -0.675, (-22.791, 8.486, 17.206)), (' B 165 BMET  CE ', ' B 185  PHE  HB3', -0.658, (-32.305, -14.056, 34.065)), (' A 298  ARG  HD2', ' A 305  PHE  HZ ', -0.642, (-6.783, -1.625, 31.525)), (' A 288 AGLU  HG2', ' A 291  PHE  CE1', -0.624, (-9.027, -10.422, 19.605)), (' B  86  LEU HD22', ' B 162 BMET  HE3', -0.606, (-31.564, -2.094, 39.093)), (' A 165 BMET  HE1', ' A 192  GLN  NE2', -0.601, (-0.125, 10.981, 2.779)), (' A  53 AASN  N  ', ' A  53 AASN  OD1', -0.595, (3.888, 24.857, 1.852)), (' B  46  ALA  O  ', ' B  47  GLU  HB2', -0.583, (-26.793, -19.507, 52.069)), (' B  46  ALA  O  ', ' B  47  GLU  CB ', -0.576, (-27.424, -19.5, 52.132)), (' B  64  HIS  CD2', ' B 601  MES  H62', -0.576, (-28.649, 2.412, 62.278)), (' A  63  ASN  O  ', ' A  77 AVAL  CG1', -0.574, (-5.843, 32.546, 18.155)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.573, (-34.66, -2.689, 37.936)), (' A  63  ASN  O  ', ' A  77 AVAL HG11', -0.56, (-5.594, 32.106, 17.82)), (' A 295  ASP  OD1', ' A 298  ARG  NH2', -0.56, (-5.019, -3.499, 26.885)), (' A 270 BGLU  OE2', ' A 274  ASN  ND2', -0.559, (-2.352, -30.311, 11.663)), (' A   4  ARG  HD2', ' B 126  TYR  CD1', -0.555, (-19.238, -6.227, 24.768)), (' A 280  THR  CG2', ' A 283  GLY  C  ', -0.554, (-16.35, -18.528, 18.164)), (' B  44  CYS  SG ', ' B  54  TYR  CE2', -0.541, (-32.708, -11.381, 46.544)), (' B  66  PHE  HB2', ' B  77 AVAL HG11', -0.537, (-28.179, 2.404, 52.455)), (' A 222  ARG  HB2', ' A 326  HOH  O  ', -0.53, (-0.733, -34.352, 21.8)), (' A  61  LYS  HE3', ' A  65 ASER  HB3', -0.529, (-4.851, 31.551, 11.148)), (' A  55  GLU  CD ', ' A  55  GLU  H  ', -0.524, (7.002, 24.854, 7.355)), (' B  86  LEU  HG ', ' B 179  GLY  CA ', -0.523, (-35.159, -2.978, 37.764)), (' A 288 AGLU  HG2', ' A 291  PHE  HE1', -0.509, (-9.873, -10.511, 19.855)), (' A 280  THR HG21', ' A 283  GLY  HA2', -0.505, (-16.847, -19.252, 18.982)), (' A  19  GLN  HG3', ' A 407  HOH  O  ', -0.496, (-13.873, 25.12, 16.748)), (' B  63  ASN  O  ', ' B  77 AVAL HG13', -0.489, (-28.8, 3.331, 54.234)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.487, (-15.955, 2.346, 32.62)), (' B  77 AVAL  CG1', ' B 628  HOH  O  ', -0.485, (-27.072, 4.387, 54.53)), (' A  53 AASN  HB2', ' A  56  ASP  HB3', -0.481, (6.064, 27.829, 3.719)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.479, (-24.651, -0.188, 27.729)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.478, (-30.335, -7.672, 17.226)), (' A 280  THR HG21', ' A 283  GLY  CA ', -0.469, (-16.948, -18.808, 19.19)), (' B  68 AVAL HG22', ' B  75  LEU  O  ', -0.468, (-24.423, 5.594, 50.694)), (' B 234  ALA  HB3', ' B 618  HOH  O  ', -0.468, (-35.162, -14.711, 6.396)), (' A 288 AGLU  HG2', ' A 291  PHE  CD1', -0.468, (-8.592, -10.642, 19.73)), (' B  63  ASN  O  ', ' B  77 AVAL  CG1', -0.463, (-28.794, 3.162, 54.036)), (' A 230  PHE  HA ', ' A 269  LYS  HE2', -0.462, (6.718, -23.944, 13.439)), (' A 180  LYS  HD2', ' A 457  HOH  O  ', -0.458, (8.915, 11.078, 18.071)), (' A   5  LYS  HD3', ' A 357  HOH  O  ', -0.454, (-9.629, -4.76, 18.078)), (' B 298  ARG  HD3', ' B 688  HOH  O  ', -0.453, (-25.205, 5.705, 16.736)), (' B 165 BMET  HE2', ' B 181  PHE  CE2', -0.451, (-32.046, -11.932, 34.815)), (' A 277  ASN  ND2', ' A 578  HOH  O  ', -0.443, (-10.055, -27.895, 9.553)), (' A 167  LEU  N  ', ' A 167 ALEU HD12', -0.437, (-4.005, 6.942, 4.945)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.437, (-24.697, 11.371, 42.753)), (' A 298  ARG  HD2', ' A 305  PHE  CZ ', -0.429, (-6.889, -1.35, 32.284)), (' A 167 ALEU HD11', ' A 173  ALA  HB2', -0.428, (-1.675, 6.454, 6.888)), (' B 601  MES  H82', ' B 770  HOH  O  ', -0.427, (-34.362, 6.498, 64.034)), (' A 126  TYR  HE1', ' A 128 BCYS  HG ', -0.426, (-9.449, 1.798, 15.912)), (' A  55  GLU  HG3', ' A  82  MET  HE1', -0.426, (7.634, 24.65, 9.764)), (' A 298  ARG  HA ', ' A 303  VAL HG13', -0.425, (-6.131, -6.255, 33.645)), (' B 188 BARG  HG3', ' B 190  THR HG23', -0.424, (-34.588, -19.029, 40.324)), (' A 236  LYS  HD3', ' A 236  LYS  O  ', -0.416, (1.81, -19.202, 4.008)), (' A 286  ILE  HA ', ' A 286  ILE HD12', -0.415, (-10.08, -17.567, 11.677)), (' A  67  LEU  CD1', ' A  74  GLN  HG3', -0.415, (-13.857, 30.773, 19.713)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.408, (-7.081, 5.784, 21.502)), (' A 280  THR HG21', ' A 283  GLY  C  ', -0.407, (-16.487, -19.049, 18.524)), (' B  86  LEU HD22', ' B 162 BMET  CE ', -0.404, (-31.2, -1.564, 38.844)), (' B 130  MET  HA ', ' B 136  ILE HG22', -0.403, (-28.664, -8.042, 24.199)), (' A 280  THR  CG2', ' A 283  GLY  CA ', -0.403, (-16.168, -18.913, 19.336)), (' A  67  LEU HD11', ' A  74  GLN  HG3', -0.402, (-14.173, 30.689, 19.679)), (' B 108  PRO  HA ', ' B 130 BMET  HG2', -0.401, (-32.982, -7.712, 22.547))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
