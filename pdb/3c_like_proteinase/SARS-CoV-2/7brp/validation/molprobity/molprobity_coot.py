# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  33 ', 'ASP', None, (10.528000000000004, -35.294, 13.352)), ('A', ' 155 ', 'ASP', None, (-4.083, -28.925, 18.946)), ('B', '  33 ', 'ASP', None, (1.6470000000000002, -34.751, 43.444))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B   4  ARG  O  ', ' B 299  GLN  NE2', -0.655, (13.894, -10.028, 28.762)), (' B 401  HU5  N16', ' B 401  HU5 H222', -0.649, (-13.294, -12.358, 44.276)), (' A 401  HU5  N16', ' A 401  HU5 H222', -0.646, (25.233, -13.272, 11.033)), (' A 274  ASN  O  ', ' A 501  HOH  O  ', -0.635, (0.176, 15.242, 22.501)), (' B 241  PRO  HG2', ' B 503  HOH  O  ', -0.628, (13.925, 1.053, 51.311)), (' A   4  ARG  O  ', ' A 299  GLN  NE2', -0.614, (-1.522, -10.69, 26.113)), (' B 144  SER  OG ', ' B 501  HOH  O  ', -0.578, (-9.221, -15.453, 36.092)), (' A 118  TYR  CE1', ' A 141  LEU  HB2', -0.576, (22.035, -16.231, 24.362)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.568, (2.318, -6.07, 12.421)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.53, (9.232, -5.899, 43.14)), (' A 224  THR HG22', ' A 225  THR  H  ', -0.527, (-15.086, 8.075, 11.08)), (' B  33  ASP  O  ', ' B  94  ALA  HA ', -0.506, (-0.541, -38.165, 41.962)), (' A 154  TYR  HB3', ' A 155  ASP  OD1', -0.506, (-5.118, -29.416, 16.826)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.498, (5.423, 5.949, 27.321)), (' B  49  MET  SD ', ' B 401  HU5  H20', -0.49, (-17.17, -15.55, 44.096)), (' A   4  ARG  NH2', ' B 127  GLN  O  ', -0.488, (3.752, -9.849, 32.912)), (' A  49  MET  SD ', ' A 401  HU5  H20', -0.488, (29.101, -15.99, 11.12)), (' A 221  ASN  ND2', ' A 270  GLU  HG3', -0.486, (-9.982, 12.408, 17.799)), (' B 118  TYR  CE1', ' B 141  LEU  HB2', -0.475, (-10.182, -15.942, 31.088)), (' B 241  PRO  O  ', ' B 503  HOH  O  ', -0.474, (14.777, 0.191, 50.627)), (' B  12  LYS  NZ ', ' B 514  HOH  O  ', -0.471, (11.486, -30.213, 31.399)), (' A  33  ASP  O  ', ' A  94  ALA  HA ', -0.47, (12.649, -39.223, 14.708)), (' A 154  TYR  C  ', ' A 156  CYS  H  ', -0.466, (-3.305, -28.018, 17.94)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.464, (20.686, -17.096, 23.282)), (' A 237  TYR  OH ', ' A 273  GLN  HA ', -0.461, (-0.043, 14.395, 14.484)), (' B  92  ASP  OD1', ' B 502  HOH  O  ', -0.46, (-7.825, -41.791, 39.842)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.457, (24.778, -23.558, 13.259)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.455, (-4.244, -29.532, 18.049)), (' A 301  SER  O  ', ' A 301  SER  OG ', -0.454, (-13.458, -15.576, 26.306)), (' B  68  VAL HG12', ' B  75  LEU HD12', -0.447, (-7.94, -34.653, 38.289)), (' A  21  THR  HB ', ' A  67  LEU  HB3', -0.446, (28.775, -30.405, 18.507)), (' B 118  TYR  CE1', ' B 144  SER  HB3', -0.442, (-8.675, -17.522, 32.471)), (' B  24  THR HG23', ' B  25  THR HG23', -0.441, (-20.302, -22.004, 40.759)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.437, (9.775, -36.181, 16.971)), (' B  32  LEU HD13', ' B 101  TYR  CE2', -0.432, (3.97, -29.76, 44.396)), (' B  86  VAL HG23', ' B 179  GLY  HA2', -0.428, (-4.395, -21.125, 49.418)), (' A  32  LEU HD13', ' A 101  TYR  CE2', -0.425, (7.776, -30.583, 11.834)), (' A 187  ASP  N  ', ' A 187  ASP  OD1', -0.423, (22.98, -15.776, 4.542)), (' B 102  LYS  HG3', ' B 156  CYS  SG ', -0.422, (12.013, -26.749, 44.254)), (' A 217  ARG  HB2', ' A 220  LEU HD12', -0.42, (-13.672, 4.989, 25.382)), (' A 140  PHE  O  ', ' B   1  SER  N  ', -0.418, (21.371, -10.986, 22.234)), (' B   5  LYS  HG2', ' B 127  GLN  HB2', -0.415, (7.316, -10.791, 31.974)), (' A 118  TYR  CZ ', ' A 144  SER  HB3', -0.415, (20.144, -17.145, 23.487)), (' A 154  TYR  C  ', ' A 156  CYS  N  ', -0.411, (-2.799, -28.286, 17.86)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.408, (-7.258, -6.016, 23.246)), (' A   5  LYS  HG2', ' A 127  GLN  HB2', -0.406, (4.302, -11.069, 23.664)), (' B 293  PRO  O  ', ' B 297  VAL HG23', -0.405, (20.472, -9.516, 37.101)), (' A   4  ARG  NH1', ' B 128  CYS  SG ', -0.402, (1.757, -10.135, 34.49)), (' B 269  LYS  O  ', ' B 273  GLN  HG3', -0.402, (15.392, 13.48, 39.97))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
