# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 184 ', 'PRO', 0.0569407267269831, (8.197000000000003, 44.931, -8.038)), ('A', ' 301 ', 'SER', 0.022660147459474304, (8.713999999999993, 38.723, 28.847))]
data['omega'] = []
data['rota'] = [('A', '  45 ', 'THR', 0.10104053168300747, (15.527999999999997, 23.425000000000004, -17.611)), ('A', '  49 ', 'MET', 0.0, (15.972, 31.556, -18.018)), ('A', '  81 ', 'SER', 0.2804957200249091, (-1.2109999999999992, 23.617, -10.808)), ('A', '  87 ', 'LEU', 0.034405511721515895, (3.8109999999999977, 25.501, -8.101)), ('A', ' 110 ', 'GLN', 0.2955010986282411, (7.742000000000005, 43.386, 9.922)), ('A', ' 125 ', 'VAL', 0.003150532575091347, (17.717, 29.678, 10.89)), ('A', ' 155 ', 'ASP', 0.07545911732443895, (1.4270000000000043, 27.534999999999997, 18.196)), ('A', ' 169 ', 'THR', 0.008159601566148922, (23.158, 44.136, -4.027)), ('A', ' 196 ', 'THR', 0.2226559580234399, (17.749000000000006, 52.594, -2.136)), ('A', ' 198 ', 'THR', 0.046862871350563336, (15.276000000000003, 53.24099999999999, 4.313)), ('A', ' 232 ', 'LEU', 0.056353817307737336, (12.57, 66.841, 10.221)), ('A', ' 303 ', 'VAL', 0.06802493570034546, (8.493000000000004, 34.09, 26.016000000000002)), ('A', ' 304 ', 'THR', 0.0656117015168303, (8.018000000000002, 33.042, 29.775))]
data['cbeta'] = [('A', '  34 ', 'ASP', ' ', 0.28511146875042104, (-3.5949999999999953, 17.814, -0.39000000000000007))]
data['probe'] = [(' A 222  ARG  HD3', ' A 222  ARG  O  ', -0.775, (13.768, 67.723, 29.684)), (' A 154  TYR  O  ', ' A 155  ASP  OD1', -0.611, (-1.191, 27.969, 18.294)), (' A  70  ALA  O  ', ' A  73  VAL HG12', -0.587, (10.033, 11.161, 3.235)), (' A 221  ASN  ND2', ' A 270  GLU  OE1', -0.562, (18.888, 63.8, 23.766)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.545, (15.269, 41.573, -13.684)), (' A 114  VAL  O  ', ' A 125  VAL  HA ', -0.545, (16.33, 30.16, 9.288)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.543, (11.376, 47.267, 8.72)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.521, (8.608, 26.463, -12.963)), (' A 222  ARG  CD ', ' A 222  ARG  O  ', -0.521, (14.268, 67.65, 29.681)), (' A  45  THR HG22', ' A  48  ASP  OD1', -0.512, (15.1, 24.94, -20.284)), (' A 211  ALA  HA ', ' A 282  LEU HD21', -0.508, (18.717, 47.107, 25.696)), (' A  22  CYS  SG ', ' A  61  LYS  HD2', -0.489, (8.609, 19.431, -15.017)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.486, (5.171, 31.361, -10.765)), (' A  19  GLN HE21', ' A 119  ASN  HA ', -0.485, (17.816, 18.373, -2.732)), (' A 132  PRO  HD2', ' A 197  ASP  OD1', -0.471, (14.205, 48.954, 3.707)), (' A  53  ASN  O  ', ' A  57  LEU  HG ', -0.47, (6.685, 27.698, -20.002)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.468, (17.531, 54.82, 11.516)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.462, (1.266, 12.604, -9.898)), (' A  21  THR  HA ', ' A  25  THR  O  ', -0.453, (13.696, 19.412, -9.497)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.45, (0.409, 28.411, 10.138)), (' A 135  THR  HB ', ' A 171  VAL HG22', -0.436, (17.053, 42.513, -0.389)), (' A  57  LEU  O  ', ' A  61  LYS  HG2', -0.426, (5.928, 21.589, -18.012)), (' A   5  LYS  HA ', ' A   5  LYS  HD3', -0.409, (17.647, 39.749, 16.967)), (' A  82  MET  HB2', ' A  82  MET  HE3', -0.404, (1.975, 26.404, -12.86)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.401, (4.41, 31.816, -4.892)), (' A 153  ASP  O  ', ' A 154  TYR  CD1', -0.401, (-0.197, 33.931, 18.949))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
