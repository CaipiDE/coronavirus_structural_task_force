# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.01080996503229832, (9.686, 4.19, 29.601)), ('A', '   6 ', 'MET', 0.18104154785101248, (10.496000000000002, 0.5010000000000002, 29.635999999999996)), ('A', ' 153 ', 'ASP', 0.004056190166818767, (15.414, -9.701, 39.736)), ('A', ' 156 ', 'CYS', 0.12995676856600202, (12.769, -14.311, 40.358)), ('A', ' 167 ', 'LEU', 0.21916647480851975, (-9.836999999999994, 7.263000000000001, 43.331)), ('A', ' 169 ', 'THR', 0.04173949040893428, (-8.941999999999997, 12.148, 41.005))]
data['cbeta'] = []
data['probe'] = [(' A  47  GLU  HA ', ' A  50  LEU HD23', -0.645, (-24.063, -0.401, 47.22)), (' A 226  THR  OG1', ' A 229  ASP  N  ', -0.631, (21.615, 23.387, 50.68)), (' B 165  MET  HE3', ' B 401  NNA  H9A', -0.628, (21.213, 3.658, 7.939)), (' A 235  MET  HE2', ' A 241  PRO  HG3', -0.611, (12.402, 17.297, 52.588)), (' A 123  SER  HB2', ' B 304  THR HG22', -0.61, (-6.779, -7.161, 27.395)), (' B  63  ASN  ND2', ' B  78  ILE  O  ', -0.582, (24.383, -25.889, 5.73)), (' A 298  ARG  HG2', ' A 303  VAL  HB ', -0.574, (18.998, -3.441, 33.698)), (' A 298  ARG  NH2', ' A 502  HOH  O  ', -0.559, (13.866, -2.8, 32.356)), (' A  75  LEU HD23', ' A  91  VAL HG21', -0.556, (-6.03, -23.75, 39.865)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.55, (3.408, 4.928, 16.998)), (' A 401  NNA  N3 ', ' A 401  NNA  O12', -0.548, (-13.626, 6.479, 44.777)), (' A 226  THR  HG1', ' A 229  ASP  H  ', -0.534, (22.119, 23.442, 50.462)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.52, (12.624, -9.47, 25.652)), (' A 219  PHE  HB2', ' A 271  LEU HD11', -0.512, (17.923, 21.383, 33.721)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.5, (9.023, 7.483, 43.273)), (' B   5  LYS  HG2', ' B 291  PHE  CZ ', -0.497, (1.579, 6.704, 24.701)), (' A 167  LEU  HG ', ' A 401  NNA  H7 ', -0.495, (-9.321, 6.992, 46.113)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.492, (-22.085, -6.511, 47.139)), (' A  31  TRP  CZ2', ' A  75  LEU HD21', -0.488, (-4.485, -23.827, 38.092)), (' A   4  ARG  O  ', ' A 299  GLN  NE2', -0.486, (13.542, 3.767, 29.162)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.486, (5.696, 19.975, 28.35)), (' A 111  THR HG22', ' A 129  ALA  HB2', -0.485, (8.024, 4.916, 38.959)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.482, (-4.516, -8.216, 49.575)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.47, (16.581, -7.654, 6.424)), (' A 187  ASP  N  ', ' A 187  ASP  OD1', -0.467, (-11.386, -2.48, 51.948)), (' A   6  MET  HE3', ' B 124  GLY  HA3', -0.465, (13.296, -3.757, 28.428)), (' A  49  MET  SD ', ' A 401  NNA H32B', -0.465, (-16.752, -3.463, 46.196)), (' B 231  ASN  HB3', ' B 235  MET  HE3', -0.464, (-2.598, 21.309, 4.518)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.46, (2.542, 8.494, 12.972)), (' A 270  GLU  HG2', ' A 274  ASN  OD1', -0.459, (17.621, 29.055, 36.987)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.456, (21.558, -9.713, 14.293)), (' B 295  ASP  OD1', ' B 298  ARG  NH1', -0.453, (-1.85, 0.27, 19.991)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.448, (9.688, -22.017, 16.393)), (' A   8  PHE  HB3', ' A 152  ILE HD13', -0.447, (10.246, -7.865, 33.759)), (' A 295  ASP  OD1', ' A 298  ARG  NH1', -0.446, (13.825, -0.001, 36.059)), (' A 165  MET  HE3', ' A 401  NNA  H9A', -0.444, (-9.405, 3.417, 47.966)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.439, (1.633, -22.318, 38.682)), (' A  31  TRP  CE2', ' A  75  LEU HD21', -0.438, (-4.924, -23.384, 38.097)), (' B 206  ALA  HB2', ' B 293  PRO  HG3', -0.437, (-6.571, 9.024, 16.417)), (' B 209  TYR  O  ', ' B 213  ILE HG13', -0.433, (-11.521, 10.84, 24.74)), (' B  31  TRP  CE2', ' B  75  LEU HD21', -0.433, (16.25, -22.603, 16.96)), (' B 163  HIS  HE1', ' B 401  NNA H41B', -0.432, (21.001, -0.029, 17.371)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.429, (-13.701, 6.09, 50.655)), (' A  66  PHE  HB2', ' A  77  VAL HG21', -0.428, (-13.843, -20.889, 43.302)), (' A  63  ASN  ND2', ' A  78  ILE  O  ', -0.425, (-13.211, -25.893, 48.992)), (' B  75  LEU  HB3', ' B  91  VAL HG11', -0.424, (19.892, -23.06, 14.84)), (' B 201  THR  OG1', ' B 239  TYR  HB3', -0.423, (-0.572, 17.276, 11.001)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.422, (21.701, 6.561, 48.362)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.419, (-10.004, -9.712, 41.399)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.417, (-0.738, -9.484, 29.607)), (' B 187  ASP  N  ', ' B 187  ASP  OD1', -0.417, (23.169, -1.484, 4.435)), (' B  50  LEU  O  ', ' B 188  ARG  NE ', -0.409, (30.924, 2.569, 2.912)), (' A 298  ARG  HD3', ' A 305  PHE  HZ ', -0.406, (16.61, -5.015, 35.322)), (' A 165  MET  HE3', ' A 401  NNA  H8 ', -0.402, (-10.606, 3.018, 47.779))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
