# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  23 ', 'GLY', 0.011276082961106378, (13.569999999999995, 16.678, -14.65)), ('A', '  46 ', 'SER', 0.028584964849175273, (19.031000000000013, 26.643, -20.263)), ('A', '  47 ', 'GLU', 0.021574641962159437, (17.595999999999997, 29.010000000000005, -22.96)), ('A', ' 154 ', 'TYR', 0.00945074972194447, (0.7910000000000016, 30.105999999999998, 19.736)), ('A', ' 302 ', 'GLY', 0.06707633035448196, (6.006000000000006, 36.944, 26.314999999999998))]
data['omega'] = [('A', '  26 ', 'THR', None, (16.672, 21.641, -9.328))]
data['rota'] = [('A', '   5 ', 'LYS', 0.0, (18.325000000000003, 38.60299999999999, 17.392)), ('A', '  26 ', 'THR', 0.07761627890062853, (16.403, 21.093, -7.985)), ('A', '  46 ', 'SER', 0.07019111862022955, (19.031000000000013, 26.643, -20.263)), ('A', '  49 ', 'MET', 0.03364459011473405, (15.707999999999993, 31.828, -18.308)), ('A', '  55 ', 'GLU', 0.27024265012557336, (1.841999999999994, 28.45, -18.784)), ('A', '  74 ', 'GLN', 0.024883927584559234, (9.34, 9.592999999999998, -2.8270000000000004)), ('A', '  81 ', 'SER', 0.22911361981201134, (-1.2069999999999943, 23.703999999999997, -10.816)), ('A', '  87 ', 'LEU', 0.07333811667022205, (3.8260000000000036, 25.827999999999992, -8.316)), ('A', ' 107 ', 'GLN', 0.0429765256317615, (4.348000000000006, 44.74099999999999, 5.376)), ('A', ' 153 ', 'ASP', 0.0, (1.7019999999999993, 32.75199999999999, 17.083)), ('A', ' 232 ', 'LEU', 0.06133429827047657, (12.759999999999998, 66.908, 10.207)), ('A', ' 236 ', 'LYS', 0.0, (17.842, 63.91499999999999, 6.868000000000001))]
data['cbeta'] = [('A', '  25 ', 'THR', ' ', 0.34140685650618524, (17.602000000000004, 21.893999999999995, -12.508)), ('A', '  26 ', 'THR', ' ', 0.31199629169858456, (17.393, 19.93, -7.7989999999999995)), ('A', '  54 ', 'TYR', ' ', 0.28796519051438146, (5.473000000000002, 29.907999999999998, -16.131)), ('A', '  87 ', 'LEU', ' ', 0.27408972378887536, (5.033999999999998, 24.947, -8.597)), ('A', ' 107 ', 'GLN', ' ', 0.32622409951157944, (3.7589999999999972, 45.734, 6.380999999999999)), ('A', ' 154 ', 'TYR', ' ', 0.26409888840793205, (-0.7399999999999937, 30.305999999999994, 19.723)), ('A', ' 216 ', 'ASP', ' ', 0.37170120815286906, (21.634999999999998, 49.366, 27.94)), ('A', ' 290 ', 'GLU', ' ', 0.2764452835671195, (16.2, 43.799, 11.784))]
data['probe'] = [(' A 303  VAL  HA ', ' A 524  HOH  O  ', -1.094, (8.286, 33.432, 24.196)), (' A  22  CYS  O  ', ' A 501  HOH  O  ', -0.842, (13.812, 20.482, -14.177)), (' A  70  ALA  O  ', ' A  73  VAL HG12', -0.777, (10.41, 10.873, 1.999)), (' A 229  ASP  OD2', ' A 502  HOH  O  ', -0.63, (10.496, 70.196, 17.812)), (' A  25  THR  HA ', ' A  26  THR HG22', -0.619, (18.66, 20.414, -10.036)), (' A 153  ASP  C  ', ' A 154  TYR  CD1', -0.514, (0.098, 32.303, 18.095)), (' A  55  GLU  O  ', ' A  59  ILE HD12', -0.511, (0.688, 25.919, -20.426)), (' A  53  ASN  O  ', ' A  57  LEU  HG ', -0.508, (6.816, 28.045, -20.214)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.507, (11.178, 32.827, 7.402)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.485, (1.843, 13.009, -10.676)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.481, (-0.295, 27.66, 18.215)), (' A  84  ASN  HB3', ' A 179  GLY  O  ', -0.481, (2.667, 34.876, -7.969)), (' A 189  GLN HE21', ' A 401  NOL HN25', -0.48, (18.808, 33.605, -12.108)), (' A  61  LYS  HB3', ' A  65  ASN  HB2', -0.477, (6.242, 17.536, -15.639)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.475, (3.986, 32.232, -5.23)), (' A  58  LEU HD22', ' A  82  MET  HB2', -0.472, (1.214, 26.783, -13.416)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.464, (8.437, 26.71, -13.093)), (' A  48  ASP  O  ', ' A  48  ASP  OD1', -0.455, (13.329, 28.987, -20.191)), (' A  42  VAL HG13', ' A  43  ILE HG23', -0.442, (8.869, 23.648, -12.022)), (' A 288  GLU  HB3', ' A 505  HOH  O  ', -0.44, (18.729, 45.727, 14.259)), (' A 153  ASP  C  ', ' A 154  TYR  HD1', -0.424, (-0.079, 32.125, 17.932)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.421, (0.577, 28.674, 10.076)), (' A  84  ASN  CB ', ' A 179  GLY  O  ', -0.416, (2.492, 34.617, -7.704)), (' A  62  SER  N  ', ' A  65  ASN  OD1', -0.411, (5.061, 16.055, -17.293)), (' A  67  LEU  CD1', ' A  74  GLN HE21', -0.4, (11.019, 9.649, -6.785))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
