# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.028571937201711625, (10.025999999999996, -11.341, -9.338))]
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.1766683569032977, (-1.8740000000000019, 5.584, -16.319)), ('A', '  27 ', 'LEU', 0.26918570279765425, (5.766000000000003, -9.833, 19.158)), ('A', '  45 ', 'THR', 0.04526630393091354, (11.556, -6.9819999999999975, 31.452)), ('A', '  46 ', 'SER', 0.23742984799540473, (10.212, -3.605, 32.808)), ('A', '  72 ', 'ASN', 0.003436075986514668, (-2.8359999999999994, -22.093, 15.986)), ('A', '  73 ', 'VAL', 0.0038711905238759483, (0.15300000000000047, -24.581, 15.973)), ('A', ' 137 ', 'LYS', 0.1585601520971938, (7.763999999999999, 6.942, 9.204)), ('A', ' 240 ', 'GLU', 0.275910180762988, (19.962, 15.605000000000002, -0.022)), ('A', ' 276 ', 'MET', 0.19816100022782987, (3.248, 24.888, -5.573)), ('A', ' 279 ', 'ARG', 0.0, (-1.557, 23.358, -7.3100000000000005))]
data['cbeta'] = [('A', ' 290 ', 'GLU', ' ', 0.2543308047172969, (8.361, 7.657000000000001, 0.061))]
data['probe'] = [(' A 294  PHE  CD2', ' A 680  HOH  O  ', -1.065, (16.103, 3.517, -8.843)), (' A 279 AARG  CG ', ' A 279 AARG HH11', -1.05, (-1.888, 24.521, -9.727)), (' A 110  GLN  HG3', ' A 721  HOH  O  ', -1.033, (19.445, 1.121, -1.508)), (' A 279 AARG  HG2', ' A 279 AARG HH11', -1.016, (-2.777, 24.872, -10.211)), (' A 279 AARG  HG2', ' A 279 AARG  NH1', -0.979, (-2.923, 24.211, -10.686)), (' A 217  ARG  NH2', ' A 501  HOH  O  ', -0.922, (2.455, 14.978, -22.035)), (' A  58  LEU HD22', ' A  82 AMET  HE3', -0.801, (20.479, -12.79, 22.929)), (' A 279 AARG  NH1', ' A 502  HOH  O  ', -0.755, (-2.678, 21.87, -10.536)), (' A 401  DMS  H13', ' A 684  HOH  O  ', -0.737, (9.34, -25.729, 21.574)), (' A  46  SER  HA ', ' A  49  MET  HE3', -0.713, (9.935, -2.784, 30.842)), (' A  54  TYR  HB3', ' A  82 AMET  HE1', -0.631, (20.85, -9.962, 23.884)), (' A  50  LEU  O  ', ' A 188  ARG  NE ', -0.613, (19.193, 2.221, 28.553)), (' A 163  HIS  NE2', ' A 405  DMS  H21', -0.567, (7.886, 0.028, 16.337)), (' A 221  ASN  ND2', ' A 267  SER  HA ', -0.56, (11.539, 24.499, -13.542)), (' A 279 AARG  CG ', ' A 279 AARG  NH1', -0.548, (-1.497, 23.87, -9.981)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.54, (12.364, 17.696, -1.606)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.533, (0.29, -8.899, 6.089)), (' A  19  GLN HE21', ' A 119  ASN HD22', -0.531, (0.538, -12.931, 19.638)), (' A 294  PHE  HD2', ' A 680  HOH  O  ', -0.517, (16.033, 3.363, -7.35)), (' A 276 BMET  O  ', ' A 279 BARG  HD2', -0.515, (1.403, 25.56, -7.593)), (' A  41  HIS  HE1', ' A 164  HIS  O  ', -0.51, (11.419, -2.998, 18.985)), (' A 217  ARG  NE ', ' A 507  HOH  O  ', -0.505, (1.398, 18.41, -21.317)), (' A  65  ASN  HA ', ' A 402  DMS  O  ', -0.504, (9.349, -20.416, 27.637)), (' A 406  DMS  H23', ' A 663  HOH  O  ', -0.504, (12.358, 7.401, 24.959)), (' A 198 BTHR HG21', ' A 240 BGLU  HG2', -0.5, (19.067, 15.146, 2.231)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.5, (14.653, 8.251, 0.458)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.498, (1.697, -3.702, 15.285)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.493, (8.688, -3.843, -12.039)), (' A 279 AARG  NH1', ' A 514  HOH  O  ', -0.489, (-4.225, 23.513, -10.717)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.475, (18.436, -7.933, 14.238)), (' A 217  ARG  HD2', ' A 501  HOH  O  ', -0.464, (1.871, 15.501, -20.64)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.461, (8.963, -21.369, 8.672)), (' A 252  PRO  HD2', ' A 525  HOH  O  ', -0.453, (16.28, 6.314, -15.121)), (' A 163  HIS  NE2', ' A 405  DMS  C2 ', -0.451, (7.514, 0.224, 16.657)), (' A 197  ASP  HA ', ' A 558  HOH  O  ', -0.45, (15.65, 12.701, 7.351)), (' A 298  ARG  HD2', ' A 403  DMS  O  ', -0.435, (7.424, -1.449, -7.916)), (' A  19  GLN  NE2', ' A 119  ASN HD22', -0.423, (0.362, -13.087, 19.877)), (' A 117 BCYS  SG ', ' A 121  SER  N  ', -0.42, (1.194, -11.241, 12.349)), (' A 168  PRO  HD3', ' A 406  DMS  H22', -0.409, (11.943, 7.141, 22.271)), (' A 221  ASN  HB2', ' A 808  HOH  O  ', -0.408, (10.124, 28.129, -16.036)), (' A 228  ASN  HA ', ' A 228  ASN HD22', -0.401, (27.17, 21.531, -7.167)), (' A 117 BCYS  SG ', ' A 121  SER  C  ', -0.4, (0.696, -10.475, 10.696)), (' A 227 BLEU  HA ', ' A 227 BLEU HD23', -0.4, (23.021, 19.099, -10.728))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
