# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   5 ', 'LYS', 0.03204327424244206, (2.285, 4.663, -3.6009999999999995)), ('A', ' 154 ', 'TYR', 0.020559155916472976, (10.060000000000004, -11.589, -9.788))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.2794701396499963, (6.199999999999999, -9.812999999999997, 18.942)), ('A', ' 121 ', 'SER', 0.02383823243267746, (-0.6820000000000008, -11.882, 12.115999999999998)), ('A', ' 123 ', 'SER', 0.01071998049155809, (-2.6910000000000007, -6.169999999999998, 9.595)), ('A', ' 128 ', 'CYS', 0.11191777760875751, (8.271999999999998, 3.183, 2.802)), ('A', ' 171 ', 'VAL', 0.17752230936472566, (9.535, 7.905999999999996, 13.803)), ('A', ' 217 ', 'ARG', 0.051781412511860775, (2.977000000000002, 18.812999999999995, -16.494)), ('A', ' 267 ', 'SER', 0.2352791145593958, (11.296, 22.551999999999996, -12.674)), ('A', ' 276 ', 'MET', 0.027693999916061418, (2.9060000000000015, 24.669, -5.585999999999999)), ('A', ' 298 ', 'ARG', 0.035689219812954205, (8.380000000000004, -0.626, -12.638999999999998))]
data['cbeta'] = []
data['probe'] = [(' A 106  ILE  O  ', ' A1102  HOH  O  ', -0.683, (21.658, 1.277, 3.213)), (' A 290  GLU  OE1', ' A1104  HOH  O  ', -0.568, (6.926, 7.018, 1.623)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.565, (14.496, -13.189, -1.146)), (' A  22  CYS  SG ', ' A  61  LYS  HD2', -0.551, (13.262, -15.992, 26.637)), (' A 157  VAL HG11', ' A 159  PHE  CZ ', -0.538, (10.846, -12.066, 1.781)), (' A 122  PRO  CG ', ' A1336  HOH  O  ', -0.538, (0.467, -12.857, 7.601)), (' A 216  ASP  OD2', ' A1101  HOH  O  ', -0.536, (-2.036, 14.691, -11.124)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.499, (14.763, -24.886, 21.035)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.493, (2.471, -3.143, 15.316)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.491, (7.479, -3.213, -12.009)), (' A  53  ASN  HA ', ' A1356  HOH  O  ', -0.48, (23.841, -5.201, 28.017)), (' A 104  VAL  O  ', ' A 160  CYS  HA ', -0.478, (17.871, -5.342, 3.326)), (' A 117  CYS  O  ', ' A 144  SER  HA ', -0.475, (3.2, -5.861, 14.263)), (' A  85  CYS  O  ', ' A 164  HIS  HE1', -0.465, (17.379, -6.838, 17.147)), (' A 148  VAL  HA ', ' A 161  TYR  O  ', -0.455, (11.604, -6.006, 8.047)), (' A 228  ASN  ND2', ' A1128  HOH  O  ', -0.445, (28.055, 19.757, -9.281)), (' A 286  LEU  C  ', ' A 286  LEU HD12', -0.442, (4.41, 16.652, -1.898)), (' A 112  PHE  CD2', ' A 149  GLY  HA3', -0.435, (11.051, -2.773, 4.323)), (' A 177  LEU  HA ', ' A 177  LEU HD13', -0.435, (16.868, -9.268, 9.998)), (' A 122  PRO  HD3', ' A1336  HOH  O  ', -0.431, (0.127, -13.155, 8.478)), (' A 165  MET  HE2', ' A 185  PHE  HB3', -0.427, (17.077, 3.014, 17.637)), (' A 122  PRO  CD ', ' A1336  HOH  O  ', -0.426, (-0.025, -13.079, 8.261)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.425, (8.826, -4.204, 3.873)), (' A  27  LEU  C  ', ' A  27  LEU HD12', -0.411, (7.344, -11.205, 18.379)), (' A 208  LEU  O  ', ' A 212  VAL HG23', -0.409, (6.79, 14.958, -14.691)), (' A  33  ASP  O  ', ' A  94  ALA  HA ', -0.408, (12.367, -23.874, 7.921)), (' A 114  VAL HG11', ' A 140  PHE  CZ ', -0.407, (6.607, -1.136, 9.143)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.406, (14.983, 8.201, 0.086))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
