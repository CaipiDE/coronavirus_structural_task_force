# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.02189784338265174, (10.436, -11.539, -9.406))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.2956266337716486, (5.858000000000002, -9.852, 19.154)), ('A', ' 137 ', 'LYS', 0.24923538632380884, (7.8260000000000005, 6.961000000000001, 9.171000000000001)), ('A', ' 279 ', 'ARG', 0.0, (-1.523, 23.373, -7.351))]
data['cbeta'] = [('A', ' 290 ', 'GLU', ' ', 0.27385276326698016, (8.449999999999998, 7.666999999999999, 0.037))]
data['probe'] = [(' A 404  T0S  N04', ' A 502  HOH  O  ', -1.156, (4.816, -28.507, 7.082)), (' A 279 AARG  HG2', ' A 279 AARG HH11', -1.087, (-1.995, 25.038, -9.67)), (' A  70  ALA  O  ', ' A 501  HOH  O  ', -1.072, (0.625, -21.913, 11.756)), (' A 279 AARG  CG ', ' A 279 AARG HH11', -0.925, (-1.741, 24.599, -9.689)), (' A 279 AARG  HG2', ' A 279 AARG  NH1', -0.908, (-2.695, 24.949, -10.61)), (' A 110  GLN  HG3', ' A 717  HOH  O  ', -0.906, (19.503, 0.926, -1.468)), (' A 221  ASN  HB2', ' A 826  HOH  O  ', -0.896, (9.717, 27.831, -15.834)), (' A  58  LEU HD22', ' A  82 AMET  HE3', -0.798, (20.648, -13.12, 23.138)), (' A 217  ARG  NH2', ' A 503  HOH  O  ', -0.783, (2.612, 14.598, -21.852)), (' A 221  ASN  ND2', ' A 267  SER  HA ', -0.769, (11.446, 24.351, -13.707)), (' A 401  DMS  H13', ' A 707  HOH  O  ', -0.735, (9.405, -25.659, 21.711)), (' A 236  LYS  NZ ', ' A 506  HOH  O  ', -0.656, (15.051, 31.567, -0.024)), (' A  15  GLY  HA2', ' A 405  DMS  H21', -0.652, (2.618, -18.052, 5.269)), (' A 221  ASN HD21', ' A 267  SER  HA ', -0.622, (12.153, 24.682, -13.082)), (' A  15  GLY  HA2', ' A 405  DMS  C2 ', -0.619, (2.368, -17.566, 5.4)), (' A 197  ASP  HA ', ' A 533  HOH  O  ', -0.608, (15.919, 13.21, 6.985)), (' A 221  ASN  CB ', ' A 826  HOH  O  ', -0.587, (9.454, 27.488, -15.349)), (' A  41  HIS  HE1', ' A 164  HIS  O  ', -0.578, (11.562, -3.332, 19.223)), (' A  95  ASN  OD1', ' A 504  HOH  O  ', -0.574, (5.813, -22.509, 6.023)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.567, (8.734, -3.86, -12.131)), (' A  54  TYR  HB3', ' A  82 AMET  HE1', -0.556, (20.504, -9.869, 24.073)), (' A 279 AARG  CG ', ' A 279 AARG  NH1', -0.545, (-1.547, 24.085, -9.896)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.531, (14.925, 8.333, 0.119)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.517, (0.247, -8.792, 6.123)), (' A 404  T0S  N15', ' A 509  HOH  O  ', -0.515, (3.233, -21.386, 6.998)), (' A  72  ASN  N  ', ' A 505  HOH  O  ', -0.508, (-1.394, -22.535, 13.182)), (' A  14  GLU  O  ', ' A 405  DMS  H22', -0.505, (2.61, -16.131, 6.565)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.5, (1.67, -3.629, 15.416)), (' A  96  PRO  HD2', ' A 504  HOH  O  ', -0.492, (5.622, -23.329, 6.263)), (' A  93  THR HG21', ' A 404  T0S  C05', -0.49, (6.888, -27.638, 9.678)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.479, (16.628, -11.45, 20.562)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.465, (18.409, -7.987, 14.248)), (' A 288 BGLU  HG2', ' A 291  PHE  CE2', -0.457, (5.37, 9.2, -4.427)), (' A 198 BTHR HG21', ' A 240 BGLU  HG2', -0.453, (19.481, 14.663, 1.912)), (' A  70  ALA  O  ', ' A  73 AVAL HG12', -0.453, (1.27, -22.907, 13.074)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.442, (8.981, -21.411, 8.635)), (' A 104  VAL  O  ', ' A 160  CYS  HA ', -0.442, (17.95, -5.569, 4.202)), (' A  73 AVAL HG12', ' A 501  HOH  O  ', -0.434, (0.881, -23.387, 12.363)), (' A 404  T0S  C05', ' A 502  HOH  O  ', -0.427, (5.821, -27.763, 7.76)), (' A 404  T0S  N15', ' A 405  DMS  S  ', -0.426, (1.992, -20.622, 7.95)), (' A 227 ALEU  HA ', ' A 227 ALEU HD12', -0.42, (23.287, 19.382, -9.557)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.417, (8.771, -4.106, 4.174)), (' A  65  ASN  HA ', ' A 402  DMS  O  ', -0.417, (9.717, -20.435, 28.028)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.416, (14.447, -13.276, -0.454)), (' A 132  PRO  HD2', ' A 533  HOH  O  ', -0.404, (16.025, 11.881, 5.839)), (' A 100  LYS  NZ ', ' A 550  HOH  O  ', -0.404, (18.191, -15.95, -3.759)), (' A 227 BLEU  HA ', ' A 227 BLEU HD23', -0.4, (23.333, 19.143, -9.79))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
