# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  33 ', 'ASP', None, (13.739000000000004, -19.751000000000005, 28.76799999999999)), ('A', '  84 ', 'ASN', None, (23.488000000000007, -5.163999999999999, 24.997999999999994)), ('A', ' 154 ', 'TYR', None, (5.366999999999998, -21.523, 12.349999999999998)), ('A', ' 155 ', 'ASP', None, (5.520000000000001, -23.643, 14.525999999999994))]
data['rota'] = [('A', ' 106 ', 'ILE', 0.12488469957205833, (14.039, -7.511, 11.094999999999999))]
data['cbeta'] = [('A', '  84 ', 'ASN', ' ', 0.3503345680109188, (23.904000000000003, -3.243, 23.827999999999992)), ('A', ' 154 ', 'TYR', ' ', 0.7520093590690388, (5.559000000000001, -23.76, 11.611)), ('A', ' 222 ', 'ARG', ' ', 0.6342610244886938, (-3.0680000000000023, 0.787, -20.762999999999995)), ('B', '  33 ', 'ASP', ' ', 0.31581025125210505, (-16.35, -27.208, 30.699)), ('B', '  84 ', 'ASN', ' ', 0.2584926375906565, (-30.495000000000005, -21.900999999999996, 17.089999999999993)), ('B', ' 154 ', 'TYR', ' ', 0.2972889455289934, (-11.191000000000004, -8.443, 34.517))]
data['probe'] = [(' B 188  ARG  NH1', ' B 503  HOH  O  ', -0.948, (-34.526, -21.589, 6.553)), (' B   4  ARG  O  ', ' B 299  GLN  NE2', -0.741, (-7.299, 0.932, 18.655)), (' B   4  ARG  HB3', ' B 511  HOH  O  ', -0.735, (-3.465, -0.366, 14.914)), (' B  76  ARG  HG2', ' B 642  HOH  O  ', -0.729, (-14.693, -41.952, 24.243)), (' A 229  ASP  OD1', ' A 502  HOH  O  ', -0.712, (14.317, 6.141, -17.635)), (' A 223  PHE  O  ', ' A 503  HOH  O  ', -0.709, (0.082, 0.372, -18.01)), (' B 300  CYS  SG ', ' B 718  HOH  O  ', -0.692, (-7.923, 8.774, 26.741)), (' B 137  LYS  NZ ', ' B 508  HOH  O  ', -0.674, (-18.6, -0.029, 5.676)), (' A 155  ASP  N  ', ' A 155  ASP  OD1', -0.65, (6.298, -24.388, 14.295)), (' B 189  GLN  OE1', ' B 504  HOH  O  ', -0.645, (-21.354, -23.648, 0.281)), (' B  76  ARG  NH2', ' B 509  HOH  O  ', -0.622, (-11.928, -45.654, 21.539)), (' A 401 BK36  H2 ', ' A 699  HOH  O  ', -0.609, (10.578, 11.566, 24.8)), (' B   4  ARG  NE ', ' B 511  HOH  O  ', -0.59, (-3.076, -0.832, 14.156)), (' B  56  ASP  O  ', ' B  59  ILE HG22', -0.583, (-32.171, -37.343, 9.522)), (' A 235  MET  HG2', ' A 595  HOH  O  ', -0.578, (14.38, 6.399, -4.645)), (' A  84  ASN  HB3', ' A 716  HOH  O  ', -0.576, (24.684, -1.501, 23.074)), (' A 302  GLY  HA3', ' B 641  HOH  O  ', -0.552, (-9.621, -19.441, -0.173)), (' B   4  ARG  CZ ', ' B 511  HOH  O  ', -0.546, (-3.03, -1.056, 14.04)), (' A 196  THR  O  ', ' A 505  HOH  O  ', -0.528, (14.373, 8.377, 6.089)), (' A  50  LEU  O  ', ' A 188  ARG  NE ', -0.509, (20.282, 12.202, 29.154)), (' A 106 BILE HG12', ' A 110 BGLN  HB2', -0.506, (11.021, -6.745, 8.904)), (' B   4  ARG  NH1', ' B 511  HOH  O  ', -0.506, (-3.226, -1.486, 13.906)), (' B   5  LYS  NZ ', ' B 502  HOH  O  ', -0.505, (-13.176, -2.42, 12.157)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.497, (-25.681, -2.803, 12.795)), (' A 241  PRO  HB3', ' A 737  HOH  O  ', -0.485, (14.759, 4.117, -6.061)), (' A 102  LYS  NZ ', ' A 158  SER  OG ', -0.484, (12.169, -16.869, 13.442)), (' A 137  LYS  CE ', ' A 632  HOH  O  ', -0.484, (1.628, 3.58, 9.367)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.477, (5.766, 8.429, -11.627)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.475, (8.557, -1.345, 5.248)), (' A 131  ARG  HG2', ' A 135  THR  O  ', -0.473, (8.398, 2.4, 11.452)), (' B 193  ALA  HA ', ' B 505  HOH  O  ', -0.463, (-26.585, -9.457, 0.615)), (' A 166  GLU  O  ', ' A 401 BK36  H1 ', -0.458, (9.539, 9.189, 23.67)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.45, (-20.787, -0.345, 14.553)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.435, (3.159, -9.631, 27.425)), (' A 137  LYS  HE2', ' A 632  HOH  O  ', -0.432, (1.51, 3.297, 9.862)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.43, (5.407, -8.01, 17.72)), (' B 222  ARG  NH2', ' B 526  HOH  O  ', -0.427, (-23.267, 32.852, 23.804)), (' B 154  TYR  OH ', ' B 501  HOH  O  ', -0.425, (-10.712, -1.707, 36.382)), (' B   6 BMET  HB2', ' B   6 BMET  HE3', -0.42, (-5.144, -1.055, 19.557)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.415, (-0.818, -9.864, 25.598)), (' B  56 BASP  OD2', ' B  60  ARG  NH2', -0.403, (-32.541, -37.392, 6.04)), (' B 188  ARG  HG3', ' B 190  THR HG23', -0.401, (-30.0, -21.821, 0.594)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.4, (-13.63, -12.593, 17.165)), (' A  40  ARG  CZ ', ' A  54  TYR  CD2', -0.4, (21.962, 2.343, 28.108))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
