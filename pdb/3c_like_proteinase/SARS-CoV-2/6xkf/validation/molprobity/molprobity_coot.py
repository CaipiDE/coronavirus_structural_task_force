# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.02996536063691813, (-17.119, 11.257999999999996, 36.531)), ('B', '  23 ', 'GLY', 0.008039323638555083, (-32.40200000000001, 15.345999999999993, 14.196999999999996)), ('B', ' 154 ', 'TYR', 0.02281541619567354, (5.884, 11.75, 20.32))]
data['omega'] = []
data['rota'] = [('A', ' 301 ', 'SER', 0.20743524657280515, (-23.908, -0.179, 30.61)), ('B', ' 123 ', 'SER', 0.0965756246615422, (-15.31, 6.364, 28.821999999999996)), ('B', ' 165 ', 'MET', 0.001061624110603258, (-20.873, -0.5169999999999998, 12.971999999999998)), ('B', ' 169 ', 'THR', 0.07453616823969673, (-21.403, -11.518, 14.477)), ('B', ' 222 ', 'ARG', 0.1161302425791533, (16.381, -27.658, 20.75))]
data['cbeta'] = []
data['probe'] = [(' B 240  GLU  OE1', ' B 501  HOH  O  ', -0.642, (0.484, -10.711, 8.304)), (' B   5  LYS  HB3', ' B 401  EDO  H21', -0.625, (-3.607, -6.202, 27.443)), (' B 197  ASP  O  ', ' B 238 AASN  ND2', -0.599, (-7.698, -17.744, 10.063)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.559, (13.067, -2.768, 52.34)), (' B 165 AMET  HE3', ' B 167  LEU HD21', -0.551, (-19.74, -4.405, 9.166)), (' B 198  THR HG22', ' B 238 AASN  OD1', -0.526, (-5.946, -18.385, 7.99)), (' A 171  VAL HG22', ' A 172  HIS  H  ', -0.521, (4.355, -6.784, 41.272)), (' B 298  ARG  HG3', ' B 303  VAL  HB ', -0.511, (7.861, 3.735, 22.5)), (' B  68  VAL HG12', ' B  75  LEU HD13', -0.507, (-19.555, 21.297, 18.383)), (' B  66  PHE  CE1', ' B  87  LEU HD21', -0.502, (-24.413, 15.628, 8.998)), (' B  86  VAL HG23', ' B 179  GLY  HA2', -0.502, (-15.392, 8.165, 6.479)), (' A 297  VAL  O  ', ' A 301  SER  HB3', -0.5, (-22.418, -1.172, 32.64)), (' B  36  VAL HG21', ' B  68  VAL HG11', -0.49, (-18.503, 19.832, 15.612)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.481, (4.199, 7.44, 49.632)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.481, (-2.169, -8.144, 13.05)), (' A 126  TYR  HE1', ' A 128  CYS  HG ', -0.48, (-0.443, -1.994, 35.251)), (' B  22  CYS  O  ', ' B  24  THR  N  ', -0.475, (-31.594, 13.339, 14.696)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.464, (-3.269, 4.011, 37.683)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.45, (-7.553, 4.464, 18.889)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.447, (-11.606, 8.936, 26.155)), (' A 128  CYS  SG ', ' B   4 AARG  NH1', -0.44, (-1.319, -3.84, 35.282)), (' B 225  THR HG22', ' B 226  THR  N  ', -0.436, (12.043, -24.121, 8.901)), (' B 169  THR HG23', ' B 171  VAL HG22', -0.435, (-18.84, -9.645, 13.19)), (' B 155  ASP  HB3', ' B 306  GLN  HG2', -0.43, (5.348, 16.124, 21.22)), (' B 127  GLN  HG2', ' B 539  HOH  O  ', -0.429, (-1.161, -2.924, 21.559)), (' B   5  LYS  CB ', ' B 401  EDO  H21', -0.428, (-3.276, -5.929, 27.141)), (' B   4 AARG  HD3', ' B 401  EDO  O1 ', -0.424, (-1.655, -6.727, 30.337)), (' B 165 AMET  CE ', ' B 185  PHE  HB3', -0.422, (-19.083, -2.915, 7.315)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.419, (-26.012, 10.33, 7.62)), (' B 108  PRO  HG3', ' B 134  PHE  CE1', -0.418, (-6.375, -4.827, 5.961)), (' B   6  MET  HB2', ' B   6  MET  HE3', -0.416, (1.335, -1.685, 28.148)), (' B 164  HIS  C  ', ' B 165 BMET  HG2', -0.415, (-20.555, 1.243, 11.45)), (' B 118  TYR  CE2', ' B 144  SER  HB3', -0.409, (-20.254, 3.05, 23.102)), (' B 102  LYS  HB2', ' B 102  LYS  HE2', -0.407, (0.691, 12.342, 11.415)), (' A 285  ALA  HB2', ' B 286  LEU HD21', -0.406, (-7.002, -20.472, 25.048)), (' B 154  TYR  H  ', ' B 305  PHE  HD1', -0.405, (5.062, 9.674, 21.077)), (' B 262  LEU  HA ', ' B 262  LEU HD23', -0.403, (12.669, -18.509, 11.612)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.402, (-11.103, -22.243, 27.629))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
