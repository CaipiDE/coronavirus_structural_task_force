# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  46 ', 'SER', 0.016888698923340082, (8.261, -5.169, 31.479)), ('A', '  47 ', 'GLU', 0.013208374981957247, (10.722000000000001, -3.6919999999999997, 34.095)), ('A', '  50 ', 'LEU', 0.026178982687144046, (15.535999999999998, 1.1189999999999998, 30.581)), ('A', ' 154 ', 'TYR', 0.034078463178283995, (10.404, -11.552, -9.231))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.16652679546514354, (5.893000000000002, -9.765, 19.298)), ('A', ' 216 ', 'ASP', 0.22212974095587829, (0.8570000000000007, 16.539, -14.977999999999996)), ('A', ' 236 ', 'LYS', 0.19691558587550642, (19.096999999999994, 25.738, 1.7069999999999999))]
data['cbeta'] = []
data['probe'] = [(' A 294  PHE  CD2', ' A 687  HOH  O  ', -0.902, (16.042, 3.019, -8.433)), (' A 110  GLN  HG3', ' A 691  HOH  O  ', -0.847, (19.4, 0.801, -1.466)), (' A 294  PHE  HD2', ' A 687  HOH  O  ', -0.654, (16.19, 2.641, -7.377)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.607, (0.782, -9.472, 6.671)), (' A  33  ASP  HB3', ' A 757  HOH  O  ', -0.606, (16.451, -24.197, 6.24)), (' A  19  GLN  NE2', ' A 119  ASN  HB3', -0.603, (0.251, -13.45, 18.937)), (' A 191  ALA  HA ', ' A 599  HOH  O  ', -0.582, (14.186, 9.779, 25.367)), (' A 288  GLU  OE1', ' A 501  HOH  O  ', -0.559, (5.65, 10.645, -1.573)), (' A 165  MET  HE2', ' A 192  GLN HE22', -0.504, (16.147, 3.385, 20.835)), (' A 191  ALA  CA ', ' A 599  HOH  O  ', -0.501, (14.66, 9.697, 25.916)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.491, (8.235, -3.175, -11.915)), (' A 132  PRO  O  ', ' A 502  HOH  O  ', -0.48, (20.764, 9.707, 6.027)), (' A 251  GLY  O  ', ' A 254  SER  HB3', -0.47, (17.439, 9.694, -18.716)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.457, (14.242, -12.918, -0.181)), (' A  41  HIS  HE1', ' A 164  HIS  O  ', -0.457, (11.42, -2.477, 19.473)), (' A 161  TYR  CE1', ' A 174  GLY  HA3', -0.453, (14.034, -0.772, 11.988)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.445, (1.843, -3.645, 15.758)), (' A 110  GLN  CG ', ' A 691  HOH  O  ', -0.432, (19.48, 1.209, -0.945)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.43, (23.287, 19.396, -10.043)), (' A 165  MET  HE2', ' A 192  GLN  NE2', -0.423, (15.834, 3.781, 21.108)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.414, (6.331, -7.704, -3.328)), (' A 286  LEU  C  ', ' A 286  LEU HD12', -0.412, (4.244, 16.337, -1.538)), (' A  70  ALA  O  ', ' A  73 AVAL HG12', -0.411, (0.927, -23.495, 13.088)), (' A 191  ALA  HB3', ' A 535  HOH  O  ', -0.41, (18.081, 9.904, 26.7)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.407, (10.522, -21.365, 5.471)), (' A 104  VAL  O  ', ' A 160  CYS  HA ', -0.405, (18.012, -5.453, 4.115)), (' A  28  ASN  O  ', ' A 146  GLY  HA3', -0.404, (8.811, -9.64, 15.092)), (' A  33  ASP  OD1', ' A  98  THR HG21', -0.403, (13.915, -21.077, 3.657)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.401, (8.825, -21.49, 9.053))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
