# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.024093955522982897, (-50.903, -11.11, 5.328))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.27240462207272953, (-34.72399999999998, -9.463000000000003, 29.179)), ('A', '  46 ', 'SER', 0.07542818989793823, (-24.67400000000002, -2.717000000000001, 35.283)), ('A', '  72 ', 'ASN', 0.04650263316787157, (-43.353999999999985, -21.899000000000008, 32.195)), ('A', ' 216 ', 'ASP', 0.2926981649970185, (-61.616000000000014, 16.698000000000008, 7.724))]
data['cbeta'] = []
data['probe'] = [(' A 290  GLU  OE2', ' A1101  HOH  O  ', -0.696, (-41.72, 7.6, 15.623)), (' A  72  ASN  C  ', ' A  72  ASN HD22', -0.667, (-43.161, -23.627, 31.416)), (' A  70  ALA  O  ', ' A  73 AVAL HG12', -0.633, (-42.06, -22.9, 27.615)), (' A 221 AASN  ND2', ' A 267  SER  HA ', -0.628, (-52.112, 24.504, 1.574)), (' A 165  MET  HE3', ' A 181  PHE  CZ ', -0.606, (-28.399, 0.389, 21.421)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.588, (-46.912, -8.815, 23.612)), (' A 165  MET  HE1', ' A 186  VAL  O  ', -0.582, (-25.649, 1.715, 22.028)), (' A 299  GLN  HB2', ' A1131  HOH  O  ', -0.544, (-53.925, 2.264, 8.385)), (' A 165  MET  HE3', ' A 181  PHE  CE2', -0.533, (-28.419, 0.856, 21.297)), (' A 127  GLN  NE2', ' A1104  HOH  O  ', -0.532, (-47.335, 0.686, 10.749)), (' A 223  PHE  HA ', ' A1110  HOH  O  ', -0.529, (-53.171, 27.606, -5.765)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.519, (-40.084, -2.899, 29.013)), (' A 133  ASN  HB2', ' A1143  HOH  O  ', -0.519, (-30.276, 11.288, 15.309)), (' A  49  MET  HE2', ' A1001  HWH  C11', -0.493, (-26.102, -1.077, 27.679)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.493, (-40.708, -21.231, 16.31)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.471, (-41.827, -12.795, 8.756)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.469, (-26.11, -10.714, 23.148)), (' A  58  LEU  HB3', ' A1116  HOH  O  ', -0.459, (-17.236, -14.11, 23.22)), (' A  53  ASN  HA ', ' A1161  HOH  O  ', -0.437, (-16.399, -5.119, 23.734)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.435, (-53.972, -3.539, 4.426)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.424, (-55.311, 21.805, 14.762)), (' A 147  SER  HA ', ' A1127  HOH  O  ', -0.422, (-40.586, -7.523, 22.095)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.415, (-28.872, -7.435, 17.132)), (' A1002  DMS  H13', ' A1141  HOH  O  ', -0.411, (-30.085, -25.298, 28.487)), (' A 165  MET  HG2', ' A 173  ALA  HB3', -0.411, (-30.577, 2.929, 21.737)), (' A 176  ASP  HB2', ' A1148  HOH  O  ', -0.41, (-33.447, -6.145, 10.972)), (' A 104  VAL  O  ', ' A 160  CYS  HA ', -0.408, (-36.282, -5.153, 10.312)), (' A  97  LYS  CD ', ' A1139  HOH  O  ', -0.405, (-45.568, -20.956, 20.551)), (' A 110  GLN  HG3', ' A1178  HOH  O  ', -0.401, (-38.748, 0.901, 5.178))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
