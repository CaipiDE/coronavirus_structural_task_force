# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  46 ', 'SER', 8.061201415475662e-05, (-24.77300000000001, -29.743999999999996, 34.763)), ('A', ' 154 ', 'TYR', 0.01785303554562011, (-50.961, -38.186, 5.322))]
data['omega'] = []
data['rota'] = [('A', ' 165 ', 'MET', 0.14522513708193288, (-31.203000000000017, -25.809, 24.653)), ('A', ' 227 ', 'LEU', 0.1426878809770396, (-41.29899999999999, -6.521, -4.863000000000001))]
data['cbeta'] = []
data['probe'] = [(' A  45  THR  O  ', ' A  47  GLU  N  ', -0.835, (-22.635, -30.352, 35.241)), (' A 238  ASN  ND2', ' A1104  HOH  O  ', -0.727, (-34.298, -6.628, 10.678)), (' A 135  THR  OG1', ' A1101  HOH  O  ', -0.624, (-35.746, -16.772, 17.575)), (' A 221  ASN  ND2', ' A 267  SER  HA ', -0.57, (-52.672, -2.559, 1.75)), (' A 115  LEU  O  ', ' A1007   CL CL  ', -0.564, (-42.307, -33.988, 21.624)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.545, (-40.714, -18.518, 8.967)), (' A 195  GLY  N  ', ' A1008   CL CL  ', -0.522, (-29.327, -14.835, 16.927)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.506, (-39.974, -30.449, 29.462)), (' A 221  ASN HD21', ' A 267  SER  HA ', -0.496, (-52.401, -2.516, 1.627)), (' A  41  HIS  HE1', ' A 164  HIS  O  ', -0.496, (-30.404, -29.869, 25.426)), (' A 133  ASN  HB2', ' A1008   CL CL  ', -0.496, (-30.432, -15.861, 15.261)), (' A 239  TYR  O  ', ' A1102  HOH  O  ', -0.495, (-36.249, -8.36, 6.415)), (' A 194  ALA  HA ', ' A1008   CL CL  ', -0.49, (-29.201, -15.833, 17.287)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.477, (-25.776, -38.087, 23.146)), (' A 241  PRO  HB2', ' A1188  HOH  O  ', -0.473, (-34.789, -11.336, 0.112)), (' A  69  GLN  HB2', ' A1142  HOH  O  ', -0.472, (-36.364, -46.275, 31.978)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.452, (-53.941, -30.842, 4.516)), (' A 223  PHE  HA ', ' A1010   CL CL  ', -0.449, (-52.661, 0.851, -5.066)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.444, (-44.088, -8.944, 9.784)), (' A  49  MET  HE2', ' A1001  K0G  C5 ', -0.441, (-26.524, -28.141, 27.246)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.437, (-41.726, -39.6, 9.199)), (' A  60 AARG  HD3', ' A1145  HOH  O  ', -0.436, (-17.922, -39.617, 31.963)), (' A  60 AARG  CD ', ' A1145  HOH  O  ', -0.436, (-17.815, -39.707, 31.536)), (' A 177  LEU  HB2', ' A1131  HOH  O  ', -0.429, (-34.316, -35.312, 11.771)), (' A 198  THR HG21', ' A 240  GLU  OE2', -0.426, (-35.606, -11.524, 7.954)), (' A 187  ASP  OD2', ' A1005   CL CL  ', -0.423, (-25.422, -31.634, 22.569)), (' A 227  LEU  HA ', ' A 227  LEU HD12', -0.423, (-42.063, -7.476, -3.645)), (' A  52  PRO  HD2', ' A 188  ARG  HG3', -0.414, (-19.617, -26.84, 26.817)), (' A 148  VAL HG22', ' A1007   CL CL  ', -0.413, (-41.002, -35.559, 19.798)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.412, (-47.414, -35.607, 23.389)), (' A 133  ASN  O  ', ' A1008   CL CL  ', -0.411, (-30.416, -17.215, 15.448)), (' A  45  THR  O  ', ' A  45  THR  OG1', -0.409, (-21.841, -32.395, 35.613)), (' A 188  ARG  HG2', ' A 190  THR HG23', -0.408, (-20.456, -23.172, 27.159)), (' A 224  THR  O  ', ' A1009   CL CL  ', -0.406, (-48.542, 0.167, -3.508)), (' A  67  LEU HD11', ' A1002  DMS  H12', -0.402, (-29.414, -46.646, 35.418)), (' A 198  THR HG22', ' A 240  GLU  HG2', -0.4, (-37.641, -11.807, 7.928)), (' A  58  LEU  HA ', ' A  58  LEU HD12', -0.4, (-20.069, -41.903, 26.203))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
