# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.10510970085940304, (-18.564, 8.479999999999995, 17.962)), ('A', '  24 ', 'THR', 0.2292593792005534, (24.912, -11.939999999999996, 4.315)), ('A', ' 142 ', 'ASN', 0.2722628827056881, (16.483, -1.6799999999999997, 7.187)), ('A', ' 216 ', 'ASP', 0.0275810334527182, (-18.479, 16.764999999999997, 13.753999999999998)), ('A', ' 298 ', 'ARG', 0.10210171202533892, (-16.566, -0.2599999999999998, 5.977)), ('B', '   5 ', 'LYS', 0.011822580440947255, (0.7629999999999999, 4.812999999999999, 14.56)), ('B', '  55 ', 'GLU', 0.2423807103141474, (-27.17200000000001, -10.868000000000002, 40.818)), ('B', ' 117 ', 'CYS', 0.15299663831943297, (-14.731, -7.427000000000001, 16.368)), ('B', ' 279 ', 'ARG', 0.0, (4.548, 24.219, 10.388)), ('D', '   2 ', 'LEU', 0.06673638494261278, (18.016, 3.259, -0.8139999999999997))]
data['cbeta'] = [('B', '   4 ', 'ARG', ' ', 0.3114502739064685, (3.132, 4.978999999999998, 10.975))]
data['probe'] = [(' E   1  UZ7  C10', ' E   1  UZ7  O09', -1.389, (-24.138, 6.762, 28.611)), (' E   1  UZ7  C07', ' E   1  UZ7  C10', -0.748, (-23.817, 6.309, 28.473)), (' A 288  GLU  CD ', ' A 616  HOH  O  ', -0.715, (-5.968, 11.908, 9.699)), (' B   5  LYS  HD3', ' B 291  PHE  CZ ', -0.702, (1.355, 7.423, 16.148)), (' B 188  ARG  HG3', ' B 190  THR HG22', -0.688, (-25.466, 3.841, 35.452)), (' A 231  ASN  HB2', ' A 501  GOL  H2 ', -0.648, (-12.728, 22.024, -12.224)), (' B 276  MET  HE2', ' B 279 BARG  O  ', -0.564, (3.312, 22.316, 12.813)), (' B 276  MET  O  ', ' B 279 AARG  HD3', -0.541, (5.356, 26.341, 12.776)), (' B  40  ARG  HA ', ' B  87  LEU  HG ', -0.536, (-20.94, -11.469, 31.902)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.534, (16.915, -13.217, -10.932)), (' B 186  VAL HG23', ' B 188  ARG  HG2', -0.523, (-23.351, 2.223, 35.426)), (' A  40  ARG  HB2', ' A  82  MET  HE2', -0.5, (15.818, -10.515, -8.92)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.499, (14.94, -11.753, -6.53)), (' A 231  ASN  CB ', ' A 501  GOL  H2 ', -0.48, (-12.27, 21.602, -11.754)), (' B 254  SER  HB2', ' B 259  ILE  O  ', -0.462, (17.917, 14.632, 25.725)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.458, (-5.099, 8.174, -2.84)), (' B 210  ALA  HB2', ' B 296  VAL HG13', -0.458, (9.723, 8.6, 18.257)), (' B   6  MET  HB3', ' B 501  DMS  H23', -0.453, (3.798, 0.343, 15.639)), (' A 288  GLU  CG ', ' A 616  HOH  O  ', -0.451, (-6.274, 12.3, 9.762)), (' A 279  ARG  O  ', ' A 601  HOH  O  ', -0.45, (-7.893, 23.026, 14.317)), (' A 288  GLU  HG3', ' A 616  HOH  O  ', -0.443, (-6.487, 12.246, 9.869)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.438, (8.145, -7.97, -8.044)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.434, (-2.918, 20.337, 12.668)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.43, (-0.871, 8.141, 28.093)), (' A 614  HOH  O  ', ' B   4  ARG  CD ', -0.428, (0.233, 4.78, 8.701)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.422, (4.802, -21.569, 3.168)), (' A  59  ILE HG23', ' A 606  HOH  O  ', -0.418, (21.002, -15.412, -15.055)), (' A 614  HOH  O  ', ' B   4  ARG  NH1', -0.418, (-0.455, 5.478, 8.411)), (' B 101  TYR  HA ', ' B 157  VAL  O  ', -0.417, (-0.559, -13.506, 26.912)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.41, (-0.101, -4.337, 3.122)), (' A 244  GLN  OE1', ' A 602  HOH  O  ', -0.409, (-20.364, 15.175, -13.07)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.409, (1.021, -21.8, 1.951)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.406, (-6.232, -4.17, 22.251)), (' A 125  VAL HG11', ' B 125  VAL HG11', -0.405, (-3.09, -4.935, 12.469)), (' A   8  PHE  HB3', ' A 152  ILE HD12', -0.402, (-7.471, -7.86, 6.594)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.401, (10.888, -19.873, 1.652))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
