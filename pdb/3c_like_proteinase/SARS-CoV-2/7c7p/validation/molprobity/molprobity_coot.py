# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.0005813641114631583, (2.3520000000000008, 3.683000000000001, -19.362000000000005)), ('A', '  46 ', 'SER', 0.004019992775283754, (-31.799, -9.104000000000003, -29.469000000000005)), ('A', '  48 ', 'ASP', 0.1251790084576109, (-33.061, -6.175000000000001, -34.02400000000001)), ('A', '  50 ', 'LEU', 0.1023975294337708, (-28.449999999999992, -6.056, -37.521)), ('A', '  67 ', 'LEU', 0.0, (-33.715, 3.6930000000000005, -15.364)), ('A', '  69 ', 'GLN', 0.05755844363481393, (-28.826, 4.8900000000000015, -11.142000000000003)), ('A', '  82 ', 'MET', 0.0125517892764583, (-30.304, 11.26, -29.978000000000005)), ('A', '  87 ', 'LEU', 0.0, (-28.363999999999994, 9.063000000000002, -26.504000000000005)), ('A', ' 100 ', 'LYS', 0.0, (-14.436, 21.297000000000004, -15.780000000000001)), ('A', ' 128 ', 'CYS', 0.21456026163403155, (-4.761999999999998, 3.5150000000000015, -24.961000000000006)), ('A', ' 155 ', 'ASP', 0.08535338863316906, (-7.445, 20.446000000000005, -14.479)), ('B', '  56 ', 'ASP', 0.2451797411989065, (17.32, 16.876000000000005, 16.678000000000004)), ('B', '  58 ', 'LEU', 0.0, (12.496999999999996, 17.933000000000003, 14.500000000000004)), ('B', '  59 ', 'ILE', 0.28722502785532256, (12.916999999999996, 19.34, 18.096000000000004)), ('B', '  60 ', 'ARG', 0.0856783737373415, (13.815999999999997, 22.806000000000008, 16.622000000000007)), ('B', '  67 ', 'LEU', 0.05838168255409995, (2.900999999999999, 24.61, 5.736)), ('B', '  72 ', 'ASN', 0.005691724205810571, (-5.766, 26.673000000000002, -1.8640000000000003)), ('B', '  87 ', 'LEU', 0.012993978293875942, (6.55, 12.391999999999998, 9.742000000000003)), ('B', ' 100 ', 'LYS', 0.0202104276257353, (-12.298999999999996, 3.4720000000000013, 4.215)), ('B', ' 155 ', 'ASP', 0.0017208423428558036, (-14.275999999999996, -0.056000000000000015, -1.2150000000000003)), ('B', ' 188 ', 'ARG', 0.11475947787871843, (20.650999999999993, 9.324, 4.038)), ('B', ' 217 ', 'ARG', 0.284963474628031, (-1.8970000000000002, -20.135, -27.328000000000003)), ('B', ' 235 ', 'MET', 0.0459792917121867, (17.49, -20.82, -10.360000000000001)), ('B', ' 268 ', 'LEU', 0.015220719897966572, (7.864, -21.372000000000007, -19.432)), ('B', ' 277 ', 'ASN', 0.20157408533258903, (11.342, -17.409, -31.851000000000006)), ('B', ' 298 ', 'ARG', 0.024441764786492383, (-9.682999999999996, -9.151, -11.490000000000004))]
data['cbeta'] = []
data['probe'] = [(' B  82  MET  CE ', ' B 571  HOH  O  ', -0.808, (12.958, 8.387, 13.018)), (' B  82  MET  HE3', ' B 571  HOH  O  ', -0.66, (12.437, 8.164, 12.612)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.632, (14.887, 1.516, -43.519)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.63, (7.07, 3.962, -46.25)), (' A   5  LYS  NZ ', ' A 503  HOH  O  ', -0.616, (1.508, 0.357, -25.925)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.59, (-13.721, -6.796, -36.048)), (' A 231  ASN  O  ', ' A 235  MET  CG ', -0.585, (7.174, 3.871, -46.767)), (' A  49  MET  HE2', ' A 401  SV6  HG ', -0.577, (-25.699, -4.188, -31.706)), (' B 266  ALA  O  ', ' B 270  GLU  HG2', -0.525, (8.121, -25.815, -21.93)), (' A 154  TYR  HB2', ' A 751  HOH  O  ', -0.52, (-2.57, 22.262, -19.196)), (' B 257  THR  O  ', ' B 259  ILE HD12', -0.512, (-6.448, -24.565, -20.674)), (' A 401  SV6 HALB', ' A 668  HOH  O  ', -0.492, (-17.337, -5.353, -26.012)), (' A  58  LEU HD22', ' A  82 BMET  HE3', -0.489, (-32.835, 8.12, -30.209)), (' A 167  LEU  CD2', ' A 401  SV6 HBKA', -0.488, (-16.58, -3.958, -35.502)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.488, (-24.467, 13.59, -12.792)), (' A 614  HOH  O  ', ' B 298 AARG  HG3', -0.487, (-10.245, -5.306, -11.181)), (' B 225  THR  O  ', ' B 262  LEU HD23', -0.474, (5.334, -30.883, -12.769)), (' B   6  MET  O  ', ' B 298 AARG  NH2', -0.465, (-4.757, -2.622, -13.195)), (' A  48  ASP  O  ', ' A  48  ASP  OD1', -0.464, (-32.886, -3.913, -33.1)), (' B 225  THR HG22', ' B 262  LEU  O  ', -0.461, (5.41, -28.233, -15.989)), (' A 154  TYR  CD2', ' A 154  TYR  O  ', -0.458, (-6.169, 22.999, -17.008)), (' B 126  TYR  HE1', ' B 128 BCYS  HG ', -0.456, (5.115, 2.872, -10.702)), (' B  64  HIS  HB2', ' B 522  HOH  O  ', -0.456, (4.549, 27.667, 14.601)), (' A 234  ALA  HB3', ' A 548  HOH  O  ', -0.454, (7.719, 5.087, -42.713)), (' B 154  TYR  CD1', ' B 154  TYR  O  ', -0.451, (-15.106, -3.327, 0.175)), (' A 263 BASP  OD1', ' A 501  HOH  O  ', -0.45, (22.768, 9.724, -36.508)), (' A 279  ARG  HD2', ' A 711  HOH  O  ', -0.446, (21.988, -4.359, -29.176)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.445, (-24.7, 14.333, -12.567)), (' B  72  ASN  N  ', ' B  72  ASN  OD1', -0.444, (-7.017, 25.776, -2.686)), (' B 154  TYR  CG ', ' B 154  TYR  O  ', -0.438, (-14.563, -4.046, 0.011)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.435, (-9.98, 7.308, -21.631)), (' B 239  TYR  CZ ', ' B 272  LEU HD21', -0.433, (11.922, -16.537, -17.135)), (' B 224  THR  OG1', ' B 225  THR  N  ', -0.431, (4.35, -31.085, -16.176)), (' B 180  ASN  ND2', ' B 508  HOH  O  ', -0.428, (10.763, -0.023, 10.808)), (' A 100  LYS  HG2', ' A 770  HOH  O  ', -0.427, (-13.611, 23.763, -18.2)), (' B 294  PHE  CE2', ' B 298 BARG  HD3', -0.423, (-7.79, -7.431, -7.987)), (' A 153  ASP  HA ', ' A 509  HOH  O  ', -0.418, (-2.543, 18.547, -18.005)), (' B   6  MET  HB3', ' B 298 AARG  NH2', -0.417, (-5.68, -3.319, -14.133)), (' A 231  ASN  HB3', ' A 235  MET  HE2', -0.409, (6.78, 6.996, -46.268)), (' A 231  ASN  O  ', ' A 235  MET  HG3', -0.408, (7.171, 4.13, -46.997)), (' A 263 BASP  CG ', ' A 501  HOH  O  ', -0.404, (22.899, 10.716, -36.524))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
