# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  23 ', 'GLY', 0.0, (7.565000000000004, -15.201000000000006, 29.276999999999997)), ('A', '  23 ', 'GLY', 0.0003036249839382525, (7.565000000000004, -15.201000000000006, 29.276999999999997))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.0, (-0.14600000000000057, 5.3370000000000015, -6.499999999999999)), ('A', '   5 ', 'LYS', 0.002784325711861818, (2.1109999999999998, 4.686, -3.476)), ('A', '  22 ', 'CYS', 0.12204796075820923, (9.036000000000001, -15.107000000000001, 25.793)), ('A', ' 117 ', 'CYS', 0.05492158234119415, (1.8689999999999998, -7.676, 11.905)), ('A', ' 145 ', 'CYS', 0.1436491233947499, (7.887000000000003, -5.302000000000001, 16.595)), ('A', ' 165 ', 'MET', 0.28871411811614633, (11.479000000000003, 0.674, 18.269)), ('A', ' 217 ', 'ARG', 0.0, (3.206999999999998, 19.033, -16.72)), ('A', ' 217 ', 'ARG', 0.0014691047846182544, (3.283999999999999, 19.018, -16.634)), ('A', ' 240 ', 'GLU', 0.18661989504220783, (20.219, 15.801000000000002, -0.24799999999999997))]
data['cbeta'] = []
data['probe'] = [(' A 269  LYS  NZ ', ' A 602  HOH  O  ', -1.033, (19.693, 28.596, -11.543)), (' A 155  ASP  OD1', ' A 601  HOH  O  ', -0.957, (14.056, -15.009, -9.46)), (' A  90 ALYS  NZ ', ' A 605  HOH  O  ', -0.839, (19.748, -24.413, 9.684)), (' A  48  ASP  OD1', ' A 604  HOH  O  ', -0.795, (15.775, -5.436, 32.74)), (' A 298  ARG  NH2', ' A 603  HOH  O  ', -0.769, (6.52, -1.631, -5.324)), (' A  22 BCYS  O  ', ' A  24  THR  N  ', -0.732, (7.445, -13.098, 28.102)), (' A 221 BASN  ND2', ' A 608  HOH  O  ', -0.732, (9.281, 27.713, -13.853)), (' A  10  SER  OG ', ' A  14  GLU  OE2', -0.722, (-0.342, -10.267, 1.349)), (' A  22 ACYS  O  ', ' A  24  THR  N  ', -0.703, (7.441, -12.848, 28.007)), (' A 100  LYS  CD ', ' A 812  HOH  O  ', -0.693, (17.21, -18.778, -3.562)), (' A  86  VAL HG12', ' A 162 BMET  HE1', -0.686, (15.444, -9.185, 14.866)), (' A 100  LYS  HD3', ' A 812  HOH  O  ', -0.659, (17.116, -19.159, -4.041)), (' A 221 BASN  ND2', ' A 612  HOH  O  ', -0.647, (7.183, 27.383, -14.964)), (' A  23  GLY  O  ', ' A 606  HOH  O  ', -0.636, (4.382, -13.403, 28.702)), (' A  24  THR HG23', ' A  25  THR  H  ', -0.608, (8.256, -10.695, 27.022)), (' A 143  GLY  HA2', ' A 637  HOH  O  ', -0.531, (4.857, -5.712, 19.778)), (' A  86  VAL HG12', ' A 162 BMET  CE ', -0.525, (15.542, -8.645, 14.407)), (' A 143  GLY  CA ', ' A 637  HOH  O  ', -0.512, (4.778, -5.132, 19.772)), (' A  34  ASP  OD1', ' A 605  HOH  O  ', -0.51, (18.234, -23.64, 9.172)), (' A  39  PRO  HG3', ' A 162 BMET  HE3', -0.507, (12.747, -7.664, 15.648)), (' A  61 ALYS  NZ ', ' A 617  HOH  O  ', -0.503, (11.631, -16.308, 30.443)), (' A 188  ARG  NH2', ' A 627  HOH  O  ', -0.481, (21.21, -1.374, 24.694)), (' A 201  THR  O  ', ' A 205 BLEU HD13', -0.471, (15.914, 14.54, -6.855)), (' A 298  ARG  CZ ', ' A 603  HOH  O  ', -0.465, (6.42, -1.573, -5.354)), (' A 100  LYS  HD2', ' A 812  HOH  O  ', -0.463, (16.918, -18.599, -2.862)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.458, (18.644, -7.98, 14.347)), (' A 298  ARG  NH1', ' A 603  HOH  O  ', -0.457, (6.362, -1.489, -5.362)), (' A  24  THR HG23', ' A  25  THR  N  ', -0.445, (7.634, -10.275, 27.417)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.44, (1.818, -3.484, 15.485)), (' A   5  LYS  HB3', ' A 503   CL CL  ', -0.434, (0.723, 5.555, -1.376)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.431, (8.951, -21.448, 8.499)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.417, (7.451, 7.782, -12.042)), (' A  97  LYS  HE3', ' A 778  HOH  O  ', -0.417, (3.145, -22.239, 6.324)), (' A 244  GLN  NE2', ' A 631  HOH  O  ', -0.415, (28.409, 15.355, -13.811)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.412, (-0.395, -13.158, 10.579)), (' A 165 BMET  HE1', ' A 192  GLN  NE2', -0.402, (16.401, 3.935, 20.611))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
