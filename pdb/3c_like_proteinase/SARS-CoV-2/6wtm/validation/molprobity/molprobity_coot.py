# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.020821656445019585, (-17.226999999999997, -25.484, -36.433000000000014)), ('B', ' 154 ', 'TYR', 0.02053955112264319, (5.878000000000002, -25.848999999999997, -20.216000000000008))]
data['omega'] = []
data['rota'] = [('B', ' 128 ', 'CYS', 0.012204796803416684, (-6.761999999999997, -10.702, -19.441)), ('B', ' 177 ', 'LEU', 0.2977025308400371, (-10.894, -23.239, -8.388))]
data['cbeta'] = []
data['probe'] = [(' B 221  ASN  N  ', ' B 402  HOH  O  ', -0.758, (13.715, 9.319, -21.928)), (' A 228  ASN  OD1', ' A 401  HOH  O  ', -0.741, (-19.885, 6.768, -55.089)), (' B  76  ARG  HB3', ' B  92  ASP  HB2', -0.696, (-19.654, -42.804, -14.502)), (' B 145  CYS  SG ', ' B 494  HOH  O  ', -0.626, (-22.635, -18.264, -16.95)), (' A   4  ARG  NH2', ' A 404  HOH  O  ', -0.604, (-7.505, -9.059, -24.584)), (' A 145  CYS  SG ', ' A 527  HOH  O  ', -0.597, (11.925, -18.083, -40.219)), (' B 221  ASN  O  ', ' B 402  HOH  O  ', -0.583, (14.439, 9.472, -21.508)), (' A   4  ARG  NH1', ' A 406  HOH  O  ', -0.573, (-9.292, -7.56, -21.237)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.562, (-15.257, -21.951, -7.003)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.55, (4.419, -21.33, -49.979)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.544, (-5.533, 6.098, -28.325)), (' B 132  PRO  HB3', ' B 240  GLU  OE2', -0.537, (-4.483, -1.751, -8.009)), (' B 159  PHE  HB3', ' B 177 BLEU HD12', -0.531, (-8.783, -23.908, -12.55)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.531, (-8.68, -35.431, -17.23)), (' A 225  THR  OG1', ' A 226  THR  N  ', -0.467, (-22.576, 11.147, -46.644)), (' B  78  ILE HD11', ' B  90  LYS  HD3', -0.456, (-16.679, -41.244, -8.089)), (' B  44  CYS  HB3', ' B  48  ASP  HB2', -0.453, (-31.613, -19.735, -8.378)), (' A 100  LYS  HA ', ' A 100  LYS  HD2', -0.452, (-10.998, -32.791, -42.821)), (' B 108  PRO  HG3', ' B 134  PHE  CE1', -0.448, (-6.628, -9.089, -6.028)), (' B 167  LEU HD12', ' B 171  VAL HG23', -0.444, (-17.611, -5.761, -12.236)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.444, (-2.712, -35.228, -40.212)), (' B 126  TYR  HE2', ' B 128 ACYS  HG ', -0.439, (-10.563, -11.735, -21.058)), (' A  47  GLU  N  ', ' A  47  GLU  OE1', -0.436, (24.302, -16.777, -44.755)), (' B 225  THR  OG1', ' B 229  ASP  OD2', -0.434, (10.393, 11.999, -9.472)), (' A 290  GLU  OE2', ' A 402  HOH  O  ', -0.432, (-4.172, -5.741, -38.05)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.43, (-5.567, -5.089, -47.911)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.43, (9.324, -23.335, -42.589)), (' B 277  ASN  N  ', ' B 405  HOH  O  ', -0.427, (-0.005, 14.172, -25.849)), (' B 103  PHE  CE1', ' B 177 BLEU HD13', -0.427, (-8.839, -26.338, -11.284)), (' B  40  ARG  HA ', ' B  87  LEU HD13', -0.426, (-22.632, -25.04, -7.471)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.426, (-8.0, -18.257, -18.341)), (' A 167  LEU HD12', ' A 171  VAL HG23', -0.424, (6.409, -5.383, -43.889)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.423, (-3.216, -18.004, -38.006)), (' A  34  ASP  OD2', ' A  90  LYS  HE3', -0.423, (1.436, -39.39, -48.619)), (' B   4  ARG  NH1', ' B 410  HOH  O  ', -0.423, (-1.853, -7.654, -35.007)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.418, (-11.973, -22.98, -26.269)), (' A  76  ARG  HB3', ' A  92  ASP  HB2', -0.417, (8.541, -42.388, -43.103)), (' B 100  LYS  HA ', ' B 100  LYS  HD2', -0.41, (-0.408, -32.835, -13.807)), (' A 141  LEU HD11', ' B 299  GLN  O  ', -0.401, (9.425, -13.055, -28.244))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
