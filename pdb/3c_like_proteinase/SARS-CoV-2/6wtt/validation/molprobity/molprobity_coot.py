# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.024834727792104334, (-13.838000000000001, 11.628999999999998, -28.437)), ('A', '   5 ', 'LYS', 0.040881365504808344, (-12.461, 13.532, -25.439)), ('A', '  93 ', 'THR', 0.2798452980499535, (-18.661, 47.83, -13.357)), ('A', ' 125 ', 'VAL', 0.003150532575091347, (-10.176000000000005, 24.473, -24.532999999999998)), ('A', ' 190 ', 'THR', 0.22818656810129406, (9.414000000000007, 25.476, -2.355)), ('B', '  26 ', 'THR', 0.19166444130512816, (-33.579, 54.067, 13.102000000000002)), ('B', '  50 ', 'LEU', 0.008858258661348373, (-38.479, 46.04599999999999, -2.702)), ('B', '  83 ', 'GLN', 0.002457322313226171, (-19.827000000000005, 54.275, -0.619)), ('B', '  86 ', 'VAL', 0.2688803696447354, (-22.39699999999999, 52.3, 3.161)), ('B', '  87 ', 'LEU', 0.09990652969893549, (-23.620999999999988, 55.856, 3.903)), ('B', '  90 ', 'LYS', 0.18767539604876807, (-19.337000000000007, 64.035, 7.766)), ('B', ' 189 ', 'GLN', 0.23557342155340286, (-35.869, 42.611, -0.072)), ('B', ' 190 ', 'THR', 0.06506655180934985, (-35.608, 40.213, -3.071)), ('C', ' 196 ', 'THR', 0.22296573905710923, (-21.542000000000005, 18.212, 43.803)), ('C', ' 225 ', 'THR', 0.2764058985365764, (-47.24800000000001, 16.331, 33.718)), ('C', ' 229 ', 'ASP', 0.22067960486939103, (-44.156000000000006, 14.252999999999997, 38.644)), ('C', ' 268 ', 'LEU', 0.05055026183639945, (-37.756000000000014, 18.287999999999997, 29.035999999999998)), ('C', ' 276 ', 'MET', 0.16641933293421596, (-31.976999999999997, 14.691, 21.497))]
data['cbeta'] = [('B', '  41 ', 'HIS', ' ', 0.2792391918589262, (-30.980000000000004, 49.831999999999994, 3.7659999999999996)), ('B', ' 180 ', 'ASN', ' ', 0.25338831991797633, (-17.548000000000002, 45.316, -0.518)), ('B', ' 188 ', 'ARG', ' ', 0.2503104735376127, (-32.677, 44.135, -2.696))]
data['probe'] = [(' C 257  THR HG22', ' C 259  ILE HG13', -1.161, (-44.965, 27.889, 23.134)), (' C  27  LEU HD11', ' C 145  CYS  HB2', -0.918, (-3.771, 37.522, 40.51)), (' B  50  LEU  H  ', ' B  50  LEU HD23', -0.915, (-39.904, 47.612, -1.86)), (' C 257  THR  CG2', ' C 259  ILE HG13', -0.814, (-44.128, 28.303, 23.555)), (' B  28  ASN  O  ', ' B 146  GLY  HA3', -0.81, (-25.782, 51.474, 11.768)), (' A 103  PHE  CE1', ' A 177  LEU HD23', -0.735, (-16.259, 31.192, -9.429)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.704, (-16.427, 60.86, 16.555)), (' C 104  VAL HG12', ' C 105  ARG  H  ', -0.699, (-25.362, 40.485, 45.101)), (' B  31  TRP  CZ2', ' B  95  ASN  N  ', -0.69, (-15.929, 62.905, 17.479)), (' B 226  THR  OG1', ' B 229  ASP  HB2', -0.687, (-5.441, 9.133, 3.173)), (' C 218  TRP  CE3', ' C 279  ARG  HD2', -0.686, (-36.067, 16.403, 17.062)), (' C 104  VAL HG12', ' C 105  ARG  N  ', -0.685, (-24.337, 40.465, 44.905)), (' B  31  TRP  CD2', ' B  95  ASN  HB2', -0.684, (-16.823, 60.408, 16.708)), (' B 198  THR HG22', ' B 238  ASN  OD1', -0.673, (-20.229, 21.309, 3.045)), (' C 210  ALA  HB2', ' C 296  VAL HG13', -0.657, (-34.544, 32.987, 25.116)), (' B  57  LEU  O  ', ' B  61  LYS  HG3', -0.655, (-32.513, 60.839, -0.754)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.652, (-25.264, 51.224, -0.317)), (' B  31  TRP  CZ2', ' B  95  ASN  HA ', -0.641, (-16.928, 62.216, 17.962)), (' B  31  TRP  CZ2', ' B  95  ASN  CA ', -0.637, (-16.102, 62.151, 17.184)), (' B  50  LEU  CD2', ' B  50  LEU  H  ', -0.628, (-38.952, 48.176, -2.067)), (' B  50  LEU  N  ', ' B  50  LEU HD23', -0.622, (-39.346, 47.257, -1.791)), (' C 100  LYS  O  ', ' C 156  CYS  HA ', -0.62, (-23.298, 51.938, 37.329)), (' A  56  ASP  OD1', ' A  60  ARG  NH2', -0.619, (5.253, 42.95, 2.746)), (' C 104  VAL  CG1', ' C 105  ARG  H  ', -0.618, (-25.105, 41.171, 45.131)), (' C  63  ASN  ND2', ' C  78  ILE  O  ', -0.602, (0.387, 55.196, 52.719)), (' B 285  ALA  HB3', ' C 285  ALA  HB3', -0.6, (-23.946, 18.43, 21.458)), (' B 127  GLN  O  ', ' C   4  ARG  NH2', -0.578, (-20.043, 33.671, 17.88)), (' A   5  LYS  HD3', ' A 291  PHE  CZ ', -0.575, (-11.396, 10.974, -24.018)), (' B 113  SER  O  ', ' B 150  PHE  CD1', -0.572, (-16.567, 44.042, 17.199)), (' B  48  ASP  HA ', ' B  50  LEU HD21', -0.571, (-39.934, 50.331, -2.246)), (' B  31  TRP  CH2', ' B  95  ASN  HA ', -0.568, (-17.086, 62.193, 18.444)), (' B  47  GLU  O  ', ' B  50  LEU HD21', -0.563, (-41.631, 50.113, -2.006)), (' B 169  THR HG23', ' B 171  VAL HG22', -0.556, (-29.658, 31.595, 7.32)), (' C 115  LEU HD11', ' C 122  PRO  HB3', -0.552, (-11.031, 43.544, 29.5)), (' B  51  ASN  HA ', ' B 188  ARG  HG2', -0.55, (-33.694, 46.269, -4.303)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.548, (-8.182, 30.02, -4.79)), (' A 103  PHE  CE1', ' A 177  LEU  CD2', -0.548, (-15.763, 31.009, -9.613)), (' B 276  MET  HE3', ' B 280  THR  HA ', -0.544, (-18.436, 15.947, 23.428)), (' C 104  VAL  CG1', ' C 105  ARG  N  ', -0.537, (-24.822, 41.306, 45.012)), (' C 226  THR  OG1', ' C 229  ASP  OD2', -0.534, (-47.516, 15.829, 38.821)), (' C 209  TYR  HB3', ' C 253  LEU HD22', -0.533, (-39.044, 31.445, 26.478)), (' C 242  LEU  HG ', ' C 247  VAL HG22', -0.528, (-41.319, 24.75, 38.268)), (' C 131  ARG  HG2', ' C 135  THR  O  ', -0.528, (-19.754, 27.486, 38.571)), (' C 100  LYS  HG2', ' C 156  CYS  HB2', -0.527, (-25.656, 53.088, 38.484)), (' B 167  LEU  HB3', ' B 168  PRO  HD2', -0.527, (-31.876, 34.173, 4.094)), (' C 165  MET  HE1', ' C 185  PHE  HB3', -0.522, (-11.466, 27.94, 48.007)), (' B 285  ALA  CB ', ' C 285  ALA  HB3', -0.521, (-23.723, 17.99, 21.882)), (' A  76  ARG  O  ', ' A  91  VAL  HA ', -0.516, (-13.534, 47.68, -10.03)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.516, (-14.701, 29.719, 9.553)), (' B 217  ARG  NH2', ' B 505  HOH  O  ', -0.51, (-2.404, 13.65, 31.087)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.51, (-20.514, 39.752, -15.605)), (' C 103  PHE  CE1', ' C 177  LEU HD23', -0.5, (-16.464, 46.281, 43.984)), (' B  10  SER  OG ', ' B  14  GLU  OE2', -0.497, (-17.804, 46.981, 25.523)), (' C 114  VAL  O  ', ' C 125  VAL  HA ', -0.494, (-14.918, 39.037, 29.774)), (' B 169  THR HG22', ' B 590  HOH  O  ', -0.494, (-30.928, 31.792, 4.882)), (' B  40  ARG  CD ', ' B  85  CYS  HA ', -0.492, (-25.586, 50.82, -0.335)), (' C   8  PHE  HE2', ' C 151  ASN  OD1', -0.492, (-25.462, 40.32, 33.296)), (' C  10  SER  O  ', ' C  14  GLU  HG3', -0.492, (-14.166, 47.03, 29.586)), (' C 211  ALA  O  ', ' C 216  ASP  HB2', -0.486, (-36.248, 27.244, 18.19)), (' C  40  ARG  HB2', ' C  82  MET  HE2', -0.485, (-4.245, 40.435, 52.491)), (' C 276  MET  CE ', ' C 281  ILE HD12', -0.484, (-32.127, 20.262, 22.863)), (' B 286  LEU HD21', ' C 285  ALA  HB2', -0.484, (-24.972, 18.46, 18.941)), (' A 103  PHE  CZ ', ' A 177  LEU HD23', -0.482, (-15.909, 31.92, -8.659)), (' B 199  THR HG21', ' B 239  TYR  CZ ', -0.479, (-17.233, 20.344, 11.156)), (' C 155  ASP  N  ', ' C 155  ASP  OD1', -0.476, (-27.107, 53.626, 34.122)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.474, (-10.383, 10.209, -12.321)), (' C 109  GLY  HA2', ' C 200  ILE HD13', -0.472, (-27.622, 28.78, 37.564)), (' C 251  GLY  O  ', ' C 254  SER  HB3', -0.471, (-45.131, 32.454, 30.776)), (' B 118  TYR  CE2', ' B 144  SER  HB3', -0.47, (-31.074, 44.947, 16.819)), (' C 243  THR  O  ', ' C 247  VAL HG23', -0.468, (-41.469, 26.297, 40.227)), (' C 159  PHE  HB3', ' C 177  LEU HD22', -0.468, (-17.334, 44.39, 41.941)), (' B 167  LEU HD23', ' B 194  ALA  H  ', -0.461, (-29.357, 32.89, 3.108)), (' B  16  CYS  HA ', ' B  95  ASN HD21', -0.461, (-17.01, 56.834, 18.709)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.461, (3.43, 33.434, -0.984)), (' B  16  CYS  HA ', ' B  95  ASN  ND2', -0.461, (-16.846, 57.21, 18.319)), (' A  21  THR HG23', ' A  26  THR  OG1', -0.46, (0.903, 42.218, -16.258)), (' A  31  TRP  CE3', ' A  75  LEU HD11', -0.46, (-14.719, 42.917, -16.763)), (' B 125  VAL HG12', ' C   7  ALA  HB3', -0.459, (-19.71, 40.337, 26.311)), (' A  58  LEU HD13', ' A  87  LEU HD21', -0.459, (-4.575, 40.697, -2.585)), (' A  31  TRP  CZ2', ' A  95  ASN  HA ', -0.458, (-18.24, 43.26, -16.468)), (' B   4  ARG  NH1', ' C 127  GLN  O  ', -0.452, (-19.634, 31.821, 29.674)), (' B 167  LEU  CB ', ' B 168  PRO  HD2', -0.451, (-31.995, 34.397, 4.223)), (' C   3  PHE  CE1', ' C 299  GLN  NE2', -0.45, (-29.919, 34.879, 23.772)), (' B  80  HIS  CD2', ' B  80  HIS  O  ', -0.449, (-24.825, 63.262, 0.717)), (' B 169  THR  CG2', ' B 171  VAL HG22', -0.448, (-29.69, 31.723, 7.076)), (' B  31  TRP  CE2', ' B  95  ASN  N  ', -0.447, (-16.554, 61.996, 16.597)), (' C 245  ASP  O  ', ' C 248  ASP  HB2', -0.447, (-42.22, 32.105, 40.362)), (' C 165  MET  CE ', ' C 185  PHE  HB3', -0.443, (-11.645, 28.164, 47.754)), (' B 189  GLN  HB3', ' B 189  GLN HE21', -0.442, (-38.295, 42.251, 1.287)), (' C 243  THR  O  ', ' C 247  VAL  N  ', -0.441, (-41.084, 27.763, 39.944)), (' C  40  ARG  O  ', ' C  43  ILE HG12', -0.441, (-1.273, 39.213, 50.613)), (' C  63  ASN  HB3', ' C  77  VAL  O  ', -0.44, (1.508, 53.947, 49.888)), (' B  67  LEU  HG ', ' B 402   CL CL  ', -0.437, (-33.795, 63.071, 11.423)), (' C 286  LEU  C  ', ' C 286  LEU HD12', -0.435, (-26.844, 21.217, 25.827)), (' C  27  LEU  HA ', ' C  27  LEU HD12', -0.434, (-2.537, 39.391, 39.184)), (' A 100  LYS  O  ', ' A 156  CYS  HA ', -0.434, (-24.67, 29.326, -15.02)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.433, (-11.019, 30.47, -23.978)), (' B  17  MET  HG3', ' B 117  CYS  SG ', -0.43, (-22.906, 49.966, 19.549)), (' C 159  PHE  CB ', ' C 177  LEU HD22', -0.428, (-17.636, 44.767, 42.128)), (' A  62  SER  N  ', ' A  65  ASN  OD1', -0.428, (-1.864, 49.298, -3.99)), (' C 220  LEU  N  ', ' C 220  LEU HD23', -0.424, (-41.103, 21.241, 22.016)), (' C 206  ALA  O  ', ' C 296  VAL HG21', -0.424, (-35.118, 30.831, 27.89)), (' A  90  LYS  HE3', ' B 180  ASN  OD1', -0.421, (-18.104, 46.199, -3.224)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.42, (-12.188, 23.987, -17.171)), (' C 221  ASN  HA ', ' C 221  ASN HD22', -0.42, (-44.356, 16.207, 21.3)), (' C 210  ALA  HB2', ' C 296  VAL  CG1', -0.42, (-34.768, 32.653, 25.584)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.418, (4.527, 24.204, -5.131)), (' C   8  PHE  CE2', ' C 151  ASN  OD1', -0.417, (-25.205, 40.831, 33.389)), (' A 114  VAL  O  ', ' A 125  VAL  HA ', -0.416, (-10.067, 24.499, -22.458)), (' B 167  LEU HD23', ' B 194  ALA  N  ', -0.414, (-28.923, 32.592, 2.829)), (' B 167  LEU HD21', ' B 185  PHE  CE1', -0.408, (-27.554, 35.082, 2.117)), (' C 276  MET  CE ', ' C 281  ILE  CD1', -0.408, (-32.7, 20.313, 22.75)), (' C 209  TYR  OH ', ' C 261  VAL  HA ', -0.406, (-43.42, 26.581, 30.303)), (' B  86  VAL  O  ', ' B  86  VAL HG12', -0.404, (-20.676, 54.123, 3.41)), (' A 251  GLY  N  ', ' A 252  PRO  HD2', -0.403, (-25.049, 3.085, -13.541)), (' C 106  ILE HD11', ' C 130  MET  HB2', -0.403, (-22.602, 33.639, 41.214)), (' C 297  VAL  O  ', ' C 297  VAL HG12', -0.401, (-36.578, 40.29, 28.105)), (' C   3  PHE  HB3', ' C 282  LEU HD22', -0.401, (-30.381, 30.772, 20.334))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
