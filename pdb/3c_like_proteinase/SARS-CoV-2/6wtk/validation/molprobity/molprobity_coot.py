# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 305 ', 'PHE', 0.018352671621343096, (-10.549, -25.022, 31.697))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  33  ASP  H  ', ' A  98  THR HG21', -0.804, (-16.843, -36.311, 16.321)), (' A  95  ASN  HB3', ' A  98  THR HG22', -0.801, (-15.158, -35.348, 15.982)), (' A  14  GLU  HG2', ' A 122  PRO  HG2', -0.691, (-5.013, -27.3, 16.011)), (' A  27  LEU HD22', ' A 145  CYS  HB2', -0.649, (-13.03, -20.315, 2.849)), (' A 154  TYR  N  ', ' A 306  GLN  HG2', -0.642, (-15.693, -24.276, 31.323)), (' A 232  LEU  O  ', ' A 236  LYS  HD2', -0.638, (-26.136, 12.039, 24.109)), (' A  13  VAL HG23', ' A 115  LEU HD22', -0.635, (-9.114, -24.489, 17.062)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.627, (-20.026, -6.322, 22.123)), (' A 243  THR HG23', ' A 245  ASP  OD1', -0.624, (-30.472, -4.723, 30.714)), (' A 243  THR HG22', ' A 246  HIS  ND1', -0.617, (-28.493, -3.131, 28.884)), (' A  49  MET  HB3', ' A 189  GLN  HG3', -0.615, (-17.659, -14.413, -4.82)), (' A  95  ASN  HB3', ' A  98  THR  CG2', -0.613, (-15.476, -36.127, 16.181)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.587, (-21.572, 11.737, 28.618)), (' A  40  ARG  HA ', ' A  87  LEU HD13', -0.585, (-21.42, -25.791, 1.006)), (' A 154  TYR  H  ', ' A 306  GLN  HG2', -0.585, (-15.78, -24.234, 31.615)), (' A 243  THR HG22', ' A 246  HIS  CG ', -0.581, (-27.774, -3.384, 29.415)), (' A  19  GLN  O  ', ' A  68  VAL  HA ', -0.558, (-10.897, -32.385, 3.336)), (' A 245  ASP  N  ', ' A 245  ASP  OD1', -0.552, (-30.771, -4.644, 32.061)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.55, (-23.908, -15.427, -4.799)), (' A 227  LEU HD21', ' A 242  LEU HD22', -0.549, (-27.294, 1.619, 32.394)), (' A 190  THR HG23', ' A 192  GLN  HG2', -0.548, (-22.745, -7.652, -0.74)), (' A 243  THR  CG2', ' A 245  ASP  OD1', -0.542, (-30.705, -4.165, 30.046)), (' A 233  VAL HG21', ' A 269  LYS  HE2', -0.539, (-23.372, 11.234, 30.627)), (' A  95  ASN  O  ', ' A  98  THR HG23', -0.538, (-14.929, -37.328, 17.211)), (' A 154  TYR  CZ ', ' A 156  CYS  HB2', -0.527, (-19.6, -29.532, 28.89)), (' A  40  ARG  HB2', ' A  87  LEU HD13', -0.514, (-22.217, -25.542, 0.783)), (' A  10  SER  HB3', ' A 125  VAL HG11', -0.506, (-7.085, -21.381, 20.116)), (' A  33  ASP  N  ', ' A  98  THR HG21', -0.506, (-17.317, -36.115, 16.071)), (' A 247  VAL HG23', ' A 261  VAL HG21', -0.506, (-24.942, -1.595, 37.673)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.506, (-23.943, -18.523, -3.674)), (' A  40  ARG  CB ', ' A  87  LEU HD13', -0.503, (-22.245, -24.963, 1.141)), (' A  27  LEU HD12', ' A  42  VAL  HB ', -0.495, (-15.607, -24.521, 1.112)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.491, (-8.732, -25.341, 12.482)), (' A 229  ASP  O  ', ' A 233  VAL HG23', -0.484, (-26.286, 11.228, 29.125)), (' A 257  THR HG23', ' A 259  ILE  H  ', -0.483, (-17.2, -0.732, 42.873)), (' A 221  ASN HD21', ' A 266  ALA  HB3', -0.481, (-19.341, 9.735, 37.876)), (' A 233  VAL  HA ', ' A 236  LYS  HD3', -0.477, (-24.152, 11.809, 25.247)), (' A  55  GLU  O  ', ' A  59  ILE HG13', -0.472, (-28.225, -27.918, -6.837)), (' A  80  HIS  HE1', ' A 503  HOH  O  ', -0.465, (-25.661, -33.239, -4.043)), (' A 221  ASN  HB2', ' A 223  PHE  HD1', -0.465, (-17.029, 12.946, 38.351)), (' A 108  PRO  HG3', ' A 134  PHE  CE1', -0.46, (-25.776, -9.766, 16.758)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.459, (-6.41, -12.804, 28.786)), (' A 209  TYR  CE1', ' A 257  THR HG21', -0.459, (-16.308, -1.656, 40.275)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.459, (-13.397, -18.618, 17.994)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.451, (-13.671, -36.14, 12.898)), (' A 230  PHE  CD2', ' A 265  CYS  HB3', -0.446, (-22.875, 6.173, 32.435)), (' A  78  ILE  O  ', ' A  78  ILE HG22', -0.435, (-23.108, -41.59, 2.797)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.434, (-12.039, -6.901, 34.288)), (' A 131  ARG  HG2', ' A 135  THR  O  ', -0.431, (-18.156, -7.597, 14.905)), (' A  40  ARG  CA ', ' A  87  LEU HD13', -0.429, (-21.479, -25.083, 1.136)), (' A  33  ASP  H  ', ' A  98  THR  CG2', -0.427, (-16.627, -35.615, 16.597)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.427, (-20.5, -24.437, -2.213)), (' A 221  ASN HD22', ' A 223  PHE  HB2', -0.424, (-18.714, 11.409, 37.834)), (' A 108  PRO  HG3', ' A 134  PHE  CZ ', -0.422, (-26.554, -9.194, 16.783)), (' A 106  ILE  H  ', ' A 106  ILE HG13', -0.42, (-22.827, -16.83, 18.403)), (' A  35  VAL HG23', ' A  37  TYR  CE1', -0.417, (-20.68, -32.055, 12.153)), (' A 233  VAL  HA ', ' A 236  LYS  CD ', -0.412, (-24.554, 12.215, 24.982)), (' A  34  ASP  HB2', ' A  91  VAL  O  ', -0.409, (-19.319, -40.303, 9.399)), (' A 253  LEU  HA ', ' A 253  LEU HD23', -0.406, (-16.521, -7.245, 39.861)), (' A 297  VAL  O  ', ' A 301  SER  HB3', -0.402, (-12.705, -14.157, 37.527))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
