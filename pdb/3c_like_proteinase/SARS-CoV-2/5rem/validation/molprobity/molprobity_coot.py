# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.0067516900604861025, (10.256, -11.56, -9.598))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.28743670204594507, (5.996000000000002, -9.902999999999999, 19.121)), ('A', ' 216 ', 'ASP', 0.15100686370086483, (0.8209999999999997, 16.502999999999997, -14.792)), ('A', ' 276 ', 'MET', 0.012215776546341898, (3.14, 24.869, -5.612))]
data['cbeta'] = []
data['probe'] = [(' A 110  GLN  HG3', ' A 673  HOH  O  ', -1.037, (19.369, 0.655, -2.058)), (' A 288  GLU  OE1', ' A 501  HOH  O  ', -0.849, (5.808, 10.586, -1.836)), (' A 294  PHE  CD2', ' A 739  HOH  O  ', -0.809, (16.183, 3.148, -8.684)), (' A 107  GLN  HG3', ' A 819  HOH  O  ', -0.742, (23.174, 2.492, -2.209)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.616, (8.435, -3.589, -12.42)), (' A 294  PHE  HD2', ' A 739  HOH  O  ', -0.588, (15.774, 2.279, -7.626)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.574, (16.032, -11.214, 20.418)), (' A 217  ARG  NH2', ' A 511  HOH  O  ', -0.572, (3.399, 12.494, -21.816)), (' A  47  GLU  N  ', ' A  47  GLU  OE1', -0.567, (9.702, -3.388, 32.407)), (' A  52  PRO  HD2', ' A 188  ARG  HG3', -0.515, (19.105, -0.815, 27.27)), (' A 249  ILE  CG2', ' A 293  PRO  HG2', -0.513, (17.185, 6.904, -9.912)), (' A  22  CYS  SG ', ' A  61  LYS  HD2', -0.512, (13.363, -15.883, 27.467)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.487, (8.449, -21.419, 8.846)), (' A 249  ILE HG22', ' A 293  PRO  HG2', -0.478, (17.17, 7.012, -9.963)), (' A 194  ALA  HA ', ' A 508  HOH  O  ', -0.475, (18.009, 10.673, 13.844)), (' A 104  VAL  O  ', ' A 160  CYS  HA ', -0.464, (17.894, -5.518, 3.751)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.455, (15.28, 7.946, 0.148)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.453, (14.456, -13.31, -0.545)), (' A  47  GLU  CD ', ' A  47  GLU  H  ', -0.453, (10.035, -4.215, 33.453)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.435, (2.305, -3.194, 15.44)), (' A 108  PRO  HG2', ' A 653  HOH  O  ', -0.428, (21.824, 7.07, 1.581)), (' A 286  LEU  C  ', ' A 286  LEU HD12', -0.426, (4.462, 16.71, -1.725)), (' A 143  GLY  N  ', ' A 404  T2J  O2 ', -0.426, (4.326, -4.717, 19.66)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.425, (18.773, -7.7, 13.917)), (' A  70  ALA  O  ', ' A  73 AVAL HG12', -0.414, (1.267, -22.835, 12.915)), (' A 262  LEU  HA ', ' A 262  LEU HD23', -0.411, (19.902, 19.163, -13.801)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.407, (23.234, 19.363, -10.203)), (' A 225  THR  OG1', ' A 226  THR  N  ', -0.406, (21.96, 24.413, -12.667)), (' A 276  MET  HB3', ' A 276  MET  HE3', -0.404, (1.795, 22.387, -6.069))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
