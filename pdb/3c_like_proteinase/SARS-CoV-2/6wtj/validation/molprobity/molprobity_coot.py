# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.008177793849545072, (-16.137, -0.011, 31.553)), ('A', ' 301 ', 'SER', 0.027879036181968832, (-9.991999999999999, 12.169000000000004, 39.48499999999999))]
data['omega'] = [('A', ' 155 ', 'ASP', None, (-15.239, -1.8670000000000002, 30.419)), ('A', ' 303 ', 'VAL', None, (-10.949999999999996, 8.325, 36.257999999999996))]
data['rota'] = [('A', ' 177 ', 'LEU', 0.12673194577168287, (-22.925, 3.242, 13.036999999999999)), ('A', ' 177 ', 'LEU', 0.0, (-22.943999999999996, 3.199, 13.116))]
data['cbeta'] = [('A', ' 154 ', 'TYR', ' ', 0.25281895828863665, (-17.244999999999994, -0.9670000000000002, 31.133999999999993))]
data['probe'] = [(' A  68  VAL  O  ', ' A  74  GLN  HG2', -0.918, (-10.434, -10.555, 3.324)), (' A 153  ASP  O  ', ' A 154  TYR  HB2', -0.773, (-17.358, -0.43, 29.676)), (' A  69  GLN  HA ', ' A  74  GLN  HG3', -0.712, (-8.909, -9.072, 4.566)), (' A  40  ARG  HA ', ' A  87  LEU HD13', -0.687, (-21.499, 1.595, 1.07)), (' A 167  LEU  HB2', ' A 169  THR HG22', -0.659, (-17.259, 22.077, 5.185)), (' A  68  VAL  O  ', ' A  74  GLN  CG ', -0.648, (-9.472, -9.812, 3.356)), (' A 218  TRP  CE3', ' A 279  ARG  NH2', -0.646, (-6.717, 37.013, 34.282)), (' A 298  ARG  O  ', ' A 303  VAL  HB ', -0.586, (-10.322, 10.936, 35.553)), (' A  75  LEU  HB3', ' A  91  VAL  HB ', -0.576, (-15.187, -12.293, 6.427)), (' A 233  VAL HG21', ' A 269  LYS  HE2', -0.559, (-23.804, 40.053, 30.329)), (' A 100  LYS  NZ ', ' A 155  ASP  OD2', -0.556, (-16.288, -7.126, 29.191)), (' A 154  TYR  HB2', ' A 156  CYS  H  ', -0.551, (-17.452, -0.892, 29.528)), (' A 261  VAL HG12', ' A 262  LEU HD23', -0.551, (-24.774, 29.255, 36.637)), (' A 190  THR HG23', ' A 192  GLN  HG3', -0.54, (-22.776, 18.853, -1.183)), (' A   8  PHE  HE1', ' A 305  PHE  CZ ', -0.535, (-12.638, 6.629, 29.795)), (' A 169  THR HG23', ' A 171  VAL  H  ', -0.513, (-14.82, 22.257, 7.21)), (' A 169  THR  CG2', ' A 171  VAL HG22', -0.502, (-16.838, 22.406, 7.387)), (' A 218  TRP  CE3', ' A 279  ARG  CZ ', -0.5, (-6.87, 37.629, 33.74)), (' A   8  PHE  HE2', ' A 151  ASN HD22', -0.498, (-15.295, 9.085, 25.359)), (' A  70  ALA  O  ', ' A  73  VAL HG22', -0.492, (-5.972, -10.347, 9.133)), (' A  46  SER  HA ', ' A  49  MET  HE2', -0.483, (-14.84, 9.44, -6.949)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.468, (-15.231, -9.411, 16.889)), (' A 169  THR HG23', ' A 171  VAL HG22', -0.463, (-16.16, 22.224, 7.379)), (' A 177 BLEU  HA ', ' A 177 BLEU HD13', -0.461, (-21.693, 3.298, 11.949)), (' A 222  ARG  HA ', ' A 222  ARG  HD2', -0.457, (-15.641, 39.667, 43.993)), (' A 220  LEU  HA ', ' A 220  LEU HD23', -0.454, (-13.743, 33.82, 38.489)), (' A  40  ARG  CA ', ' A  87  LEU HD13', -0.451, (-21.743, 1.691, 1.074)), (' A 154  TYR  HB3', ' A 155  ASP  OD1', -0.448, (-16.816, -2.973, 30.6)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.447, (-24.632, 14.656, -1.241)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.445, (-23.903, 7.989, -3.222)), (' A 103  PHE  CZ ', ' A 177 BLEU  HG ', -0.444, (-21.563, -0.297, 14.564)), (' A 225  THR  OG1', ' A 229  ASP  OD2', -0.432, (-25.824, 38.241, 34.262)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.43, (-23.983, 4.644, 8.151)), (' A 142  ASN  H  ', ' A 142  ASN  ND2', -0.424, (-6.595, 12.535, 1.345)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.423, (-6.278, 14.32, 29.519)), (' A 223  PHE  CD2', ' A 223  PHE  N  ', -0.421, (-17.638, 40.495, 39.418)), (' A 127  GLN  HG2', ' A 544  HOH  O  ', -0.419, (-12.06, 15.395, 24.979)), (' A 153  ASP  O  ', ' A 154  TYR  CB ', -0.412, (-17.547, 0.117, 30.508)), (' A 271  LEU HD13', ' A 287  LEU HD21', -0.404, (-12.64, 33.09, 29.603)), (' A 215  GLY  O  ', ' A 217  ARG  HG3', -0.403, (-5.248, 29.292, 40.279)), (' A  66  PHE  HB2', ' A  77  VAL HG21', -0.401, (-17.233, -8.589, 0.435)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.4, (-19.698, -12.844, -0.036))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
