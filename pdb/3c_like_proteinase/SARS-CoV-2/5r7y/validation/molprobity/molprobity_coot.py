# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.012491419928628057, (10.137999999999996, -11.500000000000002, -9.442))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.20401873802852358, (5.884000000000004, -9.852, 19.137)), ('A', '  46 ', 'SER', 0.10135307892084996, (9.416999999999998, -3.009, 30.188)), ('A', ' 236 ', 'LYS', 0.236525798801584, (18.799999999999986, 25.754, 1.723))]
data['cbeta'] = [('A', ' 290 ', 'GLU', ' ', 0.2756594587695953, (8.395, 7.594, -0.007))]
data['probe'] = [(' A 221 AASN  ND2', ' A 267  SER  HA ', -1.172, (11.411, 23.968, -13.759)), (' A 221 AASN HD21', ' A 267  SER  HA ', -1.155, (11.725, 23.632, -12.576)), (' A 110  GLN  HG3', ' A1342 BHOH  O  ', -1.095, (19.463, 0.864, -1.518)), (' A 294  PHE  CD2', ' A1269  HOH  O  ', -0.904, (16.12, 2.977, -8.702)), (' A 221 AASN HD21', ' A 267  SER  CA ', -0.885, (12.231, 23.516, -13.305)), (' A   1  SER  OG ', ' A1101 AHOH  O  ', -0.762, (-2.078, 9.251, -16.713)), (' A 279  ARG  NH2', ' A1106 AHOH  O  ', -0.687, (-1.37, 28.644, -10.89)), (' A 293  PRO  HB3', ' A1138 BHOH  O  ', -0.674, (15.483, 6.502, -12.289)), (' A 221 AASN  ND2', ' A 267  SER  CA ', -0.622, (11.601, 23.434, -13.447)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.61, (0.349, -8.929, 6.061)), (' A 288  GLU  OE1', ' A1104  HOH  O  ', -0.599, (5.576, 10.546, -1.613)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.589, (15.397, 8.15, 0.126)), (' A 236  LYS  NZ ', ' A1111  HOH  O  ', -0.586, (14.895, 31.767, 0.098)), (' A 273  GLN  NE2', ' A1103  HOH  O  ', -0.566, (17.414, 29.426, -4.749)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.558, (1.67, -3.689, 15.407)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.551, (8.426, -3.445, -11.927)), (' A 110  GLN  NE2', ' A1122  HOH  O  ', -0.538, (15.607, 0.705, -3.182)), (' A  50  LEU  O  ', ' A 188  ARG  NE ', -0.529, (18.784, 2.113, 29.134)), (' A 222  ARG  NE ', ' A1123 AHOH  O  ', -0.524, (7.981, 31.706, -21.645)), (' A 277  ASN  N  ', ' A1107 AHOH  O  ', -0.513, (1.806, 26.643, -3.573)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.502, (14.721, -13.126, -0.607)), (' A  80  HIS  NE2', ' A1110  HOH  O  ', -0.5, (19.971, -18.484, 25.167)), (' A 274  ASN  OD1', ' A1105  HOH  O  ', -0.472, (9.151, 32.913, -6.579)), (' A  94  ALA  HB2', ' A1191 BHOH  O  ', -0.437, (14.312, -26.103, 6.653)), (' A 104  VAL  O  ', ' A 160  CYS  HA ', -0.424, (17.885, -5.47, 3.911)), (' A 286  LEU  C  ', ' A 286  LEU HD12', -0.422, (4.709, 16.613, -1.601)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.415, (12.422, 17.641, -1.4)), (' A 298  ARG  NH1', ' A1142 AHOH  O  ', -0.413, (12.644, -2.578, -6.329)), (' A 121  SER  HA ', ' A 122  PRO  HD3', -0.408, (-0.581, -13.151, 10.534)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.406, (23.097, 19.267, -9.621)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.401, (8.992, -21.38, 8.516)), (' A 145  CYS  HB2', ' A1006   CL CL  ', -0.4, (6.849, -5.985, 18.814))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
