# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   1 ', 'MET', 0.027601526292457015, (53.25200000000001, -28.859, 1.291)), ('B', '   2 ', 'SER', 0.03163468457829979, (66.60300000000001, -66.214, -1.606))]
data['omega'] = []
data['rota'] = [('A', '   1 ', 'MET', 0.00048789914556992295, (53.25200000000001, -28.859, 1.291)), ('A', '   2 ', 'SER', 0.012805523151927288, (56.935, -27.637, 1.815)), ('A', '  47 ', 'LYS', 0.0, (66.717, -44.122, 10.476000000000003)), ('A', ' 233 ', 'PHE', 0.20818813320625912, (60.649, -68.906, 41.27600000000001)), ('A', ' 234 ', 'GLU', 0.1409672637710715, (64.396, -69.221, 41.888)), ('A', ' 245 ', 'GLN', 0.007700061692372611, (73.56200000000001, -71.925, 29.77)), ('A', ' 345 ', 'LYS', 0.01297438506212544, (57.265, -67.103, 23.553)), ('B', '   1 ', 'MET', 0.0, (63.74600000000002, -68.463, -2.371)), ('B', '   1 ', 'MET', 0.0, (62.865, -66.901, -1.049)), ('B', '  22 ', 'GLU', 0.0886314988203073, (73.06900000000002, -70.374, -5.428)), ('B', '  29 ', 'ASN', 0.030126267095371452, (75.49100000000001, -48.96100000000001, -2.604)), ('B', '  35 ', 'LYS', 0.2200671597953288, (81.83300000000003, -63.335, -7.686)), ('B', '  35 ', 'LYS', 9.102569648434011e-06, (81.826, -63.341, -7.690000000000001)), ('B', ' 139 ', 'ARG', 0.17842345684774497, (35.939000000000014, -56.802, -8.409)), ('B', ' 139 ', 'ARG', 0.24628588626444806, (35.99600000000001, -56.786000000000016, -8.328)), ('B', ' 201 ', 'LEU', 0.06418619872982004, (62.86500000000002, -40.245, -33.388)), ('B', ' 316 ', 'SER', 0.24031513554150902, (39.765, -21.041, -28.819000000000003))]
data['cbeta'] = []
data['probe'] = [(' A 219  MET  HG3', ' A 238 ATYR  CE2', -0.567, (64.138, -66.221, 44.335)), (' B  29 BASN  ND2', ' B 502  HOH  O  ', -0.564, (80.399, -49.213, -6.203)), (' A  44  PHE  HA ', ' A 403  EDO  H12', -0.548, (66.277, -35.593, 12.899)), (' B   0 BALA  HB1', ' B 732  HOH  O  ', -0.537, (60.969, -68.026, 1.524)), (' A 313  SER  C  ', ' A 410  EDO  H21', -0.536, (52.0, -83.292, 35.007)), (' B 128  VAL  HB ', ' B 131  GLN  HG3', -0.533, (47.23, -66.358, -16.102)), (' A 159  LYS  HE2', ' A 801  HOH  O  ', -0.531, (48.416, -50.42, 38.09)), (' A  29 AASN  HB3', ' A 783  HOH  O  ', -0.511, (73.7, -41.154, 3.24)), (' A 219  MET  HG3', ' A 238 ATYR  CZ ', -0.51, (64.164, -65.552, 44.742)), (' A 235  HIS  HD2', ' A 584  HOH  O  ', -0.509, (67.492, -73.295, 37.482)), (' A 401  CMU CL1 ', ' A 401  CMU H6C1', -0.507, (63.965, -73.014, 23.608)), (' A 201  LEU HD21', ' A 255  LEU  HB3', -0.501, (67.178, -57.176, 33.648)), (' B 139 BARG  HD2', ' B 140  ASN  ND2', -0.493, (36.538, -53.07, -7.501)), (' A 139  ARG  HG2', ' A 140  ASN  ND2', -0.491, (35.965, -52.917, 7.806)), (' A  97  ILE HG13', ' A  98  SER  N  ', -0.455, (51.329, -47.149, 5.779)), (' B 320  LYS  HD3', ' B 327 BGLU  CD ', -0.45, (37.619, -35.373, -22.335)), (' B 314  VAL HG22', ' B 316  SER  H  ', -0.446, (37.356, -20.383, -30.16)), (' B 345  LYS  HB3', ' B 345  LYS  HE3', -0.442, (47.454, -30.182, -21.227)), (' A 267  GLU  HB3', ' A 280  PHE  HB3', -0.44, (71.99, -60.308, 22.518)), (' A 110  LYS  HA ', ' A 110  LYS  HD3', -0.439, (44.204, -36.055, 3.402)), (' B  13  LYS  HE3', ' B  19  GLN  HG3', -0.433, (67.175, -72.983, -14.722)), (' A 250  HIS  HE1', ' A 401  CMU  O13', -0.433, (63.712, -67.964, 28.275)), (' B 219  MET  HA ', ' B 219  MET  HE3', -0.431, (54.661, -30.975, -46.513)), (' A   0 BALA  HB1', ' A 553  HOH  O  ', -0.423, (53.417, -32.937, 1.654)), (' B  88  ASP  OD2', ' B  91  ARG  HD3', -0.418, (57.283, -46.492, -15.571)), (' B 276  VAL  O  ', ' B 346  LEU HD13', -0.417, (52.299, -37.1, -22.153)), (' B  30 AASN  HB3', ' B  46  ASN  HB3', -0.415, (70.772, -49.377, -6.65)), (' B  47  LYS  NZ ', ' B 515  HOH  O  ', -0.412, (69.696, -42.939, -10.436)), (' B 139 AARG  HD3', ' B 184  ASP  HA ', -0.41, (34.197, -53.128, -7.21)), (' B   1 BMET  HB3', ' B   2 BSER  H  ', -0.408, (63.861, -65.119, -2.289)), (' B 277  LYS  HB3', ' B 277  LYS  HE3', -0.404, (57.775, -37.236, -24.08)), (' B 218  ALA  HB3', ' B 221  GLU  HG3', -0.403, (56.675, -29.939, -52.478))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
