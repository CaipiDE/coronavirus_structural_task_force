# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  61 ', 'ARG', 0.03149390937825971, (85.919, 113.058, 86.666))]
data['omega'] = []
data['rota'] = [('A', '   2 ', 'LEU', 0.0, (87.98800000000003, 117.607, 101.363)), ('A', '  14 ', 'HIS', 0.11291749304461328, (80.87499999999997, 112.118, 92.272)), ('A', '  21 ', 'GLU', 0.06725412852626081, (80.275, 117.832, 104.661)), ('A', '  24 ', 'VAL', 0.04486915478964571, (86.678, 111.613, 106.73500000000001)), ('A', '  25 ', 'SER', 0.25727046701191747, (89.898, 109.781, 107.628)), ('A', '  40 ', 'VAL', 0.00945159699767828, (84.472, 102.667, 105.036)), ('A', '  61 ', 'ARG', 0.292130914689863, (85.919, 113.058, 86.666)), ('A', '  75 ', 'LEU', 0.0, (96.518, 114.66599999999998, 68.894)), ('A', '  98 ', 'THR', 0.05743571184978796, (94.246, 121.411, 85.123)), ('A', ' 103 ', 'THR', 0.008159601566148922, (93.72100000000002, 124.92, 92.972)), ('A', ' 122 ', 'LEU', 0.0, (90.95600000000003, 120.165, 74.737)), ('A', ' 127 ', 'VAL', 0.07253424133542828, (79.672, 122.937, 76.914)), ('A', ' 128 ', 'GLU', 0.04037361280584187, (78.44, 126.517, 76.515)), ('A', ' 138 ', 'ARG', 0.0, (96.44100000000003, 129.467, 69.866)), ('A', ' 159 ', 'GLN', 0.0, (83.6, 104.635, 70.104)), ('A', ' 166 ', 'THR', 0.006618878218638606, (84.265, 102.251, 75.891)), ('A', ' 167 ', 'LEU', 0.004339069850398685, (81.28099999999998, 101.796, 73.612)), ('A', ' 172 ', 'VAL', 0.05909731937894188, (74.22899999999998, 108.82899999999997, 73.69)), ('A', ' 181 ', 'LYS', 0.14605219043661172, (94.67700000000005, 124.464, 65.816)), ('A', ' 192 ', 'THR', 0.041581642278386136, (92.87, 107.916, 59.289)), ('A', ' 233 ', 'GLU', 0.12430299715166915, (99.22800000000001, 82.62800000000001, 58.656000000000006)), ('A', ' 245 ', 'LEU', 0.0491446468248319, (105.97599999999998, 82.73600000000002, 69.402)), ('A', ' 248 ', 'LEU', 0.0, (100.21299999999998, 87.40999999999998, 66.056)), ('A', ' 257 ', 'ARG', 0.0, (93.507, 81.564, 69.487)), ('A', ' 299 ', 'LEU', 0.23704692454857867, (90.389, 93.064, 59.428)), ('A', ' 304 ', 'GLU', 0.2075776727473801, (93.461, 97.26300000000005, 52.514)), ('A', ' 311 ', 'LEU', 0.048962190154891796, (106.045, 93.84700000000002, 47.719)), ('A', ' 316 ', 'LYS', 0.009077134994817725, (110.95000000000002, 99.02300000000004, 54.153)), ('A', ' 331 ', 'LEU', 0.0, (107.402, 95.35100000000004, 55.87299999999999)), ('A', ' 345 ', 'LEU', 0.06138184414482643, (105.776, 100.788, 68.506))]
data['cbeta'] = [('A', '  61 ', 'ARG', ' ', 0.2641618039183165, (85.33299999999998, 111.703, 87.067))]
data['probe'] = [(' A   0  GLN HE22', ' A   4  ASN HD22', -0.994, (82.92, 120.716, 97.625)), (' A 192  THR HG21', ' A 324  TYR  H  ', -0.826, (94.547, 108.98, 62.902)), (' A 104  MET  HA ', ' A 104  MET  HE2', -0.792, (97.286, 123.749, 94.118)), (' A 124  ASP  H  ', ' A 130  GLN HE21', -0.744, (85.648, 122.511, 74.848)), (' A   2  LEU HD11', ' A  26  ILE HD11', -0.671, (91.563, 113.902, 103.873)), (' A 124  ASP  H  ', ' A 130  GLN  NE2', -0.655, (84.954, 122.5, 75.718)), (' A 192  THR HG23', ' A 321  THR HG22', -0.615, (95.115, 108.523, 60.629)), (' A  14  HIS  NE2', ' A  16  ASP  OD2', -0.57, (77.813, 115.077, 89.307)), (' A 218  MET  HG3', ' A 237  TYR  CE2', -0.549, (94.302, 81.882, 58.427)), (' A  98  THR HG23', ' A 106  ASP  OD1', -0.539, (92.564, 123.676, 87.342)), (' A 266  GLU  HB2', ' A 279  PHE  HB3', -0.526, (103.58, 89.918, 79.382)), (' A  14  HIS  ND1', ' A 433  HOH  O  ', -0.504, (81.56, 114.255, 87.874)), (' A  -1  HIS  ND1', ' A 103  THR HG21', -0.499, (92.138, 127.282, 96.16)), (' A 138  ARG  HB3', ' A 138  ARG HH11', -0.485, (99.108, 129.461, 69.953)), (' A   0  GLN  NE2', ' A   4  ASN HD22', -0.477, (83.667, 120.642, 97.541)), (' A 196  GLN HE21', ' A 206  ARG HH11', -0.475, (84.755, 98.793, 65.828)), (' A 192  THR HG22', ' A 193  TYR  O  ', -0.474, (93.31, 106.447, 61.594)), (' A  35  VAL  O  ', ' A  38  ILE HG13', -0.473, (79.74, 102.737, 110.205)), (' A 301  ASP  O  ', ' A 305  ILE HG12', -0.463, (94.214, 98.107, 56.099)), (' A  45  ASN  ND2', ' A  47  THR  H  ', -0.458, (96.321, 107.804, 93.498)), (' A 181  LYS  HG3', ' A 186  ILE HD13', -0.455, (92.179, 125.732, 63.958)), (' A 192  THR  CG2', ' A 324  TYR  H  ', -0.445, (94.434, 108.572, 62.469)), (' A 193  TYR  CE1', ' A 305  ILE  CD1', -0.429, (95.032, 101.883, 56.483)), (' A 233  GLU  HG2', ' A 357  HOH  O  ', -0.422, (102.142, 83.012, 56.745)), (' A 200  LEU  HA ', ' A 251  MET  HE2', -0.409, (91.429, 90.154, 72.366)), (' A 193  TYR  CE1', ' A 305  ILE HD11', -0.404, (94.799, 101.811, 56.873)), (' A 135  ARG  O  ', ' A 181  LYS  NZ ', -0.404, (90.855, 130.41, 67.026))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
