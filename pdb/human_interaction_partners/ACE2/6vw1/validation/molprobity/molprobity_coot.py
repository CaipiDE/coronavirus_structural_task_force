# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 146 ', 'PRO', None, (117.28400000000002, 5.900999999999998, 172.309)), ('B', ' 146 ', 'PRO', None, (57.155, 45.091, 123.83299999999998))]
data['rota'] = [('A', '  73 ', 'LEU', 0.011437317934357153, (91.79000000000003, -20.924999999999994, 172.212)), ('A', '  79 ', 'LEU', 0.07547005348160225, (86.525, -28.424999999999994, 169.203)), ('A', '  85 ', 'LEU', 0.02127265164222447, (83.10899999999997, -26.875, 157.278)), ('A', '  87 ', 'GLU', 0.00010179332635561028, (78.275, -28.499, 155.414)), ('A', '  93 ', 'VAL', 0.0566720853849004, (79.31500000000001, -18.638, 160.72699999999998)), ('A', ' 129 ', 'THR', 0.0837694231102983, (118.375, -4.426, 173.69599999999997)), ('A', ' 190 ', 'MET', 0.0, (104.14700000000002, -24.426, 160.08399999999997)), ('A', ' 341 ', 'LYS', 0.005936876342965628, (108.03599999999999, 2.937, 184.293)), ('A', ' 410 ', 'LEU', 0.0387543456303848, (95.653, 14.4, 157.276)), ('A', ' 436 ', 'ILE', 0.16675720585850876, (104.72100000000003, 22.766, 147.401)), ('A', ' 447 ', 'VAL', 0.11360884771838953, (105.78000000000002, 8.211999999999996, 148.83)), ('A', ' 455 ', 'MET', 0.25775107222794735, (110.936, -4.1979999999999995, 148.223)), ('A', ' 518 ', 'ARG', 0.05415257167263142, (96.935, 1.161, 153.901)), ('A', ' 558 ', 'LEU', 0.0, (83.47199999999997, 0.9979999999999998, 160.299)), ('A', ' 560 ', 'LEU', 0.00013345535990914889, (81.05600000000003, -3.9079999999999986, 159.569)), ('A', ' 581 ', 'VAL', 0.002100355050060898, (96.532, 4.515, 142.994)), ('A', ' 595 ', 'LEU', 0.000520560715735087, (109.449, 18.039999999999992, 140.352)), ('B', '  37 ', 'GLU', 0.2071146845615242, (83.40100000000001, 42.21999999999999, 99.12)), ('B', '  79 ', 'LEU', 0.10899543187914572, (77.69700000000003, 35.065, 83.914)), ('B', '  82 ', 'MET', 0.04080737866632546, (78.49400000000001, 30.042000000000005, 81.305)), ('B', '  85 ', 'LEU', 0.0, (80.152, 22.467, 85.594)), ('B', '  87 ', 'GLU', 0.03923705695026906, (84.425, 19.92, 83.38799999999999)), ('B', ' 126 ', 'ILE', 0.06528375671099008, (52.09000000000002, 43.222999999999985, 109.602)), ('B', ' 129 ', 'THR', 0.24542298027506929, (53.679, 46.156, 113.364)), ('B', ' 162 ', 'LEU', 0.11938549955514252, (43.90999999999999, 33.859, 126.954)), ('B', ' 190 ', 'MET', 0.00013672781361565725, (59.885, 28.717999999999993, 92.195)), ('B', ' 325 ', 'GLN', 0.19507735466295595, (88.24400000000001, 46.983, 118.645)), ('B', ' 341 ', 'LYS', 0.0, (64.003, 53.189, 117.678)), ('B', ' 388 ', 'GLN', 0.016751567685010814, (87.81500000000001, 31.379999999999992, 103.253)), ('B', ' 436 ', 'ILE', 0.046820202360602796, (67.85300000000002, 18.130999999999993, 139.259)), ('B', ' 447 ', 'VAL', 0.07493628778316637, (63.61400000000002, 19.407000000000007, 125.21599999999998)), ('B', ' 460 ', 'ARG', 0.039724330707147225, (54.93700000000001, 23.459, 106.757)), ('B', ' 518 ', 'ARG', 0.228153890609549, (71.25000000000001, 22.288999999999994, 116.134)), ('B', ' 585 ', 'LEU', 0.0, (69.597, 11.612, 126.147)), ('E', ' 368 ', 'LEU', 0.0, (59.033, 7.013, 192.218)), ('E', ' 370 ', 'ASN', 0.0009728580464518241, (59.88600000000001, 12.630999999999997, 191.47599999999997)), ('E', ' 372 ', 'THR', 0.11417536846710763, (66.09100000000001, 11.182, 188.42)), ('E', ' 383 ', 'SER', 0.09786039054820096, (50.056, 7.056, 181.65)), ('E', ' 394 ', 'ASN', 0.241823468141738, (46.82800000000002, -5.877, 192.706)), ('E', ' 402 ', 'VAL', 0.258771621473283, (70.876, -7.32, 183.701)), ('E', ' 408 ', 'ARG', 0.0, (66.518, -2.669999999999999, 175.82599999999996)), ('E', ' 446 ', 'THR', 0.04000856122929149, (88.05700000000004, -8.884, 191.096)), ('E', ' 468 ', 'ILE', 0.09242605364320074, (65.446, -22.268, 186.952)), ('E', ' 471 ', 'GLU', 0.18420560371662978, (69.864, -29.437, 183.053)), ('E', ' 514 ', 'SER', 0.0022152570790891887, (52.727, -4.941, 186.379)), ('F', ' 335 ', 'LEU', 0.12271291218509263, (120.39, 66.575, 105.738)), ('F', ' 372 ', 'THR', 0.169126081407052, (106.87100000000002, 54.156, 117.87999999999998)), ('F', ' 383 ', 'SER', 0.1131239375639577, (121.55500000000004, 45.415, 111.27199999999999)), ('F', ' 386 ', 'LYS', 0.17470937442737308, (124.47300000000003, 49.792, 112.941)), ('F', ' 387 ', 'LEU', 0.09600638030538211, (123.39400000000002, 51.149999999999984, 109.51499999999999)), ('F', ' 394 ', 'ASN', 0.002295873091656752, (122.74000000000001, 55.796, 97.15499999999999)), ('F', ' 446 ', 'THR', 0.001030113347448306, (81.67100000000002, 57.387999999999984, 102.417)), ('F', ' 468 ', 'ILE', 0.05958094874717188, (100.826, 50.691, 84.898)), ('F', ' 514 ', 'SER', 0.11246591008672316, (116.82900000000001, 50.031, 99.355)), ('F', ' 525 ', 'CYS', 0.06984706819138764, (126.78800000000003, 58.69699999999999, 105.274))]
data['cbeta'] = []
data['probe'] = [(' A 520  LEU HD22', ' A 579  MET  HE2', -0.671, (97.431, -0.477, 146.597)), (' B 520  LEU HD22', ' B 579  MET  HE2', -0.671, (69.479, 14.73, 115.371)), (' E 454  ARG  NH2', ' E 469  SER  O  ', -0.662, (68.455, -24.028, 183.44)), (' B  85  LEU HD11', ' B  94  LYS  HG3', -0.64, (81.231, 22.138, 90.026)), (' B 126  ILE HD11', ' B 176  LEU  HG ', -0.636, (49.979, 38.584, 108.959)), (' B 433  GLU  HG2', ' B 714  NAG  H82', -0.633, (67.34, 16.149, 144.811)), (' A 177  ARG  HD3', ' A 498  CYS  HB2', -0.627, (121.48, -12.691, 158.32)), (' B 388  GLN  HG3', ' B 389  PRO  HD2', -0.614, (87.314, 29.072, 101.733)), (' E 366  SER  HB2', ' E 370  ASN HD21', -0.611, (55.505, 11.934, 193.381)), (' B 323  MET  HE1', ' B 379  ILE HG21', -0.609, (82.016, 39.45, 118.09)), (' F 602  NAG  H3 ', ' F 602  NAG  H83', -0.601, (110.915, 64.915, 117.251)), (' A  74  LYS  HE3', ' A 106  SER  HB3', -0.6, (97.47, -25.025, 168.115)), (' E 366  SER  O  ', ' E 370  ASN  ND2', -0.597, (57.33, 11.363, 192.761)), (' E 393  SER  O  ', ' E 523  THR  OG1', -0.596, (44.0, -4.85, 194.774)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.576, (70.68, -5.307, 189.681)), (' A 208  GLU  OE1', ' A 219  ARG  NH1', -0.561, (94.197, -18.491, 150.761)), (' A 457  GLU  HG2', ' A 512  PHE  HB3', -0.56, (106.784, -5.772, 153.772)), (' A 557  MET  HA ', ' A 560  LEU HD22', -0.559, (81.582, -1.06, 156.106)), (' A 132  VAL HG12', ' A 171  GLU  HG3', -0.559, (127.062, -2.419, 166.903)), (' B 457  GLU  HG2', ' B 513  ILE  HB ', -0.555, (62.596, 21.308, 109.415)), (' F 401  VAL HG22', ' F 509  ARG  HG2', -0.552, (99.934, 54.997, 102.059)), (' F 387  LEU  HA ', ' F 390  LEU HD12', -0.547, (124.677, 50.374, 107.993)), (' B 229  THR HG23', ' B 516  TYR  OH ', -0.545, (65.165, 13.79, 115.875)), (' B 573  VAL HG13', ' B 574  VAL HG13', -0.545, (81.801, 17.029, 115.675)), (' B 425  SER  OG ', ' B 427  ASP  OD1', -0.542, (79.728, 31.892, 149.056)), (' A 245  ARG  NH1', ' A 605  GLY  O  ', -0.537, (119.476, 8.23, 139.422)), (' B 450  LEU HD21', ' B 519  THR HG21', -0.536, (66.342, 19.851, 120.499)), (' A 573  VAL HG13', ' A 574  VAL HG13', -0.536, (85.955, 3.531, 150.017)), (' E 363  ALA  H  ', ' E 526  GLY  HA3', -0.529, (47.903, 4.03, 196.441)), (' F 433  VAL HG22', ' F 512  VAL HG13', -0.529, (110.681, 47.353, 101.619)), (' B 122  THR  O  ', ' B 126  ILE HG23', -0.528, (52.288, 42.826, 106.151)), (' E 444  THR HG23', ' E 447  GLY  H  ', -0.526, (84.527, -8.52, 191.109)), (' B 201  ASP  OD2', ' B 219  ARG  NH1', -0.523, (64.214, 17.785, 96.177)), (' B  92  THR HG22', ' B  96  GLN HE21', -0.513, (86.459, 27.47, 95.613)), (' F 350  VAL HG22', ' F 422  ASN  HB3', -0.513, (101.554, 46.956, 93.73)), (' F 454  ARG  NH2', ' F 469  SER  O  ', -0.513, (98.233, 47.892, 84.165)), (' A  85  LEU HD11', ' A  94  LYS  HG3', -0.513, (83.025, -22.414, 156.229)), (' E 421  TYR  HB3', ' E 454  ARG  HG2', -0.512, (67.708, -19.008, 178.168)), (' B 332  MET  HE3', ' B 336  PRO  HD3', -0.51, (69.408, 49.776, 120.662)), (' B 233  ILE HD13', ' B 450  LEU HD13', -0.505, (64.812, 16.387, 120.598)), (' A 336  PRO  HG2', ' A 340  GLN  O  ', -0.503, (105.995, 5.538, 184.804)), (' A 460  ARG HH21', ' A 506  VAL  HA ', -0.502, (110.066, -9.055, 159.419)), (' A 712  NAG  H4 ', ' A 713  NAG  HN2', -0.501, (77.838, 16.901, 177.512)), (' E 348  PRO  HG3', ' E 354  GLU  HB2', -0.499, (63.955, -11.714, 192.382)), (' A 351  LEU  HB2', ' A 355  ASP  HB3', -0.499, (88.617, -3.115, 177.393)), (' B 177  ARG  NH1', ' B 495  GLU  OE2', -0.496, (42.598, 26.953, 106.335)), (' A 177  ARG  HB3', ' A 178  PRO  HD3', -0.495, (123.256, -14.885, 161.559)), (' A  92  THR HG22', ' A  96  GLN HE21', -0.492, (79.331, -15.34, 161.627)), (' B 225  ASP  O  ', ' B 229  THR HG22', -0.492, (66.124, 11.958, 113.382)), (' B 100  LEU  HG ', ' B 391  LEU HD21', -0.492, (79.508, 33.143, 93.987)), (' E 335  LEU HD22', ' E 362  VAL  O  ', -0.491, (50.987, 3.162, 199.868)), (' A  85  LEU HD12', ' A  94  LYS  HE3', -0.489, (83.046, -23.71, 154.695)), (' A 520  LEU HD21', ' A 581  VAL HG13', -0.488, (98.358, 2.592, 144.259)), (' B 515  TYR  O  ', ' B 518  ARG  HG3', -0.487, (68.21, 23.126, 116.79)), (' A 378  HIS  CE1', ' A 401  HIS  HB3', -0.486, (94.431, 0.842, 163.101)), (' B 190  MET  HE2', ' B 191  ALA  HA ', -0.482, (62.619, 26.859, 93.848)), (' B 192  ARG  NH2', ' B 197  GLU  O  ', -0.482, (56.519, 20.093, 93.731)), (' E 476  GLY  H  ', ' E 487  ASN  HB3', -0.482, (74.517, -31.397, 170.606)), (' E 454  ARG  HD3', ' E 457  ARG  HB2', -0.481, (66.536, -21.244, 178.326)), (' B 453  THR HG23', ' B 512  PHE  CD2', -0.48, (61.624, 24.293, 114.465)), (' B 177  ARG  HB3', ' B 178  PRO  HD3', -0.479, (44.388, 34.743, 105.532)), (' E 520  ALA  HB1', ' E 521  PRO  HD2', -0.477, (37.391, -8.841, 194.168)), (' A  94  LYS  NZ ', ' A 802  HOH  O  ', -0.471, (81.726, -24.141, 151.403)), (' F 391  CYS  SG ', ' F 525  CYS  HB3', -0.468, (129.36, 57.584, 104.303)), (' B 168  TRP  O  ', ' B 172  VAL HG22', -0.466, (47.906, 37.599, 115.578)), (' F 461  LEU HD22', ' F 465  GLU  HB3', -0.466, (107.631, 44.51, 87.41)), (' A  56  GLU  HA ', ' A  59  VAL HG12', -0.463, (107.46, -9.115, 186.33)), (' A 168  TRP  O  ', ' A 172  VAL HG22', -0.462, (122.509, -4.096, 164.031)), (' B 443  ALA  HA ', ' B 447  VAL HG13', -0.461, (65.003, 19.647, 128.14)), (' A 460  ARG  NH2', ' A 506  VAL  HA ', -0.459, (109.579, -9.024, 159.203)), (' A 229  THR  O  ', ' A 233  ILE HG13', -0.459, (101.905, 2.328, 141.638)), (' B 456  LEU HD13', ' B 477  TRP  HH2', -0.456, (54.018, 26.09, 113.387)), (' B  46  ALA  HB1', ' B  62  MET  HA ', -0.455, (71.076, 50.552, 103.144)), (' A 416  LYS  HE3', ' A 543  ASP  HB3', -0.455, (89.395, 21.773, 156.126)), (' A 450  LEU HD21', ' A 519  THR HG21', -0.454, (101.897, 4.875, 150.372)), (' B 351  LEU  HB2', ' B 355  ASP  HB3', -0.454, (81.749, 44.523, 108.804)), (' A 499  ASP  HB3', ' A 705   CL CL  ', -0.454, (120.185, -3.917, 155.864)), (' B 103  ASN  HB3', ' B 107  VAL HG13', -0.449, (66.096, 30.028, 88.408)), (' B 339  VAL HG22', ' B 804  HOH  O  ', -0.448, (66.407, 57.539, 123.177)), (' B 184  VAL HG22', ' B 464  PHE  HE1', -0.448, (54.155, 27.57, 101.849)), (' A 420  SER  HA ', ' A 708  NAG  H82', -0.448, (88.861, 28.185, 162.504)), (' F 394  ASN  N  ', ' F 394  ASN  OD1', -0.448, (123.714, 54.766, 95.988)), (' B 391  LEU  H  ', ' B 391  LEU HD12', -0.447, (82.482, 33.16, 97.207)), (' A 555  PHE  HA ', ' A 558  LEU HD22', -0.446, (82.269, 4.415, 160.298)), (' B 229  THR  OG1', ' B 581  VAL  HB ', -0.446, (67.89, 11.597, 118.058)), (' E 435  ALA  HA ', ' E 509  ARG  O  ', -0.445, (66.669, -0.888, 186.834)), (' F 439  ARG  HD3', ' F 499  PRO  HA ', -0.445, (88.47, 53.728, 109.854)), (' A 389  PRO  HG2', ' A 392  LEU HD22', -0.444, (80.362, -11.927, 163.427)), (' F 383  SER  HG ', ' F 386  LYS  HZ2', -0.444, (124.898, 45.729, 111.836)), (' A 712  NAG  H61', ' A 713  NAG  C7 ', -0.443, (79.775, 17.192, 178.393)), (' A 712  NAG  H4 ', ' A 713  NAG  N2 ', -0.443, (78.535, 17.259, 177.655)), (' A 309  LYS  HD2', ' A 328  TRP  CH2', -0.44, (89.328, 14.946, 176.612)), (' A 182  GLU  HA ', ' A 185  VAL HG12', -0.44, (115.212, -22.449, 160.413)), (' B 108  LEU HD11', ' B 190  MET  HB2', -0.44, (59.599, 30.974, 92.376)), (' A  43  SER  HA ', ' A  65  ALA  HB1', -0.438, (95.173, -12.343, 180.908)), (' B 469  PRO  HD2', ' B 472  GLN HE21', -0.437, (43.019, 18.201, 103.55)), (' E 402  VAL HG12', ' E 406  ASP  HB2', -0.437, (71.029, -7.462, 180.326)), (' A  21  ILE  H  ', ' A  21  ILE HD12', -0.436, (73.822, -30.253, 159.956)), (' F 335  LEU  HA ', ' F 362  VAL HG23', -0.436, (122.138, 65.638, 106.439)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.435, (66.27, -13.119, 182.596)), (' A 162  LEU HD13', ' A 490  PRO  HB2', -0.431, (128.755, 3.7, 154.271)), (' E 342  PHE  HB2', ' E 601  NAG  H82', -0.431, (61.606, 1.207, 196.341)), (' B 517  THR  HA ', ' B 579  MET  HE1', -0.429, (69.024, 17.657, 114.021)), (' E 602  NAG  H4 ', ' E 603  BMA  O2 ', -0.429, (61.803, 12.886, 199.131)), (' A  38  ASP  O  ', ' A  42  GLN  HG2', -0.428, (88.361, -12.272, 181.285)), (' B 145  GLU  HA ', ' B 146  PRO  HA ', -0.428, (57.666, 42.692, 124.048)), (' F 502  GLY  O  ', ' F 506  GLN  HG3', -0.427, (90.999, 47.962, 109.078)), (' A 524  GLN  HG3', ' A 583  PRO  HG2', -0.427, (91.945, 5.737, 145.618)), (' A 177  ARG  O  ', ' A 181  GLU  HG3', -0.427, (119.805, -16.747, 159.924)), (' B 404  VAL  O  ', ' B 407  ILE HG12', -0.426, (78.461, 26.123, 120.991)), (' E 440  ASN  N  ', ' E 440  ASN  OD1', -0.425, (77.74, 1.095, 191.873)), (' B 499  ASP  N  ', ' B 500  PRO  HD2', -0.425, (47.786, 29.546, 112.166)), (' E 433  VAL HG12', ' E 512  VAL HG22', -0.424, (60.155, -4.358, 183.513)), (' B 323  MET  HE2', ' B 376  MET  HE2', -0.424, (81.764, 39.595, 121.015)), (' F 440  ASN  N  ', ' F 440  ASN  OD1', -0.422, (94.065, 57.474, 110.121)), (' A 391  LEU  H  ', ' A 391  LEU HD12', -0.421, (83.649, -14.38, 167.126)), (' F 421  TYR  HB3', ' F 454  ARG  HG2', -0.421, (98.929, 42.803, 88.794)), (' B 455  MET  HB3', ' B 455  MET  HE3', -0.421, (54.692, 21.147, 116.694)), (' A  21  ILE HD13', ' A  87  GLU  HG2', -0.421, (75.816, -30.785, 156.946)), (' F 476  GLY  N  ', ' F 487  ASN  HB3', -0.42, (89.319, 34.566, 78.761)), (' E 408  ARG  HD3', ' E 409  GLN  HG3', -0.419, (67.852, -5.747, 174.331)), (' F 438  THR  O  ', ' F 442  ASP  HB2', -0.419, (94.715, 56.004, 106.011)), (' F 403  LYS  HG3', ' F 504  GLY  O  ', -0.419, (93.759, 44.648, 105.142)), (' B  56  GLU  HA ', ' B  59  VAL HG12', -0.416, (62.932, 54.881, 105.564)), (' E 466  ARG  NH1', ' E 468  ILE HD11', -0.416, (61.805, -20.373, 190.202)), (' A 177  ARG  NH2', ' A 181  GLU  OE2', -0.415, (121.779, -17.463, 156.426)), (' A 535  HIS  CD2', ' A 542  CYS  HB2', -0.415, (89.63, 18.412, 150.141)), (' E 403  LYS  HG3', ' E 504  GLY  O  ', -0.414, (75.632, -4.16, 179.012)), (' A 406  GLU  O  ', ' A 410  LEU HD13', -0.414, (96.182, 11.013, 157.372)), (' A 122  THR  O  ', ' A 126  ILE HG12', -0.413, (117.025, -11.422, 170.162)), (' A 499  ASP  N  ', ' A 500  PRO  HD2', -0.411, (119.643, -7.987, 156.172)), (' A 284  PRO  HB3', ' A 594  TRP  CH2', -0.409, (110.637, 22.985, 145.597)), (' B 143  LEU  H  ', ' B 143  LEU HD23', -0.409, (52.671, 47.261, 121.62)), (' B 261  CYS  HB2', ' B 488  VAL  HB ', -0.408, (45.118, 19.798, 124.033)), (' B 594  TRP  CZ2', ' B 598  GLN  HG3', -0.408, (60.666, 15.447, 140.913)), (' A  85  LEU  CD1', ' A  94  LYS  HG3', -0.407, (83.14, -22.862, 156.316)), (' A 517  THR  HA ', ' A 579  MET  HE1', -0.406, (97.712, -1.355, 149.034)), (' B 309  LYS  HD2', ' B 328  TRP  CH2', -0.405, (83.654, 43.633, 126.626)), (' A 414  THR HG21', ' A 542  CYS  O  ', -0.403, (92.649, 18.725, 154.828)), (' A 457  GLU  HG3', ' A 513  ILE  N  ', -0.403, (104.388, -5.875, 153.503)), (' B 126  ILE  HA ', ' B 129  THR HG22', -0.402, (52.149, 45.092, 110.528)), (' A 712  NAG  H61', ' A 713  NAG  N2 ', -0.402, (79.309, 17.557, 178.333))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
