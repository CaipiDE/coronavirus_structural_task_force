# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'ASN', 0.018014618768808662, (-35.77899999999998, 96.696, 35.574)), ('B', '  45 ', 'ASN', 0.016438923358592643, (-60.629999999999995, 67.94, -35.057)), ('B', '  78 ', 'PRO', 0.08749846112029375, (-80.37599999999996, 53.843, 2.916))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (-40.30699999999999, 105.891, 23.428000000000008)), ('A', ' 608 ', 'PRO', None, (-29.452999999999992, 105.27799999999998, 2.498000000000001)), ('B', ' 141 ', 'PRO', None, (-45.704999999999984, 71.457, -31.586)), ('B', ' 608 ', 'PRO', None, (-38.66899999999998, 93.155, -25.559))]
data['rota'] = [('A', ' 372 ', 'TYR', 0.07033995244100755, (-63.13199999999999, 87.925, 40.287)), ('A', ' 388 ', 'HIS', 0.15708455168282298, (-60.26899999999999, 90.097, 28.910000000000007)), ('A', ' 414 ', 'VAL', 0.24161045053992086, (-70.01199999999996, 119.48900000000003, 17.442)), ('A', ' 421 ', 'ASP', 0.21436524354597955, (-70.73599999999996, 111.748, 11.786)), ('B', ' 368 ', 'TYR', 0.2217002075997148, (-55.24, 48.493, -18.151)), ('B', ' 372 ', 'TYR', 0.084471319258991, (-60.41799999999998, 44.931, -17.271)), ('B', ' 388 ', 'HIS', 0.17682239344893416, (-53.64199999999998, 54.119, -13.798))]
data['cbeta'] = []
data['probe'] = [(' B 707  NAG  H3 ', ' B 707  NAG  H83', -0.793, (-53.363, 94.932, -16.606)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.68, (-40.535, 87.489, -18.879)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.661, (-37.755, 100.456, 2.946)), (' B 708  NAG  H3 ', ' B 708  NAG  H83', -0.613, (-49.402, 95.926, -22.246)), (' B 708  NAG  C1 ', ' B 708  NAG  H82', -0.595, (-49.753, 95.229, -20.435)), (' B  83  PHE  HB2', ' B  89  ARG  HG2', -0.583, (-73.62, 46.783, -1.342)), (' B 478  THR  HB ', ' B 709  FUC  H61', -0.581, (-44.599, 93.307, -14.43)), (' A 477  VAL HG12', ' A 603  LEU HD21', -0.563, (-35.525, 99.511, 0.846)), (' B 477  VAL HG12', ' B 603  LEU HD21', -0.546, (-39.673, 90.468, -18.361)), (' B 707  NAG  C8 ', ' B 707  NAG  H3 ', -0.542, (-53.305, 94.29, -15.743)), (' B 380  ARG  O  ', ' B 381  ARG  HD2', -0.54, (-62.636, 53.012, -15.658)), (' B  11  SER  OG ', ' B  13  ASP  OD2', -0.538, (-86.083, 43.801, -3.453)), (' A  31  VAL  O  ', ' A  34  GLN  HG3', -0.536, (-44.99, 81.597, 42.571)), (' B 137  TRP  HH2', ' B 155  MET  HE1', -0.52, (-38.807, 82.242, -31.846)), (' B 482  THR  OG1', ' B 707  NAG  C8 ', -0.508, (-54.636, 93.18, -15.226)), (' A 416  ASN  ND2', ' A 703  NAG  O7 ', -0.5, (-77.322, 114.588, 17.76)), (' A 418  THR HG23', ' A 704  FUC  H4 ', -0.497, (-77.553, 113.655, 8.552)), (' B 708  NAG  C1 ', ' B 708  NAG  C8 ', -0.496, (-49.979, 95.469, -20.821)), (' A  91  ILE  O  ', ' A  95  VAL HG23', -0.493, (-57.54, 71.816, 37.492)), (' B 707  NAG  H61', ' B 709  FUC  O2 ', -0.492, (-48.331, 94.251, -19.27)), (' B 274  LYS  HB3', ' B 275  PRO  CD ', -0.491, (-20.503, 56.866, -19.869)), (' A 137  TRP  HH2', ' A 155  MET  HE1', -0.489, (-34.469, 110.01, 12.535)), (' B 274  LYS  HB3', ' B 275  PRO  HD2', -0.488, (-20.839, 56.907, -19.194)), (' A 106  ALA  O  ', ' A 801  HOH  O  ', -0.485, (-31.802, 73.226, 29.914)), (' B 235  ARG HH12', ' B 719  PGE  H22', -0.48, (-20.807, 71.515, -14.218)), (' A 110 AGLN  HG3', ' A 801  HOH  O  ', -0.469, (-31.116, 73.682, 29.33)), (' A 172  LYS  O  ', ' A 176 BGLU  HG3', -0.468, (-35.032, 80.715, 14.996)), (' B 489  LYS  O  ', ' B 493  PRO  HD2', -0.461, (-54.398, 73.623, -17.655)), (' A 340  ARG  HG2', ' A 373  LYS  O  ', -0.458, (-59.145, 86.888, 45.107)), (' A 274  LYS  NZ ', ' A 417  ASP  OD2', -0.454, (-71.896, 119.29, 10.546)), (' B 707  NAG  C3 ', ' B 707  NAG  H83', -0.452, (-52.931, 95.144, -15.737)), (' B  73  LYS  HG2', ' B  96  ARG  HG3', -0.451, (-78.645, 57.706, -4.486)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.448, (-38.341, 85.345, -18.222)), (' A 510  GLN  HG2', ' A 569  PRO  HG2', -0.446, (-72.085, 91.753, 18.473)), (' A  27  SER  OG ', ' A 719  EDO  C2 ', -0.444, (-50.589, 73.837, 49.319)), (' B  66  GLU  O  ', ' B  70  GLN  HG3', -0.439, (-81.787, 61.245, -11.154)), (' A  90  ARG  NH1', ' A 551  PRO  HA ', -0.438, (-67.123, 77.947, 29.49)), (' B  17  ALA  O  ', ' B  20  PHE  HB3', -0.437, (-79.005, 46.943, -9.222)), (' A 273  ASP  N  ', ' A 273  ASP  OD1', -0.436, (-63.038, 121.097, 7.312)), (' A 380  ARG  O  ', ' A 381  ARG  HD3', -0.434, (-57.066, 84.211, 35.008)), (' B 268  VAL HG21', ' B 430  LEU HD11', -0.432, (-29.762, 67.217, -15.294)), (' B  66  GLU  CD ', ' B 108  ARG HH22', -0.431, (-81.302, 65.703, -14.665)), (' B 482  THR  OG1', ' B 707  NAG  H81', -0.43, (-55.193, 93.255, -14.71)), (' A 324  ASP  OD1', ' A 326  ARG  HB2', -0.428, (-34.329, 103.129, 35.251)), (' B 510  GLN  HG2', ' B 569  PRO  HG2', -0.425, (-42.648, 51.336, -2.574)), (' B  60  LEU  O  ', ' B  60  LEU HD23', -0.42, (-77.881, 61.097, -21.947)), (' B 133  THR  O  ', ' B 133  THR HG22', -0.418, (-46.502, 90.589, -37.387)), (' A 426  LEU  C  ', ' A 426  LEU HD13', -0.418, (-61.636, 107.689, 9.557)), (' A 140  ASP  HA ', ' A 141  PRO  HA ', -0.418, (-41.962, 104.94, 21.899)), (' A 292  HIS  CD2', ' A 711  XPE H142', -0.418, (-54.595, 116.728, 34.928)), (' A  25  GLN  OE1', ' A 376  PRO  HB2', -0.416, (-59.679, 77.349, 42.268)), (' A 217  GLN  NE2', ' A 813  HOH  O  ', -0.415, (-73.19, 88.695, 9.493)), (' A 701  NAG  H5 ', ' A1105  HOH  O  ', -0.41, (-29.767, 96.597, 39.134)), (' A 580  TRP  O  ', ' A 584  GLN  HG2', -0.41, (-67.594, 107.333, 0.391)), (' A 570  LEU  C  ', ' A 570  LEU HD23', -0.407, (-69.137, 96.698, 12.572)), (' A 137  TRP  CH2', ' A 155  MET  HE1', -0.401, (-34.596, 110.211, 12.984)), (' A 324  ASP  OD2', ' A 326  ARG  NH2', -0.401, (-35.622, 103.494, 37.712))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
