# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 104 ', 'VAL', 0.03509114973140238, (51.42199999999998, 15.549, 57.346)), ('A', ' 413 ', 'ILE', 0.051464849795032436, (36.017, 38.766, 42.069))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (45.511, 62.823, 45.965))]
data['rota'] = [('A', ' 138 ', 'ILE', 0.26784171494371073, (62.67399999999999, 47.92299999999999, 57.337)), ('A', ' 155 ', 'GLN', 0.21308718898230328, (59.066, 77.631, 47.367)), ('A', ' 239 ', 'GLU', 0.13375987116971816, (48.655, 34.795, 23.783)), ('A', ' 377 ', 'ASP', 0.0979330427636931, (37.941999999999986, 54.964, 41.243)), ('A', ' 390 ', 'TYR', 0.27880967067328355, (35.429, 36.967, 49.597)), ('A', ' 394 ', 'TYR', 0.05136627644181966, (34.702, 32.054, 53.664)), ('A', ' 425 ', 'LYS', 0.0, (24.197999999999993, 50.27500000000001, 29.005)), ('A', ' 539 ', 'GLN', 0.009083969352425775, (26.421, 32.335, 30.076)), ('A', ' 597 ', 'LYS', 0.277100266346149, (37.853, 39.99899999999999, 19.224)), ('A', ' 624 ', 'ASN', 0.0, (64.68, 64.263, 23.164))]
data['cbeta'] = []
data['probe'] = [(' A 104  VAL HG23', ' A 105  ASN  H  ', -1.117, (53.212, 15.216, 54.85)), (' A 389  GLN  HG3', ' A 566  MET  HE1', -0.943, (31.942, 37.016, 47.159)), (' A 104  VAL HG23', ' A 105  ASN  N  ', -0.936, (52.183, 14.556, 55.15)), (' A 304  ALA  O  ', ' A 308  GLN  HG3', -0.93, (26.429, 63.679, 37.245)), (' A 105  ASN  HA ', ' A 113  LYS  NZ ', -0.917, (50.227, 12.818, 53.177)), (' A 706  ACT  H1 ', ' A1196  HOH  O  ', -0.898, (46.812, 41.437, 54.224)), (' A 239 BGLU  HA ', ' A 239 BGLU  OE1', -0.854, (49.293, 34.19, 22.366)), (' A 104  VAL  CG2', ' A 105  ASN  H  ', -0.84, (52.987, 15.502, 55.586)), (' A 104  VAL  O  ', ' A 107  LEU  HB2', -0.784, (48.69, 13.556, 57.052)), (' A 389  GLN  CG ', ' A 566  MET  HE1', -0.769, (31.782, 38.017, 46.844)), (' A 476  ILE  CD1', ' A 484 AGLU  HG2', -0.758, (66.835, 41.573, 36.806)), (' A 105  ASN  HA ', ' A 113  LYS  HZ1', -0.752, (50.99, 13.325, 52.795)), (' A 439  SER  H  ', ' A 442 BHIS  HD2', -0.744, (26.11, 53.086, 18.2)), (' A 296  ALA  HB3', ' A 445  ASN  ND2', -0.737, (32.495, 57.144, 19.081)), (' A 105  ASN  HA ', ' A 113  LYS  HZ2', -0.71, (49.859, 13.031, 53.626)), (' A 318  GLU  OE1', ' A 382  HIS  HE1', -0.693, (29.345, 50.707, 41.05)), (' A 437  GLY  HA3', ' A 442 AHIS  CD2', -0.689, (27.131, 53.945, 22.099)), (' A 239 AGLU  OE2', ' A1041  HOH  O  ', -0.684, (45.747, 30.302, 26.244)), (' A 277  ASN  OD1', ' A 281  GLN  HG2', -0.666, (49.925, 52.424, 35.553)), (' A 425  LYS  HE2', ' A1072  HOH  O  ', -0.66, (26.07, 47.334, 26.982)), (' A 366  ARG HH22', ' A 708  ACT  H2 ', -0.655, (38.519, 48.371, 64.385)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.654, (55.532, 27.317, 62.527)), (' A 235  ARG  O  ', ' A 239 BGLU  HG2', -0.647, (49.269, 32.358, 25.746)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.646, (48.274, 43.785, 35.58)), (' A 425  LYS  HE3', ' A 549  LYS  O  ', -0.644, (25.377, 44.55, 27.056)), (' A 235  ARG  O  ', ' A 239 AGLU  HG3', -0.641, (49.998, 32.03, 25.699)), (' A 304  ALA  O  ', ' A 308  GLN  CG ', -0.631, (25.737, 63.683, 37.711)), (' A 439  SER  H  ', ' A 442 BHIS  CD2', -0.626, (25.917, 53.803, 18.846)), (' A  96  GLY  HA3', ' A 122  LEU HD21', -0.616, (56.289, 27.466, 62.835)), (' A  45  SER  O  ', ' A  49  GLU  HG3', -0.613, (41.447, 20.187, 65.679)), (' A 296  ALA  HB3', ' A 445  ASN HD21', -0.604, (32.618, 57.049, 18.854)), (' A  49  GLU  O  ', ' A  53  ARG  HG2', -0.603, (41.368, 26.371, 68.051)), (' A 239 BGLU  CA ', ' A 239 BGLU  OE1', -0.581, (49.099, 33.875, 23.327)), (' A 354  ALA  O  ', ' A 800  KAW  HAW', -0.569, (44.493, 48.736, 47.571)), (' A 160  GLN  OE1', ' A 343  LYS  NZ ', -0.565, (47.592, 63.773, 50.098)), (' A 389  GLN  HG3', ' A 566  MET  CE ', -0.559, (32.288, 36.914, 47.595)), (' A 476  ILE HD13', ' A 484 AGLU  HG2', -0.556, (66.264, 42.696, 37.154)), (' A 463  LEU  C  ', ' A 463  LEU HD23', -0.544, (57.902, 43.384, 35.497)), (' A 183 BGLU  OE1', ' A 499  VAL HG21', -0.544, (63.391, 61.584, 34.75)), (' A 476  ILE HD11', ' A 484 AGLU  HG2', -0.543, (66.248, 41.522, 36.598)), (' A 382  HIS  NE2', ' A 421  VAL HG21', -0.54, (30.04, 47.677, 40.087)), (' A 498  PRO  HA ', ' A 623  PRO  HG2', -0.534, (61.567, 59.928, 27.408)), (' A 221  ARG  NH2', ' A1013  HOH  O  ', -0.532, (62.692, 30.755, 41.918)), (' A 456  ALA  O  ', ' A 459  PRO  HD2', -0.531, (49.616, 45.972, 29.566)), (' A 597  LYS  HB3', ' A 598  PRO  HD3', -0.527, (35.878, 39.736, 19.233)), (' A 574  TRP  CG ', ' A 575  PRO  HD3', -0.521, (44.1, 26.057, 40.957)), (' A 466  GLN  O  ', ' A 470  ARG  HG3', -0.52, (63.027, 38.228, 36.822)), (' A 318  GLU  OE1', ' A 382  HIS  CE1', -0.52, (29.441, 49.825, 41.424)), (' A 240  LEU HD11', ' A 528  ILE  CD1', -0.51, (45.607, 36.972, 28.945)), (' A 103  ASP  O  ', ' A 107  LEU  HG ', -0.507, (50.763, 13.521, 59.074)), (' A  69  TYR  HH ', ' A 144  THR  HG1', -0.498, (55.16, 53.79, 57.515)), (' A 348  ARG  HD3', ' A 691  NAG  H82', -0.497, (43.243, 60.412, 62.771)), (' A 448  MET  HE2', ' A 599  LEU HD11', -0.497, (40.527, 50.043, 19.724)), (' A 241  GLN  HB2', ' A 242  PRO  HD3', -0.496, (50.922, 37.678, 21.112)), (' A 621  TRP  CZ3', ' A 623  PRO  HD3', -0.496, (61.531, 57.993, 23.111)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.494, (56.93, 39.153, 34.948)), (' A 448  MET  HE1', ' A 603  LEU HD21', -0.49, (43.022, 50.395, 18.918)), (' A 292  PRO  O  ', ' A 294  PRO  HD3', -0.489, (37.745, 57.833, 15.519)), (' A 579  GLN  OE1', ' A 585  PRO  HD3', -0.485, (38.174, 21.247, 34.566)), (' A 425  LYS  CE ', ' A1072  HOH  O  ', -0.48, (25.768, 47.433, 27.007)), (' A 531  PHE  CE1', ' A 592  MET  HE3', -0.475, (40.683, 41.06, 30.36)), (' A 325  SER  O  ', ' A 554  GLN  HA ', -0.474, (21.048, 40.47, 40.935)), (' A 282  THR  HB ', ' A 453  ASP  OD1', -0.468, (43.653, 51.594, 32.394)), (' A 512  PHE  O  ', ' A 515  PRO  HD2', -0.468, (55.434, 49.332, 47.01)), (' A 570  PHE  HA ', ' A1139  HOH  O  ', -0.464, (42.477, 27.564, 48.235)), (' A 174  LYS  HB3', ' A1124  HOH  O  ', -0.462, (53.582, 70.895, 28.415)), (' A 241  GLN  CB ', ' A 242  PRO  HD3', -0.461, (50.864, 37.984, 21.122)), (' A 300  ASP  HB3', ' A 303  GLU  HB3', -0.46, (31.661, 65.473, 32.299)), (' A 220  TRP  O  ', ' A 223  MET  HG3', -0.454, (53.032, 32.541, 46.487)), (' A 522  ARG  HB3', ' A 703   CL CL  ', -0.454, (49.457, 37.044, 43.611)), (' A 189  ALA  O  ', ' A 193  ILE HG12', -0.453, (61.09, 55.008, 47.823)), (' A 159  LEU  N  ', ' A 159  LEU HD12', -0.452, (52.755, 69.161, 45.424)), (' A 150  THR  O  ', ' A 188  LYS  NZ ', -0.452, (59.326, 65.326, 47.597)), (' A 391  PHE  CZ ', ' A 800  KAW  HAK', -0.451, (41.195, 40.505, 52.166)), (' A 161  LEU  HA ', ' A 165  LEU  HB2', -0.449, (51.123, 61.893, 43.07)), (' A 553  TYR  O  ', ' A 554  GLN  HB2', -0.447, (20.158, 41.842, 37.12)), (' A 478  LYS  HA ', ' A 481  TYR  CE2', -0.446, (69.487, 45.536, 43.553)), (' A 296  ALA  CB ', ' A 445  ASN  ND2', -0.444, (32.153, 56.795, 19.291)), (' A 265  ASN  HB2', ' A 621  TRP  CE2', -0.44, (61.744, 57.766, 19.121)), (' A 301  THR HG21', ' A 375  LEU  HB2', -0.439, (33.037, 56.968, 35.09)), (' A 183 BGLU  OE1', ' A 499  VAL  CG2', -0.437, (63.71, 61.323, 34.409)), (' A 507  ASP  N  ', ' A 508  PRO  CD ', -0.436, (63.295, 51.823, 40.187)), (' A 275  LEU  N  ', ' A 275  LEU HD22', -0.435, (51.886, 57.047, 28.374)), (' A 600  LEU HD21', ' A 604  ARG  NH1', -0.433, (43.944, 39.066, 16.169)), (' A 439  SER  HB2', ' A 442 BHIS  CD2', -0.43, (26.976, 54.296, 17.894)), (' A 104  VAL  O  ', ' A 107  LEU  N  ', -0.426, (49.724, 12.46, 57.245)), (' A 623  PRO  O  ', ' A 624  ASN  C  ', -0.426, (65.766, 62.944, 23.891)), (' A  45  SER  HA ', ' A 112  ILE HD13', -0.425, (42.475, 17.896, 62.798)), (' A 411  GLU  HB2', ' A 526  SER  HB2', -0.424, (43.398, 39.101, 40.901)), (' A 293  PHE  CG ', ' A 441  GLU  HB3', -0.423, (32.71, 54.925, 15.569)), (' A 478  LYS  HA ', ' A 481  TYR  CD2', -0.42, (69.396, 45.925, 43.065)), (' A 375  LEU  O  ', ' A 375  LEU HD12', -0.419, (34.428, 53.941, 37.161)), (' A 391  PHE  HZ ', ' A 800  KAW  HAK', -0.419, (41.784, 40.796, 52.285)), (' A 144  THR  O  ', ' A 148  VAL HG22', -0.418, (56.32, 58.08, 54.093)), (' A 460  PHE  O  ', ' A 463  LEU  HB3', -0.416, (54.76, 44.365, 34.599)), (' A 488  LEU  HA ', ' A 488  LEU HD23', -0.415, (62.084, 43.048, 30.578)), (' A 493  GLN  HB3', ' A 495  LEU  HG ', -0.413, (55.417, 49.913, 28.191)), (' A 463  LEU HD11', ' A 489  ARG  HA ', -0.411, (58.763, 47.162, 31.755)), (' A 574  TRP  N  ', ' A 575  PRO  CD ', -0.409, (43.544, 24.568, 42.136)), (' A  78  SER  HB3', ' A 140  LEU HD21', -0.408, (56.331, 52.306, 62.708)), (' A 326  LEU  O  ', ' A 559  GLY  HA3', -0.405, (24.479, 35.994, 42.677)), (' A 128  PRO  O  ', ' A 129  ALA  C  ', -0.405, (65.492, 38.284, 65.432)), (' A 514  ILE  HB ', ' A 515  PRO  HD3', -0.4, (58.091, 49.637, 45.648))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
