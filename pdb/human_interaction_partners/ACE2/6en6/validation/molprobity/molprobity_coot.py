# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 141 ', 'PRO', None, (-13.064999999999996, 34.037, 7.517000000000001)), ('A', ' 608 ', 'PRO', None, (-23.186, 17.314, 20.974)), ('B', ' 141 ', 'PRO', None, (-6.151000000000001, -30.868, 18.015)), ('B', ' 608 ', 'PRO', None, (-13.306999999999999, -11.803, 30.123)), ('C', ' 141 ', 'PRO', None, (18.043, -8.729, 64.401)), ('C', ' 608 ', 'PRO', None, (7.013999999999999, -25.6, 77.29)), ('D', ' 141 ', 'PRO', None, (40.191, 28.758, 76.659)), ('D', ' 608 ', 'PRO', None, (32.41799999999999, 48.547, 88.373))]
data['rota'] = [('A', '  96 ', 'ARG', 0.20411060081022533, (-0.28099999999999925, 18.141, -29.242)), ('A', ' 273 ', 'ASP', 0.08792255485200345, (10.956, 33.651, 29.18)), ('A', ' 368 ', 'TYR', 0.2953299587476585, (7.819, 34.814, -11.911)), ('A', ' 372 ', 'TYR', 0.04742756564993121, (9.022, 35.478, -18.2)), ('B', ' 372 ', 'TYR', 0.10462534508592605, (8.724999999999998, -37.853, -11.538)), ('B', ' 377 ', 'VAL', 0.01569783656526931, (16.973999999999993, -34.345, -8.808)), ('B', ' 378 ', 'SER', 0.10945893852056501, (16.966000000000005, -30.72, -10.004)), ('B', ' 381 ', 'ARG', 0.03821431239388826, (9.341, -30.261, -8.853)), ('B', ' 388 ', 'HIS', 0.28100583810596114, (1.7320000000000007, -29.090000000000003, -7.214)), ('B', ' 591 ', 'VAL', 0.14792173119619, (-25.372, -3.268, 0.571)), ('C', ' 149 ', 'SER', 0.07236568607972386, (23.379000000000005, -12.293999999999997, 76.207)), ('C', ' 155 ', 'MET', 0.21289492446484154, (14.745999999999999, -18.592999999999996, 77.109)), ('C', ' 187 ', 'LYS', 0.0, (28.661, -34.892, 35.99)), ('C', ' 368 ', 'TYR', 0.2525100354313516, (40.831, -8.189, 47.225)), ('C', ' 372 ', 'TYR', 0.07797168965946097, (42.815, -7.5799999999999965, 41.077)), ('D', ' 368 ', 'TYR', 0.2708808443887187, (50.32699999999999, 23.538, 50.582)), ('D', ' 372 ', 'TYR', 0.06630224087609016, (55.596999999999994, 21.832999999999995, 47.284)), ('D', ' 388 ', 'HIS', 0.19878784088907683, (48.38799999999999, 30.523, 51.53)), ('D', ' 609 ', 'GLU', 0.06953359568923785, (31.484, 46.451, 91.975))]
data['cbeta'] = [('B', ' 273 ', 'ASP', ' ', 0.34368943225492743, (-36.797, -30.081, 3.264))]
data['probe'] = [(' A 545  ARG  NH1', ' A 803  HOH  O  ', -0.688, (12.383, 40.363, -17.826)), (' D 378  SER  O  ', ' D 381 BARG  NH2', -0.687, (62.286, 31.141, 48.892)), (' D 724  ACT  H3 ', ' D 727  ACT  H3 ', -0.679, (26.436, 45.071, 96.761)), (' A 444 BGLN  NE2', ' A 802  HOH  O  ', -0.667, (2.926, 6.372, -3.554)), (' D 724  ACT  H3 ', ' D 727  ACT  CH3', -0.643, (26.997, 45.091, 96.529)), (' D 728  ACT  H2 ', ' D 923  HOH  O  ', -0.615, (32.521, 54.666, 79.388)), (' A 233  LEU HD23', ' A 267 BMET  HE1', -0.584, (-1.372, 21.202, 22.64)), (' B 274  LYS  HB3', ' B 275  PRO  CD ', -0.577, (-31.979, -32.236, -1.471)), (' B 235  ARG  NH1', ' B 730  2PE  O16', -0.571, (-31.441, -15.969, 5.695)), (' A 120  ARG  NH2', ' A 810  HOH  O  ', -0.568, (-24.022, 22.12, -6.956)), (' C 157  LEU HD11', ' C 477  VAL HG13', -0.561, (15.17, -27.54, 73.591)), (' B 707  NAG  H61', ' B 708  FUC  O2 ', -0.546, (-4.575, -5.325, 26.578)), (' B 710  BJ2  N16', ' B 714  PEG  O1 ', -0.544, (6.567, -29.79, 2.429)), (' A 453  ARG  NH1', ' B 212  GLU  OE2', -0.529, (-3.881, -3.118, -8.421)), (' D  25  GLN  OE1', ' D 376  PRO  HA ', -0.528, (65.848, 23.3, 47.082)), (' B  66  GLU  O  ', ' B  70  GLN  HG3', -0.516, (30.554, -21.989, -4.025)), (' B 730  2PE H172', ' B 919  HOH  O  ', -0.513, (-30.912, -13.644, 2.668)), (' B 155  MET  HA ', ' B 155  MET  HE3', -0.512, (-14.513, -19.8, 24.103)), (' D 245  ARG  HG2', ' D 591  VAL HG21', -0.511, (22.528, 58.155, 61.686)), (' B  77  GLU  OE2', ' B  96  ARG  NH2', -0.509, (26.278, -15.536, -12.16)), (' B 324  ASP  OD1', ' B 326  ARG  HB2', -0.506, (4.516, -38.506, 21.276)), (' B 235  ARG HH22', ' B 730  2PE  H81', -0.506, (-33.72, -18.717, 6.658)), (' B 278  ASP  OD2', ' B 801  HOH  O  ', -0.506, (-21.835, -29.84, 7.901)), (' B 199  ARG  HE ', ' B 728  PGE  H4 ', -0.506, (7.944, -9.838, -8.834)), (' A 274  LYS  HB3', ' A 275  PRO  CD ', -0.502, (13.602, 35.774, 23.91)), (' B 726  ACT  H3 ', ' B1344  HOH  O  ', -0.489, (18.392, -20.293, 19.146)), (' B  25  GLN  CD ', ' B 376  PRO  HB3', -0.489, (19.623, -35.255, -13.203)), (' D 380  ARG  O  ', ' D 381 AARG  HD2', -0.488, (58.119, 29.122, 51.414)), (' C 539  LYS  HE3', ' C 559  MET  O  ', -0.485, (56.09, -13.472, 53.255)), (' B  25  GLN  HG3', ' B1206  HOH  O  ', -0.485, (20.066, -36.705, -10.375)), (' C  56 BGLU  HG2', ' C1094  HOH  O  ', -0.485, (12.588, -15.062, 34.831)), (' B  90  ARG  NH2', ' B 822  HOH  O  ', -0.484, (10.868, -23.301, -17.759)), (' D 541 AARG  NH1', ' D 808  HOH  O  ', -0.479, (48.341, 14.786, 44.397)), (' C  96  ARG  NH1', ' C 825  HOH  O  ', -0.478, (35.789, -29.386, 31.886)), (' B 708  FUC  C1 ', ' B 708  FUC  O4 ', -0.476, (-6.627, -4.427, 24.379)), (' D  22  GLN  OE1', ' D 802  HOH  O  ', -0.471, (74.353, 19.719, 42.564)), (' C 390  ALA  O  ', ' C 394 AVAL HG23', -0.469, (43.722, -12.685, 56.869)), (' A 270  PRO  HB3', ' A 580  TRP  CH2', -0.468, (12.803, 23.21, 23.868)), (' B 274  LYS  HB3', ' B 275  PRO  HD2', -0.467, (-31.138, -32.372, -1.218)), (' B 440  TYR  O  ', ' B 444 BGLN  HG2', -0.466, (-1.652, -10.711, -2.098)), (' A 324  ASP  OD1', ' A 326  ARG  HB2', -0.466, (-19.454, 41.291, -2.262)), (' C 603  LEU  HG ', ' C 719  ACT  H2 ', -0.465, (13.173, -32.649, 76.885)), (' B 495  VAL  O  ', ' B 495  VAL HG12', -0.46, (9.988, -19.766, 3.565)), (' A 495  VAL  O  ', ' A 495  VAL HG12', -0.46, (-6.737, 19.88, -11.16)), (' C 709  BJ2  N16', ' C 712  PEG  O4 ', -0.459, (29.404, -12.943, 48.478)), (' D 542  LYS  HB3', ' D 542  LYS  HE3', -0.455, (48.479, 24.931, 37.465)), (' B 606  ASN  O  ', ' B 609  GLU  O  ', -0.454, (-17.082, -13.634, 30.882)), (' D 478  THR  HB ', ' D 708  FUC  H2 ', -0.454, (38.247, 55.452, 80.773)), (' D 274  LYS  HB3', ' D 275  PRO  CD ', -0.453, (14.915, 27.291, 57.516)), (' A 187  LYS  CE ', ' A1159  HOH  O  ', -0.452, (-7.626, 5.484, -18.155)), (' A 274  LYS  HB3', ' A 275  PRO  HD2', -0.452, (13.866, 35.793, 23.911)), (' D 321  LYS  O  ', ' D 731  PGE  H32', -0.451, (43.615, 20.482, 76.665)), (' D 710  BJ2  N16', ' D 713  PEG  O1 ', -0.448, (52.94, 29.452, 61.348)), (' C  31  VAL  O  ', ' C  34  GLN  HG3', -0.446, (24.69, -10.13, 33.104)), (' C 713  PEG  H41', ' C 721  XPE H141', -0.446, (29.275, 10.911, 64.17)), (' C 391  ILE  O  ', ' C 394 BVAL HG22', -0.445, (43.618, -10.188, 56.684)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.442, (-11.899, -10.509, 21.014)), (' B 381 BARG  NH2', ' B 830  HOH  O  ', -0.442, (9.597, -31.665, -3.561)), (' C 291  THR HG23', ' C1017  HOH  O  ', -0.434, (26.276, 4.651, 59.528)), (' A 721  BCN  H51', ' A1019  HOH  O  ', -0.434, (0.743, 0.64, 2.324)), (' B 207  PHE  N  ', ' B 728  PGE  H12', -0.432, (4.347, -10.663, -13.036)), (' A 539  LYS  HE3', ' A 559  MET  O  ', -0.431, (23.058, 29.499, -7.304)), (' B 344  ARG HH12', ' B 715  PEG  C4 ', -0.43, (11.478, -41.841, 9.285)), (' D  18  GLN  O  ', ' D  22  GLN  HG3', -0.43, (72.559, 23.731, 42.497)), (' C 539  LYS  HA ', ' C1265  HOH  O  ', -0.429, (55.538, -8.517, 49.72)), (' C 495  VAL  O  ', ' C 495  VAL HG12', -0.427, (26.099, -23.085, 46.642)), (' A 129  LEU  HB3', ' A 130  PRO  HD2', -0.426, (-25.268, 27.05, 17.185)), (' C 713  PEG  C4 ', ' C 721  XPE H141', -0.425, (29.168, 11.152, 63.925)), (' D 495  VAL  O  ', ' D 495  VAL HG12', -0.423, (56.458, 39.758, 62.293)), (' B 463  TRP  NE1', ' B 718  EDO  H21', -0.421, (-3.695, -11.663, 10.668)), (' A 187  LYS  HE3', ' A1159  HOH  O  ', -0.42, (-7.843, 5.799, -18.06)), (' A 703  NAG  H62', ' A 706  FUC  O2 ', -0.419, (26.792, 30.667, 17.245)), (' D  66  GLU  OE2', ' D 801  HOH  O  ', -0.419, (76.318, 39.891, 58.977)), (' C 208  GLU  OE2', ' C 801  HOH  O  ', -0.419, (38.643, -35.872, 48.574)), (' B 463  TRP  HE1', ' B 718  EDO  H21', -0.418, (-3.894, -12.0, 10.969)), (' C 274  LYS  HB3', ' C 275  PRO  CD ', -0.417, (43.044, -6.262, 83.21)), (' A  31  VAL  O  ', ' A  34  GLN  HG3', -0.417, (-9.625, 33.034, -23.88)), (' B 730  2PE H151', ' B 919  HOH  O  ', -0.417, (-29.916, -14.294, 2.781)), (' B  80  TRP  HA ', ' B  83  PHE  CE2', -0.415, (26.589, -22.157, -19.87)), (' A  96  ARG  C  ', ' A  96  ARG  HD3', -0.414, (0.089, 16.797, -27.841)), (' B 207  PHE  HB3', ' B 728  PGE  H12', -0.413, (4.921, -10.98, -12.041)), (' D 321  LYS  O  ', ' D 731  PGE  C3 ', -0.411, (43.205, 20.17, 76.956)), (' D 731  PGE  H22', ' D1355  HOH  O  ', -0.41, (41.086, 23.237, 78.855)), (' C 340 AARG  HG2', ' C 373  LYS  O  ', -0.409, (38.959, -4.911, 36.83)), (' D 274  LYS  HB3', ' D 275  PRO  HD2', -0.408, (15.396, 26.984, 57.244)), (' C 117  GLN  NE2', ' C 720  ACT  H1 ', -0.408, (9.876, -19.268, 43.664)), (' B 231  ARG HH22', ' B 729 BPGE  C4 ', -0.408, (-31.296, -5.504, 5.724)), (' B  50  ASN  OD1', ' B 722  EDO  C1 ', -0.408, (16.532, -36.683, 16.829)), (' C 394 BVAL HG12', ' C 508  GLN  HB2', -0.407, (45.058, -13.993, 59.398)), (' D  31  VAL  O  ', ' D  34  GLN  HG3', -0.407, (68.211, 24.913, 62.417)), (' C 943  HOH  O  ', ' D 292  HIS  CD2', -0.405, (34.327, 9.959, 64.808)), (' B 164  HIS  CD2', ' B 718  EDO  H22', -0.405, (-4.226, -13.679, 13.8)), (' C 324  ASP  OD1', ' C 326  ARG  HB2', -0.404, (12.595, -1.757, 53.658)), (' B  31  VAL  O  ', ' B  34  GLN  HG3', -0.404, (21.552, -34.582, 3.248)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.402, (-15.399, 14.55, 16.715)), (' C 169  ILE  HB ', ' C 170  PRO  HD3', -0.402, (10.387, -26.237, 58.603)), (' A 721  BCN  H12', ' A 721  BCN  O6 ', -0.402, (-0.773, -0.027, 0.45)), (' B 524  PRO  HG3', ' B 704  NAG  O7 ', -0.4, (-25.78, -29.952, -17.628)), (' C  80  TRP  CZ2', ' C  96  ARG  HD3', -0.4, (40.174, -27.626, 29.861)), (' C 172  LYS  CE ', ' C 822  HOH  O  ', -0.4, (16.063, -35.162, 56.399))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
