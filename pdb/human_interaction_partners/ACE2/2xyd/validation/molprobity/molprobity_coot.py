# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 325 ', 'GLY', 0.0014603250399958343, (-3.4980000000000047, -6.341999999999996, -45.340999999999994)), ('B', '  78 ', 'PRO', 0.09903923271293785, (-8.785000000000002, -19.881000000000004, 30.927)), ('B', ' 575 ', 'GLN', 0.02489125910018479, (-21.385, 22.565, 4.887999999999999))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (6.190999999999999, -7.076999999999998, -34.952)), ('A', ' 608 ', 'PRO', None, (12.769999999999998, 15.334000000000001, -28.634999999999998)), ('B', ' 141 ', 'PRO', None, (11.049, 27.409999999999993, 20.069)), ('B', ' 608 ', 'PRO', None, (22.338000000000008, 26.892, -0.808))]
data['rota'] = [('A', ' 147 ', 'LEU', 0.05434278240154025, (13.812999999999997, -2.938000000000001, -27.452)), ('A', ' 262 ', 'GLU', 0.22444911068975398, (17.63599999999999, -12.301000000000002, -21.693)), ('A', ' 279 ', 'VAL', 0.07611801532642164, (21.401, -19.413, -30.116)), ('A', ' 326 ', 'ARG', 0.23052514856730408, (-4.906000000000002, -7.859000000000002, -42.15999999999999)), ('A', ' 352 ', 'THR', 0.02991853980347514, (14.500000000000002, -16.197, -32.013)), ('A', ' 368 ', 'TYR', 0.29916339923024227, (-3.0560000000000045, -29.985000000000003, -21.678)), ('A', ' 372 ', 'TYR', 0.044262281219036456, (-8.217000000000002, -33.696999999999996, -20.872)), ('A', ' 388 ', 'HIS', 0.22709544561261757, (-1.442000000000001, -24.561000000000003, -17.273)), ('A', ' 560 ', 'VAL', 0.035407648180620706, (6.0909999999999975, -33.606000000000016, -6.472)), ('B', '  35 ', 'SER', 0.09520694090597207, (8.221000000000005, 5.776, 36.558)), ('B', ' 147 ', 'LEU', 0.06500976152910712, (7.499999999999998, 28.042, 9.254)), ('B', ' 279 ', 'VAL', 0.03780638799071312, (-6.446, 36.852999999999994, 17.344)), ('B', ' 327 ', 'GLU', 0.1667749811209141, (17.375, 21.186, 27.503)), ('B', ' 368 ', 'TYR', 0.27990569521537684, (-9.985000000000001, 13.536999999999999, 32.21)), ('B', ' 372 ', 'TYR', 0.020220839182524444, (-11.486999999999991, 9.371999999999998, 36.826)), ('B', ' 377 ', 'VAL', 0.013919673775908439, (-5.719999999999999, 2.2099999999999977, 37.958)), ('B', ' 388 ', 'HIS', 0.2981963043321439, (-8.882000000000007, 11.588999999999999, 25.568999999999992)), ('B', ' 560 ', 'VAL', 0.06671652230967634, (-24.340999999999994, 11.094, 21.24899999999999)), ('B', ' 598 ', 'GLN', 0.2417046386916057, (5.862999999999999, 13.002000000000004, -9.98))]
data['cbeta'] = []
data['probe'] = [(' B  44  THR  O  ', ' B 328  VAL HG12', -0.993, (13.746, 20.229, 30.106)), (' B 233  LEU HD23', ' B 267  MET  HE1', -0.902, (0.97, 30.935, -0.548)), (' B 124  THR HG22', ' B 327  GLU  HG2', -0.826, (17.958, 19.198, 24.343)), (' A 245  ARG  HG2', ' A 591  VAL HG11', -0.823, (23.891, 2.011, -4.709)), (' A 233  LEU HD23', ' A 267  MET  HE1', -0.777, (23.646, -2.311, -20.674)), (' B 350  ARG  H  ', ' B 355  GLN HE21', -0.745, (2.561, 28.102, 23.019)), (' A 352  THR HG21', ' A 354  ASP  OD1', -0.738, (13.437, -13.398, -28.726)), (' A 467  ARG HH11', ' A 471  GLN HE22', -0.717, (7.786, -3.603, -15.103)), (' A 352  THR  CG2', ' A 354  ASP  OD1', -0.702, (13.998, -14.001, -28.6)), (' B 390  ALA  O  ', ' B 394  VAL HG23', -0.698, (-12.752, 17.394, 21.969)), (' B 340  ARG HH11', ' B 374  ASP  HA ', -0.691, (-9.573, 6.786, 42.485)), (' A 352  THR HG22', ' A 355  GLN  H  ', -0.654, (12.629, -15.943, -29.797)), (' A 187  LYS  HE2', ' A 192  THR  O  ', -0.642, (-16.211, -5.662, -4.571)), (' B  25  GLN  HG2', ' B 377  VAL HG12', -0.641, (-5.023, -0.686, 38.668)), (' A 324  ASP  O  ', ' A 326  ARG  N  ', -0.639, (-3.625, -7.815, -44.131)), (' B 296  VAL HG22', ' B1622  P6G  H51', -0.627, (-9.657, 34.153, 30.862)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.627, (14.182, 22.222, -0.433)), (' B  46  ILE  HB ', ' B 327  GLU  HB3', -0.618, (17.761, 18.549, 27.238)), (' B 147  LEU HD22', ' B 256  MET  HA ', -0.6, (7.183, 23.399, 8.226)), (' B 510  GLN  HG2', ' B 569  PRO  HG2', -0.598, (-21.001, 12.966, 14.556)), (' A 147  LEU HD22', ' A 256  MET  HA ', -0.598, (10.317, -2.419, -24.186)), (' B  17  ALA  HB1', ' B  92  ILE HD11', -0.595, (-9.578, -11.894, 38.273)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.581, (11.33, 9.636, -22.389)), (' A1625  PG4  H32', ' B 453  ARG HH21', -0.58, (0.239, -0.271, 0.188)), (' B 151  ARG  NH1', ' B 267  MET  HG3', -0.563, (1.022, 34.386, 3.472)), (' A 146  ILE HD13', ' A 155  MET  HE2', -0.558, (12.913, 1.925, -32.781)), (' A 279  VAL HG11', ' A 410  LEU HD13', -0.541, (18.943, -22.484, -30.807)), (' B 365  HIS  CE1', ' B1611  3ES HBB2', -0.534, (-3.593, 13.267, 25.977)), (' B 514  ALA  HB2', ' B 560  VAL HG23', -0.516, (-23.617, 14.029, 20.164)), (' B 147  LEU HD13', ' B 256  MET  HE2', -0.511, (10.115, 23.85, 10.374)), (' A  17  ALA  HA ', ' A  76  TYR  CZ ', -0.51, (-29.3, -30.119, -9.164)), (' B 155  MET  HE3', ' B 155  MET  O  ', -0.507, (14.518, 28.946, 5.962)), (' A 213 BHIS  HD2', ' A2048  HOH  O  ', -0.493, (7.295, -19.717, 2.16)), (' A 324  ASP  O  ', ' A 324  ASP  OD1', -0.488, (-3.042, -9.512, -44.719)), (' A 361  HIS  HA ', ' A 392  GLY  HA3', -0.486, (5.428, -24.405, -22.626)), (' A 245  ARG  HG2', ' A 591  VAL  CG1', -0.485, (24.144, 1.943, -4.712)), (' B  25  GLN HE21', ' B 378  SER  H  ', -0.484, (-6.375, -0.987, 37.084)), (' A 206  THR HG23', ' A 210  ASP  OD2', -0.483, (-1.515, -20.037, 1.544)), (' B 197  TYR  O  ', ' B 200  SER  OG ', -0.476, (-4.191, -3.686, 20.971)), (' A 294  PHE  CZ ', ' A 319  LEU HD22', -0.473, (2.924, -21.876, -34.334)), (' B 146  ILE HD13', ' B 155  MET  HE2', -0.473, (14.17, 30.22, 9.046)), (' B 274  LYS  HB3', ' B 275  PRO  CD ', -0.471, (-14.25, 41.074, 8.494)), (' B  25  GLN  CG ', ' B 377  VAL HG12', -0.471, (-4.841, -0.879, 38.66)), (' B 340  ARG  NH1', ' B 374  ASP  HA ', -0.469, (-9.339, 6.358, 42.782)), (' A 274  LYS  HB3', ' A 275  PRO  HD2', -0.468, (31.279, -22.257, -23.051)), (' A 236  ARG  HD2', ' A 267  MET  HE3', -0.466, (26.197, -3.034, -21.248)), (' B 139  LEU HD22', ' B 163  TRP  CZ2', -0.461, (11.821, 19.098, 15.529)), (' B 233  LEU  CD2', ' B 267  MET  HE1', -0.461, (1.276, 29.885, 0.301)), (' B 539  LYS  HE3', ' B 559  MET  O  ', -0.46, (-25.167, 13.506, 24.327)), (' A 418  THR  O  ', ' A 422  ILE HG12', -0.456, (30.275, -21.262, -13.754)), (' B 350  ARG  H  ', ' B 355  GLN  NE2', -0.453, (3.003, 27.852, 23.009)), (' B 513  GLU  HA ', ' B 525  LEU HD11', -0.452, (-22.95, 20.358, 17.18)), (' B 489  LYS  O  ', ' B 493  PRO  HD2', -0.448, (8.86, 11.568, 15.38)), (' B 187  LYS  HA ', ' B 191  PHE  O  ', -0.446, (2.968, -11.063, 18.622)), (' B 206  THR HG23', ' B 210  ASP  OD2', -0.446, (-15.775, -0.867, 12.0)), (' A 489  LYS  O  ', ' A 493  PRO  HD2', -0.443, (-2.94, -4.79, -21.287)), (' A 560  VAL HG12', ' A 562  LEU  H  ', -0.441, (5.185, -32.276, -3.62)), (' A 539  LYS  HE3', ' A 559  MET  O  ', -0.44, (5.929, -36.032, -9.263)), (' B  46  ILE HG13', ' B 327  GLU  O  ', -0.438, (15.649, 18.571, 28.564)), (' A 479  ARG  H  ', ' B 598  GLN  NE2', -0.429, (6.516, 10.591, -14.754)), (' A  49  GLU  HG3', ' A  53  ARG  NH1', -0.429, (-18.548, -10.135, -40.207)), (' B 279  VAL HG11', ' B 410  LEU HD13', -0.428, (-7.752, 35.571, 21.017)), (' B  91  ILE  O  ', ' B  95  VAL HG23', -0.427, (-5.369, -6.522, 34.544)), (' B 139  LEU  HA ', ' B 143  LEU HD12', -0.419, (13.092, 23.556, 15.15)), (' A 607  TYR  HA ', ' A 608  PRO  HA ', -0.414, (14.259, 13.348, -28.157)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.414, (11.919, 22.911, -0.554)), (' B 389  GLU  HB2', ' B 504  SER  HB2', -0.413, (-8.363, 12.659, 19.877)), (' B 398  SER  HB3', ' B 529  ASP  OD1', -0.411, (-18.182, 28.234, 23.671)), (' A 467  ARG  NH1', ' A 471  GLN HE22', -0.41, (8.03, -3.538, -15.101)), (' A 390  ALA  O  ', ' A 394  VAL HG23', -0.404, (6.283, -26.092, -16.771)), (' A   9  GLN  NE2', ' A  71  LYS  NZ ', -0.404, (-36.807, -25.227, -13.68)), (' B 580  TRP  O  ', ' B 584  GLN  HG2', -0.402, (-15.806, 28.96, -3.274)), (' A 350  ARG  HB2', ' A 355  GLN  HG3', -0.401, (10.174, -14.258, -32.06))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
