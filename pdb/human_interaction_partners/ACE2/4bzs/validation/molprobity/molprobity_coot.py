# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  81 ', 'GLN', 0.044335883921289156, (6.667000000000002, -28.732, -15.644)), ('B', ' 135 ', 'THR', 0.029050185899952664, (32.996, 3.817, -56.7))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (39.90699999999999, 27.197, 5.223)), ('A', ' 608 ', 'PRO', None, (51.05999999999999, 25.726999999999993, -15.619)), ('B', ' 141 ', 'PRO', None, (34.754999999999995, -7.683000000000001, -49.663)), ('B', ' 608 ', 'PRO', None, (41.202, 14.307, -43.318))]
data['rota'] = [('A', '  19 ', 'LEU', 0.23746273057369047, (18.504000000000005, -9.664000000000001, 30.249)), ('A', ' 327 ', 'GLU', 0.2619028496549509, (45.999, 20.822000000000006, 12.947000000000001)), ('A', ' 368 ', 'TYR', 0.287364348171434, (18.259999999999998, 13.718, 17.383)), ('A', ' 372 ', 'TYR', 0.11407229763665634, (16.643, 9.479000000000001, 22.025000000000002)), ('A', ' 388 ', 'HIS', 0.20766170524815744, (19.443, 11.554000000000002, 10.752)), ('A', ' 553 ', 'GLN', 0.2931046371256443, (8.798000000000002, 2.527, 6.73)), ('A', ' 562 ', 'LEU', 0.07266119405504463, (3.12, 6.513, 2.8850000000000002)), ('B', '  11 ', 'SER', 0.27404125401594354, (-6.561999999999999, -33.814, -23.631)), ('B', '  54 ', 'GLN', 0.14575358789243162, (10.443999999999996, -12.376000000000001, -45.879)), ('B', '  60 ', 'LEU', 0.24643037395263315, (2.9979999999999976, -16.359, -40.932)), ('B', '  81 ', 'GLN', 0.058655463814360966, (6.667000000000002, -28.732, -15.644)), ('B', '  87 ', 'GLN', 0.11173937202917773, (12.029999999999994, -34.13100000000001, -24.098000000000003)), ('B', ' 147 ', 'LEU', 0.05467619445496555, (42.25699999999999, -3.549999999999999, -42.131)), ('B', ' 187 ', 'LYS', 0.2733671845678416, (7.676000000000004, -9.182, -20.957)), ('B', ' 236 ', 'ARG', 0.06081416824056015, (56.25999999999999, 0.15700000000000092, -36.075)), ('B', ' 372 ', 'TYR', 0.07460050024967563, (20.03899999999999, -34.195, -35.161)), ('B', ' 388 ', 'HIS', 0.2859918820441112, (26.833999999999996, -25.236, -31.727)), ('B', ' 540 ', 'LEU', 0.036609844187465275, (31.686999999999994, -36.212, -30.952)), ('B', ' 562 ', 'LEU', 0.08972830217058246, (32.641999999999996, -32.279, -15.752))]
data['cbeta'] = []
data['probe'] = [(' A 598  GLN  NE2', ' A2064  HOH  O  ', -0.65, (34.461, 7.327, -27.775)), (' A 326  ARG  HD3', ' A 803  NAG  H82', -0.561, (45.299, 22.489, 20.503)), (' B  76  TYR  HD1', ' B  79  ILE HD11', -0.514, (-1.343, -31.14, -20.665)), (' B 477  VAL HG12', ' B 603  LEU HD21', -0.505, (40.194, 11.802, -36.214)), (' A 305  GLU  HG3', ' A 534  THR HG22', -0.5, (6.426, 25.034, 20.813)), (' B  69  GLY  HA3', ' B  98  LEU HD21', -0.496, (1.748, -19.164, -28.457)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.492, (43.406, 21.254, -15.434)), (' B 509  PHE  CE2', ' B 570  LEU HD13', -0.489, (41.297, -21.635, -25.249)), (' B 279  VAL HG11', ' B 410  LEU HD13', -0.488, (47.542, -23.365, -45.478)), (' B 495  VAL  O  ', ' B 495  VAL HG12', -0.486, (18.206, -11.152, -32.569)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.483, (42.027, 6.447, -35.757)), (' A 207  PHE  CE2', ' A 211  LEU HD11', -0.478, (20.114, 2.446, -1.443)), (' A 518  GLU  HG3', ' A 539  LYS  HD2', -0.473, (1.708, 16.611, 11.487)), (' A 350  ARG  H  ', ' A 355  GLN HE21', -0.47, (31.544, 27.928, 8.075)), (' B  80  TRP  O  ', ' B  81  GLN  CG ', -0.443, (4.829, -27.187, -14.87)), (' A 489  LYS  O  ', ' A 493  PRO  HD2', -0.442, (36.999, 10.991, 0.849)), (' B 518  GLU  HG3', ' B 539  LYS  HD2', -0.439, (35.973, -39.487, -26.283)), (' B 389  GLU  HB2', ' B 504  SER  HB2', -0.435, (30.448, -21.285, -29.363)), (' A 154  ALA  HB1', ' A 611  ILE HG21', -0.433, (45.901, 30.3, -14.69)), (' A  80  TRP  O  ', ' A  81  GLN  HB2', -0.43, (16.139, -15.712, 14.2)), (' B 390  ALA  O  ', ' B 394  VAL HG23', -0.427, (34.61, -27.012, -31.249)), (' A 232  ALA  CB ', ' A 268  VAL HG12', -0.425, (24.693, 30.714, -15.222)), (' B 207  PHE  CE2', ' B 211  LEU HD11', -0.42, (26.291, -16.362, -19.602)), (' B  80  TRP  O  ', ' B  81  GLN  CB ', -0.419, (5.389, -27.406, -15.446)), (' A 387  PHE  CE1', ' A 507  LEU HD21', -0.414, (13.219, 9.015, 6.491)), (' B 268  VAL HG21', ' B 430  LEU HD11', -0.411, (50.72, -12.058, -32.719)), (' B 526  HIS  HA ', ' B 573  TYR  CE2', -0.408, (46.747, -26.999, -28.472)), (' A 475  PRO  HA ', ' A 476  PRO  HD3', -0.408, (37.558, 17.446, -13.976)), (' B 338  TYR  CD1', ' B 377  VAL HG23', -0.406, (13.134, -27.687, -37.481)), (' B 295  ARG  HD2', ' B 314  TRP  CH2', -0.404, (33.319, -29.461, -51.32)), (' B 219  GLU  HB3', ' B 220  PRO  HD3', -0.404, (42.638, -12.229, -15.46)), (' B1612  9X6  C3 ', ' B1612  9X6  O1 ', -0.402, (33.032, -14.458, -36.46))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
