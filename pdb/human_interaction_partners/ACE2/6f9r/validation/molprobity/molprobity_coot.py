# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'ASN', 0.026069026788773417, (16.546, 18.456, 32.515)), ('B', '  45 ', 'ASN', 0.04117388179309253, (-8.336999999999994, -10.954999999999998, -37.765))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (12.074999999999994, 27.67, 20.158)), ('A', ' 608 ', 'PRO', None, (23.056, 26.409, -0.464)), ('B', ' 141 ', 'PRO', None, (6.7200000000000095, -7.281000000000001, -34.318)), ('B', ' 608 ', 'PRO', None, (13.333999999999994, 14.934, -27.913))]
data['rota'] = [('A', '  25 ', 'GLN', 0.01924986853747689, (-3.663000000000004, -1.2780000000000014, 41.872)), ('A', ' 372 ', 'TYR', 0.053269603709130794, (-10.704000000000004, 10.020000000000003, 37.28)), ('A', ' 388 ', 'HIS', 0.18932416972669047, (-8.021000000000011, 11.939, 26.03099999999999)), ('B', '  88 ', 'LEU', 0.0, (-20.188999999999997, -31.54299999999999, -6.4079999999999995)), ('B', ' 235 ', 'ARG', 0.21648495447865682, (29.913999999999998, 0.05500000000000038, -17.554)), ('B', ' 260 ', 'SER', 0.18511462333697304, (12.847999999999999, -10.800000000000004, -18.407999999999998)), ('B', ' 368 ', 'TYR', 0.23693204852507568, (-2.6869999999999976, -30.099, -21.011)), ('B', ' 372 ', 'TYR', 0.06003225316582908, (-7.873999999999995, -33.755, -20.05399999999999)), ('B', ' 388 ', 'HIS', 0.18740673675345798, (-1.2319999999999949, -24.538, -16.524)), ('B', ' 562 ', 'LEU', 0.2883842216303378, (4.844000000000003, -31.935, -0.932))]
data['cbeta'] = []
data['probe'] = [(' A 526  HIS  ND1', ' A 805  HOH  O  ', -0.733, (-20.904, 26.403, 10.957)), (' B  90 AARG  NH2', ' B 803  HOH  O  ', -0.708, (-8.933, -28.151, -9.108)), (' B 707  NAG  H3 ', ' B 707  NAG  H83', -0.644, (-1.224, 16.5, -19.175)), (' A 518  GLU  OE2', ' A 802  HOH  O  ', -0.641, (-26.513, 18.125, 30.068)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.588, (11.578, 8.683, -21.672)), (' A 240  ARG  NH2', ' A 603  LEU  O  ', -0.574, (16.096, 26.921, -8.263)), (' A  55  GLU  OE2', ' A 803  HOH  O  ', -0.567, (19.631, 6.199, 28.738)), (' B 184  GLU  OE1', ' B 801  HOH  O  ', -0.559, (-21.753, -1.168, -12.584)), (' A  66  GLU  O  ', ' A  70  GLN  HG2', -0.514, (4.985, -11.769, 35.354)), (' A 717  ACT  H3 ', ' A 871  HOH  O  ', -0.5, (0.589, -3.38, 8.122)), (' A  31  VAL  O  ', ' A  34  GLN  HG3', -0.49, (7.566, 3.755, 39.821)), (' B  83 APHE  HB2', ' B  89 AARG  HG2', -0.489, (-20.644, -31.392, -4.157)), (' B 711  D0W  C20', ' B 711  D0W  C36', -0.486, (1.357, -17.281, -22.347)), (' B 489  LYS  O  ', ' B 493  PRO  HD2', -0.485, (-2.568, -4.995, -20.562)), (' B 482  THR  OG1', ' B 707  NAG  C8 ', -0.481, (-2.371, 14.669, -17.874)), (' B  76 ATYR  HB3', ' B  80 ATRP  HB3', -0.477, (-26.986, -26.596, -4.282)), (' A 306  LEU  O  ', ' A 804  HOH  O  ', -0.477, (-14.882, 23.763, 38.842)), (' B 231  ARG  CG ', ' B 714  PEG  H41', -0.475, (29.529, -4.905, -12.585)), (' B 219  GLU  OE2', ' B 802  HOH  O  ', -0.474, (13.762, -5.658, -1.994)), (' A  44  THR  C  ', ' A 328  VAL HG12', -0.469, (14.383, 19.782, 31.436)), (' B  31  VAL  O  ', ' B  34  GLN  HG3', -0.468, (-20.309, -21.055, -27.459)), (' B 707  NAG  C1 ', ' B 707  NAG  H82', -0.467, (-0.512, 14.947, -17.633)), (' A 358  THR HG23', ' A 710  D0W H182', -0.464, (0.023, 21.544, 22.682)), (' B  98 BLEU  N  ', ' B 189  ASP  OD1', -0.464, (-22.162, -15.461, -9.915)), (' B 365  HIS  CE1', ' B 388  HIS  O  ', -0.461, (0.176, -23.279, -18.904)), (' B  24 ATYR  CE1', ' B  64  PHE  CE1', -0.459, (-23.336, -24.206, -18.739)), (' B 503  VAL HG13', ' B 565  LEU HD11', -0.457, (2.223, -20.884, -6.209)), (' A 710  D0W  C20', ' A 710  D0W  C36', -0.457, (-0.364, 16.558, 22.705)), (' A 701  NAG  H62', ' A 702  FUC  O2 ', -0.457, (21.113, 14.212, -0.636)), (' A  73  LYS  O  ', ' A  77  GLU  HB2', -0.452, (-3.031, -17.922, 33.018)), (' B 607  TYR  CG ', ' B 608  PRO  HA ', -0.452, (13.718, 12.684, -27.375)), (' A 510  GLN  HG2', ' A 569  PRO  HG2', -0.45, (-20.356, 13.728, 15.468)), (' B 274  LYS  HB3', ' B 275  PRO  HD2', -0.447, (31.431, -21.975, -21.893)), (' B 275  PRO  HG3', ' B 413  ARG  HG2', -0.446, (31.909, -25.12, -25.552)), (' B 501  TYR  CD1', ' B 711  D0W H252', -0.442, (3.125, -15.776, -17.046)), (' B 274  LYS  HB3', ' B 275  PRO  CD ', -0.441, (31.563, -22.109, -22.429)), (' B  20 APHE  CZ ', ' B  68  TRP  HE3', -0.44, (-27.508, -26.476, -14.883)), (' A 717  ACT  H1 ', ' A 846  HOH  O  ', -0.434, (-0.102, -5.234, 11.369)), (' B 192 BTHR HG22', ' B 866  HOH  O  ', -0.432, (-14.049, -5.235, -1.458)), (' B 358  THR HG23', ' B 711  D0W H182', -0.432, (5.154, -17.304, -25.194)), (' B  14 BGLU  HG2', ' B  83 BPHE  CD1', -0.429, (-26.282, -31.905, -1.241)), (' B  86 BPRO  O  ', ' B  90 BARG  CD ', -0.428, (-15.896, -29.903, -4.689)), (' A 267  MET  HE1', ' A 885  HOH  O  ', -0.427, (3.787, 30.447, 2.731)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.426, (13.695, 6.744, -21.124)), (' B 270  PRO  HD3', ' B 426  LEU  CD2', -0.42, (26.737, -13.655, -15.979)), (' A 187  LYS  HA ', ' A 191  PHE  O  ', -0.42, (3.066, -10.71, 18.882)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.42, (15.155, 21.624, -0.184)), (' A 259  GLN  O  ', ' A 435  PHE  HA ', -0.414, (-2.87, 18.542, 9.743)), (' B  76 ATYR  O  ', ' B  77 AGLU  C  ', -0.411, (-28.004, -23.481, -1.853)), (' B 151  ARG  NH2', ' B 818  HOH  O  ', -0.411, (20.636, -5.808, -25.437)), (' B 501  TYR  CG ', ' B 711  D0W H252', -0.406, (3.453, -15.078, -16.706)), (' B 580  TRP  O  ', ' B 584  GLN  HG2', -0.405, (30.202, -13.517, -7.778)), (' A 141  PRO  HB3', ' A 350  ARG  HD3', -0.404, (9.449, 29.6, 20.708)), (' B 292  HIS  NE2', ' B 721  PE8  H31', -0.402, (12.278, -26.976, -41.763)), (' B 233  LEU HD23', ' B 267  MET  HE1', -0.4, (23.328, -2.81, -20.346)), (' A 169  ILE  HB ', ' A 170  PRO  HD3', -0.4, (20.779, 12.476, 10.61))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
