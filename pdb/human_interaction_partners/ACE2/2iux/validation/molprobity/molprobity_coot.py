# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 164 ', 'ASP', 0.032546875973903204, (39.84900000000001, 16.498, 44.084)), ('A', ' 413 ', 'ILE', 0.07265480065088008, (50.902, 43.379, 44.075)), ('A', ' 585 ', 'PRO', 0.021813106668592402, (47.307000000000016, 58.412, 36.847)), ('A', ' 616 ', 'TRP', 0.031564698118624925, (29.850000000000012, 33.700999999999986, 18.544))]
data['omega'] = [('A', ' 154 ', 'PRO', None, (29.083000000000006, 6.909, 42.199)), ('A', ' 155 ', 'ASN', None, (31.61600000000001, 5.424, 42.846)), ('A', ' 163 ', 'PRO', None, (41.57800000000001, 19.04, 46.836)), ('A', ' 197 ', 'TYR', None, (20.035, 32.972, 49.168)), ('A', ' 585 ', 'PRO', None, (48.361, 58.277999999999984, 35.836000000000006))]
data['rota'] = [('A', '  52 ', 'ASP', 0.061772327389849634, (41.762, 54.155, 65.968)), ('A', '  98 ', 'GLN', 0.014473619812837245, (29.51299999999999, 59.51200000000001, 66.721)), ('A', ' 106 ', 'GLN', 0.032660364256249644, (33.79899999999999, 71.553, 56.864)), ('A', ' 112 ', 'ILE', 0.24484784662454334, (41.067, 63.51499999999999, 59.414)), ('A', ' 117 ', 'LYS', 0.010149078196478116, (33.643999999999984, 60.046, 56.395)), ('A', ' 137 ', 'LYS', 0.002440320490792198, (23.923000000000005, 33.835, 60.153)), ('A', ' 144 ', 'THR', 0.01495926990173757, (29.988999999999997, 26.891, 55.484)), ('A', ' 153 ', 'HIS', 0.1832505139053938, (30.141000000000012, 8.916, 43.058)), ('A', ' 162 ', 'GLU', 0.1956309828840438, (40.30700000000001, 21.092, 46.534)), ('A', ' 188 ', 'LYS', 6.743697572220545e-08, (26.0, 20.244, 45.393)), ('A', ' 231 ', 'GLN', 0.003963039467626665, (32.40199999999999, 53.23299999999998, 31.788)), ('A', ' 240 ', 'LEU', 0.08857415471494234, (41.031000000000006, 43.57900000000002, 25.259)), ('A', ' 295 ', 'SER', 0.12395296676637978, (57.85900000000001, 20.51, 18.548)), ('A', ' 299 ', 'MET', 0.20315179891302604, (58.809000000000005, 20.358, 31.163)), ('A', ' 303 ', 'GLU', 0.0411739117290308, (56.706, 16.715, 38.282)), ('A', ' 308 ', 'GLN', 0.0, (62.91700000000001, 18.172, 43.847)), ('A', ' 313 ', 'ARG', 0.04124873527206002, (56.347, 25.908999999999992, 52.846)), ('A', ' 349 ', 'GLU', 0.14008084495042447, (37.072, 20.942000000000004, 58.288)), ('A', ' 375 ', 'LEU', 0.0038485468021580956, (53.01700000000001, 25.983000000000008, 39.366)), ('A', ' 394 ', 'TYR', 0.05386482992927508, (50.875, 50.441999999999986, 55.626)), ('A', ' 410 ', 'HIS', 0.011690787379428143, (45.672, 44.956999999999994, 46.842)), ('A', ' 450 ', 'MET', 0.0, (50.296, 33.177, 29.949)), ('A', ' 475 ', 'SER', 0.10977772657740975, (16.998000000000008, 44.167, 37.369)), ('A', ' 479 ', 'GLU', 0.1208686849190374, (13.34, 34.198, 39.011)), ('A', ' 539 ', 'GLN', 0.21268559046125593, (61.427, 50.310999999999986, 32.861)), ('A', ' 613 ', 'LYS', 0.0, (35.114, 33.04, 12.361))]
data['cbeta'] = []
data['probe'] = [(' A 584  GLN  HB2', ' A 585  PRO  CD ', -1.112, (48.867, 59.776, 33.853)), (' A 584  GLN  HB2', ' A 585  PRO  HD2', -1.076, (49.274, 58.914, 33.156)), (' A 334  GLU  HG2', ' A 338  LYS  HE2', -0.779, (52.351, 35.292, 65.141)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.755, (28.936, 54.058, 61.918)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.753, (30.782, 42.27, 34.347)), (' A 150  THR  O  ', ' A 188  LYS  HG3', -0.752, (28.726, 17.342, 46.547)), (' A  96  GLY  HA3', ' A 122  LEU HD21', -0.726, (28.277, 54.475, 62.234)), (' A 304  ALA  O  ', ' A 308  GLN  HG2', -0.709, (62.03, 19.207, 40.849)), (' A 153  HIS  HB3', ' A 155  ASN  H  ', -0.675, (31.383, 7.02, 42.743)), (' A 138  ILE  O  ', ' A 142  MET  HG3', -0.666, (24.776, 32.944, 53.509)), (' A 584  GLN  CB ', ' A 585  PRO  CD ', -0.657, (49.839, 59.213, 34.049)), (' A  82  LEU  HA ', ' A  85  ASN HD22', -0.653, (28.993, 35.595, 64.067)), (' A 155  ASN  OD1', ' A 157  SER  HB2', -0.652, (35.014, 8.129, 44.072)), (' A 104  VAL HG11', ' A 117  LYS  HG3', -0.646, (33.474, 62.916, 54.573)), (' A 334  GLU  CG ', ' A 338  LYS  HE2', -0.646, (52.152, 35.672, 65.391)), (' A 169  MET  O  ', ' A 276  GLY  HA2', -0.644, (40.245, 21.183, 32.773)), (' A 450  MET  HA ', ' A 450  MET  HE3', -0.638, (50.631, 33.33, 31.285)), (' A 179  LEU HD11', ' A 499  VAL HG23', -0.633, (26.931, 18.251, 31.391)), (' A 152  CYS  HA ', ' A 158  CYS  HA ', -0.623, (31.609, 11.643, 45.901)), (' A 597  LYS  HB3', ' A 598  PRO  HD3', -0.611, (53.216, 42.245, 21.422)), (' A 353  HIS  ND1', ' A 512  PHE  CD2', -0.609, (37.466, 32.076, 47.073)), (' A  54  THR  OG1', ' A  91  HIS  HE1', -0.606, (37.221, 52.182, 68.757)), (' A 124  ARG  NH1', ' A 136  ASN  OD1', -0.603, (28.222, 39.871, 59.173)), (' A 104  VAL HG13', ' A 113  LYS  HG3', -0.6, (35.682, 65.223, 55.688)), (' A 105  ASN  HA ', ' A 113  LYS  NZ ', -0.584, (34.563, 68.259, 52.934)), (' A 197  TYR  N  ', ' A 198  PRO  CD ', -0.581, (18.901, 33.142, 48.125)), (' A 359  PHE  HB2', ' A 364  ASP  HB3', -0.577, (48.002, 39.744, 63.783)), (' A 296  ALA  HB1', ' A 442  HIS  CE1', -0.57, (60.455, 24.628, 22.542)), (' A 562  LEU  HB3', ' A 566  MET  HE2', -0.568, (54.937, 46.87, 46.339)), (' A 390  TYR  HB3', ' A 410  HIS  HE1', -0.567, (48.087, 44.737, 51.308)), (' A 467  TRP  O  ', ' A 471  VAL HG23', -0.562, (23.23, 39.745, 39.368)), (' A 106  GLN  CG ', ' A 106  GLN  O  ', -0.558, (33.699, 72.064, 58.734)), (' A 390  TYR  HB3', ' A 410  HIS  CE1', -0.555, (47.691, 44.653, 50.752)), (' A 589  ALA  O  ', ' A 593  LEU  HG ', -0.55, (45.932, 46.892, 26.357)), (' A 153  HIS  HB3', ' A 155  ASN  N  ', -0.543, (32.053, 6.457, 42.851)), (' A  85  ASN  O  ', ' A  88  ILE HG22', -0.536, (30.799, 42.328, 65.088)), (' A 494  GLY  HA2', ' A 616  TRP  CE2', -0.531, (30.708, 33.775, 23.185)), (' A 463  LEU HD11', ' A 489  ARG  HA ', -0.527, (29.463, 35.025, 31.701)), (' A 209  ARG  HA ', ' A 213  TYR  O  ', -0.526, (20.912, 52.839, 49.857)), (' A 486  TRP  CE3', ' A 497  PRO  HD3', -0.524, (25.885, 28.87, 29.881)), (' A 104  VAL  CG1', ' A 113  LYS  HG3', -0.523, (35.577, 65.242, 55.314)), (' A 394  TYR  C  ', ' A 394  TYR  CD1', -0.517, (49.401, 49.824, 56.496)), (' A 394  TYR  C  ', ' A 394  TYR  HD1', -0.516, (49.725, 49.35, 56.544)), (' A 324  THR HG21', ' A 330  PRO  HB3', -0.515, (62.44, 39.035, 53.506)), (' A 579  GLN  HA ', ' A 584  GLN  O  ', -0.514, (50.656, 57.724, 37.921)), (' A 273  HIS  CE1', ' A 498  PRO  HB3', -0.513, (30.417, 20.673, 28.196)), (' A 115  ILE  O  ', ' A 119  VAL HG23', -0.513, (36.322, 56.851, 59.517)), (' A 609  LEU  C  ', ' A 609  LEU HD12', -0.512, (44.974, 28.369, 8.129)), (' A 488  LEU HD22', ' A 492  TYR  HE1', -0.51, (27.554, 40.806, 30.824)), (' A 197  TYR  O  ', ' A 200  TYR  HB3', -0.508, (21.001, 36.28, 49.114)), (' A 490  LEU  O  ', ' A 616  TRP  NE1', -0.507, (29.199, 35.004, 23.987)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.504, (30.449, 31.734, 45.246)), (' A 300  ASP  CG ', ' A 303  GLU  HB2', -0.501, (56.301, 16.633, 35.602)), (' A 300  ASP  OD1', ' A 303  GLU  N  ', -0.501, (55.451, 17.406, 37.055)), (' A 534  HIS  O  ', ' A 538  CYS  SG ', -0.5, (57.629, 45.528, 34.001)), (' A 522  ARG  HB3', ' A1623   CL CL  ', -0.496, (37.709, 45.22, 43.794)), (' A  65  ALA  HB2', ' A  84  LYS  HG3', -0.496, (35.419, 35.943, 68.098)), (' A 228  SER  HA ', ' A 231  GLN HE21', -0.495, (31.812, 57.288, 34.39)), (' A 278  MET  HB3', ' A 279  TRP  CE3', -0.494, (36.455, 25.997, 39.091)), (' A 103  ASP  O  ', ' A 107  LEU HD13', -0.49, (33.339, 68.495, 58.894)), (' A 455  ILE HD11', ' A 596  PHE  CD1', -0.488, (47.268, 39.592, 26.927)), (' A 584  GLN  CB ', ' A 585  PRO  HD3', -0.483, (49.613, 59.703, 34.524)), (' A 159  LEU  N  ', ' A 159  LEU HD12', -0.477, (34.312, 12.613, 45.669)), (' A 616  TRP  CE3', ' A 616  TRP  N  ', -0.476, (31.91, 34.294, 19.902)), (' A 106  GLN  HG2', ' A 106  GLN  O  ', -0.474, (33.753, 72.169, 59.251)), (' A 273  HIS  ND1', ' A 498  PRO  HB3', -0.471, (30.605, 20.915, 28.69)), (' A 304  ALA  O  ', ' A 308  GLN  CG ', -0.465, (61.886, 19.687, 41.125)), (' A 317  LYS  HD3', ' A 336  TRP  CZ2', -0.464, (59.671, 31.452, 54.209)), (' A 616  TRP  HB2', ' A 617  PRO  CD ', -0.462, (28.5, 32.53, 19.028)), (' A 229  LEU  O  ', ' A 233  LEU  HG ', -0.461, (34.654, 51.08, 35.23)), (' A 197  TYR  N  ', ' A 198  PRO  HD2', -0.46, (18.616, 32.991, 48.546)), (' A 238  GLN  O  ', ' A 241  GLN  HB2', -0.458, (37.699, 44.564, 22.596)), (' A 514  ILE  HB ', ' A 515  PRO  CD ', -0.456, (29.022, 32.152, 45.666)), (' A 151  VAL HG22', ' A 188  LYS  HG2', -0.456, (28.525, 17.609, 44.602)), (' A 325  SER  O  ', ' A 554  GLN  HA ', -0.454, (66.001, 42.174, 44.432)), (' A 299  MET  HB3', ' A 433  LEU HD23', -0.448, (59.785, 22.675, 32.356)), (' A 574  TRP  N  ', ' A 575  PRO  CD ', -0.447, (43.245, 57.248, 43.222)), (' A 116  ILE  O  ', ' A 120  GLN  HG3', -0.445, (32.127, 59.319, 58.864)), (' A  52  ASP  OD1', ' A 398  PRO  HB3', -0.444, (43.52, 55.778, 62.356)), (' A 532  GLN  CD ', ' A 588  SER  H  ', -0.443, (46.165, 50.991, 32.954)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.442, (39.44, 37.996, 36.539)), (' A 574  TRP  CG ', ' A 575  PRO  HD3', -0.441, (42.522, 56.466, 42.424)), (' A 150  THR  O  ', ' A 188  LYS  CG ', -0.44, (28.193, 17.236, 46.27)), (' A 197  TYR  HB3', ' A 198  PRO  HD3', -0.439, (19.22, 33.472, 46.876)), (' A 162  GLU  HA ', ' A 163  PRO  HA ', -0.437, (41.606, 20.787, 44.986)), (' A 584  GLN  HA ', ' A 585  PRO  HD3', -0.435, (49.919, 60.124, 35.24)), (' A 485  TRP  CD2', ' A 508  PRO  HG3', -0.434, (25.858, 32.971, 37.997)), (' A 317  LYS  HD3', ' A 336  TRP  CH2', -0.433, (59.592, 31.178, 54.193)), (' A 501  ARG  HD2', ' A 501  ARG  N  ', -0.431, (21.976, 24.271, 32.29)), (' A 224  TYR  OH ', ' A 522  ARG  HA ', -0.431, (38.293, 45.985, 42.208)), (' A  82  LEU  O  ', ' A  85  ASN  HB2', -0.424, (28.451, 37.578, 65.872)), (' A 368  LYS  HB3', ' A 368  LYS  HE2', -0.423, (42.532, 31.299, 54.052)), (' A 324  THR  CG2', ' A 330  PRO  HB3', -0.423, (62.12, 39.478, 53.879)), (' A 250  TYR  CE2', ' A 448  MET  HE3', -0.422, (47.038, 28.683, 20.731)), (' A 104  VAL HG23', ' A 120  GLN HE22', -0.421, (30.963, 63.175, 58.304)), (' A 331  VAL HG12', ' A 388  ILE HG21', -0.418, (54.2, 38.062, 55.031)), (' A 144  THR HG22', ' A 145  THR  N  ', -0.418, (27.922, 25.816, 55.322)), (' A 486  TRP  HA ', ' A 489  ARG  HB2', -0.417, (26.056, 32.292, 31.239)), (' A  65  ALA  CB ', ' A  84  LYS  HG3', -0.414, (35.676, 35.868, 67.682)), (' A 278  MET  HB3', ' A 279  TRP  CZ3', -0.413, (36.706, 26.142, 39.855)), (' A 275  LEU  N  ', ' A 275  LEU HD22', -0.412, (36.65, 24.609, 28.938)), (' A 134  GLU  O  ', ' A 138  ILE HG13', -0.411, (20.918, 35.217, 57.707)), (' A 412  ALA  O  ', ' A 416  VAL HG23', -0.411, (50.849, 43.042, 40.92)), (' A 160  GLN  O  ', ' A 164  ASP  HB2', -0.41, (37.864, 17.081, 45.359)), (' A 128  PRO  O  ', ' A 129  ALA  C  ', -0.41, (19.231, 43.281, 64.075)), (' A 148  VAL HG12', ' A 349  GLU  CD ', -0.41, (33.255, 21.23, 55.888)), (' A 488  LEU HD22', ' A 492  TYR  CE1', -0.406, (27.653, 40.56, 30.813)), (' A 362  GLY  C  ', ' A 363  LYS  HG2', -0.406, (52.803, 44.098, 64.639)), (' A 179  LEU HD11', ' A 499  VAL  CG2', -0.405, (26.09, 18.216, 31.816)), (' A 137  LYS  HE3', ' A 141  ASP  OD2', -0.404, (21.954, 29.742, 59.685)), (' A 351  VAL  O  ', ' A 368  LYS  HE3', -0.403, (40.551, 28.652, 53.781)), (' A 135  TYR  HB2', ' A 203  LEU HD13', -0.403, (21.058, 40.033, 57.29)), (' A 493  GLN  HB3', ' A 495  LEU  HG ', -0.402, (33.309, 32.131, 28.392)), (' A 531  PHE  CE1', ' A 592  MET  HE3', -0.402, (47.1, 40.681, 31.687)), (' A 499  VAL  O  ', ' A 501  ARG  HD2', -0.4, (23.021, 23.582, 32.221)), (' A 310  TRP  CH2', ' A 318  GLU  HG3', -0.4, (61.044, 28.159, 44.618))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
