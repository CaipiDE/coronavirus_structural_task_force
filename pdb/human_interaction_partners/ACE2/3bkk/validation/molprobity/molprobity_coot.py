# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 105 ', 'ASN', 0.02645510673120153, (52.29399999999998, 12.789999999999996, 55.25)), ('A', ' 106 ', 'GLN', 0.041674867381793546, (51.03399999999997, 10.149, 57.672))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (46.24799999999998, 62.674, 45.962))]
data['rota'] = [('A', ' 123 ', 'GLU', 0.21902581545876926, (57.52599999999999, 33.01, 57.198)), ('A', ' 307 ', 'LYS', 0.0009641283336319225, (27.689999999999994, 67.22599999999997, 39.31)), ('A', ' 317 ', 'LYS', 0.2366430377595694, (27.442999999999994, 51.828999999999986, 48.317)), ('A', ' 345 ', 'THR', 0.19215857529788508, (41.504999999999974, 66.078, 56.323)), ('A', ' 377 ', 'ASP', 0.18370621932659056, (38.572999999999986, 55.00499999999999, 41.262)), ('A', ' 390 ', 'TYR', 0.291195642365818, (35.776, 37.05899999999998, 49.665)), ('A', ' 394 ', 'TYR', 0.22147818764812924, (35.00099999999998, 32.183, 53.685)), ('A', ' 431 ', 'ASN', 0.29012950151041567, (22.996999999999993, 58.321999999999996, 34.69199999999999)), ('A', ' 463 ', 'LEU', 0.14483832173430447, (57.296, 42.179, 34.484)), ('A', ' 499 ', 'VAL', 0.15838496082295186, (65.51599999999998, 60.87399999999999, 30.967)), ('A', ' 604 ', 'ARG', 0.18586229209796087, (45.204999999999984, 45.06699999999999, 12.741)), ('A', ' 613 ', 'LYS', 0.0, (55.878, 48.09399999999999, 12.322))]
data['cbeta'] = []
data['probe'] = [(' A 613  LYS  HD3', ' A 617  PRO  HG2', -1.106, (60.835, 47.226, 12.827)), (' A 348  ARG  HD3', ' A 691  NAG  H82', -1.065, (43.548, 59.758, 62.437)), (' A 243  LEU  HG ', ' A 455  ILE HD13', -0.975, (44.937, 43.894, 23.437)), (' A 313 AARG  HG2', ' A1046  HOH  O  ', -0.961, (31.417, 59.414, 50.987)), (' A  86  MET  O  ', ' A  90  GLN  HG3', -0.843, (56.512, 37.403, 68.957)), (' A 104  VAL HG13', ' A 113  LYS  HG3', -0.825, (49.811, 17.284, 55.925)), (' A  82  LEU  HA ', ' A  85  ASN HD22', -0.813, (56.353, 45.932, 63.805)), (' A 161  LEU  O  ', ' A 166  THR HG23', -0.776, (48.809, 60.89, 42.782)), (' A 613  LYS  HD3', ' A 617  PRO  CG ', -0.752, (60.826, 46.86, 14.019)), (' A 539  GLN HE22', ' A 561  ARG HH22', -0.741, (27.852, 27.856, 32.947)), (' A 348  ARG  CD ', ' A 691  NAG  H82', -0.739, (43.221, 60.405, 62.232)), (' A 297  PRO  HG2', ' A 442  HIS  CD2', -0.682, (28.878, 56.438, 21.53)), (' A  52  ASP  OD1', ' A 399  VAL HG22', -0.661, (41.634, 29.952, 62.162)), (' A 463  LEU  C  ', ' A 463  LEU HD23', -0.661, (58.357, 43.753, 35.5)), (' A 407  PRO  HD3', ' A1066  HOH  O  ', -0.646, (46.203, 32.15, 47.195)), (' A 243  LEU  HG ', ' A 455  ILE  CD1', -0.64, (43.756, 43.511, 23.421)), (' A 297  PRO  HG2', ' A 442  HIS  HD2', -0.625, (29.052, 56.612, 21.793)), (' A 613  LYS  HG3', ' A 613  LYS  O  ', -0.62, (57.415, 48.168, 13.814)), (' A  45  SER  O  ', ' A  49  GLU  HG3', -0.612, (41.315, 20.591, 65.966)), (' A 104  VAL  CG1', ' A 113  LYS  HG3', -0.612, (50.096, 16.324, 55.379)), (' A 179  LEU HD11', ' A 499  VAL HG13', -0.591, (62.781, 62.437, 31.972)), (' A  45  SER  HA ', ' A 112  ILE HD13', -0.581, (42.738, 18.149, 63.503)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.569, (55.714, 27.426, 62.882)), (' A 116  ILE  O  ', ' A 120  GLN  HG3', -0.564, (52.31, 22.113, 59.008)), (' A  96  GLY  HA3', ' A 122  LEU HD21', -0.561, (56.387, 27.217, 62.849)), (' A 183 AGLU  OE1', ' A 499  VAL  CG2', -0.546, (64.602, 61.685, 34.269)), (' A 354  ALA  O  ', ' A 704  KAF  HAW', -0.543, (45.001, 48.542, 47.65)), (' A 282  THR  HB ', ' A 453  ASP  OD1', -0.542, (44.297, 51.488, 32.437)), (' A 318  GLU  OE1', ' A 382  HIS  HE1', -0.542, (30.381, 50.446, 41.134)), (' A 553  TYR  CD2', ' A 554  GLN  HG3', -0.541, (20.704, 44.961, 37.945)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.535, (48.722, 43.368, 35.883)), (' A 275  LEU  N  ', ' A 275  LEU HD22', -0.531, (52.82, 57.006, 28.362)), (' A 179  LEU HD11', ' A 499  VAL  CG1', -0.531, (62.525, 63.205, 31.974)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.526, (56.989, 49.67, 45.339)), (' A 430  LEU  O  ', ' A 431  ASN  HB2', -0.522, (22.724, 58.046, 36.612)), (' A 562  LEU  HB3', ' A 566  MET  HE2', -0.517, (31.928, 34.898, 43.611)), (' A 403  GLU  HB2', ' A 570  PHE  HB2', -0.513, (43.47, 30.867, 51.26)), (' A 233  LEU HD13', ' A 521  ILE HD11', -0.511, (52.882, 35.522, 36.311)), (' A 488  LEU HD22', ' A 492  TYR  HE1', -0.502, (60.991, 40.523, 31.693)), (' A 531  PHE  CE1', ' A 592  MET  HE3', -0.502, (41.606, 41.076, 30.198)), (' A 411  GLU  HB2', ' A 526  SER  HB2', -0.502, (43.638, 39.215, 40.965)), (' A 478  LYS  NZ ', ' A 479  GLU  OE2', -0.498, (76.598, 46.411, 45.61)), (' A 537  LEU HD21', ' A 562  LEU  HG ', -0.497, (30.817, 35.229, 39.232)), (' A 478  LYS  HA ', ' A 481  TYR  CE2', -0.494, (70.249, 45.694, 43.659)), (' A 288  ASP  OD1', ' A1184  HOH  O  ', -0.49, (41.828, 60.86, 27.55)), (' A 182  TRP  CH2', ' A 498  PRO  HD2', -0.486, (61.519, 57.729, 32.491)), (' A 104  VAL HG12', ' A 113  LYS  HE3', -0.484, (50.784, 15.931, 54.759)), (' A 398  PRO  HG3', ' A 902  NAG  O6 ', -0.469, (37.984, 25.527, 60.684)), (' A 313 AARG  CG ', ' A1046  HOH  O  ', -0.469, (31.155, 59.835, 51.677)), (' A 304  ALA  O  ', ' A 308  GLN  HG3', -0.466, (26.752, 63.674, 37.508)), (' A 159  LEU  N  ', ' A 159  LEU HD12', -0.465, (53.348, 69.144, 44.999)), (' A 317  LYS  HE3', ' A 317  LYS  O  ', -0.464, (25.521, 50.058, 47.456)), (' A 220  TRP  HA ', ' A 223  MET  HE2', -0.464, (54.22, 33.945, 47.769)), (' A 586 BGLN  NE2', ' A1125  HOH  O  ', -0.462, (44.476, 22.98, 35.237)), (' A  79  LYS  O  ', ' A  83 AGLN  HG3', -0.461, (56.268, 48.434, 69.275)), (' A 613  LYS  CG ', ' A 613  LYS  O  ', -0.457, (57.269, 48.426, 13.634)), (' A  48  VAL  CG1', ' A1207  HOH  O  ', -0.454, (42.606, 24.496, 62.55)), (' A 448  MET  HE2', ' A 599  LEU HD11', -0.454, (41.002, 49.576, 19.6)), (' A 161  LEU  HA ', ' A 165  LEU  HB2', -0.45, (51.654, 61.638, 43.024)), (' A 448  MET  HE1', ' A 603  LEU HD21', -0.45, (43.097, 50.119, 19.302)), (' A  48  VAL HG21', ' A 112  ILE HG23', -0.449, (44.709, 19.6, 61.542)), (' A 224  TYR  O  ', ' A 225  GLU  C  ', -0.449, (50.167, 25.499, 42.744)), (' A 183 AGLU  OE1', ' A 499  VAL HG22', -0.447, (64.373, 61.046, 34.692)), (' A 104  VAL HG11', ' A 117  LYS  HG3', -0.447, (51.74, 18.291, 55.211)), (' A 183 AGLU  OE1', ' A 499  VAL HG21', -0.445, (64.97, 61.91, 34.55)), (' A 523  TYR  CD2', ' A 704  KAF  HBA', -0.445, (46.739, 44.385, 40.862)), (' A 597  LYS  HB3', ' A 598  PRO  HD3', -0.444, (36.367, 39.612, 19.282)), (' A 620  ASN  HA ', ' A 620  ASN HD22', -0.442, (68.014, 50.548, 23.455)), (' A 223  MET  HE1', ' A 519  PRO  HG2', -0.441, (52.93, 36.486, 47.496)), (' A 478  LYS  HA ', ' A 481  TYR  CD2', -0.441, (70.402, 45.616, 43.191)), (' A 187  ASP  O  ', ' A 191  ARG  HB2', -0.44, (64.931, 59.646, 45.11)), (' A 522  ARG  HB3', ' A 703   CL CL  ', -0.437, (49.894, 36.99, 43.787)), (' A 197  TYR  HB3', ' A 198  PRO  HD3', -0.435, (68.1, 47.645, 47.822)), (' A 278  MET  HB3', ' A 279  TRP  CE3', -0.434, (52.013, 54.827, 38.859)), (' A 243  LEU HD13', ' A 600  LEU  HB2', -0.431, (43.038, 41.668, 19.434)), (' A 104  VAL HG11', ' A 117  LYS  HE2', -0.43, (50.7, 18.041, 54.419)), (' A 239  GLU  OE2', ' A1069  HOH  O  ', -0.428, (45.799, 30.384, 26.173)), (' A 162  GLU  O  ', ' A 343  LYS  NZ ', -0.428, (47.468, 62.602, 49.004)), (' A 463  LEU  HG ', ' A 488  LEU  HB3', -0.424, (60.444, 43.701, 33.108)), (' A 485  TRP  CD2', ' A 508  PRO  HG3', -0.417, (62.326, 48.446, 38.731)), (' A 162  GLU  HA ', ' A 163  PRO  HA ', -0.417, (46.73, 60.789, 44.288)), (' A 486  TRP  CE3', ' A 497  PRO  HD3', -0.416, (63.275, 52.766, 30.833)), (' A 490  LEU HD21', ' A 619  TYR  HB2', -0.415, (65.193, 47.856, 23.447)), (' A 463  LEU  C  ', ' A 463  LEU  CD2', -0.411, (58.118, 43.834, 35.504)), (' A 421  VAL  HA ', ' A 426  HIS  CD2', -0.41, (27.924, 49.116, 35.778)), (' A 543  HIS  CD2', ' A 550  CYS  HB2', -0.402, (27.512, 39.014, 27.809))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
