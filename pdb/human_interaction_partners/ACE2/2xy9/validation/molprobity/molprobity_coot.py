# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  72 ', 'ASN', 0.026596484718924535, (12.873000000000003, -14.637000000000004, -5.645)), ('A', ' 156 ', 'GLY', 0.04434466124123921, (2.853, -33.06899999999999, -18.879))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (14.102000000000004, -20.25, -21.412))]
data['rota'] = [('A', ' 122 ', 'LEU', 0.07970661236484508, (3.571000000000001, 12.295000000000002, -7.697000000000002)), ('A', ' 152 ', 'CYS', 0.16043936324168898, (2.373, -27.445, -21.645)), ('A', ' 240 ', 'LEU', 0.09982896738040221, (11.714000000000008, 4.145, -43.056)), ('A', ' 243 ', 'LEU', 0.02152654930418798, (13.229, 0.185, -46.435)), ('A', ' 291 ', 'VAL', 0.14002956157709823, (20.259, -15.103999999999997, -46.872000000000014)), ('A', ' 337 ', 'ASN', 0.08451383918151399, (28.988, -10.377, -6.568)), ('A', ' 342 ', 'GLU', 0.031738292549640244, (21.552000000000007, -16.524, -15.241)), ('A', ' 394 ', 'TYR', 0.11830164003920773, (25.621000000000002, 10.216, -13.8))]
data['cbeta'] = []
data['probe'] = [(' A 152  CYS  SG ', ' A 158  CYS  SG ', -1.306, (2.968, -27.394, -19.374)), (' A 176  GLU  HG2', ' A2143  HOH  O  ', -0.751, (3.759, -28.495, -39.689)), (' A 123  GLU  HA ', ' A1625  ACT  H3 ', -0.703, (2.179, 10.114, -12.331)), (' A  96  GLY  HA3', ' A 122  LEU HD22', -0.644, (4.42, 14.774, -5.222)), (' A 153  HIS  CE1', ' A 180  TRP  CZ2', -0.639, (3.269, -27.644, -27.04)), (' A 223  MET  HA ', ' A 223  MET  HE2', -0.634, (7.891, 13.854, -19.427)), (' A  90  ASN  ND2', ' A2049  HOH  O  ', -0.622, (3.639, 10.902, 3.209)), (' A 299  MET  HE1', ' A 434  SER  N  ', -0.621, (34.551, -18.671, -39.038)), (' A 240  LEU HD22', ' A 458  ILE HG13', -0.583, (13.358, 1.547, -39.054)), (' A 153  HIS  HB3', ' A 154  PRO  HD2', -0.581, (1.52, -32.031, -25.456)), (' A 240  LEU HD21', ' A 592  MET  SD ', -0.575, (15.64, 2.831, -40.151)), (' A 153  HIS  HB3', ' A 154  PRO  CD ', -0.565, (1.412, -31.794, -25.313)), (' A 313  ARG  O  ', ' A 317  LYS  HG2', -0.545, (31.991, -12.302, -17.913)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.537, (10.788, -1.078, -31.633)), (' A 153  HIS  CE1', ' A 180  TRP  CE2', -0.534, (2.773, -27.974, -27.575)), (' A  56  GLN  HB3', ' A2013  HOH  O  ', -0.507, (21.465, 8.183, -0.153)), (' A 448  MET  HE1', ' A 603  LEU HD21', -0.499, (16.474, -7.641, -48.349)), (' A 152  CYS  CB ', ' A 158  CYS  SG ', -0.496, (2.968, -27.905, -19.396)), (' A 553  TYR  O  ', ' A 554  GLN  HB2', -0.495, (39.536, -0.191, -31.213)), (' A 455  ILE HD13', ' A 592  MET  HE2', -0.478, (16.423, 0.591, -39.721)), (' A 104  VAL HG13', ' A 113  LYS  HG2', -0.47, (11.332, 25.262, -13.345)), (' A 265  ASN  ND2', ' A 618  GLN  OE1', -0.459, (-3.637, -12.822, -51.21)), (' A 394  TYR  HB2', ' A 397  LEU HD12', -0.458, (23.211, 12.281, -13.94)), (' A 211  ASN  HB2', ' A1625  ACT  H2 ', -0.455, (0.363, 12.752, -12.833)), (' A 440  ASP  O  ', ' A 444  ILE HG12', -0.45, (26.488, -7.255, -50.887)), (' A 248  HIS  HE1', ' A 494  GLY  O  ', -0.447, (3.541, -8.161, -43.405)), (' A 209  ARG  HA ', ' A 213  TYR  O  ', -0.434, (-4.764, 14.344, -16.006)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.43, (3.018, -7.329, -21.452)), (' A 162  GLU  HA ', ' A 163  PRO  HA ', -0.428, (13.705, -18.202, -22.946)), (' A 383  HIS  HA ', ' A 414  GLY  HA3', -0.426, (23.072, -1.993, -24.82)), (' A 243  LEU HD13', ' A 600  LEU  HB2', -0.411, (16.588, 0.677, -47.936)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.405, (2.989, 3.47, -32.432)), (' A 485  TRP  CD2', ' A 508  PRO  HG3', -0.405, (-2.137, -5.93, -28.514)), (' A  83  GLN  HB3', ' A2042  HOH  O  ', -0.402, (6.668, -1.737, 4.423)), (' A 152  CYS  HA ', ' A 157  SER  O  ', -0.401, (3.816, -28.21, -21.641))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
