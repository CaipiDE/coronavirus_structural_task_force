# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 163 ', 'PRO', None, (42.878, 23.571, 113.935))]
data['rota'] = [('A', '  40 ', 'ASP', 0.10788684684416985, (49.552, -28.470000000000006, 132.677)), ('A', '  86 ', 'MET', 0.0, (56.75999999999998, 1.504, 134.826)), ('A', '  98 ', 'GLN', 0.009290312779542337, (55.126, -16.77, 133.885)), ('A', ' 104 ', 'VAL', 0.006301065150182694, (52.104000000000006, -23.595, 124.289)), ('A', ' 110 ', 'THR', 0.29629113857059125, (42.317, -23.424999999999994, 121.975)), ('A', ' 155 ', 'GLN', 0.10373441480941406, (55.753, 39.235, 113.76499999999997)), ('A', ' 240 ', 'LEU', 0.0341831286398424, (43.583, -0.89, 92.342)), ('A', ' 243 ', 'LEU', 0.1943428230443975, (41.53, 2.988000000000001, 89.086)), ('A', ' 303 ', 'GLU', 0.0, (27.861999999999995, 25.903999999999996, 105.3)), ('A', ' 307 ', 'LYS', 0.03812284165594898, (23.737999999999992, 27.171999999999997, 109.11199999999997)), ('A', ' 308 ', 'GLN', 0.25324453316364476, (21.58, 24.398, 110.673)), ('A', ' 363 ', 'LYS', 0.18629279828253417, (31.739, 0.524, 131.111)), ('A', ' 394 ', 'TYR', 0.21547264360952298, (33.757, -7.570000000000001, 122.87)), ('A', ' 425 ', 'LYS', 0.0, (20.175, 10.242, 99.529)), ('A', ' 463 ', 'LEU', 0.0463006104007055, (53.376, 3.282, 101.388)), ('A', ' 537 ', 'LEU', 0.05443312280011852, (25.789, -5.769, 104.331)), ('A', ' 594 ', 'SER', 0.2940437989974338, (32.58400000000001, -2.9280000000000004, 91.656)), ('A', ' 609 ', 'LEU', 0.031911015402961526, (39.766000000000005, 11.698, 74.761)), ('A', ' 613 ', 'LYS', 0.22817037595958176, (49.669, 9.328999999999999, 79.439))]
data['cbeta'] = []
data['probe'] = [(' A 179  LEU HD11', ' A 499  VAL HG23', -0.81, (58.16, 24.226, 98.185)), (' A 284  SER  HB2', ' A 449  LYS  HE3', -0.808, (35.785, 14.608, 98.797)), (' A 105  ASN  HA ', ' A 113  LYS  NZ ', -0.787, (49.839, -26.403, 120.832)), (' A  52  ASP  OD1', ' A 399  VAL HG22', -0.775, (41.553, -9.657, 130.139)), (' A 105  ASN  HA ', ' A 113  LYS  HZ2', -0.745, (49.613, -26.167, 121.326)), (' A 463  LEU  C  ', ' A 463  LEU HD23', -0.724, (54.522, 4.31, 102.218)), (' A 477  THR  OG1', ' A 479  GLU  HG2', -0.704, (71.833, 5.462, 105.534)), (' A 179  LEU HD11', ' A 499  VAL  CG2', -0.673, (58.311, 24.743, 98.414)), (' A 613  LYS  NZ ', ' A 617  PRO  HG3', -0.662, (54.535, 8.411, 79.499)), (' A 609  LEU  C  ', ' A 609  LEU HD12', -0.661, (40.253, 13.84, 74.866)), (' A  76  GLU  HB2', ' A1134  HOH  O  ', -0.621, (52.37, 19.14, 136.134)), (' A  98  GLN  HG3', ' A 101  LYS  NZ ', -0.61, (54.918, -18.103, 136.177)), (' A 394  TYR  HB2', ' A 397  LEU HD12', -0.593, (36.29, -9.491, 122.238)), (' A 109  ASN  HA ', ' A1120  HOH  O  ', -0.567, (41.178, -26.374, 123.264)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.559, (55.709, -11.574, 129.797)), (' A 169  MET  O  ', ' A 276  GLY  HA2', -0.556, (44.261, 21.32, 99.98)), (' A 613  LYS  HZ3', ' A 617  PRO  HG3', -0.556, (55.04, 7.584, 79.968)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.55, (54.13, 10.993, 112.22)), (' A 304  ALA  O  ', ' A 308  GLN  HG3', -0.545, (23.036, 22.9, 107.931)), (' A  98  GLN  HA ', ' A 101  LYS  HE2', -0.539, (55.637, -18.122, 134.226)), (' A 105  ASN  HA ', ' A 113  LYS  HZ1', -0.536, (50.388, -25.737, 120.356)), (' A 537  LEU  HG ', ' A 558  ALA  HB1', -0.515, (25.313, -4.617, 107.22)), (' A 116  ILE  O  ', ' A 120  GLN  HG3', -0.512, (52.082, -16.775, 125.93)), (' A  75  THR  O  ', ' A  79  LYS  HG2', -0.512, (55.57, 15.638, 134.394)), (' A 300  ASP  CG ', ' A 303  GLU  HB2', -0.502, (28.429, 25.897, 102.703)), (' A 295  SER  O  ', ' A 297  PRO  HD3', -0.501, (24.849, 22.926, 88.411)), (' A  54  THR HG21', ' A1030  HOH  O  ', -0.496, (47.749, -9.689, 140.136)), (' A 562  LEU  HB3', ' A 566  MET  HE2', -0.491, (29.649, -4.488, 113.733)), (' A 235  ARG  O  ', ' A 239  GLU  HG2', -0.491, (46.071, -6.5, 93.22)), (' A 303  GLU  O  ', ' A 307  LYS  HB2', -0.489, (24.482, 26.53, 106.657)), (' A 428  HIS  HD2', ' A 433  LEU  O  ', -0.486, (18.692, 17.451, 99.919)), (' A 263  HIS  O  ', ' A 264  ILE HD13', -0.482, (52.605, 21.549, 88.447)), (' A  96  GLY  HA3', ' A 122  LEU HD21', -0.481, (56.281, -11.473, 129.714)), (' A 130  GLN  O  ', ' A 133  GLU  HG2', -0.472, (65.738, 3.575, 130.773)), (' A 463  LEU  C  ', ' A 463  LEU  CD2', -0.463, (54.092, 5.032, 102.355)), (' A 425  LYS  HG2', ' A1176  HOH  O  ', -0.452, (19.277, 7.477, 101.04)), (' A  98  GLN  HG3', ' A 101  LYS  HZ3', -0.45, (55.841, -17.632, 136.274)), (' A  98  GLN  HG3', ' A 101  LYS  HZ1', -0.45, (55.165, -18.442, 136.743)), (' A 488  LEU HD22', ' A 492  TYR  HE1', -0.449, (57.146, 2.074, 98.307)), (' A 323  PHE  CZ ', ' A 417  LEU HD22', -0.447, (28.757, 2.619, 112.922)), (' A 154  PRO  HB3', ' A 155  GLN  NE2', -0.446, (59.268, 37.827, 111.745)), (' A  49  GLU  O  ', ' A  53  ARG  HG2', -0.44, (42.128, -13.282, 136.776)), (' A 259  TYR  O  ', ' A 263  HIS  HD2', -0.437, (50.565, 27.453, 87.81)), (' A 154  PRO  CB ', ' A 155  GLN  NE2', -0.435, (58.964, 38.282, 111.834)), (' A 424  PRO  HA ', ' A 433  LEU HD12', -0.435, (23.891, 13.862, 99.064)), (' A 189  ALA  O  ', ' A 193  ILE HG12', -0.432, (58.823, 16.205, 114.235)), (' A 118  LYS  NZ ', ' A 403  GLU  OE2', -0.427, (46.492, -8.204, 122.291)), (' A 397  LEU  O  ', ' A 398  PRO  C  ', -0.425, (38.838, -10.312, 127.657)), (' A 182  TRP  CH2', ' A 498  PRO  HD2', -0.422, (56.707, 19.069, 99.092)), (' A 135  TYR  HB2', ' A 203  LEU HD13', -0.422, (63.796, 3.056, 124.436)), (' A 476  ILE HG12', ' A 484  GLU  HG3', -0.421, (65.355, 3.424, 102.365)), (' A 154  PRO  HB3', ' A 155  GLN HE22', -0.418, (59.464, 37.893, 111.651)), (' A   1  LSW HARA', ' A 380  VAL HG11', -0.417, (39.671, 12.217, 112.728)), (' A   1  LSW  CAK', ' A 380  VAL HG22', -0.417, (38.818, 10.775, 109.159)), (' A  47  PHE  CE1', ' A  98  GLN  HB3', -0.415, (51.927, -16.282, 134.181)), (' A  76  GLU  N  ', ' A1134  HOH  O  ', -0.414, (52.962, 18.99, 135.855)), (' A 609  LEU  C  ', ' A 609  LEU  CD1', -0.413, (39.386, 13.716, 75.181)), (' A 104  VAL HG12', ' A 113  LYS  HG3', -0.41, (49.173, -22.688, 123.279)), (' A 578  MET  HG3', ' A 584  GLN  O  ', -0.409, (35.372, -13.628, 104.354)), (' A 428  HIS  CD2', ' A 433  LEU  O  ', -0.408, (18.735, 17.21, 100.15)), (' A 162  GLU  O  ', ' A 343  LYS  NZ ', -0.407, (44.185, 23.013, 116.613)), (' A 335  PHE  HZ ', ' A 367  ILE HD12', -0.405, (32.405, 9.232, 121.021)), (' A 613  LYS  HZ2', ' A 617  PRO  HG3', -0.405, (54.965, 8.663, 79.404)), (' A 209  ARG  HA ', ' A 213  TYR  O  ', -0.403, (63.61, -10.087, 117.788)), (' A  71  THR  C  ', ' A 350  VAL HG12', -0.4, (43.964, 17.403, 126.57)), (' A 380  VAL  O  ', ' A 383  HIS  HB3', -0.4, (35.943, 8.722, 112.681))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
