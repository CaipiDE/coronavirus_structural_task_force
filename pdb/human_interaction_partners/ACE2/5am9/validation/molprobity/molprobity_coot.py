# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'ASN', 0.04373278741953254, (-17.44900000000001, 35.862, -8.973)), ('A', '  78 ', 'PRO', 0.05237225765510507, (10.124000000000002, 10.612000000000002, -33.90199999999999)), ('A', ' 324 ', 'ASP', 0.04517048559993796, (-20.820000000000004, 42.66399999999999, -1.5169999999999995)), ('C', '  45 ', 'ASN', 0.022095572315850378, (22.823999999999998, 66.03299999999997, 18.235)), ('D', '  45 ', 'ASN', 0.03079221383923703, (-22.864, 7.176999999999996, -39.571))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (-13.793, 33.316, 6.292)), ('A', ' 608 ', 'PRO', None, (-24.819000000000003, 16.393, 19.025)), ('B', ' 141 ', 'PRO', None, (-44.983, 75.323, -49.972)), ('B', ' 608 ', 'PRO', None, (-55.16999999999999, 58.258, -36.749)), ('C', ' 141 ', 'PRO', None, (7.775999999999997, 70.252, 18.299)), ('C', ' 325 ', 'GLY', None, (16.08, 62.92699999999999, 25.058)), ('C', ' 608 ', 'PRO', None, (0.04699999999999527, 89.28999999999998, 29.860999999999994)), ('D', ' 141 ', 'PRO', None, (-37.884000000000015, 11.543000000000001, -39.362999999999985)), ('D', ' 608 ', 'PRO', None, (-45.123, 29.806, -27.400999999999993))]
data['rota'] = [('A', '  79 ', 'ILE', 0.12699172176066953, (12.952, 13.192, -34.214)), ('A', '  96 ', 'ARG', 0.27873857547354414, (2.7840000000000007, 17.204, -28.229999999999993)), ('A', ' 368 ', 'TYR', 0.2484930427456975, (8.632, 33.978, -10.871999999999996)), ('A', ' 372 ', 'TYR', 0.05846571967304013, (10.345000000000004, 34.544, -16.866)), ('A', ' 388 ', 'HIS', 0.29787663559438843, (7.495000000000001, 27.507, -7.813999999999999)), ('B', ' 341 ', 'LYS', 0.2994253722661708, (-31.958, 84.806, -75.602)), ('B', ' 368 ', 'TYR', 0.2657385247183474, (-24.164, 76.21399999999998, -68.901)), ('B', ' 372 ', 'TYR', 0.08638582499021241, (-23.015, 76.956, -75.02799999999999)), ('B', ' 388 ', 'HIS', 0.23521816142790292, (-25.027999999999995, 69.77399999999999, -65.93)), ('B', ' 421 ', 'ASP', 0.23433920480524945, (-14.06199999999999, 71.384, -38.826)), ('B', ' 535 ', 'LYS', 0.17128951248564514, (-8.256999999999998, 81.121, -63.33899999999999)), ('B', ' 560 ', 'VAL', 0.27389193890484675, (-9.225, 67.27999999999999, -63.712999999999994)), ('B', ' 598 ', 'GLN', 0.25835448415394396, (-38.23600000000001, 43.582, -41.213)), ('B', ' 606 ', 'ASN', 0.2723334359743359, (-54.765000000000015, 57.95299999999998, -31.343)), ('C', ' 174 ', 'LEU', 0.12377408960930453, (26.211, 87.394, 15.849)), ('C', ' 187 ', 'LYS', 0.17376209180238403, (34.565, 90.54299999999999, -2.023999999999999)), ('C', ' 368 ', 'TYR', 0.2815347793785871, (17.672000000000008, 65.18, -7.575)), ('C', ' 372 ', 'TYR', 0.06520392480242033, (22.899, 63.489999999999995, -10.769)), ('C', ' 388 ', 'HIS', 0.08891971597361335, (15.865, 72.01099999999997, -6.490999999999998)), ('C', ' 560 ', 'VAL', 0.2711566774109228, (8.293000000000003, 73.34899999999999, -20.752)), ('D', '   2 ', 'ASP', 0.00740233173210622, (0.7460000000000022, 6.9289999999999985, -54.092999999999996)), ('D', ' 187 ', 'LYS', 0.0, (-11.386000000000001, 32.061, -59.675)), ('D', ' 372 ', 'TYR', 0.07495346163135858, (-23.155000000000005, 4.601000000000001, -68.45699999999997)), ('D', ' 377 ', 'VAL', 0.08470670232042714, (-15.065, 8.023999999999997, -65.768)), ('D', ' 388 ', 'HIS', 0.15028468676833887, (-30.080999999999992, 13.220999999999998, -64.177)), ('D', ' 414 ', 'VAL', 0.07223214302063659, (-61.545999999999985, 3.633, -61.900999999999996))]
data['cbeta'] = [('A', ' 354 ', 'ASP', ' ', 0.3108924871392345, (-0.2290000000000021, 31.693000000000005, 9.701999999999998)), ('B', ' 354 ', 'ASP', ' ', 0.2887614411757062, (-31.141, 73.527, -47.832999999999984))]
data['probe'] = [(' C 155 AMET  HA ', ' C 155 AMET  HE2', -1.011, (-2.551, 80.921, 24.915)), (' C 155 AMET  CA ', ' C 155 AMET  HE2', -0.738, (-2.725, 81.656, 24.265)), (' C 365  HIS  HD1', ' C 388  HIS  CD2', -0.706, (16.422, 70.122, -3.597)), (' C 206  THR HG23', ' C 210  ASP  OD2', -0.676, (15.604, 88.982, -16.752)), (' C 365  HIS  HD1', ' C 388  HIS  HD2', -0.662, (16.242, 69.737, -4.227)), (' B 501  TYR  CD1', ' B 912  VAL HG12', -0.66, (-29.905, 66.143, -58.449)), (' C 155 AMET  CE ', ' C 155 AMET  HA ', -0.65, (-1.644, 80.963, 25.088)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.646, (-16.598, 14.034, 15.396)), (' A 916  LYS  HE2', ' A2293  HOH  O  ', -0.643, (2.573, 25.63, 6.384)), (' A 206  THR HG23', ' A 210  ASP  OD2', -0.634, (15.11, 9.998, -7.633)), (' C 501  TYR  CD1', ' C 912  VAL HG12', -0.593, (10.379, 77.239, 0.031)), (' C 157  LEU HD11', ' C 477  VAL HG13', -0.589, (1.766, 90.546, 20.582)), (' D 157  LEU HD11', ' D 477  VAL HG13', -0.579, (-43.758, 31.291, -36.536)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.572, (-47.468, 56.647, -41.038)), (' C1201  PEG  H41', ' C2379  HOH  O  ', -0.559, (14.059, 103.427, 0.206)), (' B 206  THR HG23', ' B 210  ASP  OD2', -0.557, (-17.236, 51.994, -67.248)), (' A 539  LYS  HE3', ' A 559  MET  O  ', -0.543, (23.427, 29.309, -4.758)), (' B 270  PRO  HD3', ' B 426  LEU HD22', -0.529, (-22.889, 66.681, -36.25)), (' D 176  GLU  OE1', ' D2144  HOH  O  ', -0.526, (-18.962, 36.854, -43.638)), (' B 233  LEU HD23', ' B 267  MET  HE1', -0.522, (-33.568, 62.683, -34.758)), (' B  17  ALA  HB1', ' B  92  ILE HD11', -0.518, (-25.28, 65.084, -91.532)), (' C 155 AMET  HE1', ' C 615  THR HG23', -0.517, (-1.715, 79.281, 27.242)), (' C 270  PRO  HD3', ' C 426  LEU HD22', -0.514, (-11.959, 79.237, 1.288)), (' C 426  LEU  HG ', ' C 426  LEU  O  ', -0.513, (-8.201, 78.958, -0.268)), (' C 236  ARG  HD2', ' C 267  MET  HE3', -0.506, (-10.281, 82.425, 13.06)), (' D 331  HIS  CE1', ' D 915  GLN  HG3', -0.498, (-33.773, 15.85, -50.95)), (' A 233  LEU HD23', ' A 267  MET  HE1', -0.486, (-3.62, 20.991, 22.635)), (' D  13  ASP  HA ', ' D  79  ILE HD13', -0.48, (-1.545, 16.784, -79.545)), (' D 268  VAL HG12', ' D 426  LEU HD11', -0.479, (-56.362, 21.602, -54.717)), (' A 389  GLU  HB2', ' A 504  SER  HB2', -0.474, (6.887, 24.266, -3.595)), (' B 390  ALA  O  ', ' B 394  VAL HG23', -0.474, (-20.785, 71.096, -59.603)), (' C 155 AMET  CE ', ' C 614  VAL HG23', -0.472, (-3.377, 80.38, 26.228)), (' C  73  LYS  NZ ', ' C2086  HOH  O  ', -0.468, (40.311, 83.739, -5.279)), (' C 606  ASN  O  ', ' C 609  GLU  O  ', -0.464, (-3.791, 87.852, 31.336)), (' A  90  ARG  NH2', ' A2086  HOH  O  ', -0.459, (12.773, 22.346, -16.742)), (' C 324  ASP  N  ', ' C 325  GLY  HA2', -0.459, (15.073, 62.429, 22.994)), (' D 274  LYS  HB3', ' D 275  PRO  CD ', -0.45, (-63.465, 10.348, -58.459)), (' C 274  LYS  HB3', ' C 275  PRO  CD ', -0.449, (-17.364, 69.196, -0.877)), (' D 228  PHE  CZ ', ' D1201  P6G H142', -0.449, (-60.9, 24.891, -55.149)), (' D 110  GLN  OE1', ' D2077  HOH  O  ', -0.449, (-8.269, 27.983, -44.115)), (' D 324  ASP  OD1', ' D 326  ARG  HB2', -0.448, (-27.269, 4.128, -35.586)), (' B 292  HIS  CE1', ' B1203  P6G  H51', -0.447, (-33.305, 92.637, -49.118)), (' A 495  VAL  O  ', ' A 495  VAL HG12', -0.442, (-5.771, 19.619, -10.988)), (' B 232  ALA  CB ', ' B 268  VAL HG12', -0.439, (-28.761, 62.569, -34.24)), (' C 245  ARG  HG2', ' C 591  VAL HG11', -0.431, (-10.285, 99.155, 3.819)), (' C1201  PEG  C4 ', ' C2379  HOH  O  ', -0.428, (13.733, 103.358, 0.957)), (' D  31  VAL  O  ', ' D  34  GLN  HG3', -0.428, (-10.81, 7.923, -53.977)), (' B 274  LYS  HB3', ' B 275  PRO  HD2', -0.427, (-18.565, 76.906, -33.215)), (' A 259  GLN HE21', ' A 916  LYS  NZ ', -0.426, (-0.918, 24.446, 5.508)), (' D 268  VAL  CG1', ' D 426  LEU HD11', -0.421, (-56.146, 21.743, -54.711)), (' B 570  LEU  C  ', ' B 570  LEU HD23', -0.42, (-15.484, 61.995, -50.515)), (' B 539  LYS  HE3', ' B 559  MET  O  ', -0.419, (-9.055, 70.864, -64.533)), (' C 245  ARG  HG2', ' C 591  VAL  CG1', -0.418, (-10.533, 98.725, 3.8)), (' A 176  GLU  OE1', ' A2156  HOH  O  ', -0.417, (-18.05, 6.22, -10.004)), (' A 157  LEU HD13', ' A 476  PRO  HB2', -0.416, (-14.359, 15.231, 16.608)), (' C 236  ARG  CD ', ' C 267  MET  HE3', -0.414, (-10.682, 82.219, 13.687)), (' B 270  PRO  HD3', ' B 426  LEU  CD2', -0.411, (-22.748, 66.506, -36.75)), (' A  90  ARG  NE ', ' A 548  SER  O  ', -0.411, (12.775, 22.946, -19.415)), (' D   9 AGLN  NE2', ' D  75  LEU HD21', -0.409, (4.661, 15.483, -70.702)), (' C 372  TYR  OH ', ' C 388  HIS  HE1', -0.407, (20.978, 68.86, -5.918)), (' D  80  TRP  HB2', ' D  92  ILE HG21', -0.406, (-7.035, 18.587, -73.338))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
