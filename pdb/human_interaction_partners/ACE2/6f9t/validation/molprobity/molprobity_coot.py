# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  72 ', 'ASN', 0.030214255068043688, (-13.122, -17.797, 2.72))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (-13.055, -23.883, 19.95))]
data['rota'] = [('A', ' 104 ', 'VAL', 0.26934298979952925, (-4.092, 23.912999999999993, 9.524999999999999)), ('A', ' 282 ', 'THR', 0.17784464085509766, (-13.684, -12.368, 33.005)), ('A', ' 394 ', 'TYR', 0.18174402807785958, (-22.932, 8.221999999999998, 11.26)), ('A', ' 434 ', 'SER', 0.25886509610409125, (-37.579, -18.853999999999992, 35.932))]
data['cbeta'] = []
data['probe'] = [(' A 624  ASN  ND2', ' A 802  HOH  O  ', -0.7, (5.526, -28.568, 47.621)), (' A 239  GLU  OE2', ' A 801  HOH  O  ', -0.693, (-15.032, 7.781, 38.618)), (' A 712  D0Z  N11', ' A 805  HOH  O  ', -0.643, (-13.088, 2.194, 16.136)), (' A 617  PRO  HD2', ' A 997  HOH  O  ', -0.579, (-3.168, -10.212, 51.359)), (' A 496  CSO  OD ', ' A 623  PRO  HD3', -0.549, (1.267, -18.831, 42.21)), (' A 721  PEG  H32', ' A1198  HOH  O  ', -0.514, (1.844, 3.28, 13.483)), (' A 496  CSO  OD ', ' A 623  PRO  CD ', -0.501, (0.771, -19.108, 41.612)), (' A 282 BTHR HG23', ' A1152  HOH  O  ', -0.497, (-14.657, -15.229, 30.878)), (' A 593  LEU HD22', ' A1422  HOH  O  ', -0.49, (-17.292, 0.965, 44.463)), (' A 179  LEU HD11', ' A 499  VAL HG23', -0.487, (1.643, -24.489, 35.165)), (' A 712  D0Z  C38', ' A 712  D0Z H221', -0.478, (-15.684, -7.283, 19.936)), (' A 712  D0Z  C22', ' A 712  D0Z  C38', -0.457, (-15.346, -6.87, 19.846)), (' A 618  GLN  HG3', ' A 621  TRP  HB2', -0.455, (2.763, -14.561, 49.393)), (' A  86  MET  O  ', ' A  90  GLN  HG3', -0.453, (-0.687, 1.42, -2.632)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.448, (-2.411, -11.223, 21.406)), (' A 455  ILE HD13', ' A 592  MET  HE2', -0.447, (-17.226, -3.075, 37.284)), (' A 313  ARG  HG3', ' A1249  HOH  O  ', -0.445, (-29.191, -18.578, 11.763)), (' A 353  HIS  CG ', ' A 722  PEG  H22', -0.443, (-11.1, -13.321, 17.509)), (' A  85  ASN  O  ', ' A  88  ILE HG22', -0.437, (-3.819, -0.746, 1.153)), (' A 546  PRO  HG2', ' A 723  PEG  H42', -0.429, (-32.956, -2.823, 43.947)), (' A 411  GLU  HB2', ' A 526  SER  HB2', -0.419, (-16.06, 0.114, 24.445)), (' A 722  PEG  C4 ', ' A 836  HOH  O  ', -0.416, (-8.959, -14.621, 20.794)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.41, (-3.484, -0.468, 31.638)), (' A 507  ASP  N  ', ' A 508  PRO  CD ', -0.409, (3.74, -13.178, 27.192)), (' A 485  TRP  CD2', ' A 508  PRO  HG3', -0.409, (1.904, -9.66, 29.118)), (' A 372  THR HG23', ' A 974  HOH  O  ', -0.405, (-19.392, -19.473, 19.189)), (' A 443  ASP  OD2', ' A 723  PEG  H41', -0.404, (-31.43, -6.39, 44.458)), (' A 716  IMD  H2 ', ' A 989  HOH  O  ', -0.402, (-19.227, -18.711, 48.334)), (' A 104  VAL HG13', ' A 113  LYS  CG ', -0.401, (-7.022, 23.127, 11.545))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
