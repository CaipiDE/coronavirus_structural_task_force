# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  72 ', 'ASN', 0.02397278073607362, (10.361, -18.092, -4.72))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (13.497, -23.40599999999999, -19.962000000000007))]
data['rota'] = [('A', ' 107 ', 'LEU', 0.2304500956911201, (8.206, 27.424999999999997, -7.971)), ('A', ' 342 ', 'GLU', 0.05526168251392434, (20.244, -19.443, -13.193000000000003)), ('A', ' 394 ', 'TYR', 0.09424346399739097, (22.38, 7.525000000000001, -11.136000000000003)), ('A', ' 434 ', 'SER', 0.19386064830470406, (36.942, -18.882, -35.725)), ('A', ' 479 ', 'GLU', 0.08244069258408221, (-14.875999999999998, -8.801, -27.889))]
data['cbeta'] = []
data['probe'] = [(' A 624  ASN  ND2', ' A2376  HOH  O  ', -0.994, (-5.213, -28.012, -48.736)), (' A 560  GLN HE21', ' A 564  THR HG23', -0.824, (30.998, 11.942, -19.348)), (' A 442  HIS  HD2', ' A2211  HOH  O  ', -0.602, (30.457, -16.715, -42.036)), (' A 479 BGLU  HA ', ' A 479 BGLU  OE1', -0.6, (-16.044, -10.071, -26.941)), (' A 560  GLN HE21', ' A 564  THR  CG2', -0.562, (31.133, 12.191, -19.113)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.561, (0.461, 11.681, -4.234)), (' A 220  TRP  HA ', ' A 223  MET  HE2', -0.56, (4.137, 4.903, -19.675)), (' A1101  ACT  H3 ', ' A2109  HOH  O  ', -0.557, (-6.098, -25.216, -29.426)), (' A 477  THR  OG1', ' A 479 AGLU  HG3', -0.542, (-15.572, -6.251, -27.521)), (' A  91  HIS  HD2', ' A2021  HOH  O  ', -0.531, (6.218, 7.236, 3.824)), (' A1100  ACT  H1 ', ' A1103  PEG  H22', -0.514, (28.286, -15.382, -35.852)), (' A 136  ASN  O  ', ' A1102  ACT  H2 ', -0.508, (-0.85, -7.091, -7.406)), (' A 455  ILE HD13', ' A 592  MET  HE2', -0.501, (17.32, -2.506, -37.697)), (' A 523  TYR  CD1', ' A1700  3EF  HB ', -0.495, (12.532, -4.696, -25.233)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.493, (2.739, 0.018, -32.417)), (' A  69  TYR  CE1', ' A  78  SER  OG ', -0.492, (2.756, -15.47, -4.627)), (' A 479 BGLU  CA ', ' A 479 BGLU  OE1', -0.489, (-15.701, -9.086, -27.0)), (' A 549  LYS  HE2', ' A2285  HOH  O  ', -0.48, (33.289, -4.584, -43.993)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.465, (10.78, -4.308, -30.257)), (' A 579  GLN  NE2', ' A 584  GLN  HA ', -0.451, (22.869, 17.773, -30.693)), (' A 325  SER  O  ', ' A 554  GLN  HA ', -0.451, (37.857, -0.173, -22.422)), (' A 282  THR  HB ', ' A 453  ASP  OD1', -0.43, (16.399, -12.063, -33.146)), (' A  64  GLU  HB3', ' A2017  HOH  O  ', -0.429, (11.59, -6.595, 1.829)), (' A 560  GLN  NE2', ' A 564  THR HG23', -0.427, (31.107, 11.248, -18.447)), (' A 179  LEU HD11', ' A 499  VAL HG23', -0.425, (-1.765, -24.273, -35.547)), (' A 287  TYR  OH ', ' A 445  ASN  HB3', -0.424, (26.463, -15.826, -42.036)), (' A 498  PRO  HA ', ' A 623  PRO  HG2', -0.421, (-0.699, -20.867, -40.469)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.419, (2.061, -10.963, -21.272)), (' A 223  MET  HE1', ' A 519  PRO  HG2', -0.412, (5.556, 2.4, -19.538)), (' A 465  ASP  HB2', ' A2292  HOH  O  ', -0.407, (4.116, -0.097, -28.282)), (' A 223  MET  HE3', ' A2134  HOH  O  ', -0.402, (5.353, 4.365, -21.763))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
