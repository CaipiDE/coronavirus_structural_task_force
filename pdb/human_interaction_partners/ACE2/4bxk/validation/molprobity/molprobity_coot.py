# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  45 ', 'ASN', 0.025908600105228618, (16.010999999999996, 18.654, 32.185)), ('B', ' 134 ', 'ALA', 0.03122638362293655, (27.478999999999996, 31.113, 14.765999999999996)), ('B', ' 377 ', 'VAL', 0.07091718823864473, (-5.804000000000006, 2.8669999999999995, 38.027))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (6.046999999999997, -7.4399999999999995, -35.017)), ('A', ' 608 ', 'PRO', None, (12.792000000000005, 14.608999999999996, -28.76)), ('B', ' 141 ', 'PRO', None, (11.52, 27.58, 19.846)), ('B', ' 608 ', 'PRO', None, (22.764, 26.617000000000004, -0.705))]
data['rota'] = [('A', ' 133 ', 'THR', 0.26761172477026485, (6.438000000000006, 10.893999999999997, -41.196)), ('A', ' 187 ', 'LYS', 0.036840516952772975, (-20.958, -8.481000000000003, -6.326)), ('A', ' 203 ', 'ASN', 0.06442616570845087, (-9.142999999999999, -22.14999999999999, -3.022)), ('A', ' 279 ', 'VAL', 0.027310484698900857, (21.43, -19.909000000000006, -30.034)), ('A', ' 368 ', 'TYR', 0.2745481739480711, (-3.360000000000001, -30.360000000000003, -21.605999999999998)), ('A', ' 372 ', 'TYR', 0.051592896793884596, (-8.501, -34.017, -20.634)), ('A', ' 388 ', 'HIS', 0.1416026697340918, (-1.6679999999999984, -24.887999999999998, -17.159)), ('A', ' 415 ', 'THR', 0.19947955528088948, (31.468999999999994, -28.368, -22.171)), ('A', ' 453 ', 'ARG', 0.2030598050968188, (-8.127, 1.0189999999999997, -3.038)), ('A', ' 591 ', 'VAL', 0.197784379533059, (24.639999999999993, -1.783, -3.088999999999999)), ('B', ' 133 ', 'THR', 0.19925898062295352, (28.029000000000003, 29.657, 11.26)), ('B', ' 279 ', 'VAL', 0.06879507639997848, (-6.050999999999997, 37.467, 17.218)), ('B', ' 327 ', 'GLU', 0.21250019574812376, (17.748, 21.272, 27.576)), ('B', ' 368 ', 'TYR', 0.27975165289039305, (-9.982, 14.181000000000001, 32.318)), ('B', ' 372 ', 'TYR', 0.058503436197704047, (-11.572999999999997, 10.124, 36.979)), ('B', ' 388 ', 'HIS', 0.20342425948282755, (-8.834000000000005, 12.083, 25.595999999999997)), ('B', ' 507 ', 'LEU', 0.139142002752234, (-15.156000000000008, 13.051999999999998, 17.35)), ('B', ' 588 ', 'ASN', 0.21150091386854247, (-10.84, 29.398, -11.447))]
data['cbeta'] = []
data['probe'] = [(' B 260  SER  OG ', ' B 262  GLU  OE1', -0.925, (-2.95, 24.559, 11.084)), (' B 350  ARG  H  ', ' B 355  GLN HE21', -0.727, (3.165, 28.503, 22.619)), (' A  17  ALA  HB1', ' A  92  ILE  CD1', -0.657, (-26.648, -29.877, -8.028)), (' A  87 BGLN  NE2', ' A2008  HOH  O  ', -0.628, (-20.362, -33.703, -9.259)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.621, (14.249, 21.812, -0.488)), (' B 453  ARG  NH2', ' B 704  PG4  O1 ', -0.618, (1.971, 0.565, 3.592)), (' B 124  THR HG22', ' B 327  GLU  HG2', -0.615, (18.784, 19.104, 24.53)), (' A  87 BGLN  CD ', ' A  87 BGLN  O  ', -0.59, (-18.164, -31.844, -8.905)), (' A 201  TRP  HZ3', ' A 497  PRO  HG2', -0.584, (-8.185, -15.459, -13.923)), (' A  87 BGLN  C  ', ' A  87 BGLN  CD ', -0.565, (-18.312, -32.408, -9.102)), (' A  87 BGLN  C  ', ' A  87 BGLN  NE2', -0.564, (-18.684, -32.547, -9.011)), (' A  17  ALA  HB1', ' A  92  ILE HD11', -0.559, (-26.654, -30.222, -8.421)), (' A  83  PHE  O  ', ' A  89  ARG  NH1', -0.559, (-20.911, -32.181, -0.026)), (' B 233  LEU HD23', ' B 267  MET  HE1', -0.555, (1.502, 31.026, -0.412)), (' B 155  MET  HA ', ' B 155  MET  HE3', -0.542, (16.364, 29.953, 5.001)), (' B 279  VAL HG11', ' B 410  LEU HD13', -0.541, (-7.73, 36.361, 20.792)), (' A 201  TRP  CZ3', ' A 497  PRO  HG2', -0.531, (-8.442, -15.279, -13.848)), (' B 292  HIS  HE2', ' B 709  P6G  H91', -0.528, (-2.054, 39.727, 33.166)), (' A 330  CYS  O  ', ' A2150  HOH  O  ', -0.522, (2.139, -13.472, -31.165)), (' A 415  THR HG22', ' A2181  HOH  O  ', -0.519, (34.331, -28.394, -20.635)), (' A 467  ARG HH11', ' A 471  GLN HE22', -0.515, (7.352, -3.945, -14.801)), (' B 588  ASN  N  ', ' B 588  ASN HD22', -0.508, (-12.338, 30.525, -10.226)), (' B 539  LYS  HE3', ' B 559  MET  O  ', -0.504, (-25.242, 14.164, 24.587)), (' A 213 BHIS  ND1', ' A2099  HOH  O  ', -0.492, (7.165, -19.878, 2.426)), (' B 390  ALA  O  ', ' B 394  VAL HG23', -0.486, (-12.871, 17.977, 22.144)), (' A 292  HIS  O  ', ' A 296  VAL HG23', -0.479, (11.455, -28.09, -35.349)), (' A 489  LYS  O  ', ' A 493  PRO  HD2', -0.479, (-2.748, -5.085, -21.178)), (' A 274  LYS  HB3', ' A 275  PRO  CD ', -0.479, (31.718, -21.997, -23.181)), (' B 514  ALA  HB2', ' B 560  VAL HG23', -0.462, (-23.471, 14.794, 20.504)), (' B 510  GLN  HG2', ' B 569  PRO  HG2', -0.456, (-20.56, 13.636, 15.074)), (' A 120  ARG  HB2', ' A2018  HOH  O  ', -0.449, (-11.722, -4.601, -31.708)), (' A 539  LYS  HE3', ' A 559  MET  O  ', -0.447, (5.784, -36.688, -9.506)), (' B 489  LYS  O  ', ' B 493  PRO  HD2', -0.446, (8.808, 11.562, 15.412)), (' A 270  PRO  HD3', ' A 426  LEU HD23', -0.444, (26.627, -13.95, -16.83)), (' B 292  HIS  NE2', ' B 709  P6G  H62', -0.442, (-2.384, 39.673, 31.651)), (' A 217  GLN  NE2', ' A2101  HOH  O  ', -0.438, (9.292, -21.263, 0.141)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.438, (11.509, 8.623, -22.297)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.433, (12.082, 22.592, -0.582)), (' A 496  THR  HA ', ' A 497  PRO  HD3', -0.43, (-8.296, -12.998, -17.207)), (' A 117  GLN  HG2', ' A2043  HOH  O  ', -0.416, (-14.185, -0.424, -30.015)), (' B 365  HIS  CE1', ' B1001  1IU HAP1', -0.412, (-3.779, 13.799, 25.836)), (' B 598  GLN  NE2', ' B2162  HOH  O  ', -0.412, (6.223, 8.507, -12.922)), (' A 324  ASP  OD1', ' A 326  ARG  HB2', -0.41, (-4.11, -10.707, -43.936)), (' B 389  GLU  HB2', ' B 504  SER  HB2', -0.409, (-8.151, 12.951, 20.141)), (' B 369  TYR  OH ', ' B1001  1IU  NAT', -0.407, (-2.912, 12.174, 29.478)), (' A 570  LEU  C  ', ' A 570  LEU HD23', -0.401, (15.032, -21.191, -7.423))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
