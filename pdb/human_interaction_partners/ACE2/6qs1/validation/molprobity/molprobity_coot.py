# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 141 ', 'PRO', None, (6.683000000000003, -7.539, -34.251)), ('A', ' 608 ', 'PRO', None, (13.625000000000002, 13.676, -28.468000000000004)), ('B', ' 141 ', 'PRO', None, (12.012, 26.882, 20.494)), ('B', ' 608 ', 'PRO', None, (23.022, 26.388, -0.154))]
data['rota'] = [('A', '  11 ', 'SER', 0.25912314937978126, (-34.58400000000001, -33.473000000000006, -8.86)), ('A', ' 273 ', 'ASP', 0.22525492200689895, (35.361999999999995, -17.957000000000004, -23.582000000000008)), ('A', ' 368 ', 'TYR', 0.2822351435962619, (-2.870000000000001, -30.31199999999999, -20.733000000000008)), ('A', ' 372 ', 'TYR', 0.06837994156669518, (-7.993000000000004, -33.825, -19.79500000000001)), ('A', ' 388 ', 'HIS', 0.2038322084439238, (-1.1460000000000017, -24.903, -16.458)), ('B', '  29 ', 'GLU', 0.23108121595703923, (0.45300000000001006, 2.445000000000002, 42.282)), ('B', '  35 ', 'SER', 0.020457512371955866, (8.636000000000006, 5.062000000000003, 37.163)), ('B', ' 129 ', 'LEU', 0.1227518267878833, (24.376999999999995, 27.678999999999995, 10.232)), ('B', ' 269 ', 'VAL', 0.11654106252523433, (-8.017999999999995, 34.3, 4.269)), ('B', ' 326 ', 'ARG', 0.04718600536934284, (19.265000000000008, 22.541000000000007, 30.75100000000001)), ('B', ' 368 ', 'TYR', 0.23993573212452157, (-9.036999999999997, 13.16, 32.816)), ('B', ' 372 ', 'TYR', 0.01759089340114136, (-10.585999999999995, 8.882000000000001, 37.362000000000016)), ('B', ' 415 ', 'THR', 0.28384224054282, (-20.587999999999997, 40.717999999999996, 12.401000000000003))]
data['cbeta'] = []
data['probe'] = [(' B 564  ALA  HB1', ' B 709  PEG  H42', -0.822, (-17.967, 3.661, 14.647)), (' A  66  GLU  OE2', ' A 801  HOH  O  ', -0.791, (-30.117, -14.06, -19.074)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.768, (12.457, 8.148, -21.836)), (' B 712  BO3  O2 ', ' B 801  HOH  O  ', -0.766, (-23.741, 12.289, 14.12)), (' B 377  VAL  HA ', ' B 380  ARG  HG3', -0.725, (-5.947, 3.421, 37.162)), (' B  91  ILE  O  ', ' B  95  VAL HG23', -0.724, (-5.546, -6.935, 34.406)), (' B 375  LEU  O  ', ' B 380  ARG  NH2', -0.698, (-6.866, 3.839, 40.296)), (' B  27  SER  OG ', ' B 802  HOH  O  ', -0.694, (0.196, -5.467, 46.066)), (' B  55  GLU  OE2', ' B 803  HOH  O  ', -0.665, (19.487, 5.173, 28.663)), (' A 478  THR  HB ', ' A 708  FUC  H61', -0.646, (7.614, 13.929, -17.61)), (' A 421  ASP  OD2', ' A 802  HOH  O  ', -0.643, (29.488, -26.504, -12.313)), (' A  25  GLN  OE1', ' A 376  PRO  HA ', -0.629, (-18.098, -33.112, -19.002)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.626, (15.176, 21.299, -0.16)), (' B 541  ARG  O  ', ' B 545  ARG  HG3', -0.604, (-16.779, 11.705, 34.963)), (' B  88  LEU  HA ', ' B  91  ILE HD12', -0.601, (-11.956, -5.728, 36.942)), (' A 157  LEU HD13', ' A 476  PRO  HB2', -0.583, (14.184, 6.416, -20.978)), (' A 333  SER  HB3', ' E   9  ILE HG22', -0.58, (-2.573, -16.764, -24.994)), (' B  14  GLU  OE2', ' B 805  HOH  O  ', -0.575, (-17.598, -10.902, 39.668)), (' A  49  GLU  OE1', ' A  52  ARG  NH2', -0.571, (-21.692, -9.691, -37.764)), (' B  74  GLU  OE2', ' B 806  HOH  O  ', -0.565, (2.949, -19.177, 37.634)), (' A 495  VAL  O  ', ' A 495  VAL HG12', -0.55, (-9.647, -11.089, -17.348)), (' B 155  MET  HA ', ' B 155  MET  HE3', -0.55, (16.775, 29.441, 5.747)), (' A 268  VAL HG21', ' A 430  LEU HD11', -0.54, (22.773, -12.084, -18.209)), (' B  95  VAL  O  ', ' B 804  HOH  O  ', -0.54, (0.602, -8.227, 33.585)), (' B 186  TYR  CE1', ' B 197  TYR  CE2', -0.537, (2.342, -3.961, 24.179)), (' B 705  NAG  O5 ', ' B 706  FUC  O2 ', -0.536, (21.756, 11.951, -1.548)), (' A 137  TRP  CH2', ' A 155  MET  HE1', -0.532, (13.161, 3.254, -33.986)), (' B  59  LEU  O  ', ' B  63  GLU  HG3', -0.525, (11.998, -4.992, 36.365)), (' B  98  LEU  HB3', ' B 101  ALA  HB3', -0.524, (5.656, -8.526, 30.56)), (' B 514  ALA  HB2', ' B 560  VAL HG12', -0.515, (-22.375, 13.658, 21.627)), (' B   1  LEU  HG ', ' B   2  ASP  H  ', -0.513, (10.529, -6.639, 44.342)), (' A 260 BSER  HB3', ' A 262 BGLU  OE2', -0.509, (13.806, -13.529, -20.202)), (' A 466  LEU HD11', ' A 720 APGE  H12', -0.507, (0.337, -2.347, -5.789)), (' A 596  GLU  OE2', ' B 705  NAG  O7 ', -0.505, (23.454, 7.334, -2.871)), (' B  10  PHE  CE2', ' B  20  PHE  HA ', -0.495, (-5.259, -11.389, 44.949)), (' B 265  TYR  CZ ', ' B 269  VAL HG13', -0.494, (-8.29, 34.443, 7.696)), (' A 362  GLU  OE2', ' E  10  PRO  HD3', -0.49, (1.712, -18.364, -24.609)), (' B 274  LYS  NZ ', ' B 417  ASP  OD2', -0.489, (-19.353, 40.411, 7.244)), (' A 266  ASP  OD1', ' A 803  HOH  O  ', -0.484, (23.952, -9.999, -26.739)), (' A 158  PHE  HA ', ' A 607  TYR  OH ', -0.478, (11.508, 7.968, -27.094)), (' B 180  ALA  HA ', ' B 708  PEG  H41', -0.478, (12.218, -7.112, 15.252)), (' A 453  ARG  NH2', ' A 825  HOH  O  ', -0.473, (-6.282, -4.022, -0.533)), (' A 280  THR HG23', ' A 352  THR  HA ', -0.473, (16.467, -16.665, -32.149)), (' A 413  ARG  NH2', ' A 815  HOH  O  ', -0.471, (33.665, -21.779, -27.053)), (' A 270  PRO  HB3', ' A 580  TRP  CH2', -0.471, (30.472, -14.198, -13.505)), (' A 580  TRP  O  ', ' A 584  GLN  HG2', -0.469, (30.185, -13.766, -7.633)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.469, (12.724, 22.694, 0.155)), (' B 564  ALA  CB ', ' B 709  PEG  H42', -0.469, (-18.623, 3.663, 15.55)), (' A 274  LYS  HB3', ' A 275  PRO  HD2', -0.466, (31.293, -22.264, -22.068)), (' A  69  GLY  HA3', ' A  98  LEU HD11', -0.465, (-25.731, -19.325, -12.894)), (' A 197  TYR  OH ', ' E   1  PCA  HG3', -0.463, (-15.376, -17.68, -12.063)), (' B  66  GLU  HG2', ' B  70  GLN  OE1', -0.461, (7.534, -12.79, 34.958)), (' A 451  SER  OG ', ' A 453  ARG  HG2', -0.459, (-8.074, -2.501, -2.253)), (' A 177  ASP  OD1', ' A 804 AHOH  O  ', -0.457, (-16.28, 5.192, -16.509)), (' B  29  GLU  HG3', ' B 338  TYR  O  ', -0.457, (0.178, 5.195, 43.149)), (' A 365  HIS  CE1', ' E   8  LYS  HB3', -0.457, (-1.548, -21.578, -20.624)), (' A 720 APGE  C1 ', ' A 837  HOH  O  ', -0.456, (-1.86, -1.548, -5.555)), (' A 137  TRP  HH2', ' A 155  MET  HE1', -0.453, (13.156, 3.589, -34.099)), (' B 510  GLN  HG2', ' B 569  PRO  HG2', -0.452, (-19.759, 12.69, 15.762)), (' A 720 APGE  H1 ', ' A 837  HOH  O  ', -0.452, (-2.043, -1.314, -5.434)), (' A 274  LYS  HB3', ' A 275  PRO  CD ', -0.449, (31.848, -22.545, -22.579)), (' B 564  ALA  HB1', ' B 709  PEG  C4 ', -0.448, (-17.993, 2.891, 14.863)), (' B 716   CL CL  ', ' F   8  LYS  NZ ', -0.444, (-4.414, 6.779, 26.182)), (' B 139  LEU  HA ', ' B 143  LEU HD12', -0.442, (13.731, 22.805, 15.53)), (' B  99  GLY  HA2', ' B 186  TYR  CE1', -0.442, (3.741, -5.827, 25.287)), (' B  73  LYS  HA ', ' B  77  GLU  HB2', -0.441, (-3.521, -17.161, 33.03)), (' A 507  LEU HD13', ' A 565  LEU  CD2', -0.439, (3.482, -24.5, -6.427)), (' B 552  TRP  HH2', ' B 709  PEG  O4 ', -0.436, (-15.887, 3.083, 16.806)), (' B 426  LEU  C  ', ' B 426  LEU HD13', -0.434, (-9.242, 28.673, 6.824)), (' B 186  TYR  CE1', ' B 197  TYR  CD2', -0.434, (2.28, -4.331, 23.674)), (' A 718  EDO  H11', ' A 828  HOH  O  ', -0.434, (31.901, -19.442, -6.673)), (' B  17  ALA  HB2', ' B  76  TYR  CE1', -0.433, (-9.018, -14.974, 39.876)), (' B  73  LYS  O  ', ' B  77  GLU  HB2', -0.432, (-3.592, -18.521, 33.331)), (' A 286  GLN  O  ', ' A 710  XPE H151', -0.432, (18.102, -24.509, -41.098)), (' A 129  LEU HD21', ' A 134  ALA  CB ', -0.432, (4.51, 10.006, -39.497)), (' A 129  LEU HD21', ' A 134  ALA  HB2', -0.43, (4.818, 10.563, -39.383)), (' A  31  VAL  O  ', ' A  34  GLN  HG3', -0.429, (-20.32, -21.051, -27.551)), (' B 274  LYS  HB3', ' B 275  PRO  CD ', -0.429, (-13.897, 40.954, 9.633)), (' B  77  GLU  HA ', ' B  77  GLU  OE1', -0.427, (-5.481, -16.822, 31.632)), (' B 318  MET  HE3', ' B 322  PRO  HD3', -0.425, (11.166, 24.038, 30.25)), (' A 312  GLU  N  ', ' A 312  GLU  OE1', -0.424, (-6.608, -32.078, -36.397)), (' A 292  HIS  NE2', ' A 710  XPE  C17', -0.423, (13.537, -26.566, -41.822)), (' A  66  GLU  O  ', ' A  70  GLN  HG3', -0.423, (-29.033, -18.246, -14.17)), (' B   2  ASP  O  ', ' B   6  GLN  HG3', -0.422, (8.157, -8.341, 45.833)), (' A 292  HIS  NE2', ' A 710  XPE H172', -0.422, (13.095, -26.885, -41.445)), (' B  49  GLU  O  ', ' B  53  ARG  HG3', -0.422, (19.513, 8.718, 36.829)), (' B 179  THR HG22', ' B 708  PEG  H32', -0.421, (10.688, -4.432, 14.085)), (' B 129  LEU HD21', ' B 137  TRP  CH2', -0.421, (19.449, 30.148, 11.038)), (' B 105  LEU  HA ', ' B 108  ARG  HD2', -0.42, (14.766, -8.375, 31.689)), (' A  83  PHE  HB2', ' A  89  ARG  HG2', -0.416, (-21.032, -31.82, -3.835)), (' B 113  ALA  O  ', ' B 117  GLN  HG2', -0.415, (19.335, 4.291, 24.89)), (' B   5  LEU HD23', ' B  27  SER  HB3', -0.414, (3.818, -3.594, 45.616)), (' A 507  LEU HD13', ' A 565  LEU HD23', -0.412, (3.686, -24.978, -6.573)), (' A 465  TYR  CE2', ' A 720 APGE  H32', -0.41, (2.878, -0.048, -2.369)), (' A 570  LEU  C  ', ' A 570  LEU HD23', -0.409, (15.663, -21.449, -6.645)), (' B  52  ARG HH12', ' B  53  ARG HH12', -0.406, (22.774, 8.663, 39.045)), (' A  77  GLU  HA ', ' A  77  GLU  OE1', -0.405, (-26.68, -22.726, -3.914)), (' B 340  ARG  HG2', ' B 373  LYS  O  ', -0.404, (-6.971, 7.891, 42.13)), (' B 343  PHE  CE2', ' B 369  TYR  HB3', -0.403, (-4.462, 12.538, 37.065)), (' A 304  LEU  O  ', ' A 305  GLU  HB2', -0.401, (5.779, -41.319, -22.376)), (' B 270  PRO  HB3', ' B 580  TRP  CH2', -0.401, (-12.826, 32.401, 0.922))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
