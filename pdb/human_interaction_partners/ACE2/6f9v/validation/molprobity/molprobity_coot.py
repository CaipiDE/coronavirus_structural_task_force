# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'ASN', 0.014645589674913646, (-9.158999999999992, -10.707000000000003, -38.932)), ('B', '  45 ', 'ASN', 0.011322868306009442, (15.653000000000004, 19.069, 31.991))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (5.840999999999994, -6.808999999999999, -35.303)), ('A', ' 608 ', 'PRO', None, (12.68399999999999, 15.089000000000002, -29.054000000000006)), ('B', ' 141 ', 'PRO', None, (11.297999999999996, 28.241, 19.54)), ('B', ' 608 ', 'PRO', None, (22.060000000000002, 27.3, -1.1400000000000001))]
data['rota'] = [('A', '  11 ', 'SER', 0.009594545930661719, (-35.547, -32.12899999999999, -9.910000000000004)), ('A', '  82 ', 'GLN', 0.014952450415803075, (-23.363999999999994, -30.40799999999999, -0.12100000000000002)), ('A', '  90 ', 'ARG', 0.03885399377723753, (-17.554999999999996, -28.133999999999993, -9.202)), ('A', '  96 ', 'ARG', 0.0821696174569882, (-24.276999999999997, -20.750999999999994, -10.839)), ('A', ' 260 ', 'SER', 0.08706909929314718, (11.997999999999992, -10.381, -19.219)), ('A', ' 291 ', 'THR', 0.0722195844912643, (6.620999999999999, -24.192, -39.083)), ('A', ' 330 ', 'CYS', 0.29856662149829677, (-0.599000000000002, -10.501999999999999, -32.728)), ('A', ' 372 ', 'TYR', 0.10538653049785461, (-8.92, -33.39099999999999, -20.953000000000007)), ('A', ' 388 ', 'HIS', 0.16988617915890575, (-2.1049999999999986, -24.318, -17.374)), ('B', '  35 ', 'SER', 0.23553013045316556, (7.599000000000007, 6.487999999999998, 36.225)), ('B', ' 330 ', 'CYS', 0.27116011752227687, (9.416, 21.999, 24.113000000000003)), ('B', ' 346 ', 'LYS', 0.14288129162911836, (4.778000000000006, 21.577, 30.269000000000005)), ('B', ' 368 ', 'TYR', 0.2992108400194079, (-10.117999999999993, 14.705999999999998, 32.093)), ('B', ' 372 ', 'TYR', 0.04639661581775069, (-11.710999999999999, 10.512000000000002, 36.714)), ('B', ' 421 ', 'ASP', 0.20532857692916623, (-18.732000000000003, 34.22199999999999, 7.998))]
data['cbeta'] = []
data['probe'] = [(' B 321  LYS  O  ', ' B 801  HOH  O  ', -0.804, (11.515, 30.444, 27.741)), (' A  77 BGLU  OE1', ' A  96 BARG  NE ', -0.74, (-26.098, -19.998, -6.018)), (' A  40 BTRP  CE2', ' A  44  THR HG21', -0.717, (-7.412, -17.251, -36.733)), (' A  84 BTHR  OG1', ' A1032 BHOH  O  ', -0.685, (-21.27, -38.48, -3.779)), (' B 106  ALA  O  ', ' B 803  HOH  O  ', -0.669, (19.565, -4.565, 26.607)), (' A 549  SER  OG ', ' A 801  HOH  O  ', -0.654, (-10.044, -35.55, -12.573)), (' B  55  GLU  OE2', ' B 804  HOH  O  ', -0.653, (18.911, 6.36, 27.84)), (' A  39 BSER  O  ', ' A  43 BASP  N  ', -0.599, (-11.076, -12.289, -33.436)), (' A  98 BLEU  HB3', ' A 101  ALA  HB3', -0.579, (-24.672, -14.433, -15.911)), (' A  83 BPHE  O  ', ' A  89 BARG  NH1', -0.567, (-19.717, -33.413, -2.375)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.565, (11.03, 9.249, -22.541)), (' A  73 BLYS  NZ ', ' A 805  HOH  O  ', -0.556, (-28.295, -14.012, -9.164)), (' B 329  VAL  O  ', ' B 346  LYS  HE2', -0.552, (9.208, 19.672, 27.369)), (' A 601  PRO  O  ', ' A 802  HOH  O  ', -0.545, (14.52, 11.74, -18.041)), (' A  62 BGLN  HG3', ' A1144  HOH  O  ', -0.537, (-21.437, -13.067, -22.616)), (' B 578  THR HG23', ' B 710  EDO  H11', -0.528, (-16.611, 21.347, 0.184)), (' A  91 BILE HG12', ' A 378  SER  HB2', -0.528, (-18.493, -28.996, -15.24)), (' A 418  THR HG23', ' A 716 AEDO  C2 ', -0.526, (33.574, -25.695, -12.73)), (' B  90  ARG  NH1', ' B 549  SER  O  ', -0.526, (-16.458, -0.598, 30.524)), (' A 539  LYS  HE3', ' A 559  MET  O  ', -0.519, (5.013, -35.913, -9.47)), (' A  14 BGLU  HB3', ' A 931 BHOH  O  ', -0.516, (-27.407, -36.746, -5.592)), (' B 580  TRP  O  ', ' B 584  GLN  HG2', -0.514, (-15.479, 29.999, -3.725)), (' B  73  LYS  HG3', ' B  96  ARG  HG3', -0.513, (-2.807, -13.719, 30.783)), (' A  40 BTRP  O  ', ' A  44  THR  N  ', -0.502, (-8.711, -14.023, -35.812)), (' B  31  VAL  O  ', ' B  34  GLN  HG3', -0.496, (6.637, 4.428, 39.219)), (' B  49  GLU  HG3', ' B  53  ARG  CZ ', -0.495, (19.909, 12.318, 38.068)), (' A  73 ALYS  HG3', ' A  77 AGLU  HB2', -0.493, (-30.636, -19.371, -5.43)), (' A   2  ASP  O  ', ' A   6 BGLN  HG3', -0.485, (-33.375, -22.185, -25.938)), (' A  52  ARG  NH1', ' A  56  GLU  OE2', -0.475, (-25.278, -8.553, -35.508)), (' A 117  GLN  HG2', ' A 120 BARG HH22', -0.475, (-14.764, 0.635, -30.156)), (' B  24  TYR  OH ', ' B 805  HOH  O  ', -0.475, (-0.076, -2.859, 35.195)), (' A 444 BGLN  NE2', ' A 816  HOH  O  ', -0.467, (-1.37, -6.727, -2.987)), (' B  59  LEU  O  ', ' B  63  GLU  HG3', -0.466, (11.452, -3.696, 35.784)), (' B 702  D0Z  C22', ' B 702  D0Z  C38', -0.462, (-1.143, 17.11, 22.14)), (' B 539  LYS  HG3', ' B1139  HOH  O  ', -0.46, (-25.126, 14.163, 27.765)), (' B 172  LYS  O  ', ' B 176 AGLU  HG3', -0.459, (16.448, 2.682, 11.382)), (' A 268  VAL  O  ', ' A 720  PG4  H42', -0.459, (27.82, -9.884, -17.976)), (' B 451  SER  OG ', ' B 453  ARG  HG2', -0.456, (2.719, -4.282, 6.563)), (' B 274  LYS  HB3', ' B 275  PRO  CD ', -0.455, (-14.424, 41.875, 8.909)), (' A 235  ARG HH22', ' A 720  PG4  H32', -0.45, (31.06, -6.59, -17.534)), (' A 418  THR HG23', ' A 716 AEDO  H21', -0.448, (33.835, -25.716, -12.291)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.446, (14.266, 22.194, -0.982)), (' A 596  GLU  OE2', ' B 707  NAG  O7 ', -0.444, (22.388, 8.253, -4.137)), (' A 330  CYS  O  ', ' A 803  HOH  O  ', -0.443, (1.617, -12.989, -31.854)), (' A 489  LYS  O  ', ' A 493  PRO  HD2', -0.441, (-3.078, -4.453, -21.222)), (' B 107  LYS  NZ ', ' B 184 AGLU  OE1', -0.437, (14.194, -10.206, 20.515)), (' A 702  D0Z  C22', ' A 702  D0Z  C38', -0.436, (0.389, -16.881, -23.109)), (' B 172  LYS  HB3', ' B 173  PRO  HD3', -0.432, (18.748, 5.987, 10.025)), (' A  69 BGLY  HA3', ' A  98 BLEU HD11', -0.43, (-26.577, -18.212, -13.704)), (' B  17  ALA  HB1', ' B  92  ILE HD11', -0.43, (-10.432, -10.753, 38.115)), (' A  49  GLU  OE1', ' A  52  ARG  NH2', -0.43, (-22.721, -8.735, -38.748)), (' A 482  THR HG21', ' A 712  NAG  O7 ', -0.429, (-3.086, 15.494, -18.605)), (' A 711  FUC  H62', ' A1086  HOH  O  ', -0.429, (3.496, 15.676, -17.026)), (' B 267  MET  HE1', ' B 884  HOH  O  ', -0.427, (3.067, 31.104, 2.066)), (' A 260 BSER  HB3', ' A 262 BGLU  OE1', -0.425, (12.601, -12.154, -21.102)), (' B 702  D0Z  C38', ' B 702  D0Z H221', -0.422, (-1.362, 17.823, 22.532)), (' A 607  TYR  CG ', ' A 608  PRO  HA ', -0.421, (13.174, 12.795, -27.932)), (' A 418  THR HG23', ' A 716 AEDO  H22', -0.421, (33.298, -26.124, -12.748)), (' A 187  LYS  NZ ', ' A 836  HOH  O  ', -0.419, (-22.411, -2.657, -4.376)), (' A 157  LEU HD13', ' A 476  PRO  HB2', -0.414, (13.19, 7.201, -21.407)), (' A 440  TYR  O  ', ' A 444 BGLN  HG2', -0.412, (1.049, -8.131, -7.408)), (' B 184 BGLU  OE2', ' B 806  HOH  O  ', -0.412, (14.573, -7.56, 17.638)), (' B 113  ALA  O  ', ' B 117  GLN  HG3', -0.41, (18.185, 5.681, 24.286)), (' A 477  VAL HG12', ' A 603  LEU HD21', -0.41, (11.667, 12.298, -22.057)), (' A  18 BGLN  HA ', ' A  18 BGLN  OE1', -0.408, (-25.026, -34.748, -12.644)), (' A 231  ARG  HG3', ' A 720  PG4  H71', -0.407, (29.495, -4.15, -14.05)), (' A 720  PG4  H51', ' A 720  PG4  H72', -0.405, (30.807, -6.587, -15.255)), (' B 259  GLN  O  ', ' B 435  PHE  HA ', -0.404, (-3.733, 19.067, 9.08)), (' A  25 AGLN  OE1', ' A 376  PRO  CB ', -0.404, (-18.895, -31.367, -16.789)), (' A  36 BVAL HG13', ' A 335  TRP  HE3', -0.402, (-11.409, -19.448, -29.332)), (' A 228  PHE  CZ ', ' A 720  PG4  H52', -0.4, (28.501, -9.295, -14.34))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
