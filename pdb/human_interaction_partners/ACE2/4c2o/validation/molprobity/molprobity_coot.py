# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 163 ', 'PRO', None, (13.704999999999998, -23.577, -19.817))]
data['rota'] = [('A', '  48 ', 'VAL', 0.1792253444191646, (10.962, 16.909, -1.3269999999999995)), ('A', ' 155 ', 'ASN', 0.1714417225297426, (0.9659999999999996, -39.37399999999999, -20.467999999999993)), ('A', ' 243 ', 'LEU', 0.2266405545836948, (14.984999999999994, -3.139, -44.703)), ('A', ' 342 ', 'GLU', 0.020146419163305347, (20.340999999999994, -19.379, -12.916)), ('A', ' 394 ', 'TYR', 0.09810717880906052, (22.21999999999999, 7.658999999999997, -10.813))]
data['cbeta'] = []
data['probe'] = [(' A1627   CL CL  ', ' A2321  HOH  O  ', -1.149, (7.113, 3.047, -20.546)), (' A 521  ILE HG23', ' A1627   CL CL  ', -0.658, (7.981, 2.743, -23.4)), (' A1637  ACT  H1 ', ' A2209  HOH  O  ', -0.594, (11.546, -11.725, -24.377)), (' A 311  THR HG23', ' A 314  ARG  H  ', -0.561, (29.838, -18.814, -15.313)), (' A 231  GLN  HG3', ' A2160  HOH  O  ', -0.548, (0.843, 11.572, -34.688)), (' A 442  HIS  HD2', ' A2221  HOH  O  ', -0.542, (30.701, -16.59, -41.834)), (' A 353  HIS  HD2', ' A2248  HOH  O  ', -0.512, (11.139, -9.638, -17.292)), (' A  64  GLU  HB2', ' A2019  HOH  O  ', -0.509, (14.694, -5.21, 0.611)), (' A 179  LEU HD11', ' A 499  VAL HG23', -0.507, (-0.781, -24.631, -35.587)), (' A  48  VAL HG13', ' A2004  HOH  O  ', -0.507, (12.698, 15.038, -3.717)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.502, (2.384, -11.433, -21.594)), (' A 466  GLN  O  ', ' A 470 BARG  HG2', -0.491, (-3.449, 0.07, -30.468)), (' A 248  HIS  HE1', ' A 494  GLY  O  ', -0.488, (5.132, -11.845, -43.265)), (' A 233  LEU HD11', ' A 521  ILE HD11', -0.482, (6.491, 5.564, -28.172)), (' A 470 BARG  HB2', ' A 476  ILE HD12', -0.465, (-5.936, -2.122, -29.877)), (' A  96  GLY  HA3', ' A 122  LEU HD21', -0.462, (-0.585, 10.953, -3.678)), (' A 463  LEU  CD1', ' A 489  ARG  HA ', -0.455, (1.608, -8.018, -35.346)), (' A 560  GLN HE21', ' A 564  THR HG23', -0.452, (31.063, 11.87, -18.865)), (' A 326  LEU  O  ', ' A 559  GLY  HA3', -0.447, (34.217, 4.217, -20.216)), (' A 138  ILE  CD1', ' A 199  LYS  HG3', -0.446, (-9.769, -6.941, -11.867)), (' A 574  TRP  N  ', ' A 575  PRO  CD ', -0.436, (14.54, 14.759, -23.341)), (' A 195  GLN  NE2', ' A2121  HOH  O  ', -0.434, (-7.916, -18.44, -14.774)), (' A 233  LEU HD11', ' A 521  ILE  CD1', -0.424, (6.015, 5.341, -28.535)), (' A 448  MET  HE1', ' A 603  LEU HD21', -0.422, (18.718, -10.886, -45.692)), (' A 101  LYS  HE2', ' A2049  HOH  O  ', -0.414, (-4.523, 17.64, -1.249)), (' A 441  GLU  HG3', ' A2292  HOH  O  ', -0.406, (33.2, -13.89, -49.766)), (' A 267  GLU  HB2', ' A 618  GLN  OE1', -0.404, (0.908, -14.252, -53.019)), (' A 507  ASP  N  ', ' A 508  PRO  CD ', -0.403, (-3.659, -13.284, -27.302))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
