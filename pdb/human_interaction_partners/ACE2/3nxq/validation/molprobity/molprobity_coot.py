# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  45 ', 'ASN', 0.03476226551636144, (15.43799999999999, 18.379, 32.3))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (5.749000000000009, -7.510000000000001, -34.723)), ('A', ' 608 ', 'PRO', None, (12.43500000000001, 14.533, -28.408)), ('B', ' 141 ', 'PRO', None, (10.957999999999995, 27.374000000000006, 20.03)), ('B', ' 608 ', 'PRO', None, (22.136000000000003, 26.389999999999997, -0.681))]
data['rota'] = [('A', ' 147 ', 'LEU', 0.13188993389967693, (13.343000000000014, -3.384, -27.2)), ('A', ' 209 ', 'ASP', 0.1013375510580364, (-0.4030000000000018, -14.813, 2.8519999999999994)), ('A', ' 279 ', 'VAL', 0.03780638799071312, (20.89800000000001, -20.080000000000002, -29.552000000000003)), ('A', ' 352 ', 'THR', 0.026573499603270857, (14.107000000000001, -16.685, -31.569)), ('A', ' 368 ', 'TYR', 0.2812755421096451, (-3.6119999999999948, -30.469999999999995, -21.393000000000004)), ('A', ' 372 ', 'TYR', 0.07769315434984317, (-8.755999999999991, -34.122, -20.527)), ('A', ' 377 ', 'VAL', 0.20376441669144874, (-16.946999999999992, -30.069999999999993, -19.734)), ('A', ' 388 ', 'HIS', 0.1503158386361409, (-2.048999999999995, -24.972, -16.979)), ('A', ' 560 ', 'VAL', 0.10325746448025665, (5.410000000000001, -34.026, -5.986)), ('A', ' 582 ', 'GLN', 0.21378795959253977, (25.993000000000002, -12.815999999999997, -3.689)), ('A', ' 609 ', 'GLU', 0.13643779522538832, (13.818000000000016, 13.46, -32.254)), ('B', '  96 ', 'ARG', 0.015264100573995345, (-2.380000000000008, -10.777000000000001, 31.394)), ('B', ' 147 ', 'LEU', 0.08308918772934605, (7.369, 27.873, 9.193)), ('B', ' 151 ', 'ARG', 0.10004781144775242, (6.904999999999999, 33.797, 3.24)), ('B', ' 203 ', 'ASN', 0.06770581361845657, (-12.58, -2.949, 20.318000000000005)), ('B', ' 262 ', 'GLU', 0.04733986414560758, (-3.9890000000000017, 27.895999999999994, 10.096)), ('B', ' 326 ', 'ARG', 0.03438666868591798, (18.483999999999995, 23.336999999999993, 30.385000000000005)), ('B', ' 368 ', 'TYR', 0.27036365735182294, (-10.444, 13.852999999999998, 32.286)), ('B', ' 372 ', 'TYR', 0.10493420492282625, (-12.013000000000016, 9.711, 36.855)), ('B', ' 377 ', 'VAL', 0.22010934120680337, (-6.348000000000006, 2.503, 38.241)), ('B', ' 388 ', 'HIS', 0.166978717428704, (-9.159000000000008, 11.736999999999998, 25.512)), ('B', ' 421 ', 'ASP', 0.22230197892588138, (-18.964000000000002, 33.465, 8.086)), ('B', ' 560 ', 'VAL', 0.058719366413198366, (-24.742000000000008, 11.356999999999998, 21.073)), ('B', ' 570 ', 'LEU', 0.019463377685764328, (-18.43, 17.502, 10.805)), ('B', ' 598 ', 'GLN', 0.2785642459737764, (5.452000000000003, 12.692, -9.818))]
data['cbeta'] = []
data['probe'] = [(' A 352  THR HG22', ' A 355  GLN  H  ', -0.89, (12.0, -16.589, -29.534)), (' B  69  GLY  HA3', ' B  98 BLEU HD21', -0.865, (1.474, -10.037, 32.734)), (' A 236  ARG  HD2', ' A 267  MET  HE3', -0.849, (26.327, -3.577, -21.661)), (' B 518  GLU  HG3', ' B 539  LYS  HD2', -0.742, (-26.064, 16.604, 25.836)), (' B 350  ARG  H  ', ' B 355  GLN HE21', -0.733, (2.642, 28.833, 23.039)), (' B 489  LYS  HZ1', ' B 700  RX4 HAD2', -0.655, (1.696, 15.979, 15.734)), (' B 380  ARG  O  ', ' B 381  ARG  HD2', -0.65, (-6.259, 6.363, 31.622)), (' A 391  ILE  O  ', ' A 394 BVAL HG12', -0.631, (5.648, -28.864, -18.819)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.623, (11.18, 8.68, -22.374)), (' A  25  GLN HE21', ' A 378  SER  H  ', -0.615, (-18.442, -30.59, -17.195)), (' A  17  ALA  HB1', ' A  92  ILE  CD1', -0.612, (-26.612, -30.026, -7.944)), (' B 303  SER  HB2', ' B 532  ARG  HG2', -0.595, (-19.616, 29.826, 31.719)), (' B 201  TRP  HZ3', ' B 497  PRO  HG2', -0.591, (-1.884, 4.047, 20.927)), (' B 489  LYS  NZ ', ' B 700  RX4 HAD2', -0.59, (2.183, 16.534, 15.424)), (' B  25  GLN HE21', ' B 378  SER  H  ', -0.588, (-7.261, -0.733, 37.479)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.584, (13.966, 21.723, -0.273)), (' A 279  VAL HG11', ' A 410  LEU HD13', -0.564, (18.304, -23.029, -30.468)), (' A 402  PRO  HB2', ' A 414  VAL HG11', -0.564, (25.985, -27.625, -22.602)), (' B 260  SER  OG ', ' B 262  GLU  OE1', -0.564, (-3.539, 24.459, 12.208)), (' A 201  TRP  HZ3', ' A 497  PRO  HG2', -0.559, (-8.544, -15.969, -13.51)), (' A 117  GLN  HG2', ' A 120 AARG HH22', -0.555, (-14.804, 0.167, -29.9)), (' A 489  LYS  HZ1', ' A 700  RX4 HAD2', -0.543, (3.303, -10.696, -20.556)), (' A 201  TRP  CZ3', ' A 497  PRO  HG2', -0.542, (-8.824, -15.416, -13.818)), (' A 412  ASP  O  ', ' A 413  ARG  C  ', -0.537, (29.412, -28.285, -27.064)), (' A  66  GLU  CD ', ' A 108  ARG HH22', -0.537, (-30.026, -12.807, -17.954)), (' A 236  ARG  CD ', ' A 267  MET  HE3', -0.534, (26.172, -3.569, -21.867)), (' B 539  LYS  HE3', ' B 559  MET  O  ', -0.529, (-25.055, 13.667, 23.963)), (' A 147  LEU HD22', ' A 256  MET  HA ', -0.528, (9.97, -2.7, -24.199)), (' A  17  ALA  HB1', ' A  92  ILE HD11', -0.524, (-26.577, -30.228, -8.16)), (' A 510  GLN  HG2', ' A 569  PRO  HG2', -0.522, (8.779, -27.838, -5.815)), (' A 270  PRO  HD3', ' A 426  LEU HD22', -0.52, (25.958, -14.004, -16.014)), (' B 495  VAL  O  ', ' B 495  VAL HG12', -0.52, (5.42, 4.095, 21.421)), (' A 489  LYS  O  ', ' A 493  PRO  HD2', -0.515, (-3.012, -5.232, -21.031)), (' A 380  ARG  O  ', ' A 381  ARG  HD2', -0.514, (-10.75, -25.842, -19.225)), (' A 352  THR  CG2', ' A 354  ASP  OD2', -0.504, (13.281, -14.717, -28.646)), (' A 477  VAL HG12', ' A 603  LEU HD21', -0.5, (11.311, 11.439, -21.513)), (' B 296  VAL HG22', ' B 709  P6G H152', -0.499, (-9.969, 34.318, 30.512)), (' B 233  LEU HD23', ' B 267  MET  HE1', -0.497, (1.049, 30.833, -0.242)), (' A 489  LYS  NZ ', ' A 700  RX4 HAD2', -0.492, (3.177, -10.185, -20.586)), (' B 478  THR  HB ', ' B 631  FUC  H4 ', -0.492, (17.969, 15.586, -3.526)), (' B 147  LEU HD22', ' B 256  MET  HA ', -0.486, (6.946, 23.197, 8.57)), (' B 201  TRP  CZ3', ' B 497  PRO  HG2', -0.481, (-1.801, 3.228, 21.226)), (' A 402  PRO  CB ', ' A 414  VAL HG11', -0.479, (25.549, -27.3, -22.58)), (' B 513  GLU  HA ', ' B 525  LEU HD11', -0.476, (-23.738, 20.796, 16.956)), (' A 172  LYS  O  ', ' A 176  GLU  HG3', -0.475, (-10.658, 4.117, -17.309)), (' A 352  THR HG21', ' A 354  ASP  OD2', -0.473, (13.158, -14.278, -28.303)), (' A 126  LYS  NZ ', ' A 327  GLU  OE2', -0.463, (-2.449, -2.386, -36.487)), (' B  31  VAL  O  ', ' B  34  GLN  HG3', -0.455, (6.247, 3.408, 39.455)), (' A 390  ALA  O  ', ' A 394 AVAL HG23', -0.454, (5.879, -26.96, -16.404)), (' B 510  GLN  HG2', ' B 569  PRO  HG2', -0.453, (-21.244, 13.163, 15.071)), (' B  54  GLN  NE2', ' B 829  HOH  O  ', -0.446, (13.667, 5.102, 28.929)), (' B 141  PRO  HB3', ' B 350  ARG  HD3', -0.443, (8.375, 29.402, 20.423)), (' A 245  ARG  HG2', ' A 591  VAL HG11', -0.438, (23.486, 1.811, -4.047)), (' A 233  LEU HD23', ' A 267  MET  HE1', -0.435, (23.159, -2.794, -20.43)), (' B 390  ALA  O  ', ' B 394  VAL HG23', -0.434, (-13.748, 17.653, 22.029)), (' B 631  FUC  H5 ', ' B 706  HOH  O  ', -0.427, (18.937, 16.49, -0.946)), (' B 194  THR  HB ', ' B 450  PHE  CD2', -0.426, (4.425, -2.641, 16.701)), (' A 155  MET  HA ', ' A 155  MET  HE3', -0.423, (14.027, 5.001, -30.935)), (' B 389  GLU  HB2', ' B 504  SER  HB2', -0.422, (-8.384, 12.673, 20.074)), (' A 124  THR HG22', ' A 327  GLU  HG2', -0.421, (-5.805, -4.392, -35.378)), (' B 498  TYR  OH ', ' B 700  RX4  NAD', -0.421, (0.023, 15.385, 15.409)), (' A 607  TYR  HA ', ' A 608  PRO  HA ', -0.418, (14.13, 12.845, -28.035)), (' B 598  GLN  NE2', ' B 779  HOH  O  ', -0.416, (5.747, 8.218, -12.936)), (' B 489  LYS  O  ', ' B 493  PRO  HD2', -0.415, (8.253, 11.404, 15.682)), (' A 379  LEU HD22', ' A 549  SER  HA ', -0.411, (-13.438, -32.516, -11.944)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.411, (11.733, 22.479, -0.404)), (' B 580  TRP  O  ', ' B 584  GLN  HG2', -0.409, (-15.959, 28.898, -3.171)), (' A 700  RX4  HBF', ' A 700  RX4 HAA1', -0.405, (-5.843, -18.536, -21.231)), (' A 157  LEU HD13', ' A 476  PRO  HB2', -0.404, (12.729, 6.784, -20.964))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
