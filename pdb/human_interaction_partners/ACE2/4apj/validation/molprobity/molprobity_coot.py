# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'PRO', 0.09441417137063932, (-0.9019999999999999, -37.906, -22.768)), ('A', ' 348 ', 'ARG', 0.038456161713280784, (13.020999999999997, -25.690999999999995, -4.755))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (13.151999999999996, -24.171999999999993, -19.398))]
data['rota'] = [('A', ' 104 ', 'VAL', 0.08337335380981417, (4.425, 22.682, -9.827)), ('A', ' 107 ', 'LEU', 0.21155800333273073, (8.734, 26.475, -8.786999999999997)), ('A', ' 122 ', 'LEU', 0.14467267341414403, (0.2779999999999999, 7.679999999999999, -7.189)), ('A', ' 231 ', 'GLN', 0.2251921467787569, (4.003, 9.898, -34.724)), ('A', ' 313 ', 'ARG', 0.24175877199217466, (29.154, -17.421, -12.78)), ('A', ' 394 ', 'TYR', 0.21972531597072528, (23.11199999999999, 7.164999999999997, -10.865999999999998))]
data['cbeta'] = []
data['probe'] = [(' A 411  GLU  HB3', ' A1635  ACT  H1 ', -0.813, (16.3, -3.342, -23.77)), (' A 455  ILE HD13', ' A 592  MET  HE2', -0.635, (17.233, -3.593, -37.943)), (' A 391  PHE  HD1', ' A 394  TYR  HH ', -0.588, (19.401, 1.581, -12.007)), (' A 448  MET  HE1', ' A 603  LEU HD21', -0.565, (19.29, -11.835, -46.356)), (' A 351  VAL  O  ', ' A 368  LYS  HE3', -0.542, (13.513, -15.384, -10.706)), (' A 449  LYS  HE2', ' A1629  PE4  H61', -0.534, (21.79, -14.74, -32.453)), (' A 412  ALA  O  ', ' A 416  VAL HG23', -0.527, (22.755, 0.112, -25.674)), (' A 463  LEU HD11', ' A 489  ARG  HA ', -0.518, (1.82, -8.902, -35.371)), (' A 189  ALA  O  ', ' A 193  ILE HG12', -0.512, (-2.778, -17.373, -19.749)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.508, (2.107, -11.815, -21.151)), (' A  96  GLY  HA3', ' A 122  LEU HD22', -0.502, (0.558, 10.312, -4.346)), (' A 394  TYR  HB2', ' A 397  LEU HD12', -0.497, (20.894, 9.243, -11.441)), (' A 124  ARG  NH2', ' A2018  HOH  O  ', -0.492, (2.874, -2.286, -10.605)), (' A 457  PHE  CE2', ' A 461  SER  HB3', -0.489, (10.868, -5.188, -29.648)), (' A 301  THR HG23', ' A 432  LEU  HB3', -0.473, (31.234, -18.601, -29.286)), (' A 343  LYS  HB3', ' A 370  CYS  SG ', -0.471, (16.993, -21.191, -11.712)), (' A 493  GLN  HB3', ' A 495  LEU  HG ', -0.464, (5.092, -11.135, -37.991)), (' A 468  ARG  NH2', ' A 513  HIS  O  ', -0.455, (2.663, -6.669, -20.118)), (' A 348  ARG  HG2', ' A 349  GLU  H  ', -0.443, (10.951, -25.216, -6.407)), (' A 562  LEU  HB3', ' A 566  MET  HE2', -0.439, (27.285, 4.34, -19.885)), (' A  73  ILE  HB ', ' A 349  GLU  HB3', -0.439, (8.913, -21.367, -3.883)), (' A 179  LEU HD11', ' A 499  VAL HG23', -0.435, (-1.572, -25.212, -35.683)), (' A 250  TYR  CZ ', ' A1631  PE4  H62', -0.434, (18.28, -17.043, -48.46)), (' A 498  PRO  HA ', ' A 623  PRO  HG2', -0.43, (-0.54, -21.912, -40.133)), (' A 597  LYS  HB3', ' A 598  PRO  HD3', -0.428, (25.383, -0.743, -44.954)), (' A 209  ARG  HA ', ' A 213  TYR  O  ', -0.428, (-7.395, 9.522, -16.387)), (' A 477  THR  OG1', ' A 479  GLU  HG2', -0.426, (-15.553, -6.177, -27.788)), (' A 382  HIS  CD2', ' A 421  VAL HG21', -0.419, (29.416, -8.386, -23.516)), (' A 267  GLU  O  ', ' A 617  PRO  HD2', -0.414, (1.89, -12.081, -50.285)), (' A 301  THR HG21', ' A 375  LEU HD13', -0.412, (28.351, -17.193, -28.692)), (' A 138  ILE HG23', ' A 196  PHE  HB3', -0.406, (-6.91, -10.913, -13.332)), (' A 449  LYS  HG2', ' A1629  PE4  H21', -0.405, (25.419, -14.443, -35.121)), (' A 253  ARG  HG3', ' A1631  PE4  H51', -0.401, (14.521, -19.096, -50.601))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
