# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'ASN', 0.019796417918683876, (-8.840000000000007, -10.537, -38.417)), ('B', '  45 ', 'ASN', 0.01553349993358049, (15.977, 18.24, 32.09))]
data['omega'] = [('A', '  80 ', 'TRP', None, (-26.775999999999993, -26.418, -1.588)), ('A', ' 141 ', 'PRO', None, (6.011999999999997, -6.978999999999999, -35.08)), ('A', ' 608 ', 'PRO', None, (12.851, 14.695, -28.738000000000003)), ('B', ' 141 ', 'PRO', None, (11.531000000000002, 27.445, 19.832000000000004)), ('B', ' 608 ', 'PRO', None, (22.31299999999999, 26.516, -1.041))]
data['rota'] = [('A', '   9 ', 'GLN', 0.05492692639721878, (-36.64300000000001, -29.665, -15.092)), ('A', '  11 ', 'SER', 0.17843433653783713, (-35.316, -32.755, -9.101)), ('A', ' 368 ', 'TYR', 0.2921558347697832, (-3.4350000000000023, -29.92799999999999, -21.533)), ('A', ' 372 ', 'TYR', 0.09163151759122562, (-8.62, -33.423, -20.754)), ('A', ' 388 ', 'HIS', 0.1229542398482531, (-1.8220000000000027, -24.424, -17.147)), ('A', ' 403 ', 'GLU', 0.13893177831700684, (23.039, -30.687000000000005, -23.7)), ('B', ' 151 ', 'ARG', 0.29362245601008125, (7.206999999999999, 33.874, 3.067)), ('B', ' 372 ', 'TYR', 0.0399283291735924, (-11.281000000000002, 9.516999999999998, 36.775)), ('B', ' 388 ', 'HIS', 0.11458427155620463, (-8.526000000000002, 11.759, 25.479))]
data['cbeta'] = []
data['probe'] = [(' B 260  SER  OG ', ' B 262  GLU  OE1', -0.928, (-3.192, 24.004, 11.487)), (' A 365  HIS  HD1', ' A 388  HIS  HD2', -0.84, (-2.362, -24.026, -21.168)), (' B 124  THR HG22', ' B 327  GLU  HG2', -0.815, (18.884, 18.859, 24.421)), (' A 365  HIS  HD1', ' A 388  HIS  CD2', -0.799, (-2.694, -24.438, -20.85)), (' B 365  HIS  HD1', ' B 388  HIS  HD2', -0.779, (-6.133, 13.604, 26.966)), (' A 270  PRO  HD3', ' A 426  LEU HD23', -0.729, (26.295, -13.982, -17.664)), (' B 365  HIS  HD1', ' B 388  HIS  CD2', -0.728, (-5.747, 13.24, 27.056)), (' A 467  ARG HH11', ' A 471  GLN HE22', -0.719, (7.391, -3.924, -14.968)), (' A 137  TRP  CH2', ' A 155  MET  HE1', -0.684, (12.598, 3.702, -34.806)), (' A  12  ALA  O  ', ' A2005  HOH  O  ', -0.678, (-34.186, -30.676, -3.603)), (' A  14  GLU  HG2', ' A  83  PHE  CD1', -0.663, (-25.858, -32.814, -4.616)), (' B 350  ARG  H  ', ' B 355  GLN HE21', -0.644, (3.08, 28.429, 22.762)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.636, (11.513, 8.706, -22.446)), (' A 596  GLU  OE2', ' B1100  NAG  O7 ', -0.634, (22.714, 7.965, -3.252)), (' A 187  LYS  HE2', ' A 192  THR  O  ', -0.63, (-17.332, -5.781, -4.928)), (' A 206  THR HG23', ' A 210  ASP  OD2', -0.625, (-1.943, -20.201, 1.479)), (' A 137  TRP  CZ3', ' A 155  MET  HE1', -0.607, (11.873, 3.288, -34.24)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.595, (13.817, 21.833, -0.52)), (' A  14  GLU  OE2', ' A  83  PHE  HA ', -0.582, (-24.597, -34.677, -2.57)), (' A 372  TYR  OH ', ' A 388  HIS  HE1', -0.574, (-6.685, -26.016, -20.161)), (' B  24  TYR  HD2', ' B  25  GLN  HG3', -0.567, (-5.059, -3.414, 39.332)), (' B 419  GLU  O  ', ' B 421  ASP  N  ', -0.564, (-18.592, 35.462, 7.321)), (' A  79  ILE HD12', ' A  80  TRP  HA ', -0.56, (-27.664, -28.262, -2.964)), (' B 124  THR HG22', ' B 327  GLU  CG ', -0.558, (18.31, 19.137, 24.2)), (' B  49  GLU  OE2', ' B  52  ARG  NH2', -0.531, (21.875, 7.869, 38.14)), (' A 467  ARG  NH1', ' A 471  GLN HE22', -0.525, (7.681, -3.95, -15.059)), (' A1205  P6G  H31', ' A2124  HOH  O  ', -0.51, (-6.646, -20.941, -18.017)), (' A  84  THR  HB ', ' A2006  HOH  O  ', -0.507, (-22.841, -38.996, -3.649)), (' A1205  P6G  H81', ' A2358  HOH  O  ', -0.502, (-3.498, -16.893, -20.236)), (' A1100  NAG  O7 ', ' B 596  GLU  OE2', -0.498, (-0.311, 18.024, -16.266)), (' A 157  LEU HD13', ' A 476  PRO  HB2', -0.494, (13.435, 6.714, -21.186)), (' B 560  VAL  CG2', ' B2313  HOH  O  ', -0.492, (-23.214, 13.796, 18.074)), (' B 271  PHE  CE2', ' B 419  GLU  HG2', -0.492, (-16.323, 37.423, 1.929)), (' A 572  LYS  HD2', ' A1201  PEG  H11', -0.481, (17.026, -29.563, -4.083)), (' B  17  ALA  HB1', ' B  92  ILE HD11', -0.479, (-9.682, -11.639, 38.299)), (' A 436  LEU  N  ', ' A 437  PRO  HD2', -0.479, (10.53, -11.545, -11.589)), (' A  76  TYR  HB3', ' A  80  TRP  HB3', -0.479, (-27.518, -25.885, -4.595)), (' B  31  VAL  O  ', ' B  34  GLN  HG3', -0.475, (6.805, 3.133, 39.398)), (' B   1  LEU HD23', ' B   6  GLN  HG2', -0.468, (7.493, -8.689, 42.637)), (' A 232  ALA  HB2', ' A1204  PEG  H22', -0.453, (26.973, -6.406, -16.309)), (' B 578  THR  O  ', ' B 582  GLN  HG3', -0.45, (-17.533, 22.991, -1.889)), (' B 510  GLN  HG2', ' B 569  PRO  HG2', -0.448, (-20.321, 13.434, 15.151)), (' A 117 AGLN  NE2', ' A2050  HOH  O  ', -0.445, (-16.457, -2.418, -30.966)), (' B 124  THR  CG2', ' B 327  GLU  HG2', -0.443, (18.846, 17.875, 24.358)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.427, (12.15, 22.958, -0.479)), (' B 232  ALA  CB ', ' B 268  VAL HG12', -0.427, (-3.891, 30.922, -0.657)), (' A  30  GLN  NE2', ' A2018  HOH  O  ', -0.426, (-25.757, -27.679, -29.586)), (' B 372  TYR  OH ', ' B 388  HIS  HE1', -0.426, (-6.482, 9.705, 31.293)), (' A  83  PHE  HB2', ' A  89  ARG  CG ', -0.419, (-21.546, -31.705, -4.391)), (' A 269  VAL  HA ', ' A 270  PRO  HD3', -0.417, (26.478, -13.901, -18.611)), (' B 324  ASP  OD1', ' B 326  ARG  HB2', -0.415, (17.143, 25.187, 31.9)), (' A  79  ILE  O  ', ' A  82  GLN  OE1', -0.413, (-25.507, -28.103, 0.498)), (' A 489  LYS  O  ', ' A 493  PRO  HD2', -0.413, (-2.711, -4.902, -21.009)), (' B 140  ASP  HA ', ' B 141  PRO  HA ', -0.413, (9.857, 26.444, 18.33)), (' A 495  VAL  O  ', ' A 495  VAL HG12', -0.411, (-10.117, -10.487, -17.864)), (' A 146  ILE HD13', ' A 155  MET  CE ', -0.405, (12.538, 1.899, -32.708)), (' A  36  VAL  HA ', ' A1205  P6G H172', -0.404, (-13.483, -18.12, -27.684))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
