# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 141 ', 'PRO', None, (-13.192000000000005, 33.842999999999996, 7.419)), ('A', ' 608 ', 'PRO', None, (-23.098, 17.042, 20.905)), ('B', ' 141 ', 'PRO', None, (-6.028000000000003, -30.831999999999997, 18.046)), ('B', ' 608 ', 'PRO', None, (-13.213999999999999, -11.997, 30.053)), ('C', ' 141 ', 'PRO', None, (18.357, -9.046000000000001, 64.307)), ('C', ' 608 ', 'PRO', None, (7.587000000000001, -25.996, 77.17)), ('D', ' 141 ', 'PRO', None, (40.092, 28.722, 76.474)), ('D', ' 608 ', 'PRO', None, (32.27700000000001, 48.18299999999999, 88.101))]
data['rota'] = [('A', '  66 ', 'GLU', 0.02598985842340353, (-8.542000000000005, 20.748000000000005, -30.460000000000004)), ('A', ' 368 ', 'TYR', 0.29313849744940007, (7.6899999999999995, 34.91199999999999, -11.796)), ('A', ' 372 ', 'TYR', 0.08415151820524594, (8.868000000000002, 35.63600000000002, -18.036)), ('A', ' 388 ', 'HIS', 0.22048603148325058, (6.999000000000001, 28.269, -8.844)), ('A', ' 421 ', 'ASP', 0.2737976875816277, (18.017, 29.905999999999995, 18.567)), ('A', ' 588 ', 'ASN', 0.17427384712350757, (11.307, 12.046, 28.817000000000004)), ('B', '  90 ', 'ARG', 0.15245691203599882, (18.439000000000007, -23.676, -16.127)), ('B', '  92 ', 'ILE', 0.1228969266680203, (23.746999999999993, -23.913, -14.004)), ('B', ' 273 ', 'ASP', 0.2301412015021855, (-35.034, -29.977, 3.139)), ('B', ' 368 ', 'TYR', 0.2905300031939732, (3.623, -36.188, -8.094)), ('B', ' 372 ', 'TYR', 0.15548687553076485, (8.897000000000004, -37.937, -11.384)), ('B', ' 388 ', 'HIS', 0.1601415205061119, (1.8600000000000005, -29.186999999999998, -7.125000000000002)), ('B', ' 591 ', 'VAL', 0.27076409260995377, (-25.131, -3.34, 0.499)), ('C', ' 188 ', 'GLN', 0.2196700802190812, (28.820000000000007, -33.529999999999994, 32.262)), ('C', ' 368 ', 'TYR', 0.2739961303615233, (40.96199999999999, -8.15, 47.025)), ('C', ' 372 ', 'TYR', 0.08360203178669505, (42.777000000000015, -7.5980000000000025, 40.932)), ('C', ' 381 ', 'ARG', 0.009415472891923559, (39.346, -14.719, 42.497)), ('C', ' 388 ', 'HIS', 0.25217635718283815, (40.01400000000002, -14.727999999999998, 50.08)), ('D', ' 368 ', 'TYR', 0.2510540670667972, (50.164, 23.457999999999995, 50.446)), ('D', ' 372 ', 'TYR', 0.08971107433119815, (55.403, 21.820999999999998, 47.174)), ('D', ' 388 ', 'HIS', 0.19108905463079562, (48.286000000000016, 30.437000000000005, 51.351))]
data['cbeta'] = [('D', ' 326 ', 'ARG', ' ', 0.26870424648162333, (51.394, 22.82, 79.918))]
data['probe'] = [(' D 723  ACT  H1 ', ' D1087  HOH  O  ', -0.711, (26.709, 44.481, 93.868)), (' D 542  LYS  NZ ', ' D 804  HOH  O  ', -0.686, (49.163, 26.87, 35.91)), (' C 542  LYS  NZ ', ' C 804  HOH  O  ', -0.671, (54.712, -13.22, 44.101)), (' C 340 BARG  O  ', ' C 341  LYS  HE2', -0.616, (36.033, 0.523, 38.104)), (' C 340 AARG  O  ', ' C 341  LYS  HE2', -0.616, (36.558, 0.11, 38.28)), (' A 381 BARG  NH1', ' A 803  HOH  O  ', -0.613, (1.262, 24.913, -13.716)), (' A 712  NAG  H3 ', ' A 712  NAG  H83', -0.613, (-27.498, 10.695, 11.501)), (' D 324  ASP  OD1', ' D 326  ARG  HB2', -0.604, (50.658, 20.809, 80.289)), (' B 554  GLU  OE2', ' B 801  HOH  O  ', -0.577, (7.386, -27.498, -24.643)), (' A  31  VAL  O  ', ' A  34  GLN  HG3', -0.564, (-9.659, 32.883, -24.01)), (' A 295  ARG  HG3', ' A 726  PE3 H381', -0.553, (0.956, 50.663, 0.334)), (' C 702  BJ2  N16', ' C 713  PEG  O1 ', -0.551, (29.056, -13.381, 48.249)), (' D 155 AMET  SD ', ' D 615  THR HG22', -0.544, (30.369, 37.253, 83.839)), (' A 726  PE3  O31', ' A 726  PE3 H392', -0.543, (-0.423, 53.246, -1.329)), (' B  73  LYS  HE3', ' B1097  HOH  O  ', -0.531, (27.974, -18.352, -8.163)), (' C  31  VAL  O  ', ' C  34  GLN  HG3', -0.51, (24.829, -10.254, 32.853)), (' B  31  VAL  O  ', ' B  34  GLN  HG3', -0.509, (21.237, -34.584, 3.004)), (' A 418  THR HG22', ' A 708  FUC  O4 ', -0.501, (23.978, 28.76, 21.025)), (' A 711  NAG  H61', ' A 713  FUC  O2 ', -0.5, (-23.852, 8.891, 12.18)), (' D 714  NAG  H61', ' D 716  FUC  O2 ', -0.493, (41.419, 54.732, 84.853)), (' A 539  LYS  HE3', ' A 559  MET  O  ', -0.491, (22.871, 29.801, -7.895)), (' B 440  TYR  O  ', ' B 444 BGLN  HG2', -0.479, (-1.739, -11.267, -2.053)), (' D  25  GLN  OE1', ' D 376  PRO  HA ', -0.464, (65.053, 23.007, 46.969)), (' A 716  PEG  H31', ' A 827  HOH  O  ', -0.463, (4.741, 9.257, -15.837)), (' D  31  VAL  O  ', ' D  34  GLN  HG3', -0.463, (67.689, 25.045, 61.872)), (' D 274  LYS  HB3', ' D 275  PRO  CD ', -0.459, (14.872, 27.41, 57.304)), (' B 611  ILE  O  ', ' B 612  ASP  HB2', -0.455, (-16.26, -21.101, 31.561)), (' A 723  EDO  H22', ' A1009  HOH  O  ', -0.452, (-1.509, 28.562, -12.187)), (' C 580  TRP  O  ', ' C 584  GLN  HG2', -0.452, (45.377, -23.908, 83.148)), (' B  92  ILE  CD1', ' B  92  ILE  N  ', -0.452, (23.646, -25.629, -15.065)), (' B 235  ARG HH11', ' B 726  PG4  C6 ', -0.441, (-31.033, -15.812, 5.607)), (' A 541  ARG  HG2', ' A 545  ARG  HD2', -0.44, (16.028, 38.513, -15.124)), (' B 274  LYS  HB3', ' B 275  PRO  CD ', -0.436, (-31.197, -32.412, -1.062)), (' C 157  LEU HD11', ' C 477  VAL HG13', -0.435, (15.864, -28.382, 73.488)), (' C 713  PEG  H31', ' C1234  HOH  O  ', -0.434, (28.064, -14.869, 45.922)), (' C 495  VAL  O  ', ' C 495  VAL HG12', -0.432, (26.508, -22.899, 46.763)), (' C  46  ILE HG22', ' C 714  PEG  H31', -0.429, (10.822, -12.642, 48.853)), (' B  73  LYS  HG3', ' B1097  HOH  O  ', -0.428, (28.206, -18.9, -9.005)), (' D 210  ASP  OD2', ' D 801  HOH  O  ', -0.427, (48.22, 46.157, 42.101)), (' A 524  PRO  HB3', ' A 719  EDO  H12', -0.426, (24.035, 28.514, 12.718)), (' D 380  ARG  O  ', ' D 381 AARG  HD2', -0.425, (57.838, 28.576, 51.573)), (' D 716  FUC  C1 ', ' D 716  FUC  O4 ', -0.423, (39.258, 55.363, 82.621)), (' B 235  ARG HH11', ' B 726  PG4  H62', -0.422, (-31.41, -16.094, 5.931)), (' B  92  ILE  N  ', ' B  92  ILE HD12', -0.42, (23.618, -25.854, -14.58)), (' A 233  LEU HD23', ' A 267 BMET  HE1', -0.417, (-1.771, 21.006, 22.716)), (' A 390  ALA  O  ', ' A 394  VAL HG23', -0.415, (11.668, 29.901, -2.143)), (' A 500  ARG HH12', ' A 723  EDO  C1 ', -0.414, (-0.712, 24.746, -10.779)), (' D 495  VAL  O  ', ' D 495  VAL HG12', -0.414, (56.322, 39.782, 62.368)), (' A 495  VAL  O  ', ' A 495  VAL HG12', -0.413, (-6.996, 19.811, -11.233)), (' A 291  THR HG21', ' A 726  PE3 H391', -0.412, (-1.909, 51.268, 0.373)), (' A 478  THR  HB ', ' A 713  FUC  H63', -0.41, (-18.929, 7.087, 13.704)), (' D 389  GLU  HB2', ' D 504  SER  HB2', -0.407, (44.355, 34.579, 52.422)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.407, (-11.698, -10.48, 21.029)), (' A 489  LYS  O  ', ' A 493  PRO  HD2', -0.406, (-10.127, 20.013, -1.876)), (' D 292  HIS  HD2', ' D1316  HOH  O  ', -0.405, (34.66, 9.793, 64.207)), (' C 389  GLU  HB2', ' C 504  SER  HB2', -0.404, (39.72, -18.318, 54.58)), (' A 726  PE3 H271', ' A 726  PE3 H382', -0.404, (-1.025, 52.966, 1.889)), (' B 268  VAL HG23', ' B 426  LEU HD11', -0.402, (-24.199, -21.701, 2.315)), (' A 102  ASN  HB3', ' A 188  GLN  HG3', -0.402, (-9.293, 11.965, -25.815)), (' A 207  PHE  HB3', ' A 716  PEG  H12', -0.4, (7.9, 10.504, -11.599))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
