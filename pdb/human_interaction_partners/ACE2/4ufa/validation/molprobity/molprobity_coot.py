# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'ASN', 0.038121040549440204, (-8.731000000000009, -10.565999999999999, -38.445)), ('B', '  45 ', 'ASN', 0.03149923660918404, (15.894000000000002, 18.326, 32.037)), ('B', ' 134 ', 'ALA', 0.04425780290408773, (27.364, 31.479, 14.165000000000001)), ('B', ' 575 ', 'GLN', 0.03426069606424616, (-21.355, 22.695, 5.204))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (6.032, -6.98, -35.001)), ('A', ' 608 ', 'PRO', None, (12.90999999999999, 14.628999999999996, -29.109)), ('A', '1302 ', 'ASP', None, (4.482999999999995, -15.352, -19.531)), ('B', ' 141 ', 'PRO', None, (11.536, 27.514999999999993, 19.784)), ('B', ' 608 ', 'PRO', None, (22.403000000000002, 26.8, -0.8310000000000001)), ('B', '1302 ', 'ASP', None, (-2.5029999999999983, 17.093999999999994, 17.595))]
data['rota'] = [('A', '   2 ', 'ASP', 0.028421755080434655, (-32.537, -21.468, -28.692000000000004)), ('A', ' 187 ', 'LYS', 0.0013083510782750057, (-20.885999999999992, -8.61, -6.440000000000001)), ('A', ' 262 ', 'GLU', 0.08794538405215256, (17.229999999999997, -12.470000000000002, -21.706)), ('A', ' 291 ', 'THR', 0.2317827126427636, (6.967999999999986, -24.282999999999998, -38.734)), ('A', ' 326 ', 'ARG', 0.2068676921145744, (-4.576000000000008, -7.4819999999999975, -41.904)), ('A', ' 368 ', 'TYR', 0.2679342083280368, (-3.477000000000002, -29.917000000000005, -21.484)), ('A', ' 372 ', 'TYR', 0.034399378504078516, (-8.603000000000009, -33.425, -20.696)), ('A', ' 377 ', 'VAL', 0.04598670317365458, (-16.775000000000006, -28.93, -20.038)), ('A', ' 535 ', 'LYS', 0.2276546057556477, (8.277999999999988, -42.367, -17.279)), ('B', '  60 ', 'LEU', 0.07196138913954343, (11.137, -1.7759999999999998, 37.675)), ('B', ' 260 ', 'SER', 0.21210448357180528, (-2.1740000000000004, 22.265, 10.209999999999999)), ('B', ' 341 ', 'LYS', 3.285468417791289e-05, (-2.790999999999997, 14.318999999999994, 43.516)), ('B', ' 368 ', 'TYR', 0.2540156948885889, (-9.846999999999987, 13.671999999999999, 32.143)), ('B', ' 372 ', 'TYR', 0.015620604759856655, (-11.32, 9.544999999999998, 36.686)), ('B', ' 377 ', 'VAL', 0.15108124896030742, (-5.524000000000001, 2.278, 37.692)), ('B', ' 388 ', 'HIS', 0.22072596789141827, (-8.619999999999996, 11.579, 25.41))]
data['cbeta'] = [('A', ' 291 ', 'THR', ' ', 0.274754472452783, (6.4040000000000035, -24.673, -40.128)), ('A', ' 408 ', 'ILE', ' ', 0.2556924703663868, (17.599999999999987, -29.989, -31.3)), ('B', ' 495 ', 'VAL', ' ', 0.2627391086399865, (7.402000000000004, 4.924999999999999, 20.867))]
data['probe'] = [(' B 365  HIS  HD1', ' B 388  HIS  HD2', -0.889, (-6.568, 13.266, 27.58)), (' B 259  GLN  NE2', ' B1302  ASP  HB2', -0.883, (-0.556, 18.557, 14.069)), (' B 259  GLN HE21', ' B1302  ASP  HB2', -0.854, (-0.49, 18.805, 14.08)), (' A 467  ARG HH11', ' A 471  GLN HE22', -0.8, (7.982, -3.879, -14.416)), (' A1301  SAC  HA ', ' A1302  ASP  OXT', -0.783, (3.886, -13.532, -22.112)), (' A 259  GLN  NE2', ' A1302  ASP  HB2', -0.779, (6.077, -11.883, -20.512)), (' B 365  HIS  HD1', ' B 388  HIS  CD2', -0.777, (-5.98, 12.644, 27.083)), (' B 350  ARG  H  ', ' B 355  GLN HE21', -0.772, (2.972, 28.211, 22.786)), (' A 259  GLN HE21', ' A1302  ASP  HB2', -0.748, (6.519, -12.387, -20.453)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.744, (11.034, 9.147, -22.307)), (' B1301  SAC  HA ', ' B1302  ASP  OXT', -0.72, (-0.476, 17.881, 18.124)), (' B 233  LEU HD23', ' B 267  MET  HE1', -0.676, (0.692, 30.853, -0.41)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.657, (14.72, 21.81, -0.792)), (' B 522  GLU  OE1', ' B1106  BMA  H5 ', -0.585, (-34.523, 26.074, 17.776)), (' A 245  ARG  HG2', ' A 591  VAL HG11', -0.584, (23.55, 2.409, -4.507)), (' B   1  LEU HD23', ' B   6  GLN  HG2', -0.581, (7.466, -8.321, 42.664)), (' A  83  PHE  HB2', ' A  89  ARG  HG2', -0.572, (-21.65, -31.013, -4.608)), (' A1301  SAC  HB3', ' A2301  HOH  O  ', -0.566, (0.36, -17.019, -21.743)), (' B1301  SAC  HB3', ' B2234  HOH  O  ', -0.562, (-0.904, 15.125, 21.657)), (' A1301  SAC  HA ', ' A1302  ASP  C  ', -0.549, (3.43, -13.669, -21.13)), (' A 213 BHIS  HD2', ' A2196  HOH  O  ', -0.53, (7.266, -19.873, 1.911)), (' B  17  ALA  HB1', ' B  92  ILE HD11', -0.527, (-10.299, -11.434, 37.751)), (' A 206  THR HG23', ' A 210  ASP  OD2', -0.52, (-2.205, -20.302, 2.074)), (' A 467  ARG  NH1', ' A 471  GLN HE22', -0.511, (7.754, -3.674, -14.929)), (' B 372  TYR  HB2', ' B 375  LEU HD12', -0.51, (-11.596, 6.665, 35.326)), (' B 106  ALA  HB1', ' B2056  HOH  O  ', -0.505, (21.45, -7.699, 26.614)), (' B  91  ILE  O  ', ' B  95  VAL HG23', -0.5, (-5.475, -6.487, 34.462)), (' A  90  ARG  NH2', ' A2064  HOH  O  ', -0.499, (-9.674, -28.012, -9.429)), (' B1301  SAC  HA ', ' B1302  ASP  C  ', -0.497, (0.007, 17.417, 17.867)), (' B 501  TYR  CE1', ' B1301  SAC  HB2', -0.492, (-1.964, 14.652, 19.293)), (' A 501  TYR  CE1', ' A1301  SAC  HB2', -0.484, (1.496, -16.17, -19.435)), (' B  66  GLU  CD ', ' B 108  ARG HH22', -0.482, (10.089, -10.711, 33.503)), (' A 489  LYS  O  ', ' A 493  PRO  HD2', -0.462, (-2.641, -4.98, -21.022)), (' B 510  GLN  HG2', ' B 569  PRO  HG2', -0.462, (-20.837, 13.373, 14.962)), (' B 350  ARG  H  ', ' B 355  GLN  NE2', -0.46, (3.414, 27.961, 22.776)), (' A 157  LEU HD13', ' A 476  PRO  HB2', -0.456, (13.296, 6.798, -21.12)), (' B  36  VAL HG22', ' B1204  P6G  H31', -0.441, (3.573, 8.254, 33.516)), (' A  66  GLU  CD ', ' A 108  ARG HH22', -0.436, (-29.883, -13.134, -17.981)), (' B 607  TYR  HA ', ' B 608  PRO  HA ', -0.433, (20.714, 28.614, -1.443)), (' A 245  ARG  HG2', ' A 591  VAL  CG1', -0.432, (23.648, 1.82, -4.42)), (' A 140  ASP  HA ', ' A 141  PRO  HA ', -0.429, (7.002, -7.628, -32.879)), (' B  25  GLN HE21', ' B 378  SER  H  ', -0.429, (-6.498, -0.463, 36.805)), (' A 479  ARG  H  ', ' B 598  GLN  NE2', -0.428, (6.457, 10.457, -14.723)), (' B 172  LYS  O  ', ' B 176  GLU  HG3', -0.425, (16.652, 2.632, 11.763)), (' A 607  TYR  HA ', ' A 608  PRO  HA ', -0.424, (15.029, 13.434, -29.332)), (' B 387  PHE  CD1', ' B 507  LEU HD21', -0.42, (-13.849, 8.921, 21.839)), (' A 274  LYS  HB3', ' A 275  PRO  CD ', -0.418, (31.292, -21.652, -22.729)), (' B 372  TYR  OH ', ' B 388  HIS  HE1', -0.41, (-6.712, 9.909, 30.9)), (' B 349  THR  HA ', ' B 355  GLN  NE2', -0.409, (3.247, 27.226, 23.748)), (' A 194  THR  HB ', ' A 450  PHE  CD1', -0.406, (-12.273, -6.703, -10.529)), (' B 140  ASP  HA ', ' B 141  PRO  HA ', -0.4, (9.796, 26.536, 18.354))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
