# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'ASN', 0.027671418379292143, (-17.111, 35.908, -9.078)), ('A', ' 324 ', 'ASP', 0.004521162543660244, (-20.371000000000002, 42.928, -1.67)), ('B', '  45 ', 'ASN', 0.026978441463833117, (-49.08400000000001, 78.20099999999996, -64.772)), ('D', '  45 ', 'ASN', 0.023616752573164795, (-22.60800000000001, 6.971, -39.729)), ('D', '  81 ', 'GLN', 0.010273473282745147, (-8.817, 22.284, -77.541)), ('D', '  83 ', 'PHE', 0.00028258199999999997, (-9.564000000000004, 18.775999999999996, -83.32800000000002)), ('D', '  84 ', 'THR', 0.014569046574938014, (-10.080000000000004, 15.1, -83.838))]
data['omega'] = [('A', ' 141 ', 'PRO', None, (-13.496000000000013, 33.376999999999995, 6.215)), ('A', ' 326 ', 'ARG', None, (-20.627000000000006, 38.762, -3.696)), ('A', ' 608 ', 'PRO', None, (-24.666, 16.783, 19.043)), ('B', ' 141 ', 'PRO', None, (-44.05599999999999, 75.287, -50.165)), ('B', ' 608 ', 'PRO', None, (-54.51600000000001, 58.312, -36.805)), ('C', ' 141 ', 'PRO', None, (8.511999999999997, 70.07399999999997, 18.289)), ('C', ' 608 ', 'PRO', None, (0.7579999999999951, 88.878, 30.076)), ('D', '  83 ', 'PHE', None, (-8.48, 19.672999999999995, -82.84300000000003)), ('D', '  84 ', 'THR', None, (-9.356000000000002, 16.363999999999997, -83.551)), ('D', ' 141 ', 'PRO', None, (-37.69, 11.34, -39.527)), ('D', ' 608 ', 'PRO', None, (-44.902, 29.726, -27.43))]
data['rota'] = [('A', ' 285 ', 'GLN', 0.07743837891355568, (-2.7460000000000004, 47.18499999999999, 16.941)), ('A', ' 372 ', 'TYR', 0.07232402780400884, (10.769999999999996, 34.385, -16.836000000000002)), ('A', ' 388 ', 'HIS', 0.19980703027674085, (7.756000000000002, 27.438, -7.743)), ('B', ' 368 ', 'TYR', 0.2781372031871645, (-23.167000000000016, 75.90499999999997, -69.109)), ('B', ' 372 ', 'TYR', 0.0751451388309698, (-22.010000000000005, 76.618, -75.20500000000001)), ('B', ' 388 ', 'HIS', 0.06494402442374247, (-24.176999999999996, 69.408, -66.045)), ('B', ' 421 ', 'ASP', 0.16496883434440782, (-13.303999999999998, 71.054, -38.766)), ('B', ' 545 ', 'ARG', 0.21319336143180279, (-17.586, 75.721, -73.904)), ('C', ' 269 ', 'VAL', 0.21279214481712333, (-12.863, 77.128, 3.9270000000000005)), ('C', ' 368 ', 'TYR', 0.29061910860430035, (18.343, 64.93, -7.666)), ('C', ' 372 ', 'TYR', 0.07814537647628128, (23.541000000000004, 63.29099999999999, -10.853)), ('C', ' 388 ', 'HIS', 0.13382269866031954, (16.57999999999999, 71.82399999999997, -6.559)), ('C', ' 414 ', 'VAL', 0.07792608061788828, (-14.963000000000012, 62.15799999999999, -4.293)), ('C', ' 598 ', 'GLN', 0.1220044910537377, (1.070999999999994, 102.12199999999997, 10.823)), ('D', '  11 ', 'SER', 0.07226796487243872, (4.006000000000002, 14.154, -76.175)), ('D', '  89 ', 'ARG', 0.0, (-11.293, 16.932999999999996, -75.43900000000001)), ('D', ' 372 ', 'TYR', 0.09081972937506357, (-22.955, 4.415, -68.74)), ('D', ' 388 ', 'HIS', 0.08100989608112623, (-29.843000000000007, 13.098000000000003, -64.336))]
data['cbeta'] = [('A', ' 443 ', 'ASP', ' ', 0.25246425198095546, (0.45899999999999913, 13.336999999999998, -4.62)), ('C', ' 492 ', 'VAL', ' ', 0.25746421660126706, (18.413000000000004, 84.698, 9.097)), ('D', ' 492 ', 'VAL', ' ', 0.265326164813272, (-27.909999999999993, 25.957000000000004, -48.7))]
data['probe'] = [(' D 365  HIS  HD1', ' D 388  HIS  HD2', -0.788, (-29.279, 11.038, -62.242)), (' B 270  PRO  HD3', ' B 426  LEU HD22', -0.739, (-21.975, 66.896, -36.463)), (' D 365  HIS  HD1', ' D 388  HIS  CD2', -0.727, (-29.107, 11.269, -62.142)), (' D 151  ARG  NH1', ' D2138  HOH  O  ', -0.719, (-56.557, 17.957, -44.15)), (' D 467  ARG HH11', ' D 471  GLN HE22', -0.718, (-39.268, 28.325, -50.641)), (' B 365  HIS  HD1', ' B 388  HIS  CD2', -0.691, (-27.131, 71.49, -66.102)), (' C 206  THR HG23', ' C 210  ASP  OD2', -0.662, (16.439, 89.158, -16.656)), (' D 354  ASP  OD2', ' D2317  HOH  O  ', -0.641, (-41.645, 12.456, -50.521)), (' D 206  THR HG23', ' D 210  ASP  OD2', -0.623, (-29.987, 30.56, -74.31)), (' B 365  HIS  HD1', ' B 388  HIS  HD2', -0.622, (-26.283, 72.15, -66.214)), (' A 157  LEU HD11', ' A 477  VAL HG13', -0.615, (-16.489, 14.308, 15.222)), (' A 206  THR HG23', ' A 210  ASP  OD2', -0.604, (15.553, 9.599, -7.998)), (' B 206  THR HG23', ' B 210  ASP  OD2', -0.596, (-17.047, 51.489, -66.785)), (' D 157  LEU HD11', ' D 477  VAL HG13', -0.578, (-43.467, 31.265, -36.776)), (' C 236  ARG  HD2', ' C 267  MET  HE3', -0.574, (-9.534, 82.255, 13.03)), (' D 270  PRO  HD3', ' D 426  LEU HD23', -0.568, (-57.511, 19.848, -56.654)), (' D 155  MET  HA ', ' D 155  MET  HE3', -0.537, (-46.42, 22.371, -33.193)), (' C 539  LYS  HE3', ' C 559  MET  O  ', -0.524, (9.346, 69.221, -20.94)), (' B 233  LEU HD23', ' B 267  MET  HE1', -0.515, (-33.142, 62.603, -34.732)), (' B 596  GLU  OE2', ' D1100  NAG  O7 ', -0.505, (-31.646, 42.332, -33.611)), (' B 157  LEU HD11', ' B 477  VAL HG13', -0.499, (-46.944, 56.6, -40.877)), (' D 372  TYR  OH ', ' D 388  HIS  HE1', -0.497, (-24.447, 9.791, -64.212)), (' C 236  ARG  CD ', ' C 267  MET  HE3', -0.49, (-10.207, 82.0, 13.474)), (' D 228  PHE  CZ ', ' D1201  P6G H142', -0.478, (-60.505, 25.033, -55.266)), (' D 188 AGLN  NE2', ' D2085  HOH  O  ', -0.478, (-3.458, 28.299, -57.182)), (' D 467  ARG  NH1', ' D 471  GLN HE22', -0.474, (-39.687, 28.759, -50.199)), (' D  86  PRO  O  ', ' D  89  ARG  HD2', -0.472, (-14.269, 16.547, -77.343)), (' B 372  TYR  OH ', ' B 388  HIS  HE1', -0.469, (-26.321, 72.088, -71.458)), (' D 270  PRO  HD3', ' D 426  LEU  CD2', -0.466, (-58.072, 20.179, -56.704)), (' C 157  LEU HD11', ' C 477  VAL HG13', -0.465, (2.336, 89.853, 20.843)), (' D  66  GLU  O  ', ' D  70  GLN  HG2', -0.459, (-1.387, 19.66, -60.904)), (' B 324  ASP  OD1', ' B 326  ARG  HB2', -0.459, (-50.653, 82.631, -59.613)), (' A 233  LEU HD23', ' A 267  MET  HE1', -0.457, (-3.874, 20.908, 22.715)), (' B  17  ALA  HB1', ' B  92  ILE HD11', -0.453, (-24.373, 65.161, -92.312)), (' A1201  PEG  O4 ', ' A1202  P6G  O19', -0.448, (6.079, 48.893, 8.495)), (' C 270  PRO  HD3', ' C 426  LEU HD22', -0.444, (-11.437, 78.602, 1.453)), (' B1100  NAG  O7 ', ' D 596  GLU  OE2', -0.44, (-54.775, 44.949, -49.426)), (' D  31  VAL  O  ', ' D  34  GLN  HG3', -0.44, (-10.662, 7.616, -54.21)), (' D  17  ALA  HA ', ' D  20  PHE  HB3', -0.438, (-3.335, 12.082, -73.204)), (' C 274  LYS  HB3', ' C 275  PRO  CD ', -0.437, (-16.94, 69.092, -1.114)), (' C 354  ASP  OD2', ' C2286  HOH  O  ', -0.435, (2.217, 73.486, 7.373)), (' A 389  GLU  HB2', ' A 504  SER  HB2', -0.434, (7.264, 23.848, -3.237)), (' A 477  VAL HG12', ' A 603  LEU HD21', -0.431, (-18.851, 12.226, 16.894)), (' B 157  LEU HD13', ' B 476  PRO  HB2', -0.424, (-44.538, 57.101, -40.215)), (' C 426  LEU  HG ', ' C 426  LEU  O  ', -0.416, (-7.237, 78.925, -0.112)), (' B 371  GLN  HB3', ' B 545 BARG  HG2', -0.413, (-18.471, 78.084, -72.322)), (' A 332  ALA  HB3', ' A 907  ASP  HB2', -0.412, (-2.45, 30.427, -0.687)), (' C 570  LEU  C  ', ' C 570  LEU HD23', -0.411, (-0.267, 81.061, -10.709)), (' B 390  ALA  O  ', ' B 394  VAL HG23', -0.409, (-19.855, 70.992, -59.698)), (' B 489  LYS  O  ', ' B 493  PRO  HD2', -0.407, (-41.182, 61.524, -59.17)), (' B 267  MET  HB3', ' B 267  MET  HE2', -0.407, (-30.859, 64.593, -33.452)), (' D 274  LYS  HB3', ' D 275  PRO  CD ', -0.402, (-63.137, 10.57, -58.687)), (' C  73  LYS  NZ ', ' C2111  HOH  O  ', -0.401, (41.406, 84.084, -5.292))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
