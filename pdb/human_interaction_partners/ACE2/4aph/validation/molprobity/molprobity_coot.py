# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  72 ', 'ASN', 0.019900987722277712, (10.151, -18.387, -4.857))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (13.443999999999999, -23.816, -19.960000000000008))]
data['rota'] = [('A', '  76 ', 'GLU', 0.001973642106900385, (3.3320000000000003, -17.32, 1.832)), ('A', '  87 ', 'GLN', 0.1949805997815596, (2.313, -0.484, 2.927000000000001)), ('A', ' 104 ', 'VAL', 0.18621154019228686, (4.728, 22.745, -9.684)), ('A', ' 107 ', 'LEU', 0.02911694329091329, (8.698, 26.708, -8.507)), ('A', ' 240 ', 'LEU', 0.17883998633469053, (12.856000000000003, 0.771, -41.462)), ('A', ' 394 ', 'TYR', 0.1072394435087754, (22.926, 7.111999999999998, -10.735000000000003)), ('A', ' 463 ', 'LEU', 0.12850896100955478, (3.058, -3.6750000000000003, -32.513)), ('P', '   3 ', 'VAL', 0.010163259362921742, (13.759, -3.8630000000000004, -15.41)), ('P', '   5 ', 'ILE', 0.017287481877107366, (14.152999999999995, -7.601000000000001, -21.531)), ('P', '   5 ', 'ILE', 0.09261000890690327, (13.184, -6.645, -17.761))]
data['cbeta'] = []
data['probe'] = [(' P   6 BHIS  CG ', ' P   7 BPRO  HD2', -1.522, (15.551, -9.961, -23.582)), (' P   6 BHIS  ND1', ' P   7 BPRO  HD2', -1.473, (16.241, -9.09, -22.806)), (' P   6 BHIS  ND1', ' P   7 BPRO  CD ', -1.153, (15.297, -8.446, -24.175)), (' P   6 BHIS  CG ', ' P   7 BPRO  CD ', -1.149, (14.623, -9.197, -24.017)), (' P   6 BHIS  CE1', ' P   7 BPRO  HD2', -1.045, (16.148, -9.275, -24.035)), (' A 384  GLU  OE2', ' P   5 AILE HG22', -0.995, (16.433, -9.037, -19.835)), (' P   6 BHIS  CE1', ' P   7 BPRO  CG ', -0.989, (14.907, -9.194, -25.427)), (' P   6 BHIS  CE1', ' P   7 BPRO  CD ', -0.935, (16.121, -8.638, -24.467)), (' P   6 BHIS  NE2', ' P   7 BPRO  HG2', -0.934, (14.816, -9.96, -25.823)), (' A  66  ASN HD21', ' P   2 AARG  HD3', -0.904, (8.823, -5.865, -9.138)), (' P   2 BARG  HB3', ' P   4 BTYR  CE1', -0.871, (13.493, -0.036, -12.177)), (' P   2 BARG  HB3', ' P   4 BTYR  HE1', -0.861, (14.665, 0.335, -12.403)), (' A 512  PHE  H  ', ' A1635  ACT  H1 ', -0.84, (5.561, -13.204, -23.02)), (' A  66  ASN  ND2', ' P   2 AARG  HD3', -0.83, (9.584, -6.6, -8.419)), (' P   6 BHIS  CD2', ' P   7 BPRO  HD2', -0.806, (15.028, -9.813, -24.059)), (' P   6 BHIS  CE1', ' P   7 BPRO  HG2', -0.767, (14.628, -9.451, -24.952)), (' A 265  ASN HD21', ' A 618  GLN  NE2', -0.734, (-1.159, -15.98, -52.312)), (' P   5 BILE HG22', ' P   6 BHIS  O  ', -0.721, (12.111, -7.456, -20.346)), (' P   5 AILE HG13', ' P   6 AHIS  N  ', -0.71, (13.884, -9.264, -23.973)), (' P   6 BHIS  CD2', ' P   7 BPRO  CD ', -0.673, (14.943, -9.821, -24.025)), (' P   5 BILE  CG2', ' P   6 BHIS  N  ', -0.66, (12.362, -8.151, -19.766)), (' A 384  GLU  OE2', ' P   5 AILE  CG2', -0.659, (16.621, -9.212, -19.842)), (' A 449  LYS  HD3', ' A1629  PE4  H22', -0.64, (23.872, -16.33, -37.138)), (' A 265  ASN HD21', ' A 618  GLN HE21', -0.638, (-1.288, -15.276, -51.634)), (' A 511  LYS  HZ2', ' A1635  ACT  H2 ', -0.614, (7.784, -12.902, -24.907)), (' A 511  LYS  HZ2', ' A1635  ACT  CH3', -0.589, (7.814, -12.708, -24.428)), (' P   5 AILE HG13', ' P   7 APRO  N  ', -0.577, (13.638, -10.077, -23.827)), (' A 477  THR  OG1', ' A 479  GLU  HG2', -0.57, (-15.263, -6.211, -28.52)), (' P   5 BILE HG23', ' P   6 BHIS  N  ', -0.565, (13.107, -8.41, -19.062)), (' P   5 BILE  CG2', ' P   6 BHIS  O  ', -0.56, (11.234, -8.135, -20.22)), (' A  66  ASN HD21', ' P   2 AARG  CD ', -0.53, (9.074, -6.34, -9.248)), (' A 353  HIS  CD2', ' P   5 BILE HG23', -0.529, (11.924, -9.827, -19.373)), (' A 358  ASP  HB3', ' P   2 BARG  N  ', -0.524, (15.894, -0.687, -9.04)), (' A  59  TRP  CD1', ' A  88  ILE HD11', -0.523, (8.101, 1.759, -3.124)), (' A 468  ARG  NH2', ' A 513  HIS  O  ', -0.519, (2.886, -6.183, -20.521)), (' A 311  THR HG23', ' A 314  ARG  H  ', -0.51, (29.878, -19.299, -15.52)), (' A 512  PHE  H  ', ' A1635  ACT  CH3', -0.509, (6.646, -12.896, -22.855)), (' P   6 BHIS  CD2', ' P   7 BPRO  HG2', -0.493, (14.438, -10.222, -24.442)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.489, (2.402, -11.469, -21.59)), (' A 457  PHE  CZ ', ' P   6 AHIS  HB2', -0.488, (11.816, -7.169, -27.912)), (' A  76 BGLU  HA ', ' A  76 BGLU  OE1', -0.475, (2.837, -16.571, 2.917)), (' A  56  GLN  HG2', ' A2006  HOH  O  ', -0.462, (17.636, 3.198, 1.087)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.461, (3.208, -0.598, -32.152)), (' A 301  THR HG23', ' A 432  LEU  HB3', -0.454, (30.372, -18.669, -29.86)), (' A 411  GLU  HB2', ' A 526  SER  HB2', -0.454, (15.69, -0.337, -24.931)), (' A 463  LEU HD11', ' A 489  ARG  HA ', -0.45, (1.638, -8.102, -35.072)), (' P   5 AILE  CG1', ' P   7 APRO  N  ', -0.447, (13.27, -10.112, -23.159)), (' A 195  GLN  NE2', ' A2091  HOH  O  ', -0.445, (-7.77, -18.357, -15.107)), (' P   6 BHIS  CE1', ' P   7 BPRO  HG3', -0.444, (15.607, -8.617, -25.618)), (' A 353  HIS  HE2', ' P   5 AILE HG12', -0.443, (12.729, -10.129, -21.561)), (' A  86  MET  HE3', ' A 133  GLU  HB3', -0.439, (-5.555, -4.513, -1.211)), (' A 562  LEU  HB3', ' A 566  MET  HE2', -0.437, (27.121, 4.415, -20.419)), (' A 300  ASP  O  ', ' A 303  GLU  HG3', -0.424, (29.467, -24.829, -31.343)), (' A 465  ASP  HA ', ' A 468  ARG  HB2', -0.422, (0.634, -1.807, -26.42)), (' P   6 BHIS  CD2', ' P   7 BPRO  CG ', -0.421, (14.548, -9.475, -24.444)), (' A 300  ASP  HB3', ' A 303  GLU  CG ', -0.419, (29.308, -26.037, -32.303)), (' P   6 BHIS  CG ', ' P   7 BPRO  N  ', -0.417, (14.126, -9.366, -22.662)), (' A 161  LEU HD22', ' A 185  TRP  CZ2', -0.408, (5.583, -18.708, -21.569)), (' A 162  GLU  HA ', ' A 163  PRO  HA ', -0.405, (12.989, -22.19, -21.712)), (' P   5 BILE HG23', ' P   6 BHIS  H  ', -0.404, (13.137, -8.67, -19.073)), (' A 209  ARG  HA ', ' A 213  TYR  O  ', -0.403, (-7.145, 9.647, -16.15))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
