# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 346 ', 'ASP', 0.017855411290789037, (14.858000000000004, -26.533, -4.702))]
data['omega'] = [('A', ' 163 ', 'PRO', None, (13.457, -23.59, -19.548))]
data['rota'] = [('A', '  53 ', 'ARG', 0.10899531973431263, (14.193999999999999, 9.950999999999999, 2.747)), ('A', '  88 ', 'ILE', 0.1592029075116646, (3.6700000000000004, 1.359, 0.118)), ('A', ' 107 ', 'LEU', 0.05458363878383044, (7.955, 27.18, -7.975999999999998)), ('A', ' 394 ', 'TYR', 0.13388808546205194, (22.468, 7.505999999999998, -10.614)), ('A', ' 434 ', 'SER', 0.29840793396382986, (36.865, -18.465000000000003, -35.558)), ('A', ' 463 ', 'LEU', 0.20351983149557162, (2.861, -3.902, -32.173)), ('A', ' 468 ', 'ARG', 0.15746806493477147, (-2.330000000000001, -2.3679999999999994, -25.61)), ('A', ' 590 ', 'SER', 0.06819892536721425, (19.696, 6.650999999999998, -39.399))]
data['cbeta'] = []
data['probe'] = [(' A 538  CYS  SG ', ' A 550  CYS  SG ', -0.93, (32.411, 1.534, -33.13)), (' A 463  LEU  O  ', ' A 463  LEU HD23', -0.923, (0.547, -4.376, -31.025)), (' A 463  LEU  C  ', ' A 463  LEU HD23', -0.884, (1.507, -4.444, -31.278)), (' A1626  SLC  C5 ', ' A1626  SLC H31C', -0.795, (15.748, -8.229, -22.56)), (' A 311  THR HG23', ' A 314  ARG  H  ', -0.754, (29.458, -18.282, -15.229)), (' A 346  ASP  HB2', ' A 348  ARG  HG2', -0.734, (13.4, -24.133, -5.474)), (' A  52  ASP  OD1', ' A 399  VAL HG22', -0.692, (14.832, 9.187, -3.227)), (' A 314  ARG  O  ', ' A 318  GLU  HG2', -0.654, (31.358, -14.66, -18.42)), (' A  96  GLY  HA3', ' A 122  LEU HD21', -0.645, (-0.545, 11.111, -4.119)), (' A 463  LEU  C  ', ' A 463  LEU  CD2', -0.641, (1.486, -5.352, -31.311)), (' A  49  GLU  O  ', ' A  53  ARG  HG2', -0.623, (13.631, 13.222, 2.53)), (' A 346  ASP  OD2', ' A 348  ARG  NE ', -0.623, (15.076, -22.078, -4.082)), (' A1626  SLC H31C', ' A1626  SLC H52C', -0.609, (15.426, -7.402, -22.639)), (' A 511  LYS  O  ', ' A 515  PRO  HD2', -0.598, (1.921, -11.423, -20.866)), (' A 290  VAL HG21', ' A 452  LEU HD11', -0.588, (18.393, -15.598, -40.926)), (' A 538  CYS  HG ', ' A 550  CYS  CB ', -0.582, (31.713, 0.666, -33.644)), (' A 455  ILE HD13', ' A 592  MET  HE2', -0.567, (17.156, -2.736, -37.298)), (' A  96  GLY  HA3', ' A 122  LEU  CD2', -0.565, (-0.08, 10.885, -4.362)), (' A 234  GLU  OE2', ' A 238  GLN  HG2', -0.552, (4.924, 4.711, -40.959)), (' A1626  SLC  C3 ', ' A1626  SLC  C5 ', -0.545, (14.69, -7.695, -22.455)), (' A 299  MET  HB2', ' A 433  LEU HD23', -0.542, (31.973, -20.053, -34.174)), (' A 179  LEU HD11', ' A 499  VAL HG23', -0.539, (-1.355, -24.708, -35.362)), (' A 606  GLU  OE2', ' A 610  HIS  HE1', -0.532, (19.092, -15.692, -53.548)), (' A 161  LEU  HA ', ' A 165  LEU HD12', -0.504, (7.372, -23.221, -21.974)), (' A 462  TYR  O  ', ' A 466  GLN  HG2', -0.497, (2.723, -0.678, -32.177)), (' A 534  HIS  O  ', ' A 538  CYS  SG ', -0.492, (29.251, 2.831, -32.058)), (' A 311  THR  CG2', ' A 314  ARG  H  ', -0.491, (30.02, -18.914, -15.223)), (' A 562  LEU  HB3', ' A 566  MET  HE2', -0.487, (26.578, 4.783, -19.641)), (' A1626  SLC  C3 ', ' A1626  SLC H52C', -0.487, (15.238, -7.52, -21.937)), (' A  79  LYS  O  ', ' A  83  GLN  HG3', -0.486, (0.043, -9.63, 3.055)), (' A 398  PRO  HG2', ' A 401  LEU HD12', -0.485, (16.654, 13.956, -7.568)), (' A 538  CYS  CB ', ' A 550  CYS  SG ', -0.482, (32.008, 2.271, -33.21)), (' A 243  LEU HD13', ' A 600  LEU HD13', -0.482, (17.557, -2.867, -45.73)), (' A 535  GLU  HA ', ' A 547  LEU HD11', -0.481, (28.106, 3.778, -34.509)), (' A 477  THR  OG1', ' A 479  GLU  HG2', -0.473, (-15.143, -6.039, -28.049)), (' A1626  SLC H31C', ' A1626  SLC H51C', -0.464, (15.436, -8.506, -23.065)), (' A 522  ARG  HB3', ' A1621   CL CL  ', -0.457, (8.894, 1.642, -21.95)), (' A 485  TRP  CD2', ' A 508  PRO  HG3', -0.45, (-2.27, -10.102, -28.432)), (' A 300  ASP  HB3', ' A 303  GLU  HB2', -0.445, (28.511, -25.966, -31.158)), (' A 248  HIS  CD2', ' A2016  HOH  O  ', -0.438, (7.815, -9.896, -46.449)), (' A 220  TRP  CZ3', ' A 468  ARG  HD3', -0.432, (0.516, -1.507, -21.311)), (' A 346  ASP  OD2', ' A 348  ARG  CZ ', -0.431, (15.275, -21.79, -3.355)), (' A 467  TRP  HB2', ' A 488  LEU HD12', -0.431, (-2.142, -5.031, -31.062)), (' A 428  HIS  HD2', ' A 434  SER  HA ', -0.43, (37.931, -17.795, -34.355)), (' A 314  ARG  HG3', ' A 314  ARG  O  ', -0.429, (31.914, -15.88, -17.89)), (' A 159  LEU HD23', ' A 164  ASP  HB3', -0.428, (10.094, -28.106, -22.314)), (' A 209  ARG  HA ', ' A 213  TYR  O  ', -0.428, (-7.749, 9.656, -16.219)), (' A 311  THR HG22', ' A 314  ARG  HB3', -0.426, (30.768, -18.959, -16.275)), (' A 346  ASP  OD2', ' A 348  ARG  CD ', -0.426, (14.203, -22.556, -3.642)), (' A 412  ALA  O  ', ' A 416  VAL HG23', -0.425, (22.249, 0.283, -25.28)), (' A 514  ILE  HB ', ' A 515  PRO  CD ', -0.425, (0.643, -10.843, -20.832)), (' A 606  GLU  OE2', ' A 610  HIS  CE1', -0.424, (19.084, -15.571, -53.797)), (' A 419  LEU  HA ', ' A 419  LEU HD23', -0.423, (25.174, -5.615, -30.787)), (' A 384  GLU  OE2', ' A1626  SLC H32C', -0.419, (16.409, -8.187, -19.118)), (' A 233  LEU HD13', ' A 521  ILE HD11', -0.414, (6.502, 3.03, -29.855)), (' A 521  ILE  HA ', ' A 521  ILE HD12', -0.413, (7.13, 0.253, -27.857)), (' A 162  GLU  HA ', ' A 163  PRO  HA ', -0.412, (12.549, -21.731, -21.398)), (' A 235  ARG  O  ', ' A 239  GLU  HG3', -0.409, (10.487, 6.484, -39.946)), (' A 290  VAL  CG2', ' A 452  LEU HD11', -0.408, (18.694, -16.26, -40.657)), (' A 248  HIS  HD2', ' A2016  HOH  O  ', -0.404, (7.814, -10.126, -46.669)), (' A 523  TYR  CD1', ' A1626  SLC H71C', -0.404, (12.324, -5.22, -24.24)), (' A  78  SER  HB3', ' A 140  LEU HD21', -0.404, (0.247, -13.737, -3.882)), (' A 468  ARG HH21', ' A 514  ILE  HA ', -0.403, (1.271, -6.443, -20.998)), (' A 388  ILE  O  ', ' A 392  MET  HG3', -0.402, (24.499, -0.371, -10.902))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
