# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 760 ', 'GLU', 0.0006560065416438149, (67.73300000000003, 223.779, 232.824)), ('A', ' 788 ', 'ARG', 0.0030126845065602923, (91.00700000000003, 237.68199999999993, 264.978)), ('A', ' 789 ', 'ILE', 0.004137652476012636, (90.775, 240.95099999999994, 263.032)), ('A', ' 829 ', 'ARG', 0.00895827968737977, (83.38800000000003, 235.719, 242.42300000000003)), ('B', ' 816 ', 'VAL', 0.00922684, (84.65600000000012, 287.2990000000001, 212.218)), ('B', ' 817 ', 'GLU', 0.010810655449258716, (82.31900000000005, 284.7960000000001, 210.527)), ('B', ' 829 ', 'ARG', 0.00650723190478485, (93.1750000000001, 278.941, 228.10600000000002)), ('C', ' 829 ', 'ARG', 0.004710476899199166, (117.09400000000005, 261.116, 192.378)), ('D', ' 816 ', 'VAL', 0.00512602, (88.793, 209.83200000000005, 204.798)), ('D', ' 817 ', 'GLU', 0.00908092994110965, (86.73599999999999, 212.78900000000004, 203.511)), ('D', ' 829 ', 'ARG', 0.005474462744995315, (107.38400000000007, 218.568, 206.979))]
data['omega'] = []
data['rota'] = [('A', ' 784 ', 'ILE', 0.030796903574505097, (88.02200000000008, 235.60399999999996, 260.377)), ('A', ' 791 ', 'PHE', 0.20527587175509626, (93.219, 239.363, 258.343)), ('A', ' 808 ', 'LEU', 0.08289373088941598, (76.80800000000008, 235.58500000000006, 249.28800000000004)), ('A', ' 813 ', 'LEU', 0.13336931408788882, (69.18300000000008, 239.03, 247.26599999999996)), ('A', ' 816 ', 'VAL', 0.03286685152320028, (66.9010000000001, 245.12600000000006, 239.915)), ('A', ' 819 ', 'LEU', 0.047879888713314146, (69.459, 246.08800000000005, 234.76700000000002)), ('A', ' 831 ', 'PHE', 0.10490241878282529, (88.59300000000005, 236.74200000000005, 241.123)), ('A', ' 933 ', 'MET', 0.1914835935524424, (104.144, 255.81699999999998, 227.234)), ('B', ' 787 ', 'HIS', 0.007990434307149493, (109.16000000000003, 290.5070000000001, 239.06300000000002)), ('B', ' 821 ', 'VAL', 0.07245792540171116, (89.02800000000002, 280.594, 215.752)), ('B', ' 931 ', 'PHE', 0.006941810943671664, (113.30999999999989, 250.191, 213.361)), ('C', ' 761 ', 'PHE', 0.1168522219772997, (103.454, 273.7, 184.763)), ('C', ' 780 ', 'ILE', 0.09998928100633189, (129.87199999999996, 264.409, 190.016)), ('C', ' 787 ', 'HIS', 0.029136375448774312, (139.86999999999998, 261.331, 193.44)), ('D', ' 761 ', 'PHE', 0.054094602425621675, (101.05600000000001, 219.777, 188.319)), ('D', ' 780 ', 'ILE', 0.05935510178654884, (116.68899999999991, 209.088, 209.632)), ('D', ' 786 ', 'VAL', 0.2729094141645042, (124.42599999999999, 205.705, 214.24700000000004)), ('D', ' 789 ', 'ILE', 0.19799006722470974, (119.08999999999997, 205.706, 222.095)), ('D', ' 816 ', 'VAL', 0.006065884821258945, (88.793, 209.83200000000005, 204.798)), ('D', ' 819 ', 'LEU', 0.026164778645127434, (88.42900000000006, 216.997, 206.785)), ('D', ' 821 ', 'VAL', 0.011551952047739178, (94.02799999999996, 216.853, 207.74100000000004)), ('G', '  29 ', 'LEU', 0.0004765819441112646, (114.46400000000006, 252.134, 174.824))]
data['cbeta'] = []
data['probe'] = [(' A 800  ASP  OD1', ' A 835  THR  OG1', -0.823, (91.118, 236.817, 246.969)), (' D 800  ASP  OD1', ' D 835  THR  OG1', -0.823, (113.968, 218.958, 211.898)), (' H   4  LYS  HG2', ' H   5  TRP  H  ', -0.818, (96.075, 196.956, 197.504)), (' C 769  ASN  OD1', ' C 829  ARG  NH2', -0.774, (116.773, 265.465, 187.184)), (' H   4  LYS  HG2', ' H   5  TRP  N  ', -0.748, (96.829, 197.157, 197.768)), (' G   4  LYS  HG2', ' G   5  TRP  H  ', -0.722, (117.707, 263.649, 166.32)), (' F   4  LYS  HG2', ' F   5  TRP  H  ', -0.702, (82.494, 300.267, 222.161)), (' D1002  6OU  H36', ' D1002  6OU  H48', -0.701, (107.341, 231.433, 190.46)), (' G   4  LYS  HG2', ' G   5  TRP  N  ', -0.688, (117.431, 263.489, 167.031)), (' A 759  GLU  O  ', ' A 761  PHE  N  ', -0.686, (69.992, 224.432, 231.619)), (' B 753  GLU  HG3', ' B 757  MET  HE1', -0.679, (79.305, 274.028, 225.27)), (' F   4  LYS  HG2', ' F   5  TRP  N  ', -0.664, (81.862, 300.1, 222.594)), (' E   4  LYS  HB3', ' E   7  TRP  HD1', -0.661, (58.291, 230.162, 252.471)), (' E   4  LYS  HG3', ' E   5  TRP  N  ', -0.66, (59.098, 233.018, 252.73)), (' B1002  6OU  H36', ' B1002  6OU  H48', -0.659, (77.975, 265.306, 233.434)), (' C1002  6OU  H36', ' C1002  6OU  H48', -0.658, (101.884, 274.916, 197.98)), (' F   4  LYS  HB3', ' F   7  TRP  CD1', -0.657, (79.885, 300.92, 225.118)), (' B 759  GLU  O  ', ' B 760  GLU  HB2', -0.655, (69.741, 278.819, 227.999)), (' A 870  ILE HD11', ' B 830  VAL HG21', -0.648, (91.085, 272.541, 229.773)), (' A 759  GLU  O  ', ' A 762  LYS  N  ', -0.641, (70.361, 226.145, 232.409)), (' D 787  HIS  HB2', ' D 791  PHE  HB2', -0.624, (120.388, 208.387, 216.97)), (' B 823  ARG  NH1', ' F  22  ARG  NH1', -0.624, (78.619, 284.1, 218.262)), (' H   4  LYS  HB3', ' H   7  TRP  CD1', -0.623, (97.44, 195.829, 194.114)), (' F   4  LYS  HB3', ' F   7  TRP  HD1', -0.621, (80.103, 300.783, 225.112)), (' C1002  6OU  C16', ' C1002  6OU  H45', -0.618, (104.675, 275.147, 199.762)), (' C 755  HIS  O  ', ' C 757  MET  N  ', -0.618, (97.928, 267.283, 187.507)), (' B 757  MET  HG3', ' B 758  THR  H  ', -0.599, (74.462, 275.057, 223.982)), (' D 828  LEU  O  ', ' D 830  VAL  N  ', -0.596, (106.752, 220.513, 207.545)), (' H   5  TRP  CD1', ' H  27  LYS  HG3', -0.591, (96.542, 200.885, 201.41)), (' C 915  TYR  HD1', ' D1003  6OU  H36', -0.583, (90.712, 224.064, 206.769)), (' G   4  LYS  CG ', ' G   5  TRP  H  ', -0.579, (117.316, 263.406, 166.075)), (' G   4  LYS  HB3', ' G   7  TRP  CD1', -0.572, (117.573, 266.508, 165.555)), (' H   4  LYS  HB3', ' H   7  TRP  HD1', -0.57, (97.569, 196.455, 194.647)), (' E   4  LYS  HG3', ' E   5  TRP  H  ', -0.569, (59.203, 233.778, 252.406)), (' B 815  ASP  HB2', ' B 820  SER  HA ', -0.56, (84.788, 282.654, 214.866)), (' D 747  THR HG21', ' D 833  LEU HD11', -0.557, (112.306, 225.517, 203.398)), (' C 828  LEU  O  ', ' C 830  VAL  N  ', -0.556, (115.904, 260.932, 194.017)), (' A 739  ILE  O  ', ' A 743  ILE HG13', -0.548, (89.234, 227.5, 246.128)), (' D 743  ILE HD13', ' D 832  ARG  HB3', -0.547, (114.891, 219.207, 206.996)), (' A 865  PHE  HB3', ' A 891  PHE  CE2', -0.537, (91.085, 261.597, 229.626)), (' G   4  LYS  HB3', ' G   7  TRP  HD1', -0.534, (116.848, 266.452, 166.222)), (' C 758  THR  O  ', ' C 758  THR HG22', -0.532, (97.023, 269.083, 180.929)), (' A 787  HIS  O  ', ' A 789  ILE  N  ', -0.532, (91.042, 238.599, 262.445)), (' C 754  HIS  O  ', ' C 757  MET  HB2', -0.529, (99.992, 268.219, 189.053)), (' A 759  GLU  C  ', ' A 761  PHE  N  ', -0.529, (69.172, 224.379, 231.32)), (' C 909  ARG  NH1', ' D 896  GLN  OE1', -0.528, (88.026, 239.564, 216.296)), (' B 823  ARG HH12', ' F  22  ARG  NH1', -0.528, (78.599, 283.616, 218.723)), (' D 742  LEU  CD2', ' D 775  ILE HG21', -0.528, (117.739, 213.084, 199.884)), (' D 821  VAL HG12', ' D 822  LEU HD12', -0.528, (94.066, 213.816, 208.339)), (' C 743  ILE HD13', ' C 832  ARG  HB3', -0.524, (122.101, 265.96, 196.65)), (' D 816  VAL HG22', ' D 817  GLU  N  ', -0.523, (86.806, 211.498, 205.057)), (' B 747  THR HG21', ' B 833  LEU HD11', -0.519, (91.681, 271.779, 233.538)), (' B 934  ILE HG21', ' C 937  VAL HG22', -0.517, (113.046, 247.235, 218.271)), (' D 758  THR  O  ', ' D 758  THR HG22', -0.517, (92.452, 220.647, 187.575)), (' D 815  ASP  O  ', ' D 817  GLU  N  ', -0.514, (88.589, 212.109, 204.497)), (' C 813  LEU  HA ', ' G  26  LYS  HB3', -0.513, (114.397, 259.567, 175.546)), (' C 757  MET  SD ', ' C 762  LYS  HB2', -0.511, (102.206, 269.178, 185.267)), (' E   4  LYS  CG ', ' E   5  TRP  H  ', -0.507, (58.692, 233.767, 252.713)), (' E   4  LYS  HB3', ' E   7  TRP  CD1', -0.506, (59.004, 230.555, 252.738)), (' A 821  VAL  O  ', ' A 824  SER  HB3', -0.505, (76.044, 242.514, 238.147)), (' B 787  HIS  HB2', ' B 790  SER  HB3', -0.505, (111.304, 288.659, 237.847)), (' E   4  LYS  CG ', ' E   5  TRP  N  ', -0.503, (58.698, 233.5, 252.577)), (' B1002  6OU  C15', ' B1002  6OU  H49', -0.498, (80.012, 266.789, 236.666)), (' G  28  LYS  HG2', ' G  28  LYS  O  ', -0.498, (111.424, 252.172, 172.654)), (' B 870  ILE HD11', ' C 750  MET  HB3', -0.498, (110.591, 266.574, 193.897)), (' F  27  LYS  HG3', ' F  29  LEU  H  ', -0.497, (86.343, 294.839, 215.347)), (' A 755  HIS  O  ', ' A 757  MET  N  ', -0.494, (71.932, 230.251, 225.959)), (' B 828  LEU  O  ', ' B 830  VAL  N  ', -0.493, (93.397, 276.434, 227.424)), (' A 758  THR  O  ', ' A 758  THR HG22', -0.493, (65.85, 228.309, 228.743)), (' D 757  MET  HG3', ' D 758  THR  H  ', -0.492, (96.06, 223.034, 190.816)), (' A 878  GLU  HB2', ' B 755  HIS  NE2', -0.492, (79.257, 272.636, 217.366)), (' F   4  LYS  CG ', ' F   5  TRP  H  ', -0.489, (81.879, 300.831, 222.384)), (' D 865  PHE  HB3', ' D 891  PHE  CE2', -0.489, (92.72, 233.428, 227.928)), (' D 939  ALA  O  ', ' D 943  ASP  N  ', -0.487, (115.285, 239.716, 232.022)), (' B 743  ILE HD13', ' B 776  PHE  CZ ', -0.487, (92.113, 280.19, 235.664)), (' A 827  LEU HD13', ' D 874  GLN  CB ', -0.484, (78.99, 236.23, 233.346)), (' B 926  ILE  O  ', ' B 927  PHE  C  ', -0.483, (110.909, 250.618, 208.937)), (' A 926  ILE  O  ', ' A 927  PHE  C  ', -0.482, (102.358, 261.598, 221.183)), (' H   4  LYS  CG ', ' H   5  TRP  N  ', -0.482, (96.336, 196.402, 197.116)), (' A 742  LEU  CD2', ' A 775  ILE HG21', -0.481, (83.835, 224.483, 249.368)), (' D 821  VAL  O  ', ' D 824  SER  HB3', -0.481, (96.589, 217.663, 207.414)), (' B 759  GLU  CG ', ' B 761  PHE  HB2', -0.48, (72.212, 274.916, 227.941)), (' C 930  THR  O  ', ' C 934  ILE HG12', -0.479, (108.446, 240.495, 219.894)), (' B 812  PHE  HD1', ' F   6  MET  HE3', -0.479, (86.037, 292.83, 225.208)), (' A 940  ILE HG21', ' D 938  VAL HG21', -0.475, (108.622, 247.13, 232.727)), (' A 800  ASP  OD1', ' A 835  THR  CB ', -0.473, (91.26, 237.074, 247.172)), (' F   4  LYS  CG ', ' F   5  TRP  N  ', -0.473, (81.705, 300.74, 222.556)), (' B 759  GLU  C  ', ' B 761  PHE  H  ', -0.472, (71.771, 277.436, 227.13)), (' C 934  ILE HG21', ' D 937  VAL HG22', -0.471, (108.881, 242.143, 224.542)), (' A 870  ILE HG22', ' A 887  LEU HD12', -0.471, (85.68, 268.207, 229.582)), (' F   4  LYS  HE3', ' F   7  TRP  HE1', -0.471, (81.49, 302.501, 225.997)), (' A 927  PHE  O  ', ' A 930  THR HG22', -0.471, (103.828, 260.03, 221.097)), (' A 770  LEU HD12', ' A 811  LEU HD21', -0.471, (73.976, 229.52, 248.012)), (' A 828  LEU  O  ', ' A 830  VAL  N  ', -0.47, (84.784, 236.152, 240.479)), (' A1002  6OU  C16', ' A1002  6OU  H45', -0.47, (85.895, 223.203, 227.682)), (' B 852  PRO  HA ', ' B 855  LEU  HB2', -0.469, (116.104, 267.951, 220.902)), (' C 924  PRO  O  ', ' C 927  PHE  HB2', -0.468, (102.852, 232.875, 218.954)), (' C 891  PHE  HB3', ' C1001  6OU  O17', -0.468, (106.084, 238.374, 201.228)), (' D 867  ILE HG13', ' D 868  PHE  N  ', -0.467, (89.707, 237.16, 234.249)), (' D 791  PHE  O  ', ' D 797  SER  HB2', -0.467, (117.756, 212.345, 218.84)), (' C 783  ARG  O  ', ' C 786  VAL HG22', -0.466, (136.931, 264.051, 192.445)), (' C 761  PHE  C  ', ' C 761  PHE  CD2', -0.466, (103.813, 272.322, 185.723)), (' E  28  LYS  O  ', ' E  29  LEU  C  ', -0.465, (64.107, 245.798, 246.783)), (' A 799  PHE  HD2', ' A 835  THR HG21', -0.464, (91.135, 239.357, 246.013)), (' A 870  ILE HG13', ' A 871  MET  N  ', -0.463, (89.645, 270.466, 226.763)), (' D 755  HIS  N  ', ' D 756  PRO  HD2', -0.461, (97.194, 228.022, 194.416)), (' C 757  MET  SD ', ' C 761  PHE  CD2', -0.46, (102.865, 270.261, 186.917)), (' D 791  PHE  CD2', ' D 797  SER  HB3', -0.46, (117.992, 212.199, 216.675)), (' F  16  CYS  HB2', ' F  19  MET  HE3', -0.46, (79.439, 299.808, 218.402)), (' A 876  PHE  CD1', ' A 876  PHE  N  ', -0.459, (85.867, 269.581, 217.437)), (' A 745  LEU  CD2', ' A 772  PHE  CZ ', -0.459, (82.202, 222.969, 242.016)), (' B 757  MET  CG ', ' B 758  THR  H  ', -0.458, (74.426, 274.802, 223.971)), (' C 757  MET  SD ', ' C 761  PHE  HD2', -0.458, (102.866, 270.298, 186.512)), (' H   4  LYS  CG ', ' H   5  TRP  H  ', -0.458, (96.001, 196.356, 197.402)), (' A 814  ALA  HB3', ' E  27  LYS  O  ', -0.458, (65.563, 240.724, 245.048)), (' A 791  PHE  O  ', ' A 797  SER  HB2', -0.457, (92.997, 240.11, 255.535)), (' B1002  6OU  H30', ' B1002  6OU  H49', -0.456, (80.069, 266.297, 237.128)), (' A 870  ILE  CD1', ' B 830  VAL HG21', -0.454, (90.431, 272.317, 229.777)), (' A 813  LEU  O  ', ' E  26  LYS  HD3', -0.454, (68.754, 236.809, 244.887)), (' B 742  LEU HD21', ' B 775  ILE HG21', -0.453, (89.969, 284.348, 239.77)), (' B 934  ILE  CG2', ' C 937  VAL HG13', -0.453, (113.839, 248.153, 220.123)), (' B 759  GLU  HG3', ' B 761  PHE  HB2', -0.452, (71.914, 275.488, 228.216)), (' D 755  HIS  O  ', ' D 757  MET  N  ', -0.451, (94.96, 225.926, 191.912)), (' D 815  ASP  HA ', ' D 822  LEU HD13', -0.45, (92.99, 211.885, 206.276)), (' B 811  LEU  O  ', ' F   6  MET  HE1', -0.45, (84.582, 291.017, 224.806)), (' A 854  MET  HE1', ' D 931  PHE  HE1', -0.449, (103.917, 250.238, 235.14)), (' H  29  LEU  HG ', ' H  29  LEU  O  ', -0.449, (89.857, 202.955, 209.551)), (' A 743  ILE HG12', ' A 776  PHE  CZ ', -0.449, (85.863, 228.82, 245.664)), (' B 909  ARG  NH1', ' C 896  GLN  OE1', -0.448, (96.522, 242.425, 203.824)), (' D 761  PHE  C  ', ' D 761  PHE  CD2', -0.448, (101.334, 220.246, 190.064)), (' A 931  PHE  O  ', ' A 934  ILE  CG1', -0.448, (107.779, 257.969, 225.254)), (' C 931  PHE  HE1', ' D 854  MET  HE1', -0.447, (109.968, 235.86, 225.655)), (' D 924  PRO  O  ', ' D 927  PHE  HB2', -0.447, (93.797, 247.898, 232.206)), (' A 905  MET  HE1', ' B 907  ILE HD11', -0.446, (93.972, 255.258, 203.645)), (' B 876  PHE  CD1', ' B 876  PHE  N  ', -0.446, (101.935, 256.575, 193.427)), (' B 942  VAL HG22', ' C 944  ALA  HB1', -0.446, (121.563, 252.913, 224.564)), (' C 876  PHE  CD1', ' C 876  PHE  N  ', -0.445, (94.613, 227.897, 204.255)), (' B 830  VAL  O  ', ' B 830  VAL HG22', -0.445, (93.502, 273.541, 230.847)), (' A 743  ILE HD13', ' A 832  ARG  CB ', -0.445, (88.202, 232.223, 245.001)), (' A 745  LEU  CD2', ' A 772  PHE  HZ ', -0.444, (82.451, 222.578, 241.814)), (' D 807  SER  O  ', ' D 811  LEU  HG ', -0.444, (104.245, 210.468, 203.951)), (' B1002  6OU  C16', ' B1002  6OU  H45', -0.443, (80.963, 264.891, 235.929)), (' C 848  ILE  O  ', ' C 852  PRO  HD3', -0.443, (124.76, 247.717, 209.887)), (' C 814  ALA  HB2', ' G  26  LYS  HD2', -0.442, (111.866, 260.79, 177.377)), (' A 867  ILE  O  ', ' A 870  ILE HG13', -0.442, (90.204, 270.124, 227.177)), (' B 865  PHE  HB3', ' B 891  PHE  CE1', -0.442, (107.364, 263.898, 206.382)), (' D 876  PHE  CD1', ' D 876  PHE  N  ', -0.442, (78.688, 241.27, 228.282)), (' A 869  ALA  O  ', ' A 873  THR HG22', -0.442, (86.189, 268.004, 225.075)), (' B 848  ILE  O  ', ' B 852  PRO  HD3', -0.442, (113.95, 268.848, 225.819)), (' D 800  ASP  OD1', ' D 835  THR  CB ', -0.44, (114.48, 219.0, 212.666)), (' A 755  HIS  N  ', ' A 756  PRO  CD ', -0.44, (75.173, 231.092, 225.861)), (' C 905  MET  HE1', ' D 907  ILE HD11', -0.439, (85.059, 242.001, 216.973)), (' D 881  PRO  HA ', ' D 885  GLY  CA ', -0.439, (77.958, 234.352, 221.939)), (' D 812  PHE  HB3', ' H   6  MET  CE ', -0.438, (101.34, 204.029, 201.274)), (' B 755  HIS  N  ', ' B 756  PRO  HD2', -0.436, (77.092, 269.112, 223.148)), (' B 819  LEU HD13', ' B 821  VAL HG23', -0.436, (89.942, 279.806, 212.82)), (' B 758  THR  O  ', ' B 758  THR HG22', -0.435, (69.755, 276.914, 221.888)), (' D 840  MET  O  ', ' D 844  VAL HG23', -0.434, (116.794, 228.244, 215.822)), (' A 755  HIS  CD2', ' D 878  GLU  HG3', -0.434, (71.318, 235.566, 226.383)), (' D 897  VAL  CG1', ' D 926  ILE HD11', -0.434, (91.672, 246.141, 224.25)), (' B 791  PHE  CE2', ' B 797  SER  HB3', -0.434, (105.603, 284.972, 234.514)), (' B 867  ILE  O  ', ' B 870  ILE HG22', -0.434, (110.246, 262.743, 199.07)), (' C 742  LEU HD21', ' C 775  ILE HG21', -0.433, (123.237, 272.958, 190.621)), (' F  16  CYS  HB2', ' F  19  MET  CE ', -0.432, (79.601, 299.967, 218.658)), (' G  29  LEU  O  ', ' G  29  LEU HD22', -0.431, (114.936, 249.76, 174.726)), (' C 742  LEU  CD2', ' C 775  ILE HG21', -0.431, (123.818, 272.751, 190.656)), (' B 783  ARG HH22', ' B 841  ARG HH12', -0.43, (104.268, 280.282, 237.31)), (' E  24  TRP  NE1', ' E  26  LYS  HE2', -0.43, (68.244, 233.105, 245.824)), (' C 849  SER  O  ', ' C 852  PRO  HD2', -0.429, (125.996, 247.081, 212.411)), (' D 812  PHE  HB3', ' H   6  MET  HE3', -0.429, (101.623, 203.463, 201.127)), (' B 897  VAL  CG1', ' B 926  ILE HD11', -0.428, (103.254, 251.588, 206.907)), (' A 924  PRO  O  ', ' A 927  PHE  HB2', -0.427, (102.158, 264.468, 219.953)), (' A 788  ARG  O  ', ' A 789  ILE  HB ', -0.426, (91.935, 240.652, 264.926)), (' B 812  PHE  HA ', ' F   6  MET  HE3', -0.426, (85.796, 292.466, 224.512)), (' E   5  TRP  CD1', ' E  27  LYS  HG3', -0.425, (63.602, 237.958, 250.483)), (' C 865  PHE  HZ ', ' C 898  MET  SD ', -0.425, (106.864, 239.946, 210.446)), (' B 861  MET  SD ', ' B 898  MET  HE1', -0.424, (108.973, 258.57, 213.41)), (' D 757  MET  CE ', ' D 762  LYS  HB2', -0.424, (97.978, 220.771, 191.951)), (' B 757  MET  HG3', ' B 758  THR  N  ', -0.424, (73.642, 274.996, 224.03)), (' B 883  TRP  CH2', ' B 906  GLY  O  ', -0.423, (92.88, 253.116, 201.381)), (' C 786  VAL HG23', ' C 787  HIS  N  ', -0.423, (138.672, 263.639, 193.882)), (' A 901  GLU  HG3', ' D 903  TRP  H  ', -0.422, (90.878, 248.638, 218.127)), (' H  22  ARG  O  ', ' H  23  LEU  HB3', -0.421, (98.696, 209.282, 193.791)), (' D 784  ILE  CD1', ' D 792  PHE  HE1', -0.421, (115.651, 206.943, 216.425)), (' B 810  GLU  HG3', ' B 822  LEU  O  ', -0.42, (88.136, 282.868, 221.567)), (' A 883  TRP  HB2', ' A 884  PHE  CD2', -0.42, (84.323, 262.443, 218.222)), (' D 816  VAL  O  ', ' D 817  GLU  HG2', -0.42, (87.143, 210.62, 201.992)), (' B 938  VAL HG21', ' C 940  ILE HG22', -0.418, (117.644, 249.703, 220.694)), (' C 770  LEU  O  ', ' C 773  THR HG22', -0.418, (118.868, 267.947, 184.539)), (' A 743  ILE HD13', ' A 832  ARG  HB3', -0.418, (88.364, 231.756, 245.27)), (' B 924  PRO  O  ', ' B 927  PHE  HB2', -0.417, (111.579, 249.448, 206.017)), (' A 819  LEU HD13', ' A 821  VAL HG23', -0.417, (72.163, 246.809, 237.096)), (' B 927  PHE  O  ', ' B 928  VAL  C  ', -0.417, (112.289, 251.55, 209.857)), (' A 922  PHE  O  ', ' A 925  PHE  HB3', -0.417, (97.327, 263.968, 218.624)), (' D 837  VAL HG11', ' D 840  MET  HG2', -0.416, (119.391, 227.434, 210.217)), (' A 891  PHE  HB3', ' A1001  6OU  O17', -0.415, (87.421, 258.964, 229.008)), (' B 938  VAL HG11', ' C 940  ILE HG22', -0.415, (119.012, 250.195, 221.093)), (' C 897  VAL HG12', ' C 926  ILE HD11', -0.414, (99.501, 238.133, 213.202)), (' C 866  TYR  HE1', ' D 747  THR HG21', -0.414, (111.71, 226.545, 202.458)), (' C 897  VAL  CG1', ' C 926  ILE HD11', -0.414, (99.073, 238.103, 213.512)), (' A 840  MET  O  ', ' A 844  VAL HG23', -0.414, (99.372, 237.77, 242.035)), (' C 919  TRP  CH2', ' D1001  6OU  H34', -0.413, (91.187, 228.03, 220.931)), (' B 840  MET  O  ', ' B 844  VAL HG23', -0.413, (105.016, 269.484, 233.95)), (' D1002  6OU  H56', ' D1002  6OU  O25', -0.413, (106.157, 229.77, 189.081)), (' B 851  ILE  CG2', ' B 852  PRO  HD3', -0.413, (113.819, 268.133, 224.64)), (' D 866  TYR  CZ ', ' D 870  ILE HD11', -0.412, (87.661, 229.503, 234.055)), (' C 791  PHE  CE1', ' C 797  SER  HB3', -0.412, (131.851, 259.83, 195.34)), (' C 866  TYR  CE1', ' D 747  THR HG21', -0.412, (111.538, 226.594, 202.482)), (' A 849  SER  O  ', ' A 852  PRO  HD2', -0.411, (104.894, 250.141, 243.353)), (' A 881  PRO  O  ', ' A 885  GLY  N  ', -0.411, (79.917, 263.572, 221.44)), (' B 791  PHE  CD2', ' B 797  SER  HB3', -0.41, (106.018, 285.086, 234.769)), (' A 848  ILE  O  ', ' A 851  ILE HG22', -0.41, (101.507, 248.992, 242.641)), (' B 811  LEU  O  ', ' F   6  MET  CE ', -0.41, (84.79, 291.335, 224.6)), (' A 770  LEU  HA ', ' A 811  LEU HD11', -0.41, (74.264, 229.808, 245.947)), (' A 937  VAL HG22', ' D 934  ILE  CG2', -0.409, (106.758, 248.882, 229.266)), (' F  24  TRP  HE1', ' F  26  LYS  HE2', -0.409, (83.087, 289.155, 224.095)), (' A 757  MET  HG3', ' A 758  THR  H  ', -0.408, (70.469, 229.153, 228.619)), (' B 746  ASN  HB2', ' B 772  PHE  CD1', -0.408, (87.593, 279.961, 236.487)), (' A 939  ALA  O  ', ' A 942  VAL  HB ', -0.408, (112.157, 252.947, 235.754)), (' G   4  LYS  CG ', ' G   5  TRP  N  ', -0.408, (117.003, 263.567, 166.51)), (' B 866  TYR  CE1', ' C 747  THR HG21', -0.407, (113.208, 267.404, 200.103)), (' A 931  PHE  O  ', ' A 934  ILE HG13', -0.407, (108.055, 257.939, 225.714)), (' B 743  ILE HD12', ' B 832  ARG  CB ', -0.407, (95.252, 278.176, 234.382)), (' F  22  ARG  O  ', ' F  23  LEU  HB3', -0.407, (77.457, 287.958, 225.478)), (' F  19  MET  SD ', ' F  25  CYS  HB3', -0.406, (79.706, 296.183, 220.837)), (' B 764  VAL  HA ', ' B 767  ILE HD12', -0.406, (76.009, 283.658, 231.44)), (' C 792  PHE  CD1', ' C 792  PHE  N  ', -0.406, (134.551, 255.889, 192.913)), (' D 810  GLU  HG3', ' D 822  LEU  O  ', -0.406, (99.447, 214.308, 204.687)), (' A 878  GLU  O  ', ' A 879  ARG  HB3', -0.405, (79.811, 268.73, 213.942)), (' B 880  PHE  CD1', ' B 911  LEU HD23', -0.405, (96.401, 254.329, 194.987)), (' C 903  TRP  H  ', ' D 901  GLU  HG3', -0.405, (93.979, 242.979, 213.359)), (' D 880  PHE  CE2', ' D 911  LEU HD23', -0.404, (78.147, 243.62, 222.102)), (' E  22  ARG  O  ', ' E  23  LEU  HB3', -0.404, (66.448, 229.879, 241.975)), (' C 919  TRP  CE2', ' C 920  VAL HG23', -0.404, (92.734, 226.706, 217.242)), (' A 768  GLY  O  ', ' A 772  PHE  CD2', -0.403, (78.893, 225.821, 243.491)), (' A 901  GLU  OE2', ' A 902  SER  OG ', -0.403, (89.849, 250.655, 213.956)), (' A 759  GLU  O  ', ' A 760  GLU  C  ', -0.403, (69.307, 224.695, 232.537)), (' B 720  SER  O  ', ' B 724  LEU HD12', -0.402, (108.204, 297.171, 250.872)), (' B 881  PRO  HA ', ' B 885  GLY  CA ', -0.4, (96.111, 262.741, 195.246)), (' B 843  ILE  O  ', ' B 847  LEU HD13', -0.4, (108.513, 265.666, 232.485)), (' B 919  TRP  CE2', ' B 920  VAL HG23', -0.4, (107.518, 244.814, 195.815))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
