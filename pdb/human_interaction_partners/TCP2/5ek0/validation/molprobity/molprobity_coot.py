# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '1526 ', 'GLU', 0.0031519516890251317, (-68.758, -6.773000000000001, -15.826)), ('A', '1528 ', 'GLN', 0.018364441260999512, (-73.276, -5.8980000000000015, -20.307)), ('A', '1592 ', 'PHE', 0.0021214974483107227, (-86.49000000000002, -1.909, -7.666999999999999)), ('A', '1594 ', 'SER', 0.09252284784406942, (-82.72600000000001, -3.417, -2.702)), ('B', '1494 ', 'TYR', 0.020364790753108375, (-23.109, -48.221999999999994, -43.667)), ('B', '1500 ', 'ILE', 0.03395575774065463, (-21.410000000000007, -44.54100000000001, -34.31)), ('B', '1527 ', 'GLY', 0.007719419999999999, (-28.136, -5.297, -22.783)), ('B', '1529 ', 'SER', 0.023213358880938527, (-25.374, -5.198, -28.031)), ('B', '1592 ', 'PHE', 0.0019946627678747394, (-39.707, -4.982, -38.714)), ('B', '1594 ', 'SER', 0.0026298829382935584, (-43.982000000000006, -6.125000000000001, -33.279)), ('C', '1523 ', 'VAL', 0.07636420675461275, (-24.573, -10.736000000000002, 23.582)), ('C', '1527 ', 'GLY', 0.014388663280539381, (-25.073, -0.21700000000000005, 19.306)), ('C', '1529 ', 'SER', 0.0011303300000000001, (-20.105000000000008, 0.382, 23.018)), ('C', '1559 ', 'ARG', 0.013567928561774696, (-0.588, -38.421000000000014, 17.327)), ('C', '1604 ', 'ALA', 0.04815244140001806, (-14.839000000000008, -17.522000000000006, 10.625)), ('C', '1634 ', 'LEU', 0.03603187706775944, (-30.56900000000001, -36.218, -5.576999999999999)), ('C', '1656 ', 'GLY', 0.011018878776052503, (-36.463, -9.203000000000003, -19.025)), ('D', '1523 ', 'VAL', 0.02305674290978135, (-69.75400000000002, -10.923, 24.623)), ('D', '1527 ', 'GLY', 0.006804551884624905, (-66.812, -0.501, 22.74)), ('D', '1529 ', 'SER', 0.003883113015787889, (-69.89200000000001, 0.855, 28.046)), ('D', '1557 ', 'VAL', 0.03601116485301339, (-65.254, -36.28, 48.76)), ('D', '1559 ', 'ARG', 0.015346364392831822, (-60.29000000000001, -36.189, 50.871)), ('D', '1618 ', 'GLN', 0.0049473759190144335, (-63.125, -36.636, 24.608999999999995)), ('D', '1736 ', 'ILE', 0.04900635677809764, (-51.04000000000001, -64.394, 14.047999999999998))]
data['omega'] = [('A', '  -2 ', 'GLY', None, (-102.50800000000001, -51.157, -19.222)), ('A', '1528 ', 'GLN', None, (-72.23, -4.881, -20.053)), ('B', '1528 ', 'GLN', None, (-28.262000000000004, -5.888000000000002, -25.186)), ('C', '1528 ', 'GLN', None, (-22.669, -0.188, 19.833)), ('D', '1528 ', 'GLN', None, (-66.881, 0.233, 25.097999999999995))]
data['rota'] = [('A', '   0 ', 'HIS', 0.13196393135633744, (-97.641, -50.431, -20.304)), ('A', '1495 ', 'LEU', 0.2281155332461768, (-92.86800000000001, -49.453, -17.923)), ('A', '1500 ', 'ILE', 0.15529179398393264, (-86.399, -43.589, -21.376)), ('A', '1510 ', 'ILE', 0.1851753657821423, (-78.942, -34.32899999999999, -18.574)), ('A', '1511 ', 'ILE', 0.010032394995060371, (-75.15, -34.125, -17.926)), ('A', '1520 ', 'THR', 0.07738547631026207, (-74.388, -19.35300000000001, -20.472)), ('A', '1530 ', 'GLN', 0.018828438579016886, (-80.179, -5.236, -20.495999999999995)), ('A', '1553 ', 'LEU', 0.00474137494876872, (-90.256, -37.77100000000001, -15.135)), ('A', '1562 ', 'PHE', 0.029497907859173268, (-86.588, -41.522, -5.335)), ('A', '1576 ', 'ILE', 0.20194776047680638, (-87.495, -25.992, -6.171)), ('A', '1605 ', 'ARG', 0.10631300356754111, (-78.761, -20.17299999999999, -10.144)), ('A', '1609 ', 'ILE', 0.27501539447476175, (-74.65200000000002, -26.20300000000001, -12.025)), ('A', '1610 ', 'LEU', 0.2172919250472457, (-73.78, -27.242, -8.406)), ('A', '1612 ', 'LEU', 0.07289074904453569, (-72.78800000000001, -31.183000000000007, -11.925)), ('A', '1623 ', 'VAL', 0.07249025722118489, (-67.182, -36.278, -3.7409999999999997)), ('A', '1627 ', 'ILE', 0.013690647821247234, (-67.096, -36.636, 2.3)), ('A', '1630 ', 'ILE', 0.0, (-64.306, -35.471, 7.33)), ('A', '1634 ', 'LEU', 0.046585658966330004, (-64.119, -34.01, 13.052)), ('A', '1642 ', 'LEU', 0.035301630161918666, (-61.897, -24.500000000000004, 20.530999999999995)), ('A', '1649 ', 'ILE', 0.28029308788381135, (-61.167000000000016, -14.086999999999998, 23.498)), ('A', '1655 ', 'PHE', 0.002306531183285322, (-54.882, -5.586, 21.480999999999998)), ('A', '1661 ', 'GLU', 0.08117198764836062, (-59.478, -2.699, 13.184999999999997)), ('A', '1690 ', 'LEU', 0.057368839225783355, (-48.57200000000001, -4.472000000000001, 16.844)), ('A', '1699 ', 'VAL', 0.1842976384615376, (-45.179, -13.734999999999998, 22.749)), ('A', '1715 ', 'LEU', 0.2220512771699284, (-54.893, -33.139, 11.059)), ('B', '1494 ', 'TYR', 0.15347362099973458, (-23.109, -48.221999999999994, -43.667)), ('B', '1498 ', 'THR', 0.16842759875650723, (-24.68400000000001, -48.082, -37.491)), ('B', '1501 ', 'VAL', 0.2171563386388967, (-25.108, -43.458000000000006, -34.089)), ('B', '1515 ', 'VAL', 0.16285787750394617, (-25.634000000000007, -28.895, -22.468)), ('B', '1516 ', 'LEU', 0.0002728254691996052, (-23.308000000000003, -26.644999999999996, -24.56)), ('B', '1523 ', 'VAL', 0.2297194169598698, (-25.684, -15.780000000000005, -22.059)), ('B', '1560 ', 'ILE', 0.08777512068097673, (-38.874999999999986, -47.987, -39.487)), ('B', '1562 ', 'PHE', 0.060868728309910046, (-38.077, -44.071, -35.684)), ('B', '1577 ', 'ILE', 0.26789646711982373, (-39.74600000000001, -26.836000000000006, -34.672)), ('B', '1587 ', 'LEU', 0.14630586518143493, (-38.613, -13.358, -41.112)), ('B', '1593 ', 'VAL', 0.266834486692298, (-42.95600000000001, -6.201, -37.069)), ('B', '1597 ', 'LEU', 0.10382314812835237, (-44.532, -11.360000000000001, -32.023)), ('B', '1601 ', 'ILE', 0.03194765202496147, (-42.063, -16.846, -31.513999999999996)), ('B', '1609 ', 'ILE', 0.12305953655977289, (-32.773, -27.412, -24.355)), ('B', '1610 ', 'LEU', 0.12483547077761653, (-35.717000000000006, -29.322, -22.769999999999996)), ('B', '1612 ', 'LEU', 0.028048510242530626, (-32.14800000000001, -32.87399999999999, -21.249)), ('B', '1618 ', 'GLN', 0.01277818320440122, (-32.485, -41.385, -15.268999999999998)), ('B', '1634 ', 'LEU', 0.015060792839526797, (-56.897000000000006, -37.01, -12.468)), ('B', '1641 ', 'THR', 0.2644258520850742, (-61.514, -27.407000000000007, -11.997)), ('B', '1644 ', 'PHE', 0.28091511419825643, (-63.224, -23.550999999999995, -9.511)), ('B', '1666 ', 'LEU', 0.22559492929447297, (-64.74, -15.159, -15.438)), ('B', '1670 ', 'PHE', 0.2635649638333459, (-60.434000000000005, -17.646, -12.251999999999997)), ('B', '1680 ', 'GLU', 0.27829778355809115, (-50.830000000000005, -15.221, -1.575)), ('B', '1690 ', 'LEU', 0.13271083286943142, (-63.63900000000002, -6.416000000000001, -0.36899999999999994)), ('B', '1699 ', 'VAL', 0.00945159699767828, (-68.604, -15.796, 4.333)), ('B', '1708 ', 'VAL', 0.05319205839244873, (-60.28400000000001, -25.715000000000007, -1.9559999999999997)), ('B', '1726 ', 'ILE', 0.14289966034161922, (-47.657000000000004, -50.972, -4.88)), ('B', '1728 ', 'ASN', 0.050798683396384596, (-48.516000000000005, -53.059, 0.381)), ('C', '1495 ', 'LEU', 0.024065392584556325, (-1.9520000000000004, -42.808, 30.691)), ('C', '1498 ', 'THR', 0.1282701670126741, (-5.076000000000001, -39.89, 27.991999999999997)), ('C', '1507 ', 'THR', 0.08478852254785764, (-16.153000000000006, -34.042, 26.472999999999992)), ('C', '1513 ', 'LEU', 0.19408296912317533, (-16.782, -24.219, 26.628)), ('C', '1539 ', 'ILE', 0.07392977029869718, (-13.141, -13.107000000000003, 25.858)), ('C', '1552 ', 'ILE', 0.07127944381240602, (-3.302, -29.897, 21.314)), ('C', '1574 ', 'VAL', 0.2100688957710409, (-12.272000000000002, -25.169, 12.868)), ('C', '1577 ', 'ILE', 0.10769019973164637, (-9.803000000000008, -21.123000000000008, 10.75)), ('C', '1584 ', 'LEU', 0.0, (-6.935999999999998, -11.653, 9.449)), ('C', '1603 ', 'LEU', 0.029285124293776405, (-17.705000000000002, -14.969000000000003, 10.028)), ('C', '1609 ', 'ILE', 0.2454232262842349, (-19.905, -22.695, 17.853)), ('C', '1624 ', 'SER', 0.04179553859320373, (-26.43000000000001, -37.655, 10.165)), ('C', '1626 ', 'LEU', 0.06063423743514735, (-31.23200000000001, -36.271, 8.31)), ('C', '1627 ', 'ILE', 0.10047434951338792, (-28.30100000000001, -35.901, 5.831)), ('C', '1641 ', 'THR', 0.1980255382751172, (-32.621, -27.597000000000005, -10.994)), ('C', '1646 ', 'ILE', 0.037834703636776185, (-35.421, -23.895999999999997, -18.919)), ('C', '1666 ', 'LEU', 0.08027424622706705, (-30.430000000000007, -15.347, -15.668)), ('C', '1670 ', 'PHE', 0.16180679976250031, (-33.496, -17.700000000000006, -11.204)), ('C', '1680 ', 'GLU', 0.26761614973068115, (-43.98, -15.208, -1.7919999999999998)), ('C', '1699 ', 'VAL', 0.2868977813472928, (-49.38900000000001, -18.527000000000008, -19.234)), ('C', '1708 ', 'VAL', 0.10208811420695271, (-42.76800000000001, -26.687, -9.395)), ('C', '1721 ', 'VAL', 0.03683589827977338, (-42.62800000000001, -43.854, 0.955)), ('D', '1498 ', 'THR', 0.1985865853091267, (-69.616, -38.568, 47.606)), ('D', '1510 ', 'ILE', 0.03603574941520035, (-69.997, -28.32, 35.526)), ('D', '1517 ', 'ASN', 0.28549923809753885, (-68.53100000000002, -18.586, 31.298)), ('D', '1526 ', 'GLU', 0.1752770654206018, (-63.619000000000014, -2.66, 22.438999999999997)), ('D', '1533 ', 'THR', 0.1427217899785909, (-67.898, -3.746, 32.019)), ('D', '1560 ', 'ILE', 0.26046114206668597, (-56.51, -36.304000000000016, 50.03799999999999)), ('D', '1577 ', 'ILE', 0.06303263468334977, (-55.11600000000001, -18.398, 39.819)), ('D', '1584 ', 'LEU', 0.09215526475017356, (-54.782000000000004, -8.659, 41.786)), ('D', '1587 ', 'LEU', 0.2202215344204423, (-56.289, -3.623000000000001, 43.11099999999999)), ('D', '1596 ', 'THR', 0.26811905654202456, (-51.306, -1.84, 30.327)), ('D', '1606 ', 'ILE', 0.19541103626971473, (-58.57900000000001, -17.808000000000007, 30.538999999999998)), ('D', '1609 ', 'ILE', 0.01391307377889965, (-61.960000000000015, -21.387000000000008, 30.065999999999995)), ('D', '1612 ', 'LEU', 0.024147838866325783, (-62.728, -26.971000000000004, 28.439)), ('D', '1618 ', 'GLN', 0.03466243582729274, (-63.125, -36.636, 24.608999999999995)), ('D', '1622 ', 'ILE', 0.013452866772146485, (-57.42, -35.55000000000001, 21.384)), ('D', '1623 ', 'VAL', 0.27434173351081564, (-55.085, -33.296, 23.5)), ('D', '1636 ', 'VAL', 0.08303454767893302, (-35.452, -32.5, 15.407999999999998)), ('D', '1642 ', 'LEU', 0.03937243860362998, (-29.503, -24.492, 17.348)), ('D', '1655 ', 'PHE', 0.0019722892830031924, (-26.792, -7.138, 8.54)), ('D', '1661 ', 'GLU', 0.01741467438141687, (-35.02900000000001, -2.7350000000000008, 12.365)), ('D', '1670 ', 'PHE', 0.17207502596274235, (-34.334, -14.407, 15.594)), ('D', '1690 ', 'LEU', 0.026466733219401423, (-31.429000000000006, -6.14, 1.85)), ('D', '1699 ', 'VAL', 0.29940589942535595, (-26.473, -16.425, -0.572)), ('D', '1708 ', 'VAL', 0.05090412355405456, (-34.859, -24.941, 7.616999999999999)), ('D', '1736 ', 'ILE', 0.01202632181666308, (-51.04000000000001, -64.394, 14.047999999999998))]
data['cbeta'] = [('D', '1557 ', 'VAL', ' ', 0.25079408874826464, (-66.26800000000001, -36.203, 47.575))]
data['probe'] = [(' C1529  SER  HB2', ' C1532  MET  HB2', -0.656, (-19.894, -2.36, 24.426)), (' A1527  GLY  HA2', ' A1528  GLN  HB3', -0.642, (-72.972, -5.993, -18.154)), (' C1608  ARG HH22', ' C1805  5P2  H20', -0.633, (-13.792, -15.625, 17.18)), (' C1554  ARG HH22', ' C1568  SER  HA ', -0.627, (-11.427, -33.793, 17.048)), (' B1634  LEU  HA ', ' B1637  ILE HD12', -0.626, (-55.656, -35.223, -12.598)), (' C1497  ILE HG21', ' C1556  TYR  HE2', -0.613, (-0.338, -37.364, 27.528)), (' B1555  ILE HD12', ' B1562  PHE  HB2', -0.611, (-36.323, -41.63, -36.965)), (' C1670  PHE  HB3', ' C1802  PX4  H47', -0.574, (-31.036, -17.685, -9.287)), (' C1566  PRO  HA ', ' C1569  LEU  HB3', -0.566, (-11.607, -35.199, 9.988)), (' D1521  MET  HE3', ' D1605  ARG  HG3', -0.56, (-61.13, -14.621, 30.3)), (' A1710  PHE  HE2', ' D1626  LEU  HB3', -0.56, (-50.499, -32.656, 19.34)), (' B1630  ILE  HA ', ' B1633  MET  HE2', -0.55, (-50.98, -35.94, -11.768)), (' A1527  GLY  HA2', ' A1528  GLN  CB ', -0.55, (-72.877, -5.931, -18.353)), (' C1517  ASN HD21', ' C1608  ARG  HE ', -0.548, (-15.134, -18.639, 19.313)), (' B1646  ILE HG22', ' B1650  MET  HE2', -0.538, (-70.528, -21.948, -6.951)), (' A1688  ARG  HE ', ' D1675  GLN HE22', -0.538, (-40.713, -8.383, 9.765)), (' D1682  TRP  O  ', ' D1687  VAL HG23', -0.537, (-36.441, -12.124, 1.833)), (' D1691  MET  HA ', ' D1694  TYR  O  ', -0.532, (-27.833, -7.348, -1.41)), (' D1536  LEU  HA ', ' D1539  ILE HD12', -0.531, (-71.405, -10.095, 32.233)), (' A1733  GLN  HA ', ' A1736  ILE HD12', -0.531, (-57.489, -61.47, 7.286)), (' C1526  GLU  HG2', ' D1660  PRO  HB3', -0.525, (-29.241, -2.127, 14.569)), (' A1639  LEU  HA ', ' D1619  MET  HE1', -0.519, (-61.513, -29.119, 20.696)), (' C1622  ILE HG13', ' D1635  SER  HB3', -0.514, (-33.069, -35.791, 17.322)), (' D1667  GLY  HA3', ' D1801  PX4  H16', -0.514, (-34.845, -11.516, 20.335)), (' B1526  GLU  HG3', ' C1660  PRO  HB3', -0.513, (-33.241, -5.59, -17.395)), (' C1667  GLY  HA2', ' C1802  PX4  H16', -0.512, (-28.065, -15.725, -11.156)), (' C1495  LEU  O  ', ' C1499  ASN  HB2', -0.511, (-5.498, -42.069, 31.69)), (' A1717  VAL  HA ', ' A1720  ILE HD12', -0.505, (-50.549, -37.217, 7.317)), (' C1682  TRP  O  ', ' C1687  VAL HG23', -0.504, (-46.521, -13.127, -9.616)), (' B1724  MET  O  ', ' B1728  ASN  HB2', -0.495, (-49.507, -50.215, -0.007)), (' B1612  LEU  HB3', ' C1642  LEU HD21', -0.493, (-32.235, -31.936, -19.054)), (' C1577  ILE  HA ', ' C1580  VAL HG22', -0.49, (-8.579, -20.518, 9.81)), (' D1551  ILE HG21', ' D1575  VAL HG11', -0.488, (-60.922, -24.369, 43.457)), (' A1646  ILE HG22', ' A1650  MET  HE2', -0.486, (-56.938, -18.912, 25.032)), (' B1558  HIS  HB3', ' B1561  SER  HB3', -0.486, (-35.401, -47.696, -35.791)), (' A1498  THR  HA ', ' A1501  VAL HG12', -0.485, (-87.991, -44.729, -16.888)), (' C1600  VAL  O  ', ' C1603  LEU  HB2', -0.483, (-17.455, -14.236, 7.454)), (' B1627  ILE  HA ', ' B1630  ILE HD12', -0.481, (-47.438, -36.907, -15.572)), (' C1691  MET  HA ', ' C1694  TYR  O  ', -0.481, (-49.638, -9.202, -18.253)), (' A1682  TRP  CD1', ' D1680  GLU  HG3', -0.481, (-46.37, -14.501, 7.898)), (' A1723  ALA  HB1', ' B1721  VAL HG11', -0.481, (-54.916, -43.35, 1.626)), (' B1525  LYS  HB2', ' B1528  GLN  HG3', -0.48, (-26.917, -9.773, -23.254)), (' A1724  MET  HE3', ' D1724  MET  HE1', -0.479, (-49.13, -44.052, 4.788)), (' B1521  MET  HE3', ' B1605  ARG  HG3', -0.477, (-33.736, -21.056, -26.394)), (' A1613  VAL HG11', ' B1643  PHE  HE1', -0.476, (-67.918, -30.718, -7.132)), (' A1640  MET  HE1', ' A1708  VAL HG12', -0.475, (-54.93, -22.88, 15.669)), (' C1633  MET  HE2', ' C1637  ILE HD11', -0.473, (-34.002, -32.839, -2.157)), (' B1647  PHE  HA ', ' B1650  MET  HE3', -0.472, (-68.246, -20.379, -6.551)), (' C1495  LEU  HA ', ' C1498  THR HG22', -0.471, (-3.421, -42.74, 29.216)), (' A1612  LEU  O  ', ' A1616  VAL HG12', -0.47, (-70.963, -33.891, -12.854)), (' B1670  PHE  HB3', ' B1802  PX4  H19', -0.47, (-58.748, -18.289, -14.071)), (' B1498  THR HG23', ' B1557  VAL HG13', -0.469, (-28.005, -48.503, -37.641)), (' D1569  LEU  O  ', ' D1573  VAL HG23', -0.465, (-54.042, -27.739, 39.967)), (' B1680  GLU  OE2', ' B1681  SER  HB2', -0.462, (-50.071, -11.381, -2.368)), (' D1703  PRO  O  ', ' D1707  VAL HG23', -0.461, (-29.66, -23.982, 4.257)), (' C1613  VAL  HB ', ' C1623  VAL HG21', -0.458, (-25.473, -31.341, 13.557)), (' C1618  GLN  O  ', ' C1622  ILE HG12', -0.457, (-29.6, -36.592, 17.482)), (' D1636  VAL  HB ', ' D1715  LEU HD12', -0.457, (-38.501, -32.152, 14.288)), (' C1633  MET  HE3', ' C1715  LEU HD21', -0.456, (-36.254, -33.044, -0.637)), (' D1663  PHE  HE2', ' D1690  LEU HD11', -0.456, (-32.244, -8.577, 6.371)), (' A1579  ILE  HA ', ' A1582  MET  HE2', -0.455, (-88.016, -21.37, -11.165)), (' C1529  SER  HB2', ' C1532  MET  CB ', -0.451, (-19.643, -2.247, 24.176)), (' B1682  TRP  O  ', ' B1687  VAL HG23', -0.451, (-58.424, -12.207, 0.333)), (' C1640  MET  HE1', ' C1708  VAL HG22', -0.451, (-39.951, -26.019, -10.052)), (' A1497  ILE  HA ', ' A1500  ILE HD12', -0.448, (-90.691, -43.16, -21.477)), (' A1541  VAL  HA ', ' A1544  ILE HD12', -0.448, (-85.122, -20.077, -16.186)), (' A1704  PHE  O  ', ' A1708  VAL HG22', -0.447, (-50.798, -21.305, 15.381)), (' C1497  ILE HG21', ' C1556  TYR  CE2', -0.446, (-0.206, -36.741, 27.085)), (' A1606  ILE HG13', ' B1650  MET  HG2', -0.445, (-72.567, -18.86, -7.354)), (' C1694  TYR  HB3', ' C1801  PX4  H14', -0.441, (-46.634, -10.471, -22.173)), (' D1545  ILE  O  ', ' D1549  ILE HG12', -0.439, (-68.488, -21.323, 44.534)), (' D1535  VAL  O  ', ' D1539  ILE HG13', -0.439, (-72.236, -9.734, 34.782)), (' D1633  MET  HE2', ' D1637  ILE HD11', -0.436, (-41.48, -30.803, 18.027)), (' D1622  ILE  O  ', ' D1626  LEU  HG ', -0.434, (-54.7, -34.321, 20.232)), (' A1549  ILE  HA ', ' A1552  ILE HG22', -0.432, (-91.158, -32.862, -15.739)), (' A1559  ARG  HG3', ' A1560  ILE  H  ', -0.428, (-92.87, -43.261, -4.474)), (' B1730  LYS  HA ', ' B1730  LYS  HD3', -0.428, (-46.898, -57.917, -4.347)), (' B1633  MET  HE3', ' B1637  ILE HD11', -0.428, (-52.606, -34.452, -10.99)), (' B1719  ILE HG22', ' C1717  VAL HG11', -0.427, (-46.863, -39.449, -3.954)), (' B1608  ARG HH22', ' B1806  5P2  H20', -0.426, (-32.167, -21.088, -31.464)), (' A1559  ARG  HG3', ' A1560  ILE  N  ', -0.426, (-92.786, -43.015, -4.463)), (' C1536  LEU  HA ', ' C1539  ILE HD12', -0.425, (-16.146, -10.255, 25.701)), (' B1732  GLU  O  ', ' B1736  ILE HG12', -0.424, (-49.209, -63.082, 0.508)), (' D1717  VAL  HA ', ' D1720  ILE HD12', -0.423, (-44.55, -37.376, 7.008)), (' A1707  VAL  O  ', ' A1711  VAL HG23', -0.423, (-52.168, -26.4, 17.093)), (' D1511  ILE  HA ', ' D1514  ILE HD12', -0.422, (-67.097, -27.669, 31.898)), (' A1633  MET  HE3', ' A1715  LEU HD21', -0.422, (-58.168, -31.306, 8.104)), (' A1717  VAL HG11', ' D1719  ILE HG22', -0.421, (-48.303, -37.282, 12.445)), (' C1512  TYR  CZ ', ' C1516  LEU HD11', -0.421, (-18.816, -22.189, 31.595)), (' C1494  TYR  HA ', ' C1497  ILE HG22', -0.42, (-0.47, -38.859, 29.073)), (' C1559  ARG  HG3', ' C1560  ILE HG12', -0.418, (1.446, -39.078, 14.737)), (' C1644  PHE  HB3', ' C1670  PHE  CE1', -0.417, (-33.261, -22.856, -11.939)), (' B1588  ILE HD12', ' B1601  ILE HG21', -0.416, (-41.318, -14.84, -35.09)), (' C1719  ILE HG22', ' D1717  VAL HG11', -0.413, (-39.605, -38.593, 5.259)), (' C1507  THR  O  ', ' C1511  ILE HG12', -0.413, (-18.512, -31.772, 25.685)), (' C1578  SER  HB3', ' C1608  ARG HH11', -0.411, (-12.123, -18.832, 16.257)), (' C1644  PHE  HB3', ' C1670  PHE  CZ ', -0.405, (-32.808, -22.773, -12.265)), (' D1536  LEU HD23', ' D1539  ILE HD12', -0.405, (-71.648, -10.189, 31.787)), (' D1558  HIS  HB2', ' D1562  PHE  HB2', -0.403, (-60.589, -35.507, 46.019)), (' D1725  ALA  O  ', ' D1729  GLN  HB2', -0.403, (-47.046, -50.227, 15.355)), (' A1683  SER  HB3', ' D1675  GLN  HG3', -0.402, (-43.145, -11.991, 9.554)), (' C1595  PRO  HD2', ' C1597  LEU  HB2', -0.401, (-13.004, -5.117, 3.696)), (' A1649  ILE HD11', ' D1606  ILE HG13', -0.401, (-59.827, -16.581, 27.534)), (' A1626  LEU  HB3', ' B1710  PHE  HE2', -0.401, (-63.256, -34.64, 0.755)), (' A1606  ILE HG23', ' B1646  ILE HG23', -0.4, (-72.301, -22.892, -8.365))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
