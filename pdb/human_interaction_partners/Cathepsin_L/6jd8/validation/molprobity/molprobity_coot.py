# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   3 ', 'THR', 0.01362034657189393, (-22.329000000000008, -10.088, 55.091)), ('A', '  76 ', 'ASN', 0.043968409586708446, (-10.708000000000006, -19.014, 25.398))]
data['omega'] = [('A', ' 274 ', 'ASP', None, (12.296, 4.6389999999999985, 27.659))]
data['rota'] = [('A', '   0 ', 'MET', 0.030164598204445402, (-30.013000000000005, -14.323, 54.919)), ('A', '  28 ', 'GLU', 0.07603871486292184, (-29.034000000000006, -12.518, 43.965)), ('A', '  40 ', 'LYS', 0.027362480750183094, (-13.119, -4.066999999999998, 47.053)), ('A', '  72 ', 'ARG', 0.27898479151947925, (-13.572000000000006, -18.535, 31.001)), ('A', '  73 ', 'GLN', 0.08828536424384359, (-16.561000000000007, -18.773, 28.648999999999997)), ('A', '  75 ', 'MET', 0.059305029309539826, (-12.052000000000005, -15.796, 26.998)), ('A', ' 130 ', 'LEU', 0.0, (-9.992000000000003, -6.464999999999999, 7.385000000000001)), ('A', ' 213 ', 'LYS', 0.01152653314878735, (7.131000000000002, -12.510999999999996, 17.177)), ('A', ' 252 ', 'CYS', 0.07624450737698923, (1.174, -11.329, 32.38)), ('A', ' 252 ', 'CYS', 0.07322877645492554, (1.1800000000000002, -11.303, 32.367)), ('A', ' 255 ', 'GLU', 0.17812303990943967, (2.434000000000002, -17.045, 26.138)), ('A', ' 256 ', 'ASP', 0.09152716243088384, (-0.8780000000000002, -18.281, 27.616000000000003)), ('A', ' 262 ', 'LEU', 0.0, (-6.6800000000000015, -5.026, 17.44)), ('A', ' 270 ', 'SER', 0.242218298309915, (5.972000000000002, 10.597, 28.638)), ('A', ' 307 ', 'ILE', 0.0796176230807935, (1.0830000000000004, -8.624, 22.271))]
data['cbeta'] = []
data['probe'] = [(' A  84  ARG  NH1', ' A 501  HOH  O  ', -0.896, (-0.955, -16.058, 12.652)), (' A   0  MET  HE2', ' A   1  THR HG22', -0.893, (-30.164, -11.098, 55.688)), (' A  77  GLY  O  ', ' A 416  PGE  O4 ', -0.771, (-7.563, -19.403, 21.476)), (' A  74  VAL  O  ', ' A 416  PGE  H12', -0.758, (-13.34, -13.517, 25.302)), (' A  76  ASN  HB2', ' A 416  PGE  H42', -0.757, (-11.276, -18.237, 23.028)), (' A 213  LYS  HZ3', ' A 311  ALA  H  ', -0.739, (2.297, -12.596, 15.247)), (' A 277 ALYS  NZ ', ' A 506  HOH  O  ', -0.712, (11.267, 3.46, 20.966)), (' A 182  GLU  OE1', ' A 413  EOH  H22', -0.695, (-22.306, -5.193, 14.935)), (' A   0  MET  HA ', ' A   0  MET  HE3', -0.69, (-31.285, -12.746, 55.577)), (' A 413  EOH  H21', ' A 602  HOH  O  ', -0.663, (-21.107, -5.544, 18.371)), (' A  41 BMET  SD ', ' A  58  MET  HE1', -0.659, (-9.25, -5.75, 39.677)), (' A  77  GLY  HA2', ' A 258  ASP  HA ', -0.657, (-6.314, -17.834, 24.715)), (' A 307  ILE  O  ', ' A 528 BHOH  O  ', -0.647, (0.406, -9.935, 19.184)), (' A 276  ASN  OD1', ' A 502  HOH  O  ', -0.644, (4.51, 3.82, 31.873)), (' A   0  MET  HE2', ' A   1  THR  H  ', -0.622, (-30.181, -11.776, 55.803)), (' A 134 BMET  HE3', ' A 204  ASN  H  ', -0.614, (-12.452, -7.3, 0.99)), (' A  74  VAL  O  ', ' A 416  PGE  H22', -0.612, (-13.836, -14.681, 25.006)), (' A 213  LYS  HD2', ' A 213  LYS  N  ', -0.608, (6.522, -12.909, 15.24)), (' A 182  GLU  OE1', ' A 413  EOH  C2 ', -0.604, (-21.608, -4.878, 15.306)), (' A  90  GLN  OE1', ' A 503  HOH  O  ', -0.59, (10.175, -11.428, 2.221)), (' A 412  EOH  H12', ' A 559  HOH  O  ', -0.587, (-19.334, -0.695, 14.358)), (' A 115  GLN HE22', ' A 416  PGE  C2 ', -0.584, (-14.335, -12.825, 23.455)), (' A  24  GLY  O  ', ' A 504  HOH  O  ', -0.561, (-32.374, -14.743, 42.32)), (' A  39  MET  HE2', ' A  60  MET  HE3', -0.553, (-18.763, -3.288, 41.608)), (' A 182  GLU  HG2', ' A 412  EOH  O  ', -0.553, (-21.939, -3.559, 12.289)), (' A  75  MET  O  ', ' A 416  PGE  O2 ', -0.54, (-11.907, -16.102, 23.931)), (' A  74  VAL  O  ', ' A 416  PGE  C1 ', -0.537, (-13.397, -13.917, 24.874)), (' A 121  SER  H  ', ' A 416  PGE  H2 ', -0.535, (-13.281, -13.355, 21.986)), (' A   1  THR HG23', ' A 410  EOH  H11', -0.532, (-26.75, -9.432, 56.267)), (' A 187  TYR  O  ', ' A 415  EDO  H22', -0.529, (-26.324, -8.917, 18.383)), (' A  40 BLYS  CE ', ' A 512  HOH  O  ', -0.516, (-13.284, -4.843, 53.117)), (' A   0  MET  HG3', ' A   1  THR  N  ', -0.516, (-28.225, -12.958, 55.743)), (' A   3  THR  HA ', ' A 410  EOH  C2 ', -0.504, (-23.702, -8.852, 56.163)), (' A 121  SER  OG ', ' A 416  PGE  H32', -0.503, (-11.49, -14.096, 21.316)), (' A  74  VAL  O  ', ' A 416  PGE  C2 ', -0.499, (-13.765, -14.142, 24.593)), (' A  38  ASN  OD1', ' A 408  EOH  H23', -0.496, (-12.989, -10.019, 40.618)), (' A 213  LYS  HE2', ' A 309  SER  O  ', -0.494, (2.919, -15.049, 17.478)), (' A 164  GLY  H  ', ' A 416  PGE  C5 ', -0.493, (-10.532, -18.487, 19.465)), (' A  75 BMET  HA ', ' A 416  PGE  H12', -0.484, (-12.064, -14.239, 26.207)), (' A  75 AMET  HA ', ' A 416  PGE  H12', -0.482, (-12.56, -14.2, 25.806)), (' A  38  ASN  OD1', ' A 408  EOH  C2 ', -0.479, (-13.325, -9.757, 39.977)), (' A 164  GLY  O  ', ' A 416  PGE  C6 ', -0.478, (-8.901, -18.582, 18.618)), (' A 259  HIS  HA ', ' A 416  PGE  HO1', -0.476, (-10.101, -13.123, 23.961)), (' A 164  GLY  O  ', ' A 416  PGE  H62', -0.471, (-8.878, -18.046, 18.605)), (' A  60  MET  SD ', ' A  64  GLY  HA3', -0.47, (-18.808, -5.681, 38.328)), (' A 146  GLU  OE1', ' A 413  EOH  O  ', -0.47, (-20.342, -7.764, 14.723)), (' A 124  PHE  HE1', ' A 413  EOH  H12', -0.469, (-18.897, -6.95, 17.382)), (' A 163  GLY  CA ', ' A 416  PGE  H5 ', -0.465, (-11.808, -19.048, 20.33)), (' A  35  TRP  CZ2', ' A  39  MET  CE ', -0.459, (-20.474, -2.259, 42.491)), (' A 237  GLU  HG2', ' A 408  EOH  H22', -0.449, (-11.001, -11.064, 38.934)), (' A 415  EDO  H11', ' A 584  HOH  O  ', -0.447, (-23.77, -8.008, 21.69)), (' A  71  PHE  HZ ', ' A 235  GLY  HA2', -0.446, (-8.87, -13.53, 32.333)), (' A 259  HIS  ND1', ' A 416  PGE  H1 ', -0.446, (-11.98, -11.767, 24.308)), (' A 271  THR  OG1', ' A 272  GLU  N  ', -0.445, (11.142, 9.621, 26.764)), (' A  68  SER  O  ', ' A  72  ARG  HD3', -0.444, (-12.914, -18.291, 34.115)), (' A 143 BSER  HB3', ' A 412  EOH  HO ', -0.442, (-20.113, -2.814, 12.054)), (' A  35  TRP  CZ2', ' A  39  MET  HE3', -0.441, (-20.635, -1.77, 42.842)), (' A  77  GLY  C  ', ' A 416  PGE  O4 ', -0.438, (-7.109, -19.16, 22.325)), (' A   1  THR  OG1', ' A 410  EOH  O  ', -0.437, (-26.322, -8.569, 55.097)), (' A 237  GLU  HG3', ' A 668 AHOH  O  ', -0.434, (-7.206, -11.692, 38.41)), (' A 104  ARG  NH2', ' A 280 ALEU HD21', -0.433, (-6.275, 5.944, 19.74)), (' A 414  PEG  H32', ' A 547  HOH  O  ', -0.431, (-9.246, -9.769, -2.389)), (' A 164  GLY  H  ', ' A 416  PGE  H52', -0.427, (-10.796, -18.711, 19.109)), (' A  78  PHE  CE1', ' A 416  PGE  H62', -0.423, (-7.937, -17.454, 19.554)), (' A 259  HIS  ND1', ' A 416  PGE  C1 ', -0.421, (-11.342, -11.959, 24.454)), (' A 256  ASP  N  ', ' A 256  ASP  OD1', -0.42, (0.865, -19.1, 28.124)), (' A 187  TYR  O  ', ' A 415  EDO  C2 ', -0.42, (-26.325, -9.427, 18.547)), (' A 124  PHE  CE1', ' A 413  EOH  H12', -0.419, (-18.981, -7.196, 17.371)), (' A 288  GLU  HB3', ' A 539  HOH  O  ', -0.416, (-19.013, -1.356, 28.309)), (' A 242  TYR  CZ ', ' A 295  VAL HG23', -0.416, (-6.122, -0.008, 29.329)), (' A 115  GLN HE22', ' A 416  PGE  H2 ', -0.415, (-13.899, -13.113, 23.067)), (' A 406  EOH  C2 ', ' A 415  EDO  O1 ', -0.415, (-25.626, -9.33, 22.806)), (' A 413  EOH  C2 ', ' A 692  HOH  O  ', -0.414, (-21.86, -3.615, 16.471)), (' A 259  HIS  HA ', ' A 416  PGE  O1 ', -0.413, (-10.024, -13.53, 24.193)), (' A  99  ARG  NH2', ' A 272  GLU  OE1', -0.412, (9.558, 9.628, 21.821)), (' A   2  LEU  O  ', ' A   3  THR  C  ', -0.41, (-22.574, -10.022, 53.372)), (' A 213  LYS  CE ', ' A 309  SER  C  ', -0.401, (3.289, -13.915, 17.537)), (' A  35  TRP  CH2', ' A  39  MET  HE3', -0.401, (-20.633, -1.811, 43.595)), (' A 185  TYR  N  ', ' A 186 BPRO  HD3', -0.4, (-26.973, -8.914, 8.807))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
