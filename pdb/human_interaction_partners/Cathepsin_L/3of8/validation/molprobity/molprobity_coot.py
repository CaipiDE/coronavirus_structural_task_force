# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 176 ', 'THR', 0.004941831474237939, (6.650999999999994, 28.81, 18.837))]
data['omega'] = []
data['rota'] = [('A', '  22 ', 'GLN', 0.2980855749753176, (16.227999999999998, 2.326000000000001, -2.982)), ('A', ' 109 ', 'ASN', 0.10557793819415032, (30.867999999999995, 22.929000000000002, -13.741)), ('A', ' 145 ', 'LEU', 0.0, (13.035999999999998, 7.812, 9.758)), ('A', ' 149 ', 'GLU', 0.0, (6.877999999999999, 17.886, 12.24)), ('A', ' 157 ', 'CYS', 0.15405817549128006, (22.47699999999999, 11.560000000000004, 18.07)), ('A', ' 175 ', 'SER', 0.10449777976655299, (8.420999999999994, 31.878000000000004, 17.465)), ('A', ' 207 ', 'ARG', 0.06175251832149289, (26.39999999999999, 21.899000000000004, 20.255000000000003))]
data['cbeta'] = []
data['probe'] = [(' A 178  SER  HA ', ' A 181  ASN  CB ', -1.183, (12.985, 29.691, 20.041)), (' A 178  SER  CA ', ' A 181  ASN  HB3', -1.062, (12.311, 29.609, 20.592)), (' A 178  SER  HA ', ' A 181  ASN  HB3', -1.052, (13.061, 29.636, 21.538)), (' A  93  GLU  OE1', ' A  97  GLU  HG3', -0.965, (20.132, 3.029, -15.99)), (' A 177  GLU  O  ', ' A 181  ASN  HB2', -0.949, (12.182, 28.836, 18.558)), (' A 177  GLU  O  ', ' A 181  ASN  CB ', -0.83, (12.932, 28.543, 19.19)), (' A 125  LYS  O  ', ' A 129  THR HG23', -0.763, (28.119, 32.949, 4.884)), (' A 151  ILE HD11', ' A 174  GLU  CG ', -0.722, (11.558, 25.725, 15.796)), (' A 178  SER  HA ', ' A 181  ASN  CG ', -0.69, (13.907, 30.181, 20.673)), (' A  93  GLU  OE1', ' A  97  GLU  CG ', -0.674, (20.948, 2.777, -15.204)), (' A 151  ILE HD11', ' A 174  GLU  HG3', -0.64, (11.337, 25.443, 16.522)), (' A 151  ILE HD12', ' A 177  GLU  OE1', -0.618, (11.959, 23.815, 18.423)), (' A   1  GLU  HG2', ' A 121  LYS  NZ ', -0.61, (29.994, 35.257, 12.635)), (' A 151  ILE HD11', ' A 174  GLU  HG2', -0.61, (11.683, 25.958, 15.806)), (' A 174  GLU  HB2', ' A 177  GLU  HB2', -0.605, (10.462, 27.008, 17.93)), (' A 174  GLU  O  ', ' A 177  GLU  O  ', -0.599, (11.434, 29.397, 18.696)), (' A 501  I0Y  C29', ' A 501  I0Y H32B', -0.597, (20.592, 5.249, 2.366)), (' A 501  I0Y  C32', ' A 501  I0Y  H29', -0.589, (19.748, 4.554, 1.617)), (' A 109  ASN  C  ', ' A 109  ASN HD22', -0.584, (30.827, 24.74, -13.294)), (' A 501  I0Y  H29', ' A 501  I0Y H32B', -0.552, (20.244, 4.586, 2.087)), (' A 501  I0Y  C20', ' A 501  I0Y  C27', -0.549, (22.667, 6.334, 2.547)), (' A 178  SER  N  ', ' A 181  ASN  HB3', -0.542, (12.069, 28.494, 21.048)), (' A 501  I0Y  C29', ' A 501  I0Y  C32', -0.533, (19.614, 4.75, 2.459)), (' A 177  GLU  C  ', ' A 181  ASN  HB3', -0.527, (12.546, 28.65, 20.337)), (' A   7  ASP  O  ', ' A  10  GLU  HG2', -0.526, (14.711, 32.635, 0.236)), (' A 154  GLU  O  ', ' A 157  CYS  HB2', -0.52, (20.193, 13.054, 18.805)), (' A 178  SER  HB2', ' A 181  ASN  ND2', -0.512, (13.367, 31.608, 20.407)), (' A  90  TYR  CZ ', ' A 100  LYS  HB2', -0.507, (24.412, 8.464, -18.055)), (' A 174  GLU  HG3', ' A 177  GLU  HB2', -0.502, (10.603, 26.088, 17.984)), (' A 151  ILE  CD1', ' A 174  GLU  HG3', -0.482, (11.829, 24.99, 16.693)), (' A   8  TRP  HB3', ' A  13  TYR  HB2', -0.466, (18.732, 29.531, -2.177)), (' A 180  ASN  HB3', ' A 206  ARG  HD2', -0.464, (17.51, 23.657, 21.555)), (' A  61  GLN  H  ', ' A  61  GLN  NE2', -0.463, (35.664, 9.748, -9.84)), (' A   1  GLU  HG2', ' A 121  LYS  HZ3', -0.463, (29.688, 34.819, 13.539)), (' A 147  TYR  CZ ', ' A 200  VAL HG23', -0.452, (12.521, 17.454, 10.643)), (' A 174  GLU  HB3', ' A 177  GLU  H  ', -0.448, (8.91, 27.094, 18.052)), (' A 142  GLU  OE2', ' A 146  PHE  HE1', -0.448, (11.729, 3.15, 13.181)), (' A   1  GLU  O  ', ' A   2  ALA  HB3', -0.428, (24.918, 35.835, 11.542)), (' A 118  LYS  C  ', ' A 119  GLN  HG3', -0.423, (33.636, 23.895, 14.176)), (' A 147  TYR  CE2', ' A 200  VAL HG23', -0.421, (12.576, 17.204, 10.28)), (' A 174  GLU  CB ', ' A 177  GLU  HB2', -0.42, (10.4, 26.758, 17.749)), (' A  56  ASP  HB3', ' A  99  CYS  HA ', -0.417, (27.695, 6.053, -15.683)), (' A 190  TRP  CZ2', ' A 501  I0Y  C25', -0.413, (17.455, 7.531, 4.559)), (' A 174  GLU  HB2', ' A 177  GLU  O  ', -0.411, (11.069, 28.324, 18.612)), (' A 174  GLU  CB ', ' A 177  GLU  H  ', -0.409, (9.329, 27.444, 17.873)), (' A   8  TRP  CE2', ' A 131  GLY  HA2', -0.401, (22.655, 30.66, 0.012))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
