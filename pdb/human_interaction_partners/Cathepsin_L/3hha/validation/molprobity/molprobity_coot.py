# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 174 ', 'SER', 0.0, (42.544, 2.089999999999998, -22.87))]
data['omega'] = [('B', ' 174 ', 'SER', None, (42.879, 0.7729999999999961, -23.421))]
data['rota'] = [('A', '  99 ', 'LYS', 0.05707498963351687, (-11.010000000000003, 20.397, -0.96)), ('A', ' 120 ', 'LYS', 0.046717845697109774, (10.784000000000002, -11.463000000000003, 10.077)), ('A', ' 156 ', 'CYS', 0.06420839445201218, (16.054000000000002, -6.067000000000002, -8.01)), ('B', '  21 ', 'GLN', 0.24542424843891922, (45.60100000000001, -31.22300000000001, -8.218)), ('B', ' 156 ', 'CYS', 0.06297603441360858, (36.42699999999999, -21.187000000000012, -27.536)), ('B', ' 175 ', 'THR', 0.08650194083757712, (41.128000000000014, 5.253999999999998, -24.512)), ('C', ' 156 ', 'CYS', 0.04881918721366674, (51.853, 5.472999999999996, -28.812)), ('D', ' 156 ', 'CYS', 0.067253580939239, (60.58, -36.162, -10.667))]
data['cbeta'] = [('C', ' 109 ', 'ASP', ' ', 0.261116501377508, (73.39800000000001, -4.277000000000001, -49.513)), ('D', ' 109 ', 'ASP', ' ', 0.29123652632048136, (69.15999999999998, -41.732000000000006, -40.163))]
data['probe'] = [(' D  25  CYS  SG ', ' D 301  NOW  C14', -1.451, (55.01, -37.806, -27.195)), (' C 195 BMET  SD ', ' C 805  HOH  O  ', -0.894, (53.238, -12.784, -29.146)), (' B 293 BHOH  O  ', ' D 147 BLYS  CE ', -0.857, (51.648, -17.835, -16.735)), (' B 174  SER  HB3', ' C 154  PRO  HG3', -0.835, (44.837, 2.657, -23.628)), (' B 155  ASP  HB2', ' B 756  HOH  O  ', -0.797, (39.938, -23.067, -32.572)), (' C 147 BLYS  NZ ', ' C 462  HOH  O  ', -0.78, (57.737, -16.238, -20.172)), (' A  99  LYS  HD2', ' A 660  HOH  O  ', -0.772, (-11.073, 21.985, -6.198)), (' A 148  GLU  OE1', ' A 195 AMET  HE2', -0.759, (-1.073, -15.037, -10.933)), (' A  37  GLN HE22', ' A  40  ARG HH11', -0.757, (-3.855, -2.627, 13.068)), (' B 293 BHOH  O  ', ' D 147 BLYS  NZ ', -0.748, (51.605, -17.728, -17.172)), (' C  37  GLN HE22', ' C  40  ARG HH11', -0.744, (65.014, -9.081, -50.856)), (' D  37  GLN HE22', ' D  40  ARG HH11', -0.741, (75.768, -35.838, -36.432)), (' B 173  GLU  OE2', ' B 691  HOH  O  ', -0.67, (42.731, -1.77, -28.339)), (' A 195 AMET  HE1', ' A 200  LYS  HE2', -0.639, (0.126, -15.636, -8.259)), (' A  23  GLY  HA2', ' A 221  PG4  H12', -0.635, (3.955, 8.156, -10.387)), (' A 221  PG4  H21', ' A 447  HOH  O  ', -0.619, (3.707, 4.436, -11.049)), (' D  25  CYS  SG ', ' D 301  NOW  C13', -0.618, (54.842, -38.864, -26.271)), (' D 142  SER  N  ', ' D 515  HOH  O  ', -0.616, (53.412, -29.07, -10.952)), (' B  10  LYS  NZ ', ' B 682  HOH  O  ', -0.615, (32.893, 0.775, -6.148)), (' B 124  LYS  NZ ', ' B 128  THR HG21', -0.614, (23.021, -2.184, -11.168)), (' C 153  GLU  H  ', ' C 208  HIS  CE1', -0.607, (49.276, 0.484, -29.165)), (' D  25  CYS  SG ', ' D 301  NOW  N15', -0.598, (54.379, -36.759, -26.692)), (' D  52  ASN  ND2', ' D  84  ASP  H  ', -0.597, (58.456, -38.362, -45.202)), (' C 153  GLU  H  ', ' C 208  HIS  HE1', -0.589, (49.5, 0.002, -28.541)), (' B  52  ASN  ND2', ' B  84  ASP  H  ', -0.584, (32.747, -24.217, 6.313)), (' C  52  ASN  ND2', ' C  84  ASP  H  ', -0.564, (81.667, -6.346, -41.609)), (' A  52  ASN  ND2', ' A  84  ASP  H  ', -0.56, (-10.246, 12.868, 3.228)), (' B 155  ASP  CB ', ' B 756  HOH  O  ', -0.55, (39.216, -23.238, -32.433)), (' C  41  LYS  HD2', ' C 220  VAL  CG1', -0.54, (72.793, -10.757, -52.264)), (' D 141  GLU  OE1', ' D 949  HOH  O  ', -0.531, (48.429, -25.273, -10.646)), (' B 293 BHOH  O  ', ' D 147 BLYS  HE3', -0.527, (51.4, -17.775, -16.378)), (' B 124  LYS  HZ2', ' B 128  THR HG21', -0.526, (22.851, -3.161, -11.268)), (' D  52  ASN HD22', ' D  84  ASP  H  ', -0.52, (58.22, -38.445, -44.579)), (' A 160 BASP  O  ', ' A 160 BASP  OD1', -0.517, (14.958, 0.809, -6.362)), (' B 147  LYS  HD3', ' C 147 BLYS  NZ ', -0.515, (55.436, -15.944, -20.159)), (' C  52  ASN HD22', ' C  84  ASP  H  ', -0.505, (81.379, -6.335, -40.747)), (' B  23  GLY  HA2', ' B 221  PGE  H6 ', -0.504, (39.904, -29.799, -10.856)), (' B 173  GLU  CG ', ' C 780  HOH  O  ', -0.504, (45.177, -1.517, -25.331)), (' B 173  GLU  HG3', ' C 780  HOH  O  ', -0.5, (45.379, -1.988, -24.937)), (' D 147 BLYS  HB2', ' D 612  HOH  O  ', -0.498, (57.878, -19.041, -15.024)), (' A 157  SER  HB3', ' A 160 BASP  OD1', -0.487, (16.409, -0.856, -6.665)), (' A  52  ASN HD22', ' A  84  ASP  H  ', -0.485, (-10.237, 12.992, 2.592)), (' C 123  MET  HE3', ' C 170  TYR  CE1', -0.479, (49.13, -10.117, -45.254)), (' B  52  ASN HD22', ' B  84  ASP  H  ', -0.474, (32.929, -24.268, 6.535)), (' B 147  LYS  HD3', ' C 147 BLYS  HZ3', -0.473, (55.558, -15.202, -19.923)), (' C 148  GLU  HG2', ' C 149  GLY  N  ', -0.472, (50.324, -12.881, -25.694)), (' B 221  PGE  H62', ' B 440  HOH  O  ', -0.468, (41.38, -27.589, -13.079)), (' D  34 BLEU HD21', ' D 109  ASP  OD2', -0.466, (67.095, -40.289, -38.988)), (' A 195 AMET  HE1', ' A 279  HOH  O  ', -0.464, (-0.449, -16.438, -9.13)), (' D   8  ARG  NH2', ' D 184  LEU HD21', -0.461, (68.854, -21.86, -26.35)), (' C 108  ASN  HB2', ' C 574  HOH  O  ', -0.461, (76.391, -8.712, -51.553)), (' B 174  SER  CB ', ' C 154  PRO  HG3', -0.447, (45.004, 2.985, -22.669)), (' A 195 AMET  CE ', ' A 279  HOH  O  ', -0.444, (-0.511, -16.297, -9.694)), (' B 180  ASN  N  ', ' B 730  HOH  O  ', -0.443, (37.794, -2.307, -28.265)), (' B 159  GLU  OE1', ' B 703  HOH  O  ', -0.443, (24.619, -22.296, -23.802)), (' C 147 BLYS  HA ', ' C 147 BLYS  HD2', -0.441, (56.877, -11.631, -22.165)), (' B 221  PGE  C3 ', ' B 882  HOH  O  ', -0.441, (45.97, -26.908, -11.476)), (' C  41  LYS  HD2', ' C 220  VAL HG12', -0.44, (72.109, -10.685, -52.161)), (' C   9  GLU  HG2', ' C 563  HOH  O  ', -0.44, (57.174, -21.549, -38.049)), (' B   1  ALA  HB3', ' B 123  MET  HE2', -0.439, (28.29, -0.801, -17.492)), (' B 301  NOW H27A', ' B 952  HOH  O  ', -0.432, (25.564, -31.643, -13.514)), (' C   7  TRP  CE2', ' C 130  GLY  HA2', -0.43, (60.126, -12.46, -46.166)), (' D   7  TRP  CE2', ' D 130  GLY  HA2', -0.428, (75.024, -29.684, -31.735)), (' B 137  ASP  OD2', ' B 140  HIS  HE1', -0.425, (37.11, -23.937, -25.786)), (' B 221  PGE  H42', ' B 221  PGE  H62', -0.425, (42.437, -28.73, -13.362)), (' B 147  LYS  CD ', ' C 147 BLYS  NZ ', -0.424, (55.312, -15.712, -20.405)), (' B 901  HOH  O  ', ' D 145  PHE  CZ ', -0.422, (48.392, -25.328, -14.289)), (' B 174  SER  O  ', ' B 175  THR HG23', -0.416, (40.432, 2.933, -24.93)), (' C 137  ASP  OD2', ' C 140  HIS  HE1', -0.415, (54.898, 6.142, -28.056)), (' A 117  LYS  NZ ', ' A 576  HOH  O  ', -0.41, (12.529, 2.253, 6.912)), (' A 222  ACT  O  ', ' A 994  HOH  O  ', -0.408, (7.063, 9.701, -10.251)), (' A 221  PG4  H22', ' A 221  PG4  H41', -0.407, (3.886, 4.672, -12.653)), (' A 141  GLU  CG ', ' A 145  PHE  CE2', -0.404, (8.889, -6.106, -20.478))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
