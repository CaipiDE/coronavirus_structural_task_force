# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 161 ', 'MET', 0.024978806372086878, (0.7739999999999998, 33.47099999999998, 20.075))]
data['omega'] = []
data['rota'] = [('A', ' 118 ', 'GLN', 0.009563265786101999, (-3.921, -2.271, 24.527)), ('A', ' 147 ', 'LYS', 0.12851459505968804, (-17.769, -14.293, 4.709000000000001)), ('A', ' 148 ', 'GLU', 0.28129914110392457, (-16.398, -16.493, 7.510000000000002)), ('A', ' 155 ', 'ASP', 0.03527762198433547, (-1.863, -5.0889999999999995, 4.906)), ('A', ' 156 ', 'CYS', 0.06122702054093811, (-3.999000000000001, -3.835999999999999, 7.823)), ('B', '  34 ', 'LEU', 0.17090559037324812, (3.111999999999999, 16.961, 6.990000000000002)), ('B', ' 148 ', 'GLU', 0.24384628791905366, (-16.996000000000006, 22.302999999999997, 24.244)), ('B', ' 156 ', 'CYS', 0.05381275654684438, (-6.843999999999998, 36.727, 23.851)), ('B', ' 184 ', 'LEU', 0.25739444769118774, (-11.694, 23.29, 13.531))]
data['cbeta'] = []
data['probe'] = [(' A  23  GLY  HA2', ' A 302  HOH  O  ', -1.078, (-19.722, 5.538, 5.877)), (' B  23  GLY  HA2', ' B 406  HOH  O  ', -0.942, (5.369, 22.514, 24.106)), (' B  64  GLY  HA2', ' B 599  HOH  O  ', -0.904, (13.096, 20.258, 20.325)), (' B  54  VAL  HA ', ' B 599  HOH  O  ', -0.866, (12.137, 19.551, 19.235)), (' A  77  VAL HG23', ' A 330  HOH  O  ', -0.737, (-25.641, 10.307, 21.5)), (' B 160  ASP  HB3', ' B 503  HOH  O  ', -0.735, (1.237, 39.701, 21.501)), (' B  31  THR  O  ', ' B  35  GLU  HG3', -0.716, (1.994, 15.045, 9.715)), (' A  48  LEU HD21', ' A 503  HOH  O  ', -0.707, (-32.5, 2.916, 24.312)), (' A  76  TYR  HD2', ' A 330  HOH  O  ', -0.701, (-25.648, 11.988, 20.639)), (' A 108  ASN HD22', ' A 109  ASP  H  ', -0.673, (-27.615, 10.071, 28.297)), (' B  19  GLN  NE2', ' B 406  HOH  O  ', -0.659, (4.244, 21.799, 24.027)), (' B  92  GLU  OE1', ' B  96  GLU  HG3', -0.644, (14.381, 9.903, 23.423)), (' B  38  MET  HE2', ' B 107  ALA  HA ', -0.625, (7.195, 11.747, 3.221)), (' A   3  ARG  HG3', ' A   3  ARG HH11', -0.607, (-9.932, -21.309, 28.718)), (' A 106  VAL HG23', ' A 503  HOH  O  ', -0.597, (-32.905, 3.91, 24.416)), (' A 107  ALA  HB2', ' A 503  HOH  O  ', -0.594, (-31.677, 3.848, 24.888)), (' A 137  ASP  OD2', ' A 140  HIS  HE1', -0.591, (-6.376, -1.437, 6.548)), (' B 159  GLU  HG3', ' B 503  HOH  O  ', -0.581, (1.51, 40.529, 21.013)), (' B  25  CSD  OD2', ' B 163  HIS  HA ', -0.579, (2.492, 26.087, 21.339)), (' B 173  GLU  HG2', ' B 522  HOH  O  ', -0.571, (-21.674, 24.277, 15.13)), (' A 115  ILE HD11', ' A 217  TYR  HE1', -0.555, (-14.138, 0.694, 28.969)), (' A  38  MET  HE2', ' A 107  ALA  HA ', -0.551, (-31.467, 4.659, 28.033)), (' A  19  GLN  NE2', ' A 302  HOH  O  ', -0.549, (-20.794, 4.355, 6.548)), (' A   8  ARG  HD3', ' A 198  TYR  CZ ', -0.536, (-23.793, -10.629, 17.368)), (' B 141  GLU  HG3', ' B 145  PHE  CD2', -0.53, (-8.172, 26.106, 33.601)), (' B   3  ARG  HG3', ' B   3  ARG HH11', -0.52, (-22.865, 28.094, 2.767)), (' B 137  ASP  OD2', ' B 140  HIS  HE1', -0.517, (-4.299, 34.605, 25.057)), (' A 202  ALA  HB1', ' A 205  ARG  HG3', -0.513, (-4.363, -11.974, 14.471)), (' B 144  LEU HD11', ' B 400  OPT  H9 ', -0.508, (-1.952, 23.991, 30.071)), (' A 138  ALA  HB1', ' A 143  PHE  CD2', -0.507, (-14.126, -3.484, 6.416)), (' A 108  ASN HD22', ' A 109  ASP  N  ', -0.497, (-27.322, 9.746, 28.77)), (' A 205  ARG  NH1', ' A 368  HOH  O  ', -0.489, (-4.465, -14.776, 12.489)), (' A 141  GLU  HB2', ' A 145  PHE  CE2', -0.488, (-12.07, -7.595, -2.73)), (' A  53  LEU  CD2', ' A 330  HOH  O  ', -0.487, (-25.784, 10.975, 20.157)), (' B  26  TRP  HZ2', ' B 599  HOH  O  ', -0.486, (12.043, 20.555, 19.77)), (' A 428  HOH  O  ', ' B 195  MET  HE2', -0.482, (-18.278, 18.874, 21.976)), (' B 158  SER  HB3', ' B 448  HOH  O  ', -0.477, (-6.636, 39.271, 17.778)), (' A 101  ASN  OD1', ' A 103  LYS  HB3', -0.477, (-41.586, 13.639, 22.703)), (' B 138  ALA  HB1', ' B 143  PHE  CD2', -0.477, (-4.423, 27.307, 24.581)), (' B  52  ASN  C  ', ' B  52  ASN HD22', -0.472, (14.018, 14.053, 14.384)), (' B 108  ASN  ND2', ' B 109  ASP  H  ', -0.471, (11.462, 16.444, 2.551)), (' A 185  VAL  HB ', ' A 199  VAL HG13', -0.467, (-16.152, -8.051, 13.758)), (' B 140  HIS  HD2', ' B 560  HOH  O  ', -0.466, (-6.485, 35.531, 30.027)), (' B 110  THR  O  ', ' B 110  THR HG22', -0.465, (10.885, 23.096, -1.3)), (' B  49  SER  OG ', ' B  89  TYR  HB3', -0.464, (10.533, 9.375, 15.508)), (' B 181  LYS  HD2', ' B 204  ASP  OD2', -0.464, (-16.427, 33.26, 9.384)), (' A 160  ASP  O  ', ' A 160  ASP  OD1', -0.461, (-6.038, 2.926, 9.024)), (' A 181  LYS  NZ ', ' A 204  ASP  HB2', -0.46, (-4.105, -13.982, 20.823)), (' A  91  TYR  CZ ', ' A  93  ALA  HA ', -0.458, (-28.354, 5.777, 7.069)), (' A  49  SER  OG ', ' A  89  TYR  HB3', -0.452, (-33.669, 8.135, 15.652)), (' A  52  ASN  C  ', ' A  52  ASN HD22', -0.452, (-30.448, 12.521, 16.991)), (' A 117  LYS  NZ ', ' A 412  HOH  O  ', -0.446, (-4.108, 7.058, 19.376)), (' B 180  ASN  N  ', ' B 441  HOH  O  ', -0.444, (-20.745, 33.884, 16.026)), (' B 120  LYS  HG3', ' B 546  HOH  O  ', -0.443, (-10.136, 38.063, 5.819)), (' B 214  ALA  HB1', ' B 400  OPT  O51', -0.443, (3.566, 31.481, 13.509)), (' B 192  GLU  HB2', ' B 443  HOH  O  ', -0.442, (-7.222, 14.3, 27.697)), (' A 199  VAL HG22', ' A 201  MET  HG3', -0.442, (-13.445, -9.936, 11.672)), (' A   7  TRP  CE2', ' A 130  GLY  HA2', -0.442, (-20.244, -7.404, 28.124)), (' A 108  ASN  ND2', ' A 109  ASP  H  ', -0.439, (-27.336, 10.601, 28.819)), (' B  25  CSD  OD1', ' B 406  HOH  O  ', -0.437, (4.896, 23.104, 23.788)), (' B 116  PRO  HD3', ' B 605  HOH  O  ', -0.437, (0.679, 33.43, 1.409)), (' B  46  ILE  N  ', ' B  46  ILE HD12', -0.434, (0.906, 7.406, 6.022)), (' B   8  ARG  HD3', ' B 198  TYR  CZ ', -0.431, (-9.653, 16.506, 14.0)), (' A  58  GLY  N  ', ' A  59  PRO  CD ', -0.428, (-24.211, 18.591, 15.994)), (' A 120  LYS  C  ', ' A 120  LYS  HD2', -0.427, (-5.549, -6.234, 29.268)), (' A  92  GLU  OE2', ' A  96  GLU  HG3', -0.426, (-33.952, 12.377, 7.103)), (' B  28  PHE  CD2', ' B  50  GLU  HG2', -0.425, (3.442, 15.37, 18.295)), (' B  28  PHE  CG ', ' B  50  GLU  HG2', -0.421, (3.69, 16.095, 18.327)), (' B 136  ILE  CD1', ' B 138  ALA  HB2', -0.418, (-3.818, 28.225, 21.959)), (' A 122  LEU  O  ', ' A 126  VAL HG23', -0.417, (-12.979, -5.505, 25.646)), (' B 191  GLU  HG3', ' B 192  GLU  OE1', -0.416, (-9.488, 10.767, 25.561)), (' B  45  LEU  HA ', ' B 455  HOH  O  ', -0.411, (-0.22, 9.984, 5.689)), (' A 151  TYR  HB3', ' A 201  MET  HG2', -0.408, (-11.126, -10.11, 11.01)), (' A  34  LEU  HA ', ' A  34  LEU HD23', -0.406, (-24.666, 3.187, 25.975)), (' B 220  VAL  O  ', ' B 220  VAL HG23', -0.404, (3.975, 17.668, -2.191)), (' A   3  ARG  HG3', ' A   3  ARG  NH1', -0.403, (-10.114, -21.268, 28.514)), (' B 146  TYR  CE2', ' B 199  VAL HG23', -0.402, (-12.084, 24.136, 22.133)), (' B 149  GLY  HA2', ' B 551  HOH  O  ', -0.401, (-19.673, 23.761, 20.941))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
