# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  25 ', 'CYS', 0.0032120289470009156, (37.35799999999999, -25.131, -9.21)), ('A', ' 116 ', 'PRO', 0.08111078535624665, (20.119, -14.05, -17.352)), ('A', ' 139 ', 'GLY', 0.01083641305175471, (39.633, -26.429000000000002, -22.483)), ('A', ' 154 ', 'PRO', 0.09529928859401822, (39.63999999999999, -18.65499999999999, -32.013)), ('A', ' 213 ', 'SER', 0.006183229061775722, (26.238, -18.603, -20.039)), ('B', ' 190 ', 'GLY', 0.023240252326142505, (-5.945000000000001, -1.6249999999999973, -12.262000000000004)), ('C', ' 117 ', 'LYS', 0.012731089233554269, (72.543, -43.62899999999999, -18.643))]
data['omega'] = []
data['rota'] = [('A', '  47 ', 'SER', 0.17272450466251102, (38.675, -16.318, 3.724)), ('A', '  86 ', 'GLU', 0.013647189747858916, (39.925, -21.232, 6.036000000000001)), ('A', ' 106 ', 'VAL', 0.028474102591670707, (31.425, -17.00400000000001, 9.441000000000004)), ('B', '  42 ', 'THR', 0.0013599335943581536, (-14.744999999999997, -0.08300000000000018, 13.494)), ('B', '  44 ', 'ARG', 0.24197546484680002, (-16.730000000000008, -0.9190000000000009, 8.55)), ('B', '  87 ', 'GLU', 0.01993490340290298, (-16.897999999999996, 8.492, -2.751000000000001)), ('B', '  97 ', 'SER', 0.24764927352294838, (-6.096999999999998, 22.455, -4.953)), ('B', ' 118 ', 'GLN', 0.0, (13.799999999999999, -7.251999999999999, 8.49)), ('B', ' 120 ', 'LYS', 0.0, (10.746999999999998, -11.402000000000003, 9.821000000000003)), ('B', ' 147 ', 'LYS', 0.0, (1.0310000000000028, -12.526, -15.05)), ('B', ' 156 ', 'CYS', 0.11493530057809721, (16.11, -6.060999999999996, -8.141)), ('B', ' 160 ', 'ASP', 0.2454243856889293, (16.524, 2.096, -4.416)), ('B', ' 206 ', 'ARG', 0.1722422924238967, (17.267000000000003, -11.354, 1.78)), ('B', ' 220 ', 'VAL', 0.24976724887192286, (-5.51, 4.263000000000001, 14.443)), ('C', '   4 ', 'SER', 0.21577079016334855, (77.798, -24.024999999999995, -22.748)), ('C', '  14 ', 'THR', 0.16284078658038983, (63.55799999999998, -26.18, -36.664)), ('C', ' 108 ', 'ASN', 0.014434351062457764, (67.649, -41.266, -44.005)), ('C', ' 155 ', 'ASP', 0.06995201070385573, (58.52199999999998, -35.112, -7.232)), ('C', ' 156 ', 'CYS', 0.2173664491367733, (60.281, -36.474, -10.412000000000004)), ('C', ' 159 ', 'GLU', 0.17675287427117875, (63.10499999999997, -44.349, -14.072000000000003)), ('C', ' 176 ', 'GLU', 0.24649997150146472, (69.14, -18.521, -5.247)), ('C', ' 219 ', 'THR', 0.05847714492119849, (73.483, -41.985, -37.091)), ('D', '  35 ', 'GLU', 0.10577383796166076, (70.45900000000003, -12.072, -42.862)), ('D', '  40 ', 'ARG', 0.0968235077785221, (67.483, -15.706, -50.487)), ('D', '  57 ', 'SER', 0.11516462587553189, (79.36, 3.208000000000009, -40.18100000000001)), ('D', '  95 ', 'GLU', 0.2970224798980297, (81.828, 1.8390000000000057, -29.622000000000007)), ('D', '  97 ', 'SER', 0.26764546997858596, (87.47500000000002, 1.302000000000005, -33.237)), ('D', ' 118 ', 'GLN', 0.0, (51.07, 2.924000000000003, -45.903)), ('D', ' 120 ', 'LYS', 0.0, (49.37799999999999, -1.978999999999992, -47.524)), ('D', ' 147 ', 'LYS', 0.04359790750746077, (55.012, -10.803999999999997, -22.53900000000001)), ('D', ' 156 ', 'CYS', 0.06648578953817277, (51.52400000000001, 5.267000000000006, -29.527)), ('D', ' 180 ', 'ASN', 0.0, (42.63399999999999, -9.282000000000002, -34.649))]
data['cbeta'] = []
data['probe'] = [(' D 192  GLU  OE2', ' D 245  HOH  O  ', -0.985, (66.8, -16.074, -19.669)), (' B 206  ARG  HG2', ' B 206  ARG  O  ', -0.898, (18.116, -9.625, -0.043)), (' D 180  ASN  N  ', ' D 180  ASN HD22', -0.803, (43.154, -7.6, -34.345)), (' D 123  MET  SD ', ' D 203  LYS  NZ ', -0.762, (49.226, -7.557, -43.823)), (' D 180  ASN  N  ', ' D 180  ASN  ND2', -0.742, (42.213, -7.174, -34.696)), (' C 173  GLU  O  ', ' C 180  ASN  HB2', -0.719, (72.868, -20.594, -13.15)), (' B  13  VAL  O  ', ' B 236  HOH  O  ', -0.713, (-12.417, -5.25, 0.014)), (' B 206  ARG  CG ', ' B 206  ARG  O  ', -0.687, (18.484, -9.418, 0.681)), (' D  53  LEU  O  ', ' D  57  SER  OG ', -0.665, (77.792, 1.077, -38.555)), (' B  80  ASN  ND2', ' B  82  GLY  O  ', -0.652, (-8.036, 15.012, 6.54)), (' A  24  SER  O  ', ' A  26  TRP  N  ', -0.652, (35.683, -26.061, -8.303)), (' B  52  ASN HD22', ' B  84  ASP  HB2', -0.65, (-10.724, 13.184, 1.487)), (' C 173  GLU  O  ', ' C 180  ASN  CB ', -0.649, (72.586, -21.242, -12.516)), (' B 129  VAL HG11', ' B 217  TYR  CE2', -0.624, (0.187, -1.548, 12.492)), (' B 167  VAL HG22', ' B 185  VAL HG22', -0.623, (3.145, -6.737, 0.021)), (' A  71  ASP  OD2', ' A 221  BD3  N13', -0.614, (23.784, -22.619, -12.036)), (' A  37  GLN  NE2', ' A 129  VAL HG12', -0.602, (27.671, -9.598, -5.356)), (' A 195  MET  HE1', ' A 200  LYS  HE2', -0.578, (46.084, -7.386, -17.337)), (' C 146  TYR  CE2', ' C 199  VAL HG23', -0.577, (61.047, -24.556, -19.221)), (' B 195  MET  HE1', ' B 200  LYS  NZ ', -0.576, (-0.358, -16.943, -8.388)), (' A  70  MET  HG2', ' A 133  SER  HB3', -0.576, (30.459, -19.583, -9.524)), (' D  51  GLN  NE2', ' D  55  ASP  OD1', -0.569, (81.801, -1.414, -32.284)), (' D 109  ASP  HB2', ' D 219  THR  O  ', -0.566, (72.301, -4.867, -51.047)), (' B 118  GLN  HG3', ' B 249  HOH  O  ', -0.566, (16.947, -7.471, 9.224)), (' D  52  ASN  ND2', ' D  84  ASP  HB2', -0.557, (82.613, -7.552, -40.03)), (' D 117  LYS  HG3', ' D 213  SER  HA ', -0.556, (55.882, 5.21, -43.018)), (' D 207  ASN  ND2', ' D 213  SER  OG ', -0.555, (53.137, 5.195, -40.122)), (' B  42  THR HG22', ' B 238  HOH  O  ', -0.554, (-17.448, 1.389, 13.937)), (' A 141  GLU  HB2', ' A 145  PHE  CE2', -0.553, (49.378, -25.308, -24.373)), (' D  52  ASN HD22', ' D  84  ASP  HB2', -0.553, (82.167, -7.681, -39.953)), (' C  48  LEU HD21', ' C 106  VAL HG23', -0.549, (63.712, -34.395, -44.788)), (' A  51  GLN  NE2', ' A  94  THR  O  ', -0.549, (39.492, -32.65, 0.563)), (' C 122  LEU  O  ', ' C 126  VAL HG23', -0.543, (74.745, -34.664, -24.604)), (' C  78  GLN  NE2', ' C 110  ALA  O  ', -0.542, (70.477, -49.15, -39.481)), (' D 122  LEU  O  ', ' D 126  VAL HG23', -0.537, (55.69, -6.022, -45.973)), (' C  13  VAL HG11', ' C 198  TYR  OH ', -0.535, (64.878, -25.445, -31.269)), (' D  14  THR  HB ', ' D  15  PRO  CD ', -0.522, (70.287, -16.343, -35.717)), (' C 167  VAL HG22', ' C 185  VAL HG22', -0.522, (67.453, -31.303, -23.195)), (' A 136  ILE HD13', ' A 201  MET  SD ', -0.521, (37.796, -17.473, -19.566)), (' A 195  MET  HE1', ' A 200  LYS  CE ', -0.521, (45.71, -7.394, -17.936)), (' D  38  MET  HE2', ' D 106  VAL  O  ', -0.52, (76.875, -12.873, -47.587)), (' C   7  TRP  CE2', ' C 130  GLY  HA2', -0.52, (75.019, -30.64, -31.862)), (' B 142  SER  OG ', ' B 151  TYR  OH ', -0.518, (11.287, -7.225, -13.05)), (' A 132  ILE  O  ', ' A 166  LEU HD12', -0.517, (32.702, -14.792, -10.138)), (' D 146  TYR  OH ', ' D 195  MET  HE2', -0.515, (52.982, -11.095, -28.306)), (' D  41  LYS  HD2', ' D 220  VAL HG12', -0.515, (72.908, -11.364, -53.001)), (' A 138  ALA  O  ', ' A 140  HIS  N  ', -0.515, (41.364, -24.631, -22.809)), (' D 125  ALA  O  ', ' D 129  VAL HG23', -0.514, (58.415, -8.097, -49.862)), (' D 123  MET  CE ', ' D 203  LYS  HZ1', -0.509, (48.472, -8.33, -44.363)), (' B  64  GLY  N  ', ' B 255  HOH  O  ', -0.506, (1.773, 15.995, -3.525)), (' B 123  MET  HE3', ' B 170  TYR  CE1', -0.505, (4.073, -15.805, 6.994)), (' D 192  GLU  CD ', ' D 245  HOH  O  ', -0.504, (66.962, -15.448, -19.619)), (' A  38  MET  HE2', ' A 107  ALA  HA ', -0.503, (29.505, -15.335, 6.147)), (' A 161  MET  HE3', ' A 213  SER  HB2', -0.503, (28.326, -20.694, -19.681)), (' D 180  ASN  N  ', ' D 244  HOH  O  ', -0.501, (42.057, -8.862, -32.494)), (' C  71  ASP  OD2', ' C 221  BD3  N13', -0.497, (66.637, -45.299, -27.687)), (' A   8  ARG HH21', ' A 184  LEU HD21', -0.49, (41.736, -6.062, -11.532)), (' D  83  LEU  O  ', ' D 105  SER  HA ', -0.487, (81.77, -9.579, -44.4)), (' B 149  GLY  O  ', ' B 200  LYS  HE3', -0.486, (2.531, -16.439, -7.76)), (' B  64  GLY  HA3', ' B  95  GLU  OE1', -0.485, (1.177, 16.803, -6.899)), (' B   8  ARG  NH2', ' B 184  LEU HD21', -0.483, (-4.524, -12.836, -2.461)), (' A  10  LYS  HA ', ' A 235  HOH  O  ', -0.483, (38.548, -0.572, -1.647)), (' A  37  GLN HE22', ' A 129  VAL HG12', -0.482, (27.225, -9.109, -5.036)), (' C 134  VAL HG21', ' C 167  VAL HG23', -0.482, (66.72, -34.183, -23.613)), (' B  50  GLU  OE1', ' B  86  GLU  OE2', -0.481, (-9.156, 6.222, -4.615)), (' B  32  GLY  HA3', ' B 166  LEU HD22', -0.481, (-3.581, -0.817, 0.871)), (' D 109  ASP  CB ', ' D 219  THR  O  ', -0.478, (72.465, -5.065, -51.056)), (' B  69  LEU HD12', ' B  72  TYR  CE2', -0.473, (8.772, 11.514, 3.338)), (' A 126  VAL HG22', ' A 132  ILE HG12', -0.468, (30.216, -10.505, -11.726)), (' B  11  GLY  O  ', ' B 244  HOH  O  ', -0.468, (-13.866, -5.648, 4.617)), (' B 129  VAL HG11', ' B 217  TYR  CD2', -0.467, (-0.056, -1.595, 12.007)), (' D  14  THR  HB ', ' D  15  PRO  HD2', -0.465, (70.632, -16.413, -35.029)), (' C  70  MET  O  ', ' C  73  ALA  HB3', -0.463, (62.624, -42.803, -33.71)), (' D  18  ASN  OD1', ' D 223  HOH  O  ', -0.459, (69.661, -6.335, -25.145)), (' A  50  GLU  O  ', ' A  54  VAL HG23', -0.458, (36.327, -27.754, -1.42)), (' A 108  ASN  OD1', ' A 109  ASP  N  ', -0.458, (23.685, -18.448, 4.263)), (' C  52  ASN HD22', ' C  84  ASP  H  ', -0.458, (58.511, -39.061, -44.972)), (' C  13  VAL HG12', ' C  14  THR  O  ', -0.456, (63.916, -25.656, -34.067)), (' C  22  CYS  HB2', ' C  93  ALA  O  ', -0.456, (46.602, -36.352, -32.916)), (' A 151  TYR  HD2', ' A 201  MET  HE3', -0.456, (39.521, -16.766, -21.856)), (' A 146  TYR  CE2', ' A 199  VAL HG23', -0.453, (44.974, -14.2, -19.001)), (' B 161  MET  HB2', ' B 161  MET  HE2', -0.45, (12.876, 2.31, -1.329)), (' C  77  VAL HG12', ' C 108  ASN  HA ', -0.45, (66.074, -41.929, -43.664)), (' B 201  MET  O  ', ' B 202  ALA  C  ', -0.447, (8.327, -12.758, -2.007)), (' B  51  GLN  OE1', ' B  92  GLU  N  ', -0.445, (-8.27, 12.526, -8.837)), (' B 108 BASN  O  ', ' B 220  VAL HG22', -0.445, (-6.989, 6.157, 11.626)), (' B  51  GLN  NE2', ' B  94  THR  O  ', -0.444, (-5.509, 14.836, -8.055)), (' A 126  VAL HG22', ' A 132  ILE  CG1', -0.444, (29.963, -10.035, -12.003)), (' A 120  LYS  HD2', ' A 120  LYS  N  ', -0.443, (25.525, -7.501, -22.251)), (' B  58  GLY  N  ', ' B  59  PRO  CD ', -0.442, (0.826, 19.475, 1.988)), (' A 106  VAL HG13', ' A 253  HOH  O  ', -0.441, (33.357, -17.388, 12.443)), (' B  70  MET  O  ', ' B  73  ALA  HB3', -0.44, (1.268, 8.148, 4.396)), (' C 150  ILE HD11', ' C 182  TYR  HD2', -0.438, (70.348, -22.699, -16.205)), (' C  52  ASN  ND2', ' C  84  ASP  H  ', -0.437, (58.706, -39.405, -44.966)), (' D 195  MET  HE1', ' D 200  LYS  CE ', -0.437, (52.392, -12.782, -29.979)), (' A 144  LEU HD21', ' C 144  LEU HD22', -0.435, (48.974, -28.421, -19.347)), (' B   3  ARG  HB2', ' B 258  HOH  O  ', -0.433, (-0.404, -21.88, 6.786)), (' B   7  TRP  CE2', ' B 130  GLY  HA2', -0.432, (-3.635, -7.588, 8.951)), (' B  57  SER  HB2', ' B  62  ASN HD22', -0.43, (1.32, 14.217, 2.222)), (' D  92  GLU  O  ', ' D  94  THR HG22', -0.43, (81.313, -3.601, -26.212)), (' D 123  MET  CE ', ' D 203  LYS  NZ ', -0.429, (48.263, -8.45, -44.134)), (' C  13  VAL  O  ', ' C  45  LEU HD21', -0.429, (66.366, -25.354, -37.691)), (' A 146  TYR  CZ ', ' A 199  VAL HG23', -0.428, (44.834, -13.936, -19.495)), (' D  37  GLN HE22', ' D  40  ARG  NH1', -0.427, (65.008, -10.79, -50.594)), (' C 116  PRO  O  ', ' C 118  GLN  N  ', -0.425, (73.904, -42.308, -19.381)), (' A 185  VAL  HB ', ' A 199  VAL HG13', -0.425, (39.909, -14.29, -16.386)), (' B 202  ALA  HB3', ' B 208  HIS  CD2', -0.424, (11.937, -11.646, -4.747)), (' C  54  VAL HG12', ' C  95  GLU  HG3', -0.424, (49.575, -41.942, -36.88)), (' A 220  VAL  C  ', ' B 206  ARG  HD3', -0.422, (21.742, -10.964, 0.482)), (' C 173  GLU  O  ', ' C 180  ASN  HB3', -0.422, (72.397, -20.695, -11.684)), (' A  53  LEU HD22', ' A  73  ALA  HB1', -0.421, (29.816, -24.74, -2.267)), (' D 129  VAL HG11', ' D 217  TYR  CE2', -0.42, (63.346, -6.262, -50.356)), (' D 126  VAL HG22', ' D 132  ILE HG13', -0.419, (58.427, -6.471, -44.807)), (' B 146  TYR  O  ', ' B 194  GLY  HA2', -0.418, (0.477, -9.748, -13.571)), (' B 117  LYS  C  ', ' B 118  GLN HE21', -0.418, (14.874, -5.274, 9.723)), (' D  55  ASP  HB3', ' D  98  CYS  HA ', -0.417, (84.699, -0.379, -35.976)), (' D  16  VAL  HA ', ' D 186  LYS  HE2', -0.416, (66.636, -12.38, -32.283)), (' C 206  ARG  O  ', ' C 207  ASN  C  ', -0.414, (68.412, -37.088, -12.109)), (' C 168  VAL  CG2', ' C 184  LEU  HG ', -0.414, (68.085, -25.941, -26.274)), (' B 195  MET  HE1', ' B 200  LYS  HZ3', -0.414, (-0.768, -16.709, -7.767)), (' D  51  GLN  HB2', ' D  91  TYR  HA ', -0.41, (79.906, -6.725, -31.507)), (' A  26  TRP  CZ3', ' A  62  ASN  ND2', -0.41, (30.406, -28.202, -4.702)), (' C 146  TYR  CD2', ' C 199  VAL HG23', -0.408, (60.424, -24.875, -18.73)), (' A  11  GLY  O  ', ' A  45  LEU HD13', -0.406, (37.317, -8.49, 0.419)), (' B 152  PHE  HA ', ' B 208  HIS  NE2', -0.406, (12.417, -11.818, -7.207)), (' C  70  MET  HE2', ' C 222  HOH  O  ', -0.406, (64.689, -40.765, -27.173)), (' C 168  VAL HG22', ' C 184  LEU  HG ', -0.405, (67.896, -26.1, -26.195)), (' D 146  TYR  OH ', ' D 195  MET  CE ', -0.403, (53.265, -11.452, -28.443)), (' D  53  LEU  HA ', ' D  53  LEU HD23', -0.403, (78.274, -1.681, -39.881)), (' B  57  SER  CB ', ' B  62  ASN HD22', -0.403, (1.229, 14.189, 2.046)), (' B 118  GLN  N  ', ' B 118  GLN HE21', -0.402, (14.387, -5.544, 9.409))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
