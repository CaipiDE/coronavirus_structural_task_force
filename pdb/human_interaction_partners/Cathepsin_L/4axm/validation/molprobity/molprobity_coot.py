# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 209 ', 'CYS', 0.014806532037308417, (-22.517, 20.602, -22.703)), ('A', ' 209 ', 'CYS', 0.01462614455715822, (-22.517, 20.602, -22.703)), ('I', '  86 ', 'GLU', 0.02929034850696203, (-16.658, 13.173999999999996, -61.2)), ('I', '  93 ', 'ALA', 0.02263705035819783, (-21.845, 20.948, -69.91299999999998)), ('I', ' 174 ', 'SER', 0.041614197756856874, (-39.01300000000001, -15.066, -74.29599999999998)), ('L', ' 119 ', 'GLU', 0.013310905471675523, (-16.637, 52.565, -12.332)), ('O', '  25 ', 'CYS', 0.005092783273139591, (19.716, 32.237, -37.77699999999999)), ('O', ' 156 ', 'CYS', 0.004710759352290525, (23.408000000000005, 41.972999999999985, -53.47899999999999)), ('O', ' 202 ', 'ALA', 0.014100547986194444, (25.249, 50.173, -45.80399999999999))]
data['omega'] = []
data['rota'] = [('A', '   3 ', 'ARG', 0.0, (-21.078000000000003, 38.374, -34.781)), ('A', '  22 ', 'CYS', 0.09518710780096504, (-22.46500000000001, 2.221999999999999, -34.53)), ('A', '  95 ', 'GLU', 0.056650750597438786, (-16.147000000000002, -2.599, -38.33499999999999)), ('A', ' 103 ', 'LYS', 0.13817204157881952, (-4.364000000000002, 5.441999999999998, -54.67699999999999)), ('A', ' 108 ', 'ASN', 0.1076220489164277, (-3.6169999999999995, 14.178999999999997, -45.8)), ('A', ' 120 ', 'LYS', 5.681424133194403e-07, (-13.863, 32.804, -26.651999999999997)), ('A', ' 144 ', 'LEU', 0.04617733435082779, (-32.105, 12.582999999999997, -28.514)), ('A', ' 156 ', 'CYS', 0.04969156247539806, (-25.610000000000007, 18.931, -19.107)), ('A', ' 158 ', 'SER', 0.0367065747274545, (-19.118000000000006, 20.933, -18.752)), ('A', ' 159 ', 'GLU', 0.2840789521643366, (-16.516, 18.115999999999993, -18.761)), ('A', ' 178 ', 'ASP', 0.023793309894041735, (-31.313, 37.640999999999984, -22.79)), ('A', ' 179 ', 'ASN', 0.014625072175528667, (-28.988999999999997, 34.787, -23.751)), ('A', ' 199 ', 'VAL', 0.20574857471987182, (-28.52600000000001, 21.665999999999993, -33.745)), ('A', ' 206 ', 'ARG', 0.022195044081521724, (-20.802000000000007, 28.64399999999999, -19.244999999999994)), ('A', ' 213 ', 'SER', 0.11233103062148911, (-13.910000000000004, 21.387, -23.844)), ('B', '  10 ', 'LYS', 0.09140069600861385, (-20.139, 38.268, -57.903)), ('B', '  94 ', 'THR', 0.22759895316712847, (-21.652, 69.353, -67.848)), ('B', ' 108 ', 'ASN', 0.024975936278768786, (-5.2639999999999985, 52.455, -63.277)), ('B', ' 118 ', 'GLN', 0.0645105724127722, (-18.759, 38.453, -83.587)), ('B', ' 124 ', 'LYS', 0.0, (-16.031, 34.57, -74.291)), ('B', ' 147 ', 'LYS', 0.1567761371181183, (-39.84300000000002, 48.46899999999999, -70.177)), ('B', ' 155 ', 'ASP', 0.2582128444454765, (-35.02700000000003, 48.289, -87.751)), ('B', ' 156 ', 'CYS', 0.04881918721366674, (-31.802, 48.256, -85.661)), ('B', ' 159 ', 'GLU', 0.07604079391356396, (-22.81600000000001, 49.179, -87.811)), ('B', ' 173 ', 'GLU', 0.004703354038439435, (-35.68700000000001, 32.772, -70.959)), ('B', ' 178 ', 'ASP', 0.011706810285518142, (-37.965, 30.553999999999988, -80.034)), ('B', ' 213 ', 'SER', 0.29238818890822027, (-19.151, 45.545, -83.379)), ('F', '  21 ', 'GLN', 0.040390889316457096, (-22.029000000000014, 47.443, -30.852)), ('F', '  95 ', 'GLU', 0.003672362288696897, (-12.383, 43.539999999999985, -35.037)), ('F', ' 109 ', 'ASP', 0.005346648431741774, (-1.206, 63.22499999999999, -41.489)), ('F', ' 156 ', 'CYS', 0.04881918721366674, (-20.370000000000008, 64.4, -14.799999999999997)), ('F', ' 157 ', 'SER', 0.22161220820530259, (-16.65800000000001, 64.198, -14.009)), ('F', ' 160 ', 'ASP', 0.13057738622547482, (-12.477000000000007, 60.39499999999999, -16.363)), ('F', ' 180 ', 'ASN', 0.1576323367673753, (-26.870000000000008, 79.726, -22.321)), ('F', ' 192 ', 'GLU', 0.029669634073699835, (-31.818000000000016, 58.762999999999984, -34.19)), ('F', ' 199 ', 'VAL', 0.278877593686078, (-25.691000000000003, 67.081, -28.832)), ('F', ' 201 ', 'MET', 0.010190449126237414, (-23.345000000000002, 70.13, -24.404999999999994)), ('I', '  52 ', 'ASN', 0.14773739108659167, (-12.093999999999994, 16.589, -67.46)), ('I', '  63 ', 'GLU', 0.2571729715928937, (-13.258, 19.078999999999994, -79.609)), ('I', ' 103 ', 'LYS', 0.1147948364373856, (-3.8620000000000014, 14.749, -56.82599999999999)), ('I', ' 117 ', 'LYS', 0.16608348840945047, (-15.887000000000002, -4.667, -87.033)), ('I', ' 155 ', 'ASP', 0.05989717269403853, (-33.145, 3.6870000000000007, -91.85099999999997)), ('I', ' 156 ', 'CYS', 0.061023980379104614, (-30.11300000000001, 3.116000000000001, -89.55899999999997)), ('I', ' 173 ', 'GLU', 0.20187000283196674, (-36.48700000000001, -12.422, -75.36799999999997)), ('I', ' 180 ', 'ASN', 0.12603303212260708, (-35.056000000000004, -11.390999999999996, -80.40999999999997)), ('I', ' 184 ', 'LEU', 0.13790867020579248, (-28.06, -3.786, -73.67599999999997)), ('I', ' 184 ', 'LEU', 0.2455347389988882, (-28.064, -3.778, -73.67199999999997)), ('I', ' 192 ', 'GLU', 0.015609575076237076, (-36.125000000000014, 9.784000000000004, -68.107)), ('I', ' 199 ', 'VAL', 0.21524808790536135, (-31.852, 1.028, -74.72699999999998)), ('I', ' 211 ', 'ILE', 0.23507395413755972, (-23.142000000000003, -0.7559999999999998, -83.11)), ('L', '   3 ', 'ARG', 0.10861145882962936, (-13.128000000000005, 61.52999999999999, -2.386)), ('L', '  34 ', 'LEU', 0.2713294224859749, (-26.541000000000004, 41.64799999999999, 3.145)), ('L', ' 106 ', 'VAL', 0.10968697837879042, (-31.67, 37.58, 11.034999999999997)), ('L', ' 109 ', 'ASP', 0.2224707133271343, (-34.171000000000014, 41.264, 1.4819999999999995)), ('L', ' 117 ', 'LYS', 0.22848508480059287, (-21.321, 48.62399999999999, -15.796999999999997)), ('L', ' 147 ', 'LYS', 0.07759141548354775, (0.7130000000000002, 41.432, -0.051999999999999984)), ('L', ' 155 ', 'ASP', 0.20675005597485227, (-2.875, 40.75799999999999, -18.232999999999993)), ('L', ' 161 ', 'MET', 0.0, (-14.362000000000005, 37.262999999999984, -14.052)), ('L', ' 180 ', 'ASN', 0.056389450836891696, (-3.0350000000000006, 56.883999999999986, -7.093)), ('L', ' 181 ', 'LYS', 0.09453481413000782, (-6.641000000000002, 55.605, -6.849999999999998)), ('L', ' 191 ', 'GLU', 0.2461402096152567, (-6.894999999999998, 37.274, 7.527)), ('L', ' 192 ', 'GLU', 0.06002705507945072, (-3.427000000000001, 35.951, 6.599)), ('L', ' 220 ', 'VAL', 0.24708240175525098, (-33.54000000000001, 45.397999999999996, 2.858)), ('O', '   4 ', 'SER', 0.19585805882399468, (22.348999999999993, 58.068, -34.407)), ('O', '  19 ', 'GLN', 0.15507697734813156, (24.274000000000008, 29.34199999999999, -34.158)), ('O', '  22 ', 'CYS', 0.07018271643230344, (22.664, 24.607, -38.172)), ('O', '  41 ', 'LYS', 0.0381649595755248, (8.347000000000003, 46.52699999999999, -21.214)), ('O', '  52 ', 'ASN', 0.00950832450498917, (12.760000000000002, 26.191, -27.978999999999996)), ('O', '  99 ', 'LYS', 0.031269033704881335, (10.194, 19.596, -24.845)), ('O', ' 109 ', 'ASP', 0.0838520304230585, (3.646, 38.085, -27.682)), ('O', ' 124 ', 'LYS', 0.1947055788668891, (11.850000000000003, 55.035999999999994, -37.773)), ('O', ' 144 ', 'LEU', 0.2527536579375588, (31.348000000000013, 35.447, -44.953)), ('O', ' 147 ', 'LYS', 0.0, (36.165000000000006, 42.279, -40.85599999999999)), ('O', ' 165 ', 'VAL', 0.19880022466540703, (19.519, 38.716, -38.384)), ('O', ' 192 ', 'GLU', 0.010978006469786243, (34.98, 35.926, -33.867)), ('O', ' 192 ', 'GLU', 0.24642806193524766, (35.036, 36.039, -33.854)), ('O', ' 208 ', 'HIS', 0.1684918763728642, (20.945, 47.108, -49.78899999999999)), ('O', ' 220 ', 'VAL', 0.13885603442418565, (4.584000000000001, 42.423, -26.275))]
data['cbeta'] = [('A', ' 128 ', 'THR', ' ', 0.27768031657207454, (-9.409000000000002, 32.687, -37.698)), ('F', ' 109 ', 'ASP', ' ', 0.2758871365871906, (-2.354, 63.133999999999986, -40.44299999999999))]
data['probe'] = [(' O  69  LEU  CD2', ' O1222  V65 H162', -0.96, (11.687, 33.923, -44.34)), (' O  69  LEU HD23', ' O1222  V65 H162', -0.876, (12.051, 33.401, -43.857)), (' A1222  V65  N5 ', ' A1222  V65 H192', -0.858, (-17.965, 9.111, -29.19)), (' A1222  V65  H23', ' A1222  V65 H151', -0.827, (-14.97, 9.62, -26.327)), (' F  69  LEU HD23', ' F1222  V65 H172', -0.826, (-9.29, 58.052, -25.802)), (' B1222  V65  H23', ' B1222  V65 H191', -0.821, (-19.607, 57.506, -81.394)), (' O 135  ALA  HB2', ' O1222  V65 H171', -0.734, (14.517, 36.757, -44.396)), (' F  69  LEU  CD2', ' F1222  V65 H172', -0.73, (-8.428, 58.298, -25.4)), (' I   8  ARG  NH2', ' I 184 ALEU HD21', -0.705, (-30.405, -4.049, -68.659)), (' O  69  LEU HD23', ' O1222  V65  C16', -0.701, (12.624, 33.59, -43.953)), (' I1222  V65  H23', ' I1222  V65 H191', -0.689, (-17.706, 10.605, -84.605)), (' O 163  HIS  N  ', ' O1222  V65 H192', -0.673, (18.376, 34.167, -45.122)), (' A   8  ARG  NH2', ' A 184 ALEU HD21', -0.659, (-25.783, 26.23, -40.405)), (' F  58  GLY  N  ', ' F  59  PRO  CD ', -0.655, (-2.001, 48.226, -34.601)), (' B   7  TRP  CE2', ' B 130  GLY  HA2', -0.643, (-17.413, 38.902, -66.116)), (' O 135  ALA  HB1', ' O1222  V65 H182', -0.629, (16.603, 36.49, -45.08)), (' B 146  TYR  CZ ', ' B 199  VAL HG23', -0.62, (-34.76, 45.811, -72.121)), (' O  19  GLN  HG2', ' O 188  SER  O  ', -0.615, (25.276, 32.305, -35.819)), (' O 152  PHE  CE1', ' O 208 AHIS  CE1', -0.599, (25.474, 48.74, -52.717)), (' A 195  MET  SD ', ' A 200 ALYS  HE2', -0.586, (-32.305, 25.979, -35.696)), (' O   3  ARG  HA ', ' O2001  HOH  O  ', -0.581, (19.76, 60.442, -38.653)), (' B 187  ASN  HB3', ' B2039  HOH  O  ', -0.576, (-30.132, 52.644, -67.868)), (' A 164  GLY  N  ', ' A1222  V65 H182', -0.575, (-18.283, 12.592, -30.019)), (' A  40  ARG  CD ', ' A2015  HOH  O  ', -0.569, (-7.6, 28.102, -43.089)), (' A1222  V65  C23', ' A1222  V65 H151', -0.567, (-14.555, 9.124, -26.22)), (' I  68  GLY  O  ', ' I1222  V65 H152', -0.566, (-16.615, 11.755, -81.247)), (' B1222  V65  N5 ', ' B1222  V65 H151', -0.565, (-21.994, 57.795, -77.695)), (' I 152  PHE  HA ', ' I 208 BHIS  CE1', -0.563, (-32.877, -0.966, -85.581)), (' L 117  LYS  HD2', ' L 213  SER  O  ', -0.563, (-20.846, 44.023, -15.755)), (' O 135  ALA  CB ', ' O1222  V65 H171', -0.559, (14.707, 37.307, -44.53)), (' I  23  GLY  HA3', ' I1222  V65 H301', -0.557, (-21.598, 17.675, -79.367)), (' O 193  TRP  HH2', ' O 199  VAL  CG1', -0.555, (27.523, 41.661, -40.271)), (' O 141  GLU  HB2', ' O2018  HOH  O  ', -0.554, (33.36, 37.447, -52.489)), (' B  51  GLN  HB2', ' B  91  TYR  HA ', -0.549, (-18.974, 64.067, -63.051)), (' I 173  GLU  OE2', ' I 200 ALYS  NZ ', -0.548, (-37.093, -6.596, -74.097)), (' B1222  V65  C19', ' B1222  V65  H23', -0.546, (-19.965, 57.142, -80.989)), (' F   1  ALA  HB3', ' F 123  MET  HE3', -0.543, (-13.026, 82.018, -28.411)), (' A 185  VAL  HB ', ' A 199  VAL HG13', -0.542, (-25.468, 20.924, -33.251)), (' F 153  GLU  O  ', ' F 208 AHIS  CE1', -0.541, (-22.581, 67.437, -15.533)), (' B 117  LYS  NZ ', ' B 213  SER  O  ', -0.54, (-16.187, 47.332, -84.346)), (' O 162  ASP  C  ', ' O1222  V65 H192', -0.539, (18.238, 33.684, -45.583)), (' B  63  GLU  O  ', ' B  66  ASN  HB2', -0.539, (-18.291, 66.738, -77.222)), (' I 185  VAL  HB ', ' I 199  VAL HG13', -0.531, (-29.191, 0.997, -76.065)), (' F   7  TRP  CE2', ' F 130  GLY  HA2', -0.527, (-13.57, 74.372, -38.351)), (' O  52  ASN  C  ', ' O  52  ASN HD22', -0.526, (11.052, 26.83, -29.033)), (' O  68  GLY  O  ', ' O1222  V65 H151', -0.525, (13.186, 31.926, -43.384)), (' L1222  V65  H23', ' L1222  V65 H191', -0.524, (-19.5, 33.279, -12.247)), (' A  37  GLN  HG2', ' A2012  HOH  O  ', -0.519, (-11.172, 22.223, -41.365)), (' A  46  ILE HD12', ' I 104  TYR  HE2', -0.516, (-11.085, 16.676, -53.814)), (' L 192 AGLU  CD ', ' L 192 AGLU  H  ', -0.515, (-5.254, 34.809, 6.782)), (' O 146  TYR  CZ ', ' O 199  VAL HG23', -0.514, (30.046, 44.13, -41.407)), (' O   7  TRP  CE2', ' O 130  GLY  HA2', -0.513, (15.336, 50.522, -30.292)), (' F 146  TYR  CZ ', ' F 199  VAL HG23', -0.508, (-27.053, 66.751, -26.557)), (' O  69  LEU  HB2', ' O  72  TYR  CD2', -0.507, (8.414, 31.127, -41.563)), (' A 152  PHE  HA ', ' A 208 BHIS  CE1', -0.507, (-28.146, 23.707, -23.396)), (' F1222  V65  H23', ' F1222  V65 H191', -0.506, (-10.196, 56.282, -23.351)), (' I 109  ASP  C  ', ' I 109  ASP  OD1', -0.505, (-4.465, 3.921, -70.707)), (' A  40  ARG  HD2', ' A2015  HOH  O  ', -0.504, (-7.681, 27.317, -42.971)), (' B 152  PHE  CE1', ' B 208 AHIS  CE1', -0.503, (-33.381, 42.087, -84.469)), (' O 125  ALA  O  ', ' O 129  VAL  HB ', -0.503, (11.432, 49.796, -33.603)), (' L 108  ASN  O  ', ' L 220  VAL HG12', -0.501, (-32.746, 42.357, 3.719)), (' L  63  GLU  O  ', ' L  66  ASN  HB2', -0.501, (-21.401, 24.04, -7.839)), (' A1222  V65  C15', ' A1222  V65  H23', -0.501, (-14.863, 9.754, -26.571)), (' A1222  V65  C19', ' A1222  V65  N5 ', -0.497, (-18.114, 9.655, -27.881)), (' O 193  TRP  CH2', ' O 199  VAL  HB ', -0.496, (28.861, 41.989, -40.014)), (' O  26  TRP  CZ3', ' O  62  ASN  ND2', -0.495, (11.198, 29.65, -36.919)), (' I 181  LYS  HE2', ' I 204  ASP  OD2', -0.492, (-27.165, -12.393, -82.364)), (' O 192 AGLU  CD ', ' O 192 AGLU  H  ', -0.488, (33.318, 34.663, -33.199)), (' F 115  ILE HG22', ' F 116  PRO  O  ', -0.487, (-6.57, 72.539, -24.506)), (' A   1  ALA  N  ', ' F  96  GLU  OE2', -0.485, (-13.766, 39.223, -36.538)), (' O  50  GLU  CD ', ' O  50  GLU  H  ', -0.485, (17.778, 30.828, -28.523)), (' O 182  TYR  HA ', ' O 201 AMET  O  ', -0.485, (24.669, 51.277, -42.871)), (' A   7  TRP  CE2', ' A 130  GLY  HA2', -0.483, (-14.368, 28.09, -41.146)), (' B 168  VAL HG23', ' B 184 ALEU HD23', -0.483, (-25.788, 41.798, -66.324)), (' I  73  ALA  O  ', ' I  77  VAL HG23', -0.482, (-8.42, 9.467, -72.151)), (' O 183  TRP  CE2', ' O 203  LYS  HG3', -0.482, (19.785, 51.689, -42.919)), (' A 141  GLU  HA ', ' A 141  GLU  OE1', -0.482, (-34.358, 11.387, -24.544)), (' L 201 AMET  HB3', ' L 201 AMET  HE3', -0.482, (-8.452, 45.993, -8.185)), (' B  68  GLY  O  ', ' B1222  V65 H152', -0.48, (-18.46, 57.915, -78.031)), (' I  49  SER  OG ', ' I  52  ASN  HB2', -0.479, (-12.885, 15.167, -65.526)), (' F 173  GLU  O  ', ' F 180  ASN  HB2', -0.479, (-27.878, 81.586, -24.696)), (' B 152  PHE  HA ', ' B 208 BHIS  CE1', -0.477, (-34.013, 43.398, -80.962)), (' A 115  ILE HD13', ' A 125  ALA  CB ', -0.476, (-10.471, 26.98, -32.722)), (' B 165  VAL HG21', ' B 185  VAL HG11', -0.475, (-26.598, 47.753, -73.591)), (' O 195  MET  SD ', ' O 200 ALYS  HE2', -0.474, (32.256, 48.633, -37.438)), (' F   5  VAL  O  ', ' F 169  GLY  HA3', -0.474, (-19.46, 75.155, -34.275)), (' F  28  PHE  CE2', ' F  50  GLU  HG2', -0.473, (-16.459, 54.952, -37.536)), (' I 180  ASN  N  ', ' I 180  ASN  OD1', -0.473, (-34.935, -12.884, -81.856)), (' A  46  ILE  CD1', ' I 104  TYR  CE2', -0.472, (-10.722, 16.568, -54.385)), (' B  52  ASN  C  ', ' B  52  ASN HD22', -0.472, (-11.462, 63.333, -65.296)), (' L 167  VAL HG22', ' L 185  VAL HG22', -0.471, (-13.67, 45.903, -4.358)), (' B 146  TYR  CE2', ' B 199  VAL HG23', -0.47, (-34.887, 46.82, -72.077)), (' I  92  GLU  O  ', ' I  93  ALA  HB3', -0.469, (-22.921, 22.108, -68.432)), (' B 153  GLU  H  ', ' B 208 BHIS  CE1', -0.466, (-33.67, 44.233, -81.972)), (' O 131  PRO  HA ', ' O 167  VAL  O  ', -0.465, (17.282, 46.412, -34.053)), (' B 179  ASN  HB3', ' B 205  ARG  HD2', -0.465, (-34.18, 35.435, -81.221)), (' L  52  ASN  OD1', ' L  83  LEU HD12', -0.463, (-29.905, 31.559, 4.853)), (' O 122  LEU  O  ', ' O 126  VAL HG23', -0.46, (14.759, 50.789, -38.013)), (' F 201 AMET  HB3', ' F 201 AMET  HE3', -0.459, (-21.728, 68.994, -22.793)), (' A  46  ILE HG12', ' I  87  GLU  HG2', -0.456, (-14.739, 14.927, -54.397)), (' L   5  VAL HG11', ' L 126  VAL HG12', -0.452, (-18.01, 53.385, -0.422)), (' I  70  MET  N  ', ' I  70  MET  SD ', -0.452, (-15.093, 8.005, -78.1)), (' O 115  ILE HG22', ' O 116  PRO  O  ', -0.449, (9.624, 48.409, -43.816)), (' I 129  VAL HG21', ' I 217  TYR  CZ ', -0.448, (-11.41, -5.861, -74.351)), (' I 172  PHE  C  ', ' I 172  PHE  CD1', -0.448, (-33.947, -13.641, -74.798)), (' F 113  VAL  O  ', ' F 216  SER  HB2', -0.447, (-4.305, 67.043, -30.363)), (' L   1  ALA  HB1', ' L 123  MET  HE3', -0.447, (-17.983, 60.105, -7.075)), (' O  76  TYR  O  ', ' O  80  ASN  N  ', -0.443, (2.459, 29.805, -29.159)), (' L 138  ALA  HB1', ' L 143  PHE  CD2', -0.442, (-7.509, 37.289, -6.929)), (' A  46  ILE HD12', ' I 104  TYR  CE2', -0.441, (-10.731, 16.716, -54.127)), (' O  65  CYS  H  ', ' O  95 BGLU  CD ', -0.441, (16.417, 21.75, -37.948)), (' F 153  GLU  HA ', ' F 154  PRO  HD3', -0.438, (-26.856, 66.46, -15.047)), (' O   8  ARG  CZ ', ' O 184 ALEU HD21', -0.436, (26.711, 48.101, -31.476)), (' O  24  SER  O  ', ' O  26  TRP  N  ', -0.436, (17.514, 31.504, -37.452)), (' B 135  ALA  HB1', ' B 161  MET  HB3', -0.435, (-22.26, 51.728, -80.586)), (' B 126  VAL HG21', ' B 167  VAL HG11', -0.435, (-21.597, 40.642, -72.448)), (' O  44  ARG  HG2', ' O  44  ARG HH11', -0.435, (15.809, 42.782, -14.165)), (' O  27  ALA  O  ', ' O  31  THR HG23', -0.434, (15.264, 33.167, -31.35)), (' A  69  LEU HD12', ' A  72  TYR  CZ ', -0.434, (-7.354, 9.5, -28.249)), (' O  83  LEU  O  ', ' O 105  SER  HA ', -0.434, (8.93, 30.958, -21.181)), (' A 172  PHE  HA ', ' A 181  LYS  HA ', -0.432, (-27.391, 33.876, -30.739)), (' F 146  TYR  CE2', ' F 199  VAL HG23', -0.432, (-27.38, 66.211, -26.86)), (' A  52  ASN  C  ', ' A  52  ASN HD22', -0.431, (-9.61, 4.12, -42.724)), (' O1222  V65  C23', ' O1222  V65 H152', -0.43, (13.311, 31.813, -45.74)), (' O  51  GLN  HB2', ' O  91  TYR  HA ', -0.43, (18.965, 25.263, -28.456)), (' O 112  PHE  HA ', ' O 218  PRO  HA ', -0.43, (5.111, 41.224, -33.706)), (' I  16  VAL HG21', ' I 197  GLY  HA3', -0.43, (-30.333, 5.377, -68.383)), (' O 100  TYR  CG ', ' O 101  ASN  N  ', -0.429, (7.415, 24.346, -23.065)), (' O  19  GLN  HB2', ' O  19  GLN HE21', -0.428, (22.46, 28.898, -36.261)), (' B  46  ILE HD13', ' F 104  TYR  CE1', -0.428, (-11.078, 51.003, -54.699)), (' F  82  GLY  HA2', ' F 107  ALA  O  ', -0.428, (-3.13, 58.626, -45.476)), (' B 117  LYS  C  ', ' B 118  GLN  HG3', -0.427, (-17.229, 39.143, -85.212)), (' O1222  V65  C15', ' O1222  V65  C22', -0.426, (14.006, 31.796, -45.028)), (' I  69  LEU HD12', ' I  72  TYR  CE2', -0.424, (-10.841, 10.474, -82.983)), (' L1222  V65  H27', ' L1222  V65 H342', -0.423, (-17.459, 28.407, -11.589)), (' I  40  ARG  NH2', ' I 128  THR  O  ', -0.423, (-13.689, -9.647, -69.028)), (' F 101  ASN  HA ', ' F 102  PRO  HD2', -0.422, (-2.985, 48.112, -49.479)), (' L 182  TYR  HE1', ' L 184 BLEU  HG ', -0.422, (-9.461, 51.301, 0.014)), (' O  17  LYS  HB3', ' O  28  PHE  CE2', -0.421, (23.187, 32.253, -30.358)), (' I 136  ILE HG22', ' I 211  ILE  HA ', -0.421, (-23.633, 0.697, -82.541)), (' B   8  ARG  CZ ', ' B 184 ALEU HD21', -0.419, (-28.544, 41.961, -64.17)), (' O 201 BMET  HB3', ' O 201 BMET  HE2', -0.419, (23.391, 45.883, -44.837)), (' A 210  GLY  O  ', ' A 213  SER  HB2', -0.417, (-16.53, 20.695, -23.761)), (' A  65  CYS  HB2', ' A  95 BGLU  OE2', -0.415, (-18.13, -1.424, -33.959)), (' I   9  GLU  H  ', ' I   9  GLU  HG3', -0.414, (-26.314, -7.051, -64.288)), (' A  46  ILE  CD1', ' I 104  TYR  HE2', -0.414, (-11.02, 16.162, -53.836)), (' L  38  MET  HG3', ' L 107  ALA  HB2', -0.414, (-29.612, 40.561, 7.688)), (' A  92  GLU  O  ', ' A  93  ALA  HB3', -0.413, (-22.921, -0.362, -41.708)), (' A  13  VAL  CG1', ' A 186  LYS  HE3', -0.413, (-22.215, 19.552, -42.827)), (' B1222  V65 H122', ' B1222  V65 H192', -0.412, (-21.296, 57.099, -81.873)), (' O  69  LEU HD21', ' O1222  V65 H162', -0.412, (11.685, 34.296, -44.557)), (' A  82  GLY  HA2', ' A 107  ALA  O  ', -0.412, (-4.69, 11.665, -47.006)), (' L 195  MET  HB3', ' L 195  MET  HE2', -0.409, (-4.925, 45.904, 3.604)), (' F 153  GLU  OE2', ' F 154  PRO  HD2', -0.409, (-26.265, 64.9, -13.444)), (' F 183  TRP  O  ', ' F 200 BLYS  HA ', -0.409, (-23.626, 70.969, -27.901)), (' F 125  ALA  O  ', ' F 129  VAL  HB ', -0.407, (-9.107, 74.368, -34.442)), (' A 146  TYR  CE2', ' A 199  VAL  HA ', -0.406, (-30.204, 21.555, -33.427)), (' F  28  PHE  CZ ', ' F  50  GLU  HG2', -0.406, (-16.482, 54.579, -37.277)), (' A 120  LYS  HA ', ' A 120  LYS  HD3', -0.404, (-15.096, 33.88, -27.256)), (' B 183  TRP  CE2', ' B 203  LYS  HG3', -0.404, (-25.612, 37.731, -77.165)), (' F 192 AGLU  CD ', ' F 192 AGLU  H  ', -0.404, (-30.403, 57.346, -35.286)), (' I  80  ASN  ND2', ' I 100  TYR  CZ ', -0.404, (-4.107, 13.887, -65.537)), (' O 190  GLY  HA3', ' O 192 AGLU  OE2', -0.404, (31.665, 33.015, -32.751)), (' I  69  LEU HD12', ' I  72  TYR  CZ ', -0.402, (-10.187, 10.346, -83.023)), (' O  85  SER  HB3', ' O 106  VAL HG11', -0.401, (13.62, 32.925, -18.919)), (' F 199  VAL HG22', ' F 201 AMET  HG2', -0.4, (-23.881, 67.644, -25.804))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
