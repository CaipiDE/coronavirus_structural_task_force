# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   2 ', 'PRO', 0.0005023412583132283, (-11.901999999999997, -16.707, 5.930000000000001)), ('B', '   2 ', 'PRO', 0.002699657698389381, (-11.927999999999997, 3.284999999999993, 48.994)), ('C', '   2 ', 'PRO', 0.0, (-22.80699999999999, 40.054, 45.03)), ('D', '  48 ', 'VAL', 0.0837573167857129, (1.346999999999999, 8.616999999999999, -10.699000000000002)), ('E', '  36 ', 'GLY', 0.017482920946491544, (6.497000000000014, 16.93800000000001, 106.449)), ('E', '  48 ', 'VAL', 0.06986695970263061, (1.3600000000000083, 5.57800000000001, 78.83500000000001)), ('F', '  36 ', 'GLY', 0.04039355864485861, (-5.285999999999996, -17.009, 27.453)), ('F', '  48 ', 'VAL', 0.07108420440252372, (-10.384999999999994, 12.673000000000009, 31.395)), ('F', '  60 ', 'GLY', 0.00479178138017465, (1.6590000000000051, -16.134, 28.395))]
data['omega'] = [('A', '   3 ', 'ARG', None, (-14.123999999999997, -16.482, 4.951)), ('B', '   3 ', 'ARG', None, (-14.068999999999996, 4.594000000000012, 49.016))]
data['rota'] = [('A', '   2 ', 'PRO', 0.048415170137774986, (-11.901999999999997, -16.707, 5.930000000000001)), ('A', '  34 ', 'LEU', 0.13824014596482326, (5.443250000000001, 1.5604999999999998, 9.47025)), ('A', ' 116 ', 'PRO', 0.09173662273197192, (6.765999999999998, -15.915, -1.053)), ('A', ' 156 ', 'CYS', 0.06936012250886087, (-1.5270000000000032, -7.372000000000002, -17.234)), ('A', ' 159 ', 'GLU', 0.2178287346809738, (6.5109999999999975, -9.401999999999997, -13.454)), ('A', ' 184 ', 'LEU', 0.0, (-11.11425, -4.645499999999999, -0.06349999999999997)), ('A', ' 201 ', 'MET', 0.19962706358691912, (-5.85525, -5.2860000000000005, -8.34925)), ('B', ' 116 ', 'PRO', 0.04716891044435156, (6.808000000000005, 9.46, 52.731)), ('B', ' 117 ', 'LYS', 0.2496252973057985, (5.590000000000009, 12.157999999999998, 55.143)), ('B', ' 156 ', 'CYS', 0.06007806176276081, (-1.536999999999999, 19.177000000000007, 68.233)), ('B', ' 159 ', 'GLU', 0.28009578463981283, (6.4910000000000085, 16.952000000000005, 64.588)), ('B', ' 199 ', 'VAL', 0.2756181055913574, (-10.053999999999991, 6.862000000000002, 67.985)), ('B', ' 201 ', 'MET', 0.007823507238061902, (-5.875749999999994, 10.549500000000002, 65.61699999999999)), ('B', ' 220 ', 'VAL', 0.2338228042615356, (7.300000000000004, -9.873000000000008, 55.387)), ('C', '   2 ', 'PRO', 0.0012173975932254853, (-22.80699999999999, 40.054, 45.03)), ('C', '  15 ', 'PRO', 0.24857903698511935, (-20.375999999999994, 26.901999999999994, 24.87)), ('C', ' 116 ', 'PRO', 0.07231844479817578, (-5.0039999999999925, 33.303, 47.841)), ('C', ' 120 ', 'LYS', 0.008460502282004406, (-13.520999999999995, 34.28699999999999, 50.22)), ('C', ' 148 ', 'GLU', 0.043991416994572964, (-28.369999999999994, 17.910000000000004, 39.546)), ('C', ' 156 ', 'CYS', 0.07025680019208966, (-13.274999999999995, 15.006, 48.395)), ('C', ' 174 ', 'SER', 0.0158267614353267, (-34.6935, 25.831, 49.082499999999996)), ('D', '  39 ', 'GLU', 0.19920292646483442, (8.422999999999996, 17.64, -32.977)), ('E', '  14 ', 'PRO', 0.25417465765271935, (1.438000000000013, 24.557000000000002, 91.377)), ('E', '  37 ', 'LYS', 0.21399833348607467, (6.4680000000000035, 19.040000000000006, 103.236)), ('E', '  62 ', 'ASN', 0.054616179545227496, (17.559000000000008, 18.647000000000006, 102.149)), ('F', '  37 ', 'LYS', 0.02830444932690543, (-5.248999999999998, -15.267, 30.874)), ('F', '  38 ', 'LEU', 0.0007300543332566648, (-4.120999999999997, -11.667999999999996, 30.978000000000005))]
data['cbeta'] = [('A', ' 108 ', 'ASN', 'B', 0.26245675160465476, (9.969000000000001, 2.391, 15.369)), ('A', ' 109 ', 'ASP', ' ', 0.2500551759656145, (9.451, -1.2960000000000003, 11.215)), ('A', ' 180 ', 'ASN', ' ', 0.25255162749890603, (-16.384, -15.245000000000001, -7.583)), ('A', ' 206 ', 'ARG', 'B', 0.27461950907251903, (-2.264000000000003, -17.207, -13.465)), ('B', ' 108 ', 'ASN', ' ', 0.3119273701536395, (9.69000000000001, -13.843999999999994, 59.933)), ('B', ' 109 ', 'ASP', ' ', 0.27606390499647787, (9.469000000000005, -8.482, 59.249)), ('B', ' 175 ', 'THR', ' ', 0.35586637392336373, (-20.048999999999992, 15.826000000000008, 61.357)), ('B', ' 192 ', 'GLU', 'B', 0.34219505038813314, (-13.044999999999987, 0.7770000000000081, 79.123)), ('C', '   2 ', 'PRO', ' ', 0.5109543616703789, (-22.951, 41.217, 45.989)), ('C', ' 109 ', 'ASP', ' ', 0.26927779139209795, (-2.3029999999999955, 36.62799999999999, 28.982)), ('E', '  38 ', 'LEU', ' ', 0.2522429334984933, (7.008000000000013, 16.158000000000015, 99.5)), ('E', '  51 ', 'THR', ' ', 0.26312507745270874, (-0.3039999999999914, 11.207000000000015, 82.422))]
data['probe'] = [(' C  19  GLN HE22', ' C  25 BSCH  CE ', -1.257, (-8.578, 16.245, 30.649)), (' C  19  GLN  NE2', ' C  25 BSCH  HE3', -1.21, (-9.052, 16.349, 29.714)), (' C  19  GLN HE22', ' C  25 BSCH  HE3', -1.02, (-9.334, 16.912, 31.177)), (' C  19  GLN  NE2', ' C  25 BSCH  CE ', -0.947, (-8.451, 15.6, 30.119)), (' A 175  THR HG22', ' A 180  ASN  OD1', -0.929, (-18.354, -14.869, -10.501)), (' B  25 BSCH  HE2', ' B 163  HIS  CD2', -0.914, (1.432, 5.629, 73.42)), (' B 175  THR  CG2', ' B 176  GLU  H  ', -0.913, (-20.311, 17.375, 62.077)), (' B 175  THR HG22', ' B 176  GLU  H  ', -0.857, (-20.213, 18.069, 62.577)), (' B  25 BSCH  CE ', ' B 163  HIS  CD2', -0.826, (1.905, 6.208, 73.262)), (' B 175  THR HG22', ' B 176  GLU  N  ', -0.762, (-20.069, 18.435, 61.764)), (' D  17  GLN HE22', ' D  40  ALA  H  ', -0.744, (7.11, 15.803, -32.474)), (' B  25 BSCH  CE ', ' B 163  HIS  HD2', -0.744, (1.724, 5.964, 73.308)), (' B  41  LYS  HG3', ' B 220  VAL HG23', -0.731, (4.839, -11.389, 54.65)), (' F  17  GLN HE22', ' F  40  ALA  H  ', -0.727, (-5.075, -9.377, 35.713)), (' C  23  GLY  HA2', ' C  25 BSCH  HE1', -0.723, (-7.913, 14.373, 30.928)), (' A  25  SCH  HE2', ' A 163  HIS  ND1', -0.718, (1.486, 3.628, -8.402)), (' C  23  GLY  HA2', ' C  25 BSCH  CE ', -0.718, (-6.918, 15.087, 30.596)), (' A 175  THR HG21', ' A 179  ASP  O  ', -0.716, (-16.345, -13.397, -11.761)), (' E  26  GLN HE22', ' E  82  LEU  H  ', -0.716, (-0.543, 6.099, 94.463)), (' C  51  GLN  NE2', ' C  92  GLU  H  ', -0.712, (-6.655, 18.856, 19.095)), (' B  23  GLY  HA2', ' B  25 ASCH  CE ', -0.711, (4.979, 3.829, 76.655)), (' B  23  GLY  HA2', ' B  25 ASCH  HE1', -0.704, (4.822, 3.911, 77.562)), (' B 153  GLU  H  ', ' B 208  HIS  HE1', -0.701, (-6.166, 18.177, 66.51)), (' E  26  GLN  NE2', ' E  82  LEU  H  ', -0.689, (0.235, 5.873, 94.398)), (' B 153  GLU  H  ', ' B 208  HIS  CE1', -0.67, (-7.014, 18.123, 66.674)), (' F  26  GLN  NE2', ' F  82  LEU  H  ', -0.665, (-11.608, -1.05, 23.967)), (' C  23  GLY  C  ', ' C  25 BSCH  HE2', -0.663, (-6.69, 16.126, 29.859)), (' A  12  TYR  CE2', ' A  40  ARG  HG3', -0.65, (-3.069, -5.326, 12.329)), (' D  26  GLN  NE2', ' D  82  LEU  H  ', -0.65, (-0.004, 22.104, -19.737)), (' D  26  GLN HE22', ' D  82  LEU  H  ', -0.649, (-0.07, 21.522, -19.31)), (' A 153  GLU  H  ', ' A 208  HIS  CE1', -0.646, (-6.118, -8.382, -15.743)), (' C  24  SER  N  ', ' C  25 BSCH  HE2', -0.643, (-7.21, 16.122, 30.174)), (' D  65  MET  HE3', ' D  87  VAL HG12', -0.64, (12.406, 24.469, -23.544)), (' B 178  ASP  HA ', ' B 574  HOH  O  ', -0.639, (-19.08, 18.907, 56.152)), (' D  17  GLN  NE2', ' D  40  ALA  H  ', -0.633, (6.478, 15.374, -32.709)), (' F  27  LEU HD23', ' F  38  LEU HD21', -0.631, (-4.677, -9.427, 26.384)), (' B 174  SER  HB3', ' C 865  HOH  O  ', -0.63, (-22.526, 15.673, 55.351)), (' C 195 BMET  HE1', ' C 200  LYS  HE3', -0.626, (-27.002, 24.832, 38.265)), (' C  25 BSCH  CE ', ' C  25 BSCH  H  ', -0.625, (-7.753, 16.941, 30.536)), (' F  26  GLN HE22', ' F  82  LEU  H  ', -0.624, (-11.739, -0.942, 24.11)), (' C  25 BSCH  H  ', ' C  25 BSCH  HE2', -0.624, (-7.493, 16.924, 30.535)), (' B  23  GLY  C  ', ' B  25 ASCH  HE2', -0.622, (5.185, 3.095, 75.893)), (' F  17  GLN  NE2', ' F  40  ALA  H  ', -0.622, (-5.573, -9.649, 35.803)), (' B  25 BSCH  HE2', ' B 163  HIS  HD2', -0.616, (1.566, 5.413, 73.437)), (' C 120  LYS  NZ ', ' C 276  HOH  O  ', -0.614, (-10.901, 35.286, 53.973)), (' B  25 ASCH  H  ', ' B  25 ASCH  HE3', -0.612, (3.731, 3.038, 75.16)), (' A  78  GLN  HG2', ' A 987  HOH  O  ', -0.61, (17.788, -0.719, 10.904)), (' F  39  GLU  OE2', ' F  58  ARG  NH1', -0.605, (0.155, -12.899, 36.8)), (' C   2  PRO  HD2', ' C 812  HOH  O  ', -0.593, (-21.287, 43.15, 42.423)), (' B  25 BSCH  HE3', ' B 163  HIS  CD2', -0.587, (1.719, 6.858, 73.881)), (' A  44  ARG  CZ ', ' A  46  ILE HD11', -0.584, (-0.307, 7.426, 18.191)), (' C  19  GLN  NE2', ' C  25 BSCH  HE1', -0.581, (-8.668, 15.106, 30.351)), (' B  52  ASN  ND2', ' B  84  ASP  H  ', -0.57, (9.034, -13.385, 69.917)), (' C  51  GLN HE21', ' C  92  GLU  H  ', -0.566, (-6.858, 19.021, 19.102)), (' D  27  LEU HD23', ' D  38  LEU HD11', -0.565, (6.536, 24.228, -26.921)), (' B 192 AGLU  OE2', ' E  75  GLY  HA3', -0.561, (-12.334, 3.909, 81.911)), (' A  18  ASN  ND2', ' A  20  GLY  H  ', -0.554, (-2.32, 12.07, -6.076)), (' E  66  HIS  HD2', ' E 171  HOH  O  ', -0.543, (15.083, 10.193, 88.447)), (' C  52  ASN  ND2', ' C  84  ASP  H  ', -0.535, (-2.424, 29.44, 19.121)), (' E  38  LEU HD21', ' E  65  MET  HE1', -0.529, (10.042, 13.027, 100.206)), (' C 101  ASN  C  ', ' C 101  ASN HD22', -0.524, (0.44, 32.161, 12.469)), (' B  41  LYS  HG3', ' B 220  VAL  CG2', -0.523, (4.382, -10.76, 54.677)), (' B   8  ARG  NH2', ' B 184  LEU HD21', -0.522, (-12.668, 0.825, 62.22)), (' C 124 BLYS  HE2', ' C 452  HOH  O  ', -0.522, (-9.501, 38.687, 45.579)), (' F  27  LEU  CD2', ' F  38  LEU HD21', -0.521, (-4.825, -8.637, 26.132)), (' A 175  THR HG21', ' A 179  ASP  C  ', -0.514, (-15.815, -13.941, -11.309)), (' D  66  HIS  HD2', ' D 111  HOH  O  ', -0.513, (14.979, 14.619, -19.598)), (' A 108 AASN  ND2', ' A 853  HOH  O  ', -0.512, (7.711, 2.59, 17.33)), (' B 175  THR HG23', ' B 176  GLU  H  ', -0.512, (-21.268, 17.384, 62.737)), (' A  18  ASN HD22', ' A  20  GLY  H  ', -0.512, (-2.068, 11.68, -5.477)), (' C 152  PHE  HA ', ' C 208  HIS  CE1', -0.512, (-19.174, 18.341, 47.169)), (' C  71  ASP  O  ', ' C  75  GLN  HG3', -0.511, (1.721, 29.837, 33.175)), (' B 178  ASP  HB2', ' C 206  ARG  HG3', -0.509, (-16.134, 22.186, 56.356)), (' A 175  THR HG23', ' A 178  ASP  N  ', -0.507, (-18.314, -14.966, -12.49)), (' E  56  LYS  NZ ', ' E  66  HIS  HE1', -0.503, (16.385, 14.585, 91.07)), (' B 140  HIS  HE1', ' B 155  ASP  OD1', -0.503, (-0.94, 21.457, 72.424)), (' E  56  LYS  HZ3', ' E  66  HIS  HE1', -0.501, (16.376, 15.165, 91.411)), (' F  10 BLYS  NZ ', ' F1102  HOH  O  ', -0.5, (-4.855, 5.702, 46.636)), (' C   7  TRP  CE2', ' C 130  GLY  HA2', -0.5, (-16.267, 37.514, 35.538)), (' F  66  HIS  HD2', ' F 107  HOH  O  ', -0.499, (3.044, 1.709, 30.207)), (' B  25 ASCH  CE ', ' B  25 ASCH  H  ', -0.496, (4.24, 2.704, 74.926)), (' B 175  THR  CG2', ' B 176  GLU  N  ', -0.493, (-21.193, 17.576, 61.632)), (' C  23  GLY  CA ', ' C  25 BSCH  HE2', -0.49, (-7.003, 15.767, 30.569)), (' A  25  SCH  CE ', ' A 163  HIS  ND1', -0.488, (1.484, 4.013, -8.957)), (' C  23  GLY  HA2', ' C  25 BSCH  HE2', -0.485, (-7.131, 15.644, 30.75)), (' B 219  THR HG21', ' B 934  HOH  O  ', -0.482, (11.384, -3.984, 53.208)), (' C  25 ASCH  CE ', ' C 163  HIS  ND1', -0.482, (-10.044, 16.893, 33.938)), (' F  38  LEU HD11', ' F  65  MET  CE ', -0.481, (-1.983, -9.445, 26.975)), (' B 177  SER  O  ', ' B 178  ASP  HB2', -0.478, (-17.035, 22.148, 57.742)), (' C 177  SER  O  ', ' C 178  ASP  HB2', -0.476, (-28.27, 22.727, 56.065)), (' C 101  ASN HD22', ' C 102  PRO  HD2', -0.474, (1.891, 32.083, 12.122)), (' B 163  HIS  HE1', ' B 187  ASN  OD1', -0.473, (-2.612, 5.257, 72.16)), (' D  27  LEU HD11', ' D  65  MET  HE1', -0.47, (9.481, 24.475, -23.781)), (' B 175  THR  H  ', ' B 180  ASN  ND2', -0.469, (-19.141, 16.192, 57.763)), (' C 117  LYS  HG2', ' C 213  SER  HA ', -0.469, (-5.633, 26.753, 47.206)), (' C 101  ASN HD22', ' C 102  PRO  N  ', -0.466, (1.027, 32.396, 12.515)), (' B 123  MET  HE3', ' B 170  TYR  CE1', -0.465, (-9.032, 6.18, 51.521)), (' A  25  SCH  HE1', ' D  47  VAL  O  ', -0.463, (2.598, 6.299, -10.791)), (' B  23  GLY  CA ', ' B  25 ASCH  HE2', -0.462, (5.606, 3.547, 76.894)), (' A  40  ARG  HD2', ' A 129  VAL  O  ', -0.461, (-1.345, -7.526, 11.267)), (' E  27  LEU HD23', ' E  38  LEU HD11', -0.455, (6.701, 11.725, 100.092)), (' C  44  ARG  CZ ', ' C  46  ILE HD11', -0.455, (-12.776, 37.973, 16.943)), (' A  69  LEU HD12', ' A  72  TYR  CZ ', -0.454, (14.645, -1.277, -4.15)), (' A  18  ASN  C  ', ' A  18  ASN HD22', -0.451, (-2.632, 11.866, -4.165)), (' B  23  GLY  HA2', ' B  25 ASCH  HE2', -0.451, (5.099, 4.052, 76.665)), (' B  23  GLY  CA ', ' B  25 ASCH  CE ', -0.45, (5.212, 3.413, 77.079)), (' C 101  ASN HD22', ' C 102  PRO  CD ', -0.45, (1.292, 31.95, 12.444)), (' A 113  VAL HG23', ' A 219 BTHR  CG2', -0.449, (9.049, -9.062, 9.015)), (' A   8  ARG  HD3', ' A 198  TYR  CZ ', -0.449, (-10.084, 0.165, 2.54)), (' A  71  ASP  O  ', ' A  75  GLN  HG3', -0.447, (13.352, -1.764, 3.311)), (' B  52  ASN HD22', ' B  84  ASP  HB2', -0.443, (8.267, -13.767, 71.549)), (' B  19  GLN  OE1', ' B  25 ASCH  HE3', -0.442, (2.805, 2.998, 76.083)), (' A  25  SCH  HE2', ' A 163  HIS  CE1', -0.441, (0.623, 4.157, -8.146)), (' C 117  LYS  HE3', ' C 213  SER  O  ', -0.44, (-3.182, 26.621, 46.139)), (' C   8  ARG  HD3', ' C 198  TYR  CZ ', -0.438, (-22.04, 28.287, 31.75)), (' F  56  LYS  HZ3', ' F  66  HIS  HE1', -0.433, (4.809, -3.004, 33.36)), (' B   7  TRP  CE2', ' B 130  GLY  HA2', -0.431, (-4.88, -3.225, 54.961)), (' C  25 ASCH  HE2', ' C 163  HIS  ND1', -0.43, (-10.647, 17.134, 33.97)), (' A   7  TRP  CE2', ' A 130  GLY  HA2', -0.429, (-4.871, -7.678, 8.478)), (' F  56  LYS  NZ ', ' F  66  HIS  HE1', -0.428, (4.645, -2.587, 33.101)), (' C  25 BSCH  SD ', ' F   4  GLY  HA2', -0.425, (-6.655, 15.22, 33.464)), (' A  12  TYR  HE2', ' A  40  ARG  HG3', -0.423, (-2.971, -5.57, 12.318)), (' B  25 BSCH  SD ', ' E   4  GLY  HA2', -0.422, (5.166, 6.122, 75.376)), (' C  19  GLN HE22', ' C  25 BSCH  HE1', -0.422, (-9.097, 15.115, 31.099)), (' C  25 ASCH  HE3', ' C 163  HIS  ND1', -0.419, (-10.228, 16.936, 34.642)), (' C  25 ASCH  SD ', ' F   4  GLY  HA2', -0.418, (-6.688, 15.224, 33.52)), (' C 177  SER  O  ', ' C 178  ASP  CB ', -0.416, (-28.886, 23.147, 55.98)), (' C 101  ASN  ND2', ' C 103  LYS  H  ', -0.415, (0.188, 33.194, 11.893)), (' B   8  ARG  HD3', ' B 198  TYR  CZ ', -0.412, (-10.268, -1.927, 65.035)), (' A 152  PHE  HA ', ' A 208  HIS  NE2', -0.412, (-7.636, -8.316, -14.143)), (' E  39  GLU  OE2', ' E  58  ARG  NH2', -0.411, (11.726, 23.174, 98.815)), (' A 175  THR HG23', ' A 178  ASP  H  ', -0.408, (-18.604, -14.958, -12.528)), (' C  58  GLY  N  ', ' C  59  PRO  CD ', -0.408, (5.906, 22.915, 25.715)), (' A  58  GLY  N  ', ' A  59  PRO  CD ', -0.406, (17.666, 8.303, 0.998)), (' B 177  SER  O  ', ' B 178  ASP  CB ', -0.403, (-17.042, 21.734, 57.386)), (' B 163  HIS  CE1', ' B 187  ASN  OD1', -0.401, (-2.422, 5.084, 72.153)), (' B 152  PHE  HA ', ' B 208  HIS  NE2', -0.4, (-7.635, 16.793, 65.944))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
