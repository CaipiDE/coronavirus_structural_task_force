# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   3 ', 'THR', 0.03602317027208322, (-24.513, 18.473, -1.8859999999999997)), ('A', ' 271 ', 'THR', 0.026169999768400395, (-20.252, -13.125999999999996, -31.667))]
data['omega'] = []
data['rota'] = [('A', '   2 ', 'LEU', 0.000504830210654188, (-22.242, 21.51899999999999, -2.297)), ('A', '   3 ', 'THR', 0.0187457088972504, (-24.513, 18.473, -1.8859999999999997)), ('A', '  74 ', 'VAL', 0.2895568721521042, (-5.134999999999998, 16.626, -23.725)), ('A', '  80 ', 'ASN', 0.07017207651565692, (-3.9269999999999983, 24.03, -39.835)), ('A', ' 252 ', 'CYS', 0.1213122633854605, (-18.935, 10.824, -33.442)), ('A', ' 270 ', 'SER', 0.0013399975614447612, (-16.551, -14.069, -31.416))]
data['cbeta'] = []
data['probe'] = [(' A  65  ASP  OD2', ' A 501  HOH  O  ', -0.965, (-10.11, 15.686, -8.475)), (' A  84  ARG  O  ', ' A 502  HOH  O  ', -0.946, (1.773, 15.322, -45.852)), (' A  80  ASN  ND2', ' A  80  ASN  O  ', -0.923, (-1.754, 23.741, -41.322)), (' A 191  GLU  OE2', ' A 449  EOH  O  ', -0.883, (8.281, 24.392, -30.273)), (' A 121  SER  H  ', ' A 439  POL  C2 ', -0.735, (-1.199, 15.349, -28.708)), (' A  75  MET  C  ', ' A 439  POL  H12', -0.711, (-5.145, 17.416, -28.502)), (' A 121  SER  H  ', ' A 439  POL  H21', -0.702, (-1.308, 14.63, -28.266)), (' A 121  SER  CB ', ' A 439  POL  H21', -0.654, (-2.637, 14.405, -28.611)), (' A  76  ASN  HB2', ' A 439  POL  H33', -0.647, (-3.781, 16.52, -30.707)), (' A  87  LYS  NZ ', ' A 508  HOH  O  ', -0.605, (9.338, 8.159, -49.433)), (' A 233  ASP  O  ', ' A 305 BCYS  SG ', -0.599, (-13.554, 10.057, -32.634)), (' A  81  ARG  NH1', ' A 509  HOH  O  ', -0.592, (-6.577, 17.409, -43.976)), (' A  36  GLU  OE2', ' A 503  HOH  O  ', -0.586, (-20.059, 12.996, -4.521)), (' A 273  SER  HB3', ' A 276  ASN  OD1', -0.58, (-18.758, -8.945, -37.603)), (' A 271  THR  OG1', ' A 272  GLU  N  ', -0.579, (-22.23, -12.183, -32.616)), (' A 119  GLY  HA2', ' A 439  POL  H22', -0.566, (-2.157, 17.33, -26.929)), (' A  41 BMET  SD ', ' A 237  GLU  OE1', -0.543, (-20.97, 12.044, -19.972)), (' A 121  SER  HB3', ' A 439  POL  H21', -0.536, (-2.683, 13.685, -28.308)), (' A  76  ASN  CB ', ' A 439  POL  H33', -0.536, (-3.41, 16.526, -31.084)), (' A  65  ASP  OD1', ' A 504  HOH  O  ', -0.522, (-9.238, 15.521, -12.694)), (' A 244  GLU  HB3', ' A 443  PGE  H42', -0.513, (-13.825, -4.555, -23.085)), (' A  81  ARG  HG3', ' A  81  ARG  O  ', -0.513, (-6.767, 21.731, -44.213)), (' A 232  ILE  HB ', ' A 305 BCYS  SG ', -0.511, (-11.743, 9.015, -33.564)), (' A 303  ASN HD22', ' A 433  POL  H32', -0.51, (-14.301, 8.781, -43.302)), (' A 251  ASP  O  ', ' A 447  EOH  H22', -0.508, (-20.015, 13.522, -32.971)), (' A  80  ASN  HB3', ' A 619  HOH  O  ', -0.505, (-1.598, 22.883, -37.88)), (' A  45  HIS  CE1', ' A 401  GOL  HO1', -0.49, (-22.143, 4.735, -22.84)), (' A  41 AMET  SD ', ' A  58  MET  HE1', -0.486, (-19.629, 8.622, -19.842)), (' A  93  LEU  HB2', ' A 414  GOL  H2 ', -0.471, (-2.836, -5.566, -56.989)), (' A 104  ARG  HD3', ' A 294  TYR  CZ ', -0.463, (-1.306, -2.731, -27.956)), (' A  60  MET  H  ', ' A 431  POL  C2 ', -0.458, (-14.865, 4.314, -13.475)), (' A  75  MET  CA ', ' A 439  POL  H12', -0.45, (-5.588, 17.016, -27.575)), (' A  74  VAL  C  ', ' A 439  POL  H11', -0.449, (-4.754, 15.956, -26.259)), (' A 219  MET  HE3', ' A 266  TYR  CE1', -0.448, (-8.059, -7.381, -41.197)), (' A  74  VAL HG12', ' A 285  TRP  HE1', -0.445, (-4.984, 13.327, -24.099)), (' A 141  LEU  H  ', ' A 438  POL  H12', -0.439, (14.076, -4.252, -29.761)), (' A  60  MET  SD ', ' A  64  GLY  HA3', -0.438, (-12.731, 10.99, -12.507)), (' A 119  GLY  C  ', ' A 439  POL  H22', -0.438, (-1.602, 16.718, -27.628)), (' A 205  ASP  HB2', ' A 315  THR  O  ', -0.428, (10.932, 7.29, -42.575)), (' A   3  THR  CG2', ' A   3  THR  O  ', -0.422, (-24.568, 17.882, -4.083)), (' A 113  LYS  HA ', ' A 435  POL  H21', -0.422, (4.17, 6.776, -21.452)), (' A 432  POL  H33', ' A 592  HOH  O  ', -0.421, (-15.295, 15.947, -16.07)), (' A  76  ASN HD21', ' A 122  TRP  HB3', -0.42, (-1.206, 16.109, -33.028)), (' A 278  TYR  OH ', ' A 450  EDO  H22', -0.42, (-9.336, -8.618, -32.075)), (' A  80  ASN  CB ', ' A 619  HOH  O  ', -0.419, (-1.491, 23.502, -37.843)), (' A 119  GLY  CA ', ' A 439  POL  H22', -0.417, (-1.824, 17.349, -27.178)), (' A  24  GLY  HA3', ' A 412  GOL  H31', -0.417, (-8.133, 25.59, -0.955)), (' A 201  SER  OG ', ' A 410  GOL  H32', -0.416, (19.805, 8.893, -35.407)), (' A  74  VAL  O  ', ' A 439  POL  H11', -0.415, (-4.9, 15.55, -26.321)), (' A 121  SER  OG ', ' A 439  POL  H21', -0.415, (-2.683, 14.229, -29.144)), (' A 301  ARG  HD2', ' A 442  PGE  H6 ', -0.415, (-20.218, -1.813, -35.312)), (' A  76  ASN  N  ', ' A 439  POL  H12', -0.407, (-4.996, 17.304, -28.678)), (' A 191  GLU  OE2', ' A 449  EOH  C1 ', -0.407, (8.041, 24.302, -30.277)), (' A  76  ASN  HA ', ' A 439  POL  H32', -0.407, (-3.135, 17.777, -29.602)), (' A 104  ARG  HD3', ' A 294  TYR  CE2', -0.406, (-1.813, -2.355, -27.984)), (' A 121  SER  H  ', ' A 439  POL  C3 ', -0.4, (-1.575, 15.511, -28.898))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
