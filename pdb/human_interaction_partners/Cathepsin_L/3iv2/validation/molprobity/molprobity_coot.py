# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 174 ', 'SER', 0.004633195047055186, (-16.3, 6.799999999999999, -8.367)), ('A', ' 177 ', 'SER', 0.021660236082736678, (-21.945, 8.376, -8.04)), ('A', ' 213 ', 'SER', 0.013607818264246762, (-32.661999999999985, -12.298, -1.261)), ('B', ' 206 ', 'ARG', 0.0, (14.882999999999997, -11.183, 20.128)), ('B', ' 213 ', 'SER', 0.010420962056969336, (8.685, 4.22, 21.674))]
data['omega'] = [('B', ' 155 ', 'ASP', None, (14.555999999999994, -2.755, 10.828)), ('B', ' 205 ', 'ARG', None, (10.944, -9.421, 20.412)), ('B', ' 208 ', 'HIS', None, (15.662, -7.133999999999998, 20.186)), ('B', ' 210 ', 'GLY', None, (11.107, -3.626, 19.671))]
data['rota'] = [('A', '   3 ', 'ARG', 0.05873019682359281, (-26.22, 8.822, -1.254)), ('A', '  70 ', 'MET', 0.0, (-32.16299999999998, -15.212, 10.546000000000001)), ('A', ' 110 ', 'THR', 0.027212861265259094, (-40.53199999999998, -7.998999999999999, 19.502)), ('A', ' 117 ', 'LYS', 0.0, (-36.942, -8.7, -2.64)), ('A', ' 124 ', 'LYS', 0.2524972727536659, (-35.033, 2.24, 1.991)), ('A', ' 128 ', 'THR', 0.07430381805888535, (-33.86299999999999, 4.172999999999998, 7.514)), ('A', ' 144 ', 'LEU', 0.002002029704333132, (-13.522999999999998, -16.713, -1.39)), ('A', ' 175 ', 'THR', 0.05709295685224319, (-15.754999999999997, 10.475999999999999, -8.138)), ('A', ' 176 ', 'GLU', 0.005253986936298902, (-19.162, 10.24, -9.782000000000002)), ('A', ' 184 ', 'LEU', 0.028116874044258163, (-21.269, -2.49, 2.223)), ('A', ' 192 ', 'GLU', 0.002692330801502864, (-8.486, -11.708, 7.277)), ('A', ' 201 ', 'MET', 0.11420032808718772, (-21.105999999999995, -5.759, -3.518)), ('A', ' 206 ', 'ARG', 0.14130457725903736, (-28.208999999999993, -3.3820000000000006, -15.178000000000003)), ('B', '   4 ', 'SER', 0.22666978509004193, (-3.885999999999997, -12.737000000000002, 24.411)), ('B', '  99 ', 'LYS', 0.10412524638687688, (-14.289, 25.62, 17.058)), ('B', ' 110 ', 'THR', 0.01495926990173757, (-7.390000000000003, 13.929, 34.442)), ('B', ' 120 ', 'LYS', 0.0003544506956510422, (7.235, -5.932, 28.879)), ('B', ' 174 ', 'SER', 0.15071018452305837, (0.9930000000000013, -20.337, 16.582)), ('B', ' 184 ', 'LEU', 0.0, (-2.5129999999999986, -5.698000000000001, 17.266)), ('B', ' 192 ', 'GLU', 0.005717273963556266, (-8.263, -0.152, 2.635)), ('B', ' 201 ', 'MET', 0.022579145503899077, (3.5559999999999996, -6.081999999999998, 14.523000000000001)), ('B', ' 206 ', 'ARG', 0.1494816524142698, (14.882999999999997, -11.183, 20.128)), ('B', ' 209 ', 'CYS', 0.0, (13.534999999999997, -3.663, 19.649))]
data['cbeta'] = []
data['probe'] = [(' B 161  MET  HE2', ' B 213  SER  HB2', -1.155, (8.577, 3.911, 18.911)), (' A  70  MET  H  ', ' A  70  MET  HE2', -0.955, (-31.151, -16.348, 8.191)), (' B 205  ARG  O  ', ' B 206  ARG  CZ ', -0.94, (13.5, -11.855, 17.124)), (' B 136  ILE  CD1', ' B 201  MET  HE1', -0.873, (3.59, 0.043, 13.282)), (' B 192  GLU  HG2', ' B 304  GOL  O3 ', -0.871, (-10.263, 3.016, 2.502)), (' A  70  MET  HE2', ' A  70  MET  N  ', -0.848, (-32.052, -16.576, 8.865)), (' B 205  ARG  O  ', ' B 206  ARG  HB2', -0.827, (14.033, -11.384, 17.712)), (' B 205  ARG  O  ', ' B 206  ARG  NH1', -0.826, (12.038, -12.626, 17.657)), (' B 136  ILE HD13', ' B 201  MET  HE1', -0.807, (2.874, 0.675, 13.801)), (' B 205  ARG  NH2', ' B 207  ASN HD21', -0.804, (13.936, -8.978, 14.352)), (' B 205  ARG  CZ ', ' B 207  ASN HD21', -0.794, (13.883, -8.263, 14.194)), (' A 178  ASP  HA ', ' A 181  LYS  HE3', -0.782, (-25.955, 5.625, -9.4)), (' A 176  GLU  O  ', ' A 177  SER  HB3', -0.773, (-22.0, 10.582, -8.128)), (' A 174  SER  HB3', ' A 176  GLU  H  ', -0.771, (-17.937, 8.871, -9.592)), (' A  70  MET  CE ', ' A  70  MET  H  ', -0.766, (-31.844, -16.289, 7.77)), (' B 136  ILE HD13', ' B 201  MET  CE ', -0.747, (3.183, 0.014, 13.747)), (' B 205  ARG  O  ', ' B 206  ARG  CB ', -0.743, (14.108, -12.164, 18.431)), (' A 148  GLU  HG2', ' A 149  GLY  N  ', -0.737, (-10.757, -3.539, -3.748)), (' B   1  ALA  N  ', ' B   2  PRO  CD ', -0.733, (-2.008, -10.746, 31.377)), (' A 136  ILE HG21', ' A 201  MET  HE1', -0.723, (-23.917, -10.335, -0.94)), (' A 176  GLU  O  ', ' A 177  SER  CB ', -0.715, (-21.811, 10.086, -7.891)), (' A 140  HIS  HB3', ' A 306  GOL  H2 ', -0.705, (-17.297, -17.794, -8.592)), (' A  65  CYS  HB2', ' A 421  HOH  O  ', -0.682, (-23.966, -28.178, 13.367)), (' B  52  ASN HD22', ' B  84  ASP  H  ', -0.678, (-14.133, 17.979, 20.98)), (' A 172  PHE  CE2', ' A 177  SER  HB2', -0.659, (-20.978, 9.134, -6.322)), (' A 148  GLU  CG ', ' A 149  GLY  N  ', -0.656, (-11.132, -2.859, -3.209)), (' B 136  ILE HD12', ' B 201  MET  HE1', -0.654, (3.89, 0.774, 13.116)), (' A 178  ASP  C  ', ' A 178  ASP  OD2', -0.643, (-23.829, 6.852, -11.294)), (' B   1  ALA  H2 ', ' B   2  PRO  CD ', -0.642, (-1.421, -10.342, 31.092)), (' A  69  LEU  HA ', ' A  70  MET  HE2', -0.631, (-31.374, -17.491, 7.664)), (' B   1  ALA  N  ', ' B   2  PRO  HD3', -0.622, (-1.678, -10.585, 32.257)), (' B   1  ALA  H3 ', ' B   2  PRO  HD3', -0.615, (-2.289, -10.88, 32.429)), (' B 110  THR HG22', ' B 219  THR  OG1', -0.613, (-5.728, 11.375, 34.601)), (' A 136  ILE HG21', ' A 201  MET  CE ', -0.613, (-24.303, -10.0, -0.926)), (' A 174  SER  CB ', ' A 176  GLU  H  ', -0.612, (-17.091, 8.318, -9.73)), (' B  52  ASN  ND2', ' B  84  ASP  H  ', -0.599, (-13.777, 18.825, 21.015)), (' B 117  LYS  HZ3', ' B 213  SER  HA ', -0.599, (10.636, 3.764, 22.498)), (' A 173  GLU  O  ', ' A 174  SER  O  ', -0.594, (-15.317, 6.974, -6.378)), (' B 192  GLU  CG ', ' B 304  GOL  O3 ', -0.587, (-9.33, 2.795, 2.03)), (' B 205  ARG  NH2', ' B 207  ASN  ND2', -0.584, (14.949, -9.032, 14.4)), (' B 148  GLU  HG2', ' B 149  GLY  N  ', -0.571, (-1.103, -11.452, 6.874)), (' B 185  VAL HG21', ' B 201  MET  HG3', -0.567, (1.39, -2.668, 15.633)), (' B 136  ILE HG21', ' B 201  MET  CE ', -0.564, (3.867, 0.2, 14.634)), (' B 120  LYS  HE2', ' B 124  LYS  HZ2', -0.545, (6.537, -5.615, 33.924)), (' B 191  GLU  CG ', ' B 304  GOL  H11', -0.542, (-12.042, 2.494, 4.657)), (' B 136  ILE HG21', ' B 201  MET  HE3', -0.539, (3.552, -0.18, 15.228)), (' A 161  MET  HE3', ' A 213  SER  OG ', -0.536, (-31.923, -14.562, -2.196)), (' A 177  SER  C  ', ' A 179  ASN  H  ', -0.534, (-22.775, 7.456, -9.831)), (' A  52  ASN HD22', ' A  84  ASP  H  ', -0.527, (-28.107, -15.829, 25.051)), (' A 177  SER  O  ', ' A 178  ASP  OD2', -0.525, (-23.19, 8.479, -11.487)), (' B 140  HIS  HD2', ' B 305  GOL  O2 ', -0.523, (12.86, 1.047, 4.496)), (' A  52  ASN  ND2', ' A  84  ASP  H  ', -0.523, (-28.493, -15.287, 24.853)), (' B   1  ALA  H2 ', ' B   2  PRO  HD2', -0.517, (-1.928, -10.004, 30.848)), (' A 120  LYS  HD3', ' A 121  ALA  N  ', -0.514, (-37.195, -0.843, -2.625)), (' A 115  ILE HG22', ' A 116  PRO  O  ', -0.504, (-37.238, -5.945, 0.435)), (' B 191  GLU  HG2', ' B 304  GOL  H11', -0.503, (-12.332, 2.272, 5.13)), (' B 141  GLU  HB3', ' B 305  GOL  H11', -0.494, (10.02, -0.176, 0.299)), (' B  70  MET  HG2', ' B 133  SER  HB3', -0.494, (-1.08, 8.312, 21.03)), (' A  16  VAL HG21', ' A 196  GLY  O  ', -0.493, (-14.224, -7.429, 9.081)), (' A   8  ARG  HD3', ' A 198  TYR  CZ ', -0.489, (-18.05, -2.879, 8.537)), (' A  74  PHE  CZ ', ' A 218  PRO  HD3', -0.486, (-32.737, -9.23, 12.418)), (' A 161  MET  HE3', ' A 213  SER  CB ', -0.482, (-31.602, -13.866, -2.337)), (' B 117  LYS  NZ ', ' B 213  SER  HA ', -0.474, (10.773, 4.045, 22.277)), (' B 141  GLU  H  ', ' B 305  GOL  H2 ', -0.47, (10.326, 0.783, 2.788)), (' A 183  TRP  CD1', ' A 203  LYS  HB2', -0.467, (-25.602, -2.816, -3.97)), (' A  52  ASN HD21', ' A 100  TYR  HD1', -0.463, (-29.512, -17.225, 26.039)), (' B 120  LYS  HE2', ' B 124  LYS  NZ ', -0.462, (6.543, -6.094, 34.234)), (' B 191  GLU  H  ', ' B 304  GOL  H11', -0.46, (-11.117, 2.817, 4.998)), (' A 185  VAL HG21', ' A 201  MET  HG3', -0.455, (-22.616, -7.126, -0.305)), (' A 153  GLU  HA ', ' A 154  PRO  HD3', -0.454, (-20.721, -12.904, -7.893)), (' B 141  GLU  HB3', ' B 305  GOL  C1 ', -0.454, (10.003, 0.231, 0.5)), (' A 307  SO4  O1 ', ' A 493  HOH  O  ', -0.451, (-20.353, -20.427, 5.49)), (' A 109  ASP  C  ', ' A 109  ASP  OD1', -0.445, (-38.124, -9.647, 19.709)), (' A 174  SER  HB3', ' A 176  GLU  N  ', -0.445, (-18.142, 8.895, -9.341)), (' B 191  GLU  HG3', ' B 304  GOL  H11', -0.442, (-11.855, 1.91, 4.631)), (' A  69  LEU  CA ', ' A  70  MET  HE2', -0.439, (-31.853, -17.628, 8.613)), (' B 191  GLU  HG2', ' B 304  GOL  C1 ', -0.439, (-12.299, 2.82, 5.048)), (' A 110  THR  CG2', ' A 110  THR  O  ', -0.438, (-42.237, -7.418, 18.371)), (' A 124  LYS  O  ', ' A 128  THR  HB ', -0.436, (-35.222, 2.976, 5.554)), (' A 172  PHE  CD2', ' A 177  SER  HB2', -0.435, (-20.72, 8.743, -5.971)), (' B 205  ARG  NE ', ' B 207  ASN HD21', -0.435, (13.536, -8.561, 15.094)), (' A 172  PHE  CZ ', ' A 177  SER  HB2', -0.433, (-20.963, 9.692, -5.319)), (' B 109  ASP  C  ', ' B 109  ASP  OD1', -0.431, (-7.901, 14.626, 31.438)), (' B  52  ASN  ND2', ' B  83  LEU HD12', -0.43, (-11.869, 18.356, 21.43)), (' B 148  GLU  CG ', ' B 149  GLY  N  ', -0.428, (-1.462, -11.255, 7.085)), (' A 177  SER  C  ', ' A 179  ASN  N  ', -0.425, (-22.851, 6.895, -9.875)), (' A 148  GLU  CG ', ' A 149  GLY  H  ', -0.424, (-11.621, -3.151, -3.001)), (' B 205  ARG  O  ', ' B 206  ARG  CG ', -0.423, (13.78, -12.608, 18.666)), (' B 190  GLY  HA3', ' B 304  GOL  H2 ', -0.422, (-9.624, 4.941, 5.037)), (' A 184  LEU HD22', ' A 198  TYR  HD2', -0.42, (-18.718, -3.756, 5.146)), (' A 161  MET  HE3', ' A 213  SER  HB2', -0.419, (-31.022, -14.079, -2.663)), (' B 185  VAL  HB ', ' B 199  VAL HG13', -0.417, (-0.162, -2.588, 13.535)), (' B 146  TYR  O  ', ' B 194  GLY  HA2', -0.412, (-2.035, -3.798, 4.829)), (' A 207  ASN  H  ', ' A 207  ASN  ND2', -0.411, (-27.154, -6.321, -14.615)), (' B 207  ASN  O  ', ' B 208  HIS  CB ', -0.409, (17.139, -5.846, 20.166)), (' B 205  ARG  O  ', ' B 206  ARG  NE ', -0.409, (13.468, -12.698, 17.654)), (' A 109  ASP  HB2', ' A 219  THR  O  ', -0.408, (-37.048, -7.466, 18.23)), (' B 124  LYS  NZ ', ' B 309  SO4  O2 ', -0.407, (6.002, -7.793, 34.806)), (' B   8  ARG  HD3', ' B 198  TYR  CZ ', -0.403, (-8.853, -3.069, 15.566)), (' B 184  LEU  HA ', ' B 184  LEU HD23', -0.401, (-2.641, -6.368, 15.686))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
