# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('C', ' 768 ', 'THR', 0.21857292880412793, (209.893, 187.962, 226.32)), ('C', ' 977 ', 'LEU', 0.293508271306045, (200.115, 193.651, 177.107)), ('C', '1041 ', 'ASP', 0.11229450940323218, (190.803, 189.41, 256.412)), ('C', '1074 ', 'ASN', 0.0032384165210033893, (174.64700000000005, 193.08800000000005, 266.897)), ('C', '1082 ', 'CYS', 0.26208672346085565, (178.27, 214.801, 271.925)), ('C', '1173 ', 'ASN', 0.0007909989948977883, (186.394, 203.81999999999994, 152.084)), ('C', '1194 ', 'ASN', 0.19473389596031923, (191.925, 187.711, 110.086)), ('C', '1196 ', 'SER', 0.06504379070392778, (190.892, 191.67199999999994, 106.911)), ('A', ' 768 ', 'THR', 0.21811265744576205, (200.758, 213.33, 226.303)), ('A', ' 977 ', 'LEU', 0.29431773491348723, (200.73200000000003, 201.96, 177.103)), ('A', '1041 ', 'ASP', 0.11181950561212504, (209.058, 196.114, 256.415)), ('A', '1074 ', 'ASN', 0.003244923038787636, (213.961, 180.29900000000006, 266.919)), ('A', '1082 ', 'CYS', 0.26226529796923137, (193.351, 172.571, 271.95399999999995)), ('A', '1173 ', 'ASN', 0.0008165464489122062, (198.799, 184.963, 152.099)), ('A', '1194 ', 'ASN', 0.19493879327140562, (209.97900000000007, 197.767, 110.08799999999998)), ('A', '1196 ', 'SER', 0.06492630314745401, (207.067, 194.88599999999997, 106.916)), ('B', ' 768 ', 'THR', 0.21895026696977493, (183.374, 192.754, 226.30999999999997)), ('B', ' 977 ', 'LEU', 0.2950458973710221, (193.245, 198.34999999999994, 177.105)), ('B', '1041 ', 'ASP', 0.11285193512438467, (194.132, 208.586, 256.405)), ('B', '1074 ', 'ASN', 0.0032418776668079433, (205.379, 220.74900000000005, 266.895)), ('B', '1082 ', 'CYS', 0.2623469704913424, (222.371, 206.765, 271.952)), ('B', '1173 ', 'ASN', 0.0008032920094814661, (208.93900000000005, 205.138, 152.096)), ('B', '1194 ', 'ASN', 0.19524927852031737, (192.27, 208.36899999999994, 110.077)), ('B', '1196 ', 'SER', 0.06520711554933263, (196.22100000000006, 207.283, 106.907))]
data['cbeta'] = [('C', ' 709 ', 'ASN', ' ', 0.4653042595993177, (173.297, 204.406, 267.683)), ('C', ' 738 ', 'CYS', ' ', 0.2872431365210825, (204.549, 187.114, 214.104)), ('C', ' 749 ', 'CYS', ' ', 0.2590900807303314, (199.234, 185.586, 203.627)), ('C', '1041 ', 'ASP', ' ', 0.3520254274983494, (189.465, 189.53199999999995, 255.643)), ('C', '1043 ', 'CYS', ' ', 0.2818757328946602, (197.56000000000003, 187.438, 256.641)), ('C', '1125 ', 'ASN', ' ', 0.30840124178871875, (182.29400000000007, 223.95300000000006, 269.121)), ('A', ' 709 ', 'ASN', ' ', 0.464599634720085, (204.83900000000003, 173.465, 267.712)), ('A', ' 738 ', 'CYS', ' ', 0.28605224924708794, (204.168, 209.11399999999995, 214.092)), ('A', ' 749 ', 'CYS', ' ', 0.2586202429418005, (208.152, 205.266, 203.62)), ('A', '1041 ', 'ASP', ' ', 0.35204933942452027, (209.62200000000007, 194.894, 255.648)), ('A', '1043 ', 'CYS', ' ', 0.2825427494200048, (207.383, 202.951, 256.636)), ('A', '1125 ', 'ASN', ' ', 0.3065594486061123, (183.414, 171.47000000000006, 269.151)), ('B', ' 709 ', 'ASN', ' ', 0.4654830817015118, (215.85600000000005, 216.264, 267.696)), ('B', ' 738 ', 'CYS', ' ', 0.28693061715365686, (185.324, 197.799, 214.093)), ('B', ' 749 ', 'CYS', ' ', 0.2576582235895842, (186.66900000000007, 203.16, 203.61499999999998)), ('B', '1041 ', 'ASP', ' ', 0.3508759448702495, (194.90700000000007, 209.68299999999994, 255.636)), ('B', '1043 ', 'CYS', ' ', 0.28311697049154094, (189.04800000000006, 203.718, 256.631)), ('B', '1125 ', 'ASN', ' ', 0.30970735259520743, (228.291, 198.70500000000007, 269.16))]
data['probe'] = [(' A1173  ASN HD21', ' A1417  NAG  C1 ', -1.092, (203.053, 182.576, 150.327)), (' B1173  ASN HD21', ' B1417  NAG  C1 ', -1.085, (208.896, 210.038, 150.392)), (' C1173  ASN HD21', ' C1417  NAG  C1 ', -1.079, (182.133, 201.224, 150.586)), (' A1098  ASN HD21', ' A1405  NAG  C1 ', -0.988, (211.08, 177.591, 280.978)), (' C1098  ASN HD21', ' C1405  NAG  C1 ', -0.987, (174.301, 196.46, 281.029)), (' B1098  ASN HD21', ' B1405  NAG  C1 ', -0.984, (208.445, 219.279, 281.083)), (' C1173  ASN  ND2', ' C1417  NAG  C1 ', -0.947, (183.456, 202.436, 150.919)), (' B1173  ASN  ND2', ' B1417  NAG  C1 ', -0.93, (208.596, 208.821, 150.807)), (' A1173  ASN  ND2', ' A1417  NAG  C1 ', -0.917, (202.051, 183.33, 150.672)), (' C1173  ASN  OD1', ' C1417  NAG  C1 ', -0.906, (182.899, 202.707, 151.143)), (' A1098  ASN  ND2', ' A1405  NAG  C1 ', -0.9, (210.57, 178.484, 280.452)), (' B1098  ASN  ND2', ' B1405  NAG  C1 ', -0.899, (208.637, 218.596, 280.439)), (' C1098  ASN  ND2', ' C1405  NAG  C1 ', -0.893, (174.512, 196.862, 280.458)), (' B1173  ASN  OD1', ' B1417  NAG  C1 ', -0.833, (210.448, 208.529, 151.794)), (' A1173  ASN  OD1', ' A1417  NAG  C1 ', -0.807, (201.036, 182.32, 151.628)), (' A 709  ASN  CB ', ' A1077  THR  O  ', -0.793, (205.149, 174.545, 267.102)), (' C 709  ASN  CB ', ' C1077  THR  O  ', -0.788, (174.859, 204.179, 267.051)), (' B 709  ASN  CB ', ' B1077  THR  O  ', -0.784, (214.855, 215.066, 267.022)), (' B1040  VAL HG22', ' B1047  TYR  CE2', -0.756, (196.66, 208.415, 262.108)), (' C1173  ASN  CG ', ' C1417  NAG  C1 ', -0.747, (183.436, 202.669, 151.18)), (' A1040  VAL HG22', ' A1047  TYR  CE2', -0.745, (207.945, 193.722, 262.526)), (' B 709  ASN  HB2', ' B1077  THR  O  ', -0.744, (214.262, 215.686, 267.241)), (' C1040  VAL HG22', ' C1047  TYR  CE2', -0.742, (189.596, 191.332, 262.49)), (' C 709  ASN  HB2', ' C1077  THR  O  ', -0.74, (174.599, 203.268, 267.253)), (' A 709  ASN  HB2', ' A1077  THR  O  ', -0.736, (205.031, 175.139, 267.334)), (' B1173  ASN  CG ', ' B1417  NAG  C1 ', -0.691, (209.576, 208.292, 151.289)), (' A1173  ASN  CG ', ' A1417  NAG  C1 ', -0.683, (201.484, 183.095, 151.156)), (' C1173  ASN HD21', ' C1417  NAG  C2 ', -0.669, (182.388, 201.75, 150.138)), (' B1173  ASN HD21', ' B1417  NAG  C2 ', -0.637, (209.276, 209.194, 150.131)), (' A1173  ASN HD21', ' A1417  NAG  C2 ', -0.635, (202.62, 182.57, 150.103)), (' A1091  ARG  HD3', ' A1121  PHE  CZ ', -0.632, (191.456, 188.797, 272.241)), (' B1091  ARG  HD3', ' B1121  PHE  CZ ', -0.631, (209.124, 196.909, 272.24)), (' C1091  ARG  HD3', ' C1121  PHE  CZ ', -0.617, (193.246, 207.998, 272.563)), (' A 743  CYS  SG ', ' A 746  SER  O  ', -0.614, (210.509, 207.401, 204.267)), (' C 743  CYS  SG ', ' C 746  SER  O  ', -0.613, (200.329, 182.337, 203.948)), (' C1091  ARG  CZ ', ' C1121  PHE  CE2', -0.613, (193.755, 209.427, 274.16)), (' B 743  CYS  SG ', ' B 746  SER  O  ', -0.609, (183.597, 203.758, 204.299)), (' B1091  ARG  CZ ', ' B1121  PHE  CE2', -0.603, (210.234, 196.035, 273.75)), (' A1091  ARG  CZ ', ' A1121  PHE  CE2', -0.603, (190.188, 188.343, 273.742)), (' A 709  ASN  HB3', ' A1077  THR  O  ', -0.505, (204.142, 174.461, 267.865)), (' A 749  CYS  HB2', ' A 997  ILE HD11', -0.499, (206.374, 204.586, 203.827)), (' B 749  CYS  HB2', ' B 997  ILE HD11', -0.498, (187.772, 202.202, 203.874)), (' C1173  ASN HD21', ' C1417  NAG  H2 ', -0.498, (182.481, 201.503, 149.938)), (' B 709  ASN  HB3', ' B1077  THR  O  ', -0.497, (215.353, 214.883, 267.906)), (' C 709  ASN  HB3', ' C1077  THR  O  ', -0.493, (174.73, 204.633, 267.945)), (' C 749  CYS  HB2', ' C 997  ILE HD11', -0.49, (199.857, 186.99, 204.049)), (' A 752  LEU HD22', ' B 995  ARG  NE ', -0.488, (200.921, 204.813, 200.338)), (' A 980  ILE HD12', ' B 980  ILE HG22', -0.485, (196.547, 200.088, 181.822)), (' B1080  ALA  HB2', ' B1089  PHE  HB3', -0.483, (215.327, 204.518, 268.66)), (' B1091  ARG  NH2', ' B1121  PHE  CE2', -0.476, (209.976, 195.559, 273.622)), (' C1091  ARG  NH2', ' C1121  PHE  CE2', -0.475, (194.221, 209.757, 273.613)), (' A1080  ALA  HB2', ' A1089  PHE  HB3', -0.473, (195.142, 179.45, 268.425)), (' B 752  LEU HD22', ' C 995  ARG  NE ', -0.472, (190.545, 196.988, 200.315)), (' A1091  ARG  NH2', ' A1121  PHE  CE2', -0.471, (189.753, 188.823, 274.254)), (' B 980  ILE HD12', ' C 980  ILE HG22', -0.468, (196.986, 195.403, 182.029)), (' A 995  ARG  NE ', ' C 752  LEU HD22', -0.467, (202.534, 191.631, 200.224)), (' B1098  ASN HD21', ' B1405  NAG  C2 ', -0.464, (209.229, 219.54, 281.898)), (' C1080  ALA  HB2', ' C1089  PHE  HB3', -0.464, (183.294, 209.774, 268.441)), (' A 980  ILE HG22', ' C 980  ILE HD12', -0.458, (200.478, 198.665, 181.771)), (' A 756  TYR  CE2', ' B 995  ARG  HG2', -0.456, (199.851, 204.478, 204.209)), (' C1098  ASN HD21', ' C1405  NAG  C2 ', -0.448, (173.734, 196.986, 281.856)), (' C1082  CYS  HA ', ' C1086  LYS  O  ', -0.443, (179.691, 215.41, 272.535)), (' B1082  CYS  HA ', ' B1086  LYS  O  ', -0.44, (222.155, 205.285, 272.647)), (' A 995  ARG  HG2', ' C 756  TYR  CE2', -0.438, (203.054, 193.055, 204.416)), (' A1082  CYS  HA ', ' A1086  LYS  O  ', -0.436, (192.144, 173.553, 272.588)), (' B 756  TYR  CE2', ' C 995  ARG  HG2', -0.433, (191.33, 196.255, 204.265)), (' B 749  CYS  SG ', ' C1148  PHE  CD2', -0.423, (186.576, 205.743, 204.659)), (' B1173  ASN HD21', ' B1417  NAG  H2 ', -0.423, (208.835, 209.452, 149.809)), (' A1098  ASN HD21', ' A1405  NAG  C2 ', -0.422, (211.215, 177.512, 281.757)), (' C1410  NAG  H62', ' C1411  NAG  C7 ', -0.419, (183.953, 210.751, 236.069)), (' A1410  NAG  H62', ' A1411  NAG  C7 ', -0.419, (193.984, 179.479, 236.063)), (' A1148  PHE  CD2', ' C 749  CYS  SG ', -0.418, (196.621, 184.183, 204.646)), (' B1410  NAG  H62', ' B1411  NAG  C7 ', -0.418, (215.965, 204.017, 235.702)), (' C1126  CYS  O  ', ' C1126  CYS  SG ', -0.413, (178.226, 218.572, 267.893)), (' C1172  ILE  O  ', ' C1172  ILE HG22', -0.413, (189.894, 204.381, 152.631)), (' A1126  CYS  O  ', ' A1126  CYS  SG ', -0.412, (190.064, 170.562, 267.933)), (' B1126  CYS  O  ', ' B1126  CYS  SG ', -0.411, (225.71, 204.837, 267.978)), (' A 749  CYS  SG ', ' B1148  PHE  CD2', -0.41, (210.674, 203.708, 204.579)), (' A1172  ILE  O  ', ' A1172  ILE HG22', -0.409, (196.388, 188.086, 152.723)), (' A1173  ASN HD21', ' A1417  NAG  H2 ', -0.407, (202.873, 182.82, 149.924)), (' A1186  LEU  HB3', ' C 942  ALA  HB2', -0.403, (205.672, 197.422, 123.876))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
