# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  32 ', 'PHE', None, (189.34, 196.753, 144.96)), ('A', '  87 ', 'ASN', None, (187.36899999999994, 188.271, 127.479)), ('B', ' 875 ', 'SER', None, (184.45399999999995, 157.56699999999995, 185.87199999999999)), ('C', ' 662 ', 'CYS', None, (133.459, 173.318, 176.632))]
data['rota'] = [('A', '  36 ', 'VAL', 0.2648173030448162, (178.714, 194.452, 142.252)), ('A', ' 202 ', 'LYS', 0.25596894300832923, (173.972, 195.04, 128.335)), ('A', ' 204 ', 'TYR', 0.1445887443491428, (175.61899999999994, 199.343, 133.295)), ('A', ' 662 ', 'CYS', 0.22516534311329386, (185.639, 173.79499999999993, 175.28299999999996)), ('A', '1089 ', 'PHE', 0.23331869825379076, (171.78699999999995, 154.262, 216.09)), ('B', ' 912 ', 'THR', 0.27850859763247426, (166.458, 150.03199999999995, 209.431)), ('C', '  65 ', 'PHE', 0.2688621405289527, (103.52799999999998, 167.822, 132.326)), ('C', ' 584 ', 'ILE', 0.2983186928255849, (153.326, 199.707, 141.66)), ('C', '1094 ', 'VAL', 0.25294731589931574, (149.96799999999993, 171.001, 211.197))]
data['cbeta'] = []
data['probe'] = [(' B 570  LEU HD21', ' C 960  ASN  OD1', -1.157, (139.726, 148.311, 153.972)), (' B 570  LEU  CD2', ' C 960  ASN  OD1', -1.147, (140.546, 148.3, 153.067)), (' A 960  ASN  CG ', ' C 570  LEU HD11', -1.146, (160.812, 179.534, 153.721)), (' C 856  ILE HG13', ' C 858  LEU HD13', -1.09, (148.562, 143.899, 150.113)), (' B 856  ILE HG13', ' B 858  LEU HD13', -1.087, (179.539, 155.986, 149.833)), (' A 960  ASN  OD1', ' C 570  LEU  CG ', -1.049, (159.901, 180.678, 152.538)), (' A 960  ASN  CB ', ' C 570  LEU HD11', -1.037, (161.559, 179.17, 152.967)), (' B 856  ILE  CG1', ' B 858  LEU HD13', -0.974, (179.412, 155.477, 149.811)), (' A 960  ASN  OD1', ' C 570  LEU  HG ', -0.916, (159.644, 180.669, 152.538)), (' A 960  ASN  HB3', ' C 570  LEU HD11', -0.907, (162.277, 179.461, 152.98)), (' B 856  ILE HD11', ' B 963  VAL HG22', -0.874, (177.976, 153.638, 149.826)), (' B 215  ASP  N  ', ' B 266  TYR  HH ', -0.854, (183.961, 107.686, 143.211)), (' A 963  VAL HG11', ' C 572  ILE HD11', -0.843, (156.924, 181.198, 148.587)), (' A 960  ASN  OD1', ' C 570  LEU  CD2', -0.829, (159.228, 181.542, 153.329)), (' A 960  ASN  OD1', ' C 570  LEU HD21', -0.815, (160.178, 180.946, 153.951)), (' B 856  ILE HG13', ' B 858  LEU  CD1', -0.81, (178.602, 156.508, 149.861)), (' C 856  ILE  CG1', ' C 858  LEU HD13', -0.796, (147.986, 143.649, 149.589)), (' B 856  ILE  CD1', ' B 858  LEU HD13', -0.791, (178.482, 155.504, 149.307)), (' A 960  ASN  OD1', ' C 570  LEU  CD1', -0.781, (160.218, 180.195, 152.588)), (' A 960  ASN  HB3', ' C 570  LEU  CD1', -0.76, (161.655, 179.612, 152.361)), (' A 960  ASN  CG ', ' C 570  LEU  CD1', -0.759, (160.699, 179.942, 152.929)), (' A 960  ASN  CB ', ' C 570  LEU  CD1', -0.725, (161.303, 179.484, 152.469)), (' A 960  ASN  OD1', ' C 570  LEU HD11', -0.722, (160.503, 180.736, 153.773)), (' C 856  ILE HD11', ' C 963  VAL HG22', -0.71, (146.313, 145.797, 149.875)), (' B 572  ILE HD11', ' C 963  VAL HG11', -0.709, (141.959, 145.668, 148.981)), (' B 856  ILE  CD1', ' B 963  VAL HG22', -0.699, (178.03, 153.179, 149.195)), (' C 856  ILE  CD1', ' C 963  VAL HG22', -0.692, (145.363, 145.628, 149.511)), (' B 570  LEU HD21', ' C 960  ASN  CG ', -0.688, (140.509, 148.944, 154.0)), (' A1106  GLN HE21', ' A1109  PHE  HB3', -0.668, (169.198, 171.116, 208.438)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.66, (182.195, 106.238, 127.097)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.626, (181.017, 119.473, 120.593)), (' B 572  ILE HD11', ' C 963  VAL  CG1', -0.62, (141.836, 145.89, 148.486)), (' A 563  GLN  O  ', ' A 577  ARG  NH1', -0.615, (193.777, 139.185, 134.718)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.613, (131.117, 143.532, 187.004)), (' C 854  LYS  HD3', ' C 855  TYR  CE1', -0.602, (140.077, 139.969, 152.452)), (' C 726  ILE HG12', ' C1061  VAL HG22', -0.595, (141.453, 150.799, 178.665)), (' A  34  ARG  NH1', ' A 191  GLU  OE2', -0.594, (183.415, 201.746, 142.072)), (' C 725  GLU  OE1', ' C1064  HIS  NE2', -0.589, (146.466, 154.996, 185.087)), (' C 611  LEU HD11', ' C 666  ILE HG23', -0.588, (135.75, 177.18, 163.2)), (' B1106  GLN  NE2', ' B1111  GLU  OE1', -0.587, (165.126, 145.211, 211.758)), (' A  53  ASP  OD2', ' A 195  LYS  NZ ', -0.586, (175.085, 188.963, 134.975)), (' B 328  ARG  NE ', ' B 578  ASP  OD1', -0.584, (131.172, 129.084, 133.138)), (' A 895  GLN  NE2', ' C1074  ASN  OD1', -0.584, (139.25, 177.371, 204.298)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.572, (174.524, 143.592, 200.456)), (' B 912  THR  OG1', ' B1106  GLN  OE1', -0.572, (163.709, 148.198, 210.359)), (' B 707  TYR  HB3', ' C 792  PRO  HG3', -0.568, (145.006, 133.463, 199.077)), (' C 645  THR HG23', ' C 647  ALA  H  ', -0.565, (137.206, 182.558, 163.556)), (' A 901  GLN HE21', ' A 905  ARG  HE ', -0.564, (154.885, 173.783, 197.782)), (' A 403  ARG  HD3', ' A 405  ASP  H  ', -0.563, (160.525, 148.271, 101.902)), (' C 341  VAL HG11', ' C 397  ALA  HB1', -0.563, (158.889, 196.556, 101.211)), (' A 357  ARG  NH2', ' A 394  ASN  OD1', -0.559, (184.041, 137.66, 119.619)), (' B 726  ILE HG12', ' B1061  VAL HG22', -0.555, (175.447, 147.212, 179.14)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.555, (153.162, 132.371, 204.227)), (' B1093  GLY  H  ', ' B1107  ARG HH21', -0.553, (155.371, 149.868, 209.555)), (' A 448  ASN  N  ', ' A 497  PHE  O  ', -0.552, (164.478, 141.472, 90.224)), (' A 918  GLU  OE2', ' C1123  SER  OG ', -0.546, (164.891, 175.601, 215.913)), (' A  95  THR HG22', ' A 189  LEU HD13', -0.541, (187.011, 205.605, 137.163)), (' A 707  TYR  HE1', ' B 897  PRO  HA ', -0.54, (183.598, 157.193, 203.241)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.539, (174.516, 167.851, 150.252)), (' A1081  ILE HG21', ' A1135  ASN HD22', -0.539, (177.973, 158.545, 220.056)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.537, (165.242, 151.471, 185.635)), (' C 642  VAL HG22', ' C 651  ILE HG12', -0.536, (128.025, 183.367, 157.156)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.535, (153.551, 175.271, 184.11)), (' A 328  ARG HH21', ' A 580  GLN  HB2', -0.535, (200.702, 148.962, 129.059)), (' A 398  ASP  HB2', ' A 512  VAL  HB ', -0.534, (172.827, 142.604, 112.39)), (' A1041  ASP  HB2', ' B1030  SER  HB3', -0.531, (169.254, 163.662, 187.284)), (' B 666  ILE HD11', ' B 672  ALA  HB2', -0.527, (158.699, 126.062, 166.922)), (' B 985  ASP  HB3', ' B 987  PRO  HD2', -0.527, (174.083, 164.026, 122.642)), (' A 403  ARG  NH1', ' A 504  GLY  O  ', -0.524, (160.477, 149.574, 99.556)), (' A 303  LEU HD12', ' A 308  VAL HG22', -0.524, (177.063, 182.462, 159.023)), (' A 725  GLU  OE1', ' A1064  HIS  NE2', -0.522, (162.084, 171.574, 184.979)), (' B 733  LYS  NZ ', ' B 775  ASP  OD2', -0.521, (180.471, 164.922, 166.85)), (' B 129  LYS  HG3', ' B 133  PHE  HZ ', -0.52, (186.824, 118.617, 113.938)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.519, (173.634, 152.058, 116.075)), (' C 815  ARG  HD2', ' C 823  PHE  HE2', -0.517, (139.564, 138.171, 177.232)), (' C 190  ARG  HE ', ' C 207  HIS  CE1', -0.514, (104.403, 149.516, 135.62)), (' B 205  SER  OG ', ' B 206  LYS  N  ', -0.511, (190.272, 121.388, 135.564)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.51, (141.153, 138.514, 102.192)), (' C1088  HIS  HB3', ' C1120  THR  HB ', -0.51, (156.215, 170.833, 219.846)), (' B 905  ARG  NH1', ' B1049  LEU  O  ', -0.508, (171.533, 153.994, 196.027)), (' C1093  GLY  H  ', ' C1107  ARG HH21', -0.507, (152.976, 166.808, 209.442)), (' C1116  THR HG22', ' C1138  TYR  HD2', -0.506, (149.544, 165.548, 226.227)), (' B 276  LEU HD11', ' B 304  LYS  HA ', -0.506, (174.662, 135.161, 151.929)), (' C 856  ILE HG21', ' C 966  LEU HD11', -0.506, (145.853, 144.34, 146.137)), (' A 956  ALA  O  ', ' A 960  ASN  ND2', -0.505, (161.037, 179.348, 156.207)), (' C 117  LEU HD22', ' C 231  ILE HD13', -0.505, (119.008, 156.317, 119.096)), (' B  95  THR HG22', ' B 189  LEU  HB3', -0.505, (189.873, 111.295, 139.848)), (' C 715  PRO  HA ', ' C1072  GLU  HA ', -0.504, (138.18, 168.613, 204.657)), (' B 858  LEU HD23', ' B 959  LEU HD22', -0.504, (176.677, 154.814, 154.085)), (' B  83  VAL HG12', ' B 237  ARG  HG2', -0.503, (174.492, 111.817, 122.201)), (' B1129  VAL HG13', ' C 917  TYR  HB3', -0.501, (141.091, 148.41, 212.044)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.5, (183.431, 118.892, 148.485)), (' A  50  SER  OG ', ' A 304  LYS  NZ ', -0.5, (171.83, 181.323, 148.303)), (' A1074  ASN  OD1', ' B 895  GLN  NE2', -0.499, (185.455, 166.886, 204.508)), (' A  37  TYR  OH ', ' A  54  LEU  O  ', -0.499, (178.037, 189.622, 135.799)), (' C  99  ASN  O  ', ' C 102  ARG  NE ', -0.497, (100.04, 152.714, 125.342)), (' A  96  GLU  HG2', ' A 263  ALA  HA ', -0.496, (192.114, 210.168, 131.809)), (' A1129  VAL HG13', ' B 917  TYR  HB3', -0.496, (177.531, 149.058, 212.714)), (' A  62  VAL HG12', ' A 268  GLY  HA3', -0.495, (189.583, 194.921, 136.592)), (' A 666  ILE HD11', ' A 672  ALA  HB2', -0.494, (189.208, 173.705, 166.844)), (' B  39  PRO  HG2', ' B  51  THR HG21', -0.493, (179.524, 132.803, 140.746)), (' B1018  ILE  O  ', ' B1022  ALA  N  ', -0.493, (168.414, 157.439, 173.905)), (' A 277  LEU HD22', ' A 285  ILE HD13', -0.492, (174.217, 192.95, 144.54)), (' A 324  GLU  HB2', ' A 539  VAL HG12', -0.492, (197.536, 161.163, 135.902)), (' C 801  ASN  N  ', ' C 928  ASN  OD1', -0.491, (134.734, 144.557, 196.871)), (' A1012  LEU  HB3', ' C1013  ILE HG21', -0.491, (155.265, 160.26, 161.67)), (' C1104  VAL HG12', ' C1115  ILE HG12', -0.491, (148.776, 169.29, 219.014)), (' B 804  GLN  OE1', ' B 935  GLN  NE2', -0.49, (186.705, 142.334, 187.586)), (' C 856  ILE HG13', ' C 858  LEU  CD1', -0.49, (148.756, 143.163, 150.331)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.49, (168.957, 149.912, 185.493)), (' C 858  LEU HD23', ' C 959  LEU HD22', -0.49, (147.488, 145.972, 154.777)), (' B  81  ASN  N  ', ' B 265  TYR  OH ', -0.489, (181.548, 105.961, 128.086)), (' A 390  LEU HD11', ' B 983  ARG  HG2', -0.489, (180.283, 152.954, 124.601)), (' A  31  SER  HB2', ' A  60  SER  H  ', -0.484, (189.909, 192.646, 142.649)), (' A 823  PHE  HD1', ' A1057  PRO  HG3', -0.483, (155.398, 184.549, 173.217)), (' A 902  MET  HE1', ' A1049  LEU HD13', -0.483, (161.593, 175.658, 198.842)), (' B 101  ILE HG22', ' B 242  LEU  HG ', -0.483, (187.641, 107.37, 127.585)), (' B  84  LEU  N  ', ' B 238  PHE  O  ', -0.483, (176.497, 111.048, 125.029)), (' A 756  TYR  OH ', ' A 994  ASP  OD1', -0.482, (152.66, 161.533, 136.656)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.482, (191.283, 146.787, 181.617)), (' C 316  SER  OG ', ' C 317  ASN  N  ', -0.479, (136.869, 172.417, 149.722)), (' A  42  VAL  O  ', ' C 563  GLN  NE2', -0.479, (164.956, 194.997, 142.121)), (' A 760  CYS  O  ', ' A 764  ASN  ND2', -0.479, (144.222, 166.243, 150.45)), (' A1030  SER  HB3', ' C1041  ASP  HB2', -0.478, (149.9, 164.606, 187.45)), (' B 200  TYR  HB2', ' B 230  PRO  HA ', -0.478, (181.148, 131.338, 121.746)), (' A 342  PHE  HE1', ' A 511  VAL HG11', -0.476, (177.911, 146.418, 108.205)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.476, (162.62, 154.576, 200.085)), (' C  34  ARG  NH2', ' C 221  SER  OG ', -0.475, (110.665, 153.551, 142.824)), (' C  48  LEU  HB3', ' C 276  LEU HD21', -0.474, (128.483, 155.051, 151.497)), (' C 318  PHE  HZ ', ' C 615  VAL HG11', -0.474, (137.179, 181.808, 151.946)), (' A 880  GLY  O  ', ' A 884  SER  OG ', -0.473, (146.83, 175.359, 195.237)), (' A 826  VAL  HB ', ' A1057  PRO  HG2', -0.471, (158.117, 183.417, 171.873)), (' A 382  VAL HG21', ' A 387  LEU HD21', -0.471, (178.259, 151.949, 119.867)), (' C 103  GLY  HA3', ' C 241  LEU HD12', -0.47, (106.546, 156.454, 120.666)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.468, (183.0, 142.312, 115.503)), (' A1088  HIS  HB3', ' A1120  THR  HB ', -0.467, (170.794, 155.397, 220.069)), (' B1039  ARG  NE ', ' C1031  GLU  OE2', -0.466, (159.21, 155.779, 187.597)), (' A 703  ASN  ND2', ' B 787  GLN  OE1', -0.465, (185.306, 169.37, 193.376)), (' A 360  ASN  H  ', ' A 523  THR HG22', -0.465, (189.593, 140.739, 119.341)), (' A 890  ALA  HA ', ' C1046  GLY  HA2', -0.464, (144.539, 164.161, 193.867)), (' A 740  MET  HB2', ' C 319  ARG HH21', -0.463, (143.6, 174.751, 146.317)), (' B 715  PRO  HA ', ' B1072  GLU  HA ', -0.462, (160.84, 136.068, 204.884)), (' A 284  THR HG22', ' C 560  LEU HD11', -0.461, (168.473, 200.819, 144.291)), (' A 739  THR  OG1', ' A 760  CYS  SG ', -0.46, (144.41, 167.724, 145.332)), (' A 206  LYS  HA ', ' A 206  LYS  HD2', -0.459, (175.999, 204.496, 138.65)), (' B 645  THR HG23', ' B 647  ALA  H  ', -0.458, (150.195, 127.9, 164.243)), (' B 115  GLN HE22', ' B 167  THR HG23', -0.458, (181.091, 125.465, 109.082)), (' C 854  LYS  HE2', ' C 855  TYR  CZ ', -0.457, (139.769, 137.619, 153.315)), (' A 815  ARG  HD2', ' A 823  PHE  HE2', -0.457, (151.708, 185.944, 177.325)), (' A 375  SER  N  ', ' A 435  ALA  O  ', -0.456, (172.249, 154.277, 105.03)), (' C 102  ARG  HB3', ' C 121  ASN  HB3', -0.454, (105.168, 152.083, 123.823)), (' C 882  ILE  HA ', ' C 898  PHE  HE1', -0.453, (144.908, 143.197, 196.81)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.453, (115.985, 158.862, 119.024)), (' A 662  CYS  HB2', ' A 671  CYS  HB2', -0.452, (187.536, 171.984, 173.609)), (' A 457  ARG  NH1', ' A 459  SER  O  ', -0.452, (158.597, 131.959, 116.0)), (' B 739  THR  OG1', ' B 760  CYS  SG ', -0.452, (174.918, 167.593, 146.081)), (' A 914  ASN HD22', ' C1123  SER  HB2', -0.452, (163.768, 172.977, 215.865)), (' A 212  LEU  HG ', ' A 214  ARG  H  ', -0.451, (193.411, 208.261, 143.778)), (' A 728  PRO  HB3', ' A 951  VAL HG21', -0.451, (159.421, 173.13, 170.563)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.45, (138.337, 153.549, 200.408)), (' B1029  MET  HE2', ' B1053  PRO  HB3', -0.45, (176.379, 155.815, 184.48)), (' A 801  ASN  N  ', ' A 928  ASN  OD1', -0.45, (159.126, 187.733, 197.199)), (' A  30  ASN  HB3', ' A  32  PHE  CE1', -0.449, (193.248, 197.461, 146.047)), (' C  39  PRO  HG2', ' C  51  THR HG21', -0.448, (127.532, 154.302, 141.535)), (' A 305  SER  OG ', ' A 306  PHE  N  ', -0.445, (174.63, 187.388, 157.94)), (' A 407  VAL HG21', ' A 508  TYR  HD2', -0.445, (166.009, 150.618, 103.67)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.445, (197.896, 174.569, 176.252)), (' B 576  VAL HG23', ' B 585  LEU  HB2', -0.444, (132.38, 133.105, 140.033)), (' A 985  ASP  HB3', ' A 987  PRO  HD2', -0.443, (149.05, 168.302, 122.448)), (' A 319  ARG  NE ', ' B 745  ASP  OD1', -0.443, (185.46, 162.965, 142.27)), (' C 403  ARG  HA ', ' C 507  PRO  HA ', -0.442, (151.39, 196.134, 85.155)), (' B1105  THR  OG1', ' B1106  GLN  N  ', -0.441, (159.704, 144.064, 212.133)), (' C 879  ALA  O  ', ' C 883  THR  OG1', -0.438, (148.377, 137.134, 195.712)), (' B 697  MET  HE3', ' C 869  MET  HE1', -0.438, (152.84, 131.935, 175.333)), (' A1046  GLY  HA2', ' B 890  ALA  HA ', -0.438, (170.773, 169.097, 193.755)), (' C 741  TYR  CD1', ' C 856  ILE HD12', -0.438, (148.524, 145.428, 147.828)), (' A 326  ILE HG23', ' A 541  PHE  HA ', -0.437, (193.913, 156.336, 133.471)), (' C 660  TYR  HB2', ' C 695  TYR  CZ ', -0.436, (129.634, 176.025, 175.53)), (' A 125  ASN HD22', ' A 171  VAL HG13', -0.436, (170.917, 211.974, 122.178)), (' A  56  LEU HD12', ' A  57  PRO  HD2', -0.435, (186.607, 190.345, 137.875)), (' A 699  LEU HD22', ' B 873  TYR  CZ ', -0.435, (183.787, 165.392, 180.264)), (' C 791  THR HG21', ' C 806  LEU HD22', -0.435, (142.215, 136.568, 191.621)), (' B 971  GLY  O  ', ' B 995  ARG  NH1', -0.435, (165.621, 152.526, 131.353)), (' A 531  THR  OG1', ' A 532  ASN  N  ', -0.435, (201.327, 157.079, 128.658)), (' C 856  ILE  CD1', ' C 858  LEU HD13', -0.434, (147.653, 144.373, 149.919)), (' C  85  PRO  HA ', ' C 237  ARG  HA ', -0.434, (115.956, 168.118, 123.152)), (' A1145  LEU HD11', ' B1144  GLU  HB3', -0.433, (162.57, 156.421, 235.964)), (' A 985  ASP  O  ', ' A 989  ALA  N  ', -0.431, (152.161, 168.709, 125.838)), (' B 889  GLY  HA3', ' B1034  LEU HD23', -0.431, (173.509, 164.622, 190.588)), (' A 886  TRP  HH2', ' A 904  TYR  HB3', -0.43, (154.243, 169.605, 202.415)), (' C 976  VAL HG12', ' C 979  ASP  H  ', -0.429, (145.009, 143.743, 134.305)), (' B 788  ILE HG23', ' B 876  ALA  HB2', -0.428, (185.686, 162.562, 186.956)), (' B 902  MET  HE1', ' B1049  LEU HD13', -0.428, (172.595, 148.106, 199.036)), (' A  60  SER  OG ', ' A  61  ASN  N  ', -0.427, (192.158, 190.959, 140.11)), (' C 325  SER  HA ', ' C 540  ASN  HB2', -0.426, (142.419, 187.36, 134.156)), (' A  40  ASP  N  ', ' A  40  ASP  OD1', -0.426, (168.656, 191.256, 139.131)), (' B 900  MET  HB3', ' B 900  MET  HE2', -0.425, (176.715, 157.182, 207.544)), (' A 900  MET  HB2', ' A 900  MET  HE3', -0.424, (151.669, 178.262, 207.578)), (' C 716  THR HG22', ' C1110  TYR  HB3', -0.424, (138.416, 166.804, 209.69)), (' A 875  SER  O  ', ' A 875  SER  OG ', -0.422, (146.54, 182.825, 187.801)), (' A 960  ASN  CG ', ' C 570  LEU HD21', -0.421, (160.37, 181.005, 154.458)), (' B 699  LEU HD22', ' C 873  TYR  CZ ', -0.421, (153.261, 134.773, 180.178)), (' C1135  ASN  OD1', ' C1136  THR  N  ', -0.42, (148.53, 175.8, 224.627)), (' C 129  LYS  HB3', ' C 169  GLU  HG3', -0.419, (113.595, 150.114, 113.282)), (' C1095  PHE  CE1', ' C1104  VAL  HB ', -0.418, (150.314, 170.652, 217.25)), (' C1011  GLN  O  ', ' C1015  ALA  N  ', -0.418, (154.333, 152.693, 163.751)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.416, (153.494, 191.819, 180.817)), (' B 656  VAL HG11', ' B 693  ILE HD12', -0.416, (158.842, 119.838, 173.478)), (' B 190  ARG  HE ', ' B 207  HIS  CE1', -0.415, (195.715, 115.46, 135.871)), (' C 187  LYS  HE3', ' C 211  ASN  HB3', -0.413, (97.324, 151.909, 145.67)), (' C1029  MET  HE2', ' C1053  PRO  HB3', -0.413, (148.223, 145.913, 184.347)), (' B 577  ARG  HD3', ' B 582  LEU HD22', -0.412, (124.206, 134.978, 134.614)), (' A 316  SER  OG ', ' A 317  ASN  N  ', -0.411, (183.159, 171.656, 149.433)), (' C 106  PHE  O  ', ' C 117  LEU  N  ', -0.41, (115.963, 160.097, 116.846)), (' B 743  CYS  HB3', ' B 749  CYS  HB3', -0.41, (176.748, 163.792, 139.077)), (' C 672  ALA  HA ', ' C 694  ALA  HA ', -0.41, (129.739, 176.979, 169.424)), (' B 190  ARG  HE ', ' B 207  HIS  HE1', -0.408, (195.892, 115.273, 135.862)), (' B 356  LYS  O  ', ' B 397  ALA  N  ', -0.408, (127.871, 142.796, 102.637)), (' A 612  TYR  HB2', ' A 649  CYS  HB3', -0.407, (192.452, 168.838, 156.532)), (' B 533  LEU HD11', ' B 585  LEU HD11', -0.407, (131.99, 128.897, 137.704)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.407, (112.617, 158.296, 147.521)), (' C 101  ILE HG22', ' C 242  LEU  HA ', -0.406, (101.574, 159.777, 124.855)), (' C 738  CYS  SG ', ' C 764  ASN  ND2', -0.406, (159.553, 141.583, 150.458)), (' C 743  CYS  HB3', ' C 749  CYS  HB3', -0.406, (155.111, 141.431, 138.154)), (' B 721  SER  OG ', ' B1066  THR  OG1', -0.406, (169.25, 143.089, 192.765)), (' C1093  GLY  N  ', ' C1107  ARG HH21', -0.405, (152.749, 166.19, 209.748)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.404, (184.777, 105.369, 137.945)), (' A  90  VAL HG21', ' A 238  PHE  CE1', -0.404, (186.898, 194.343, 127.461)), (' C 436  TRP  O  ', ' C 509  ARG  N  ', -0.404, (150.637, 197.643, 92.074)), (' B 759  PHE  HB3', ' B1001  LEU HD11', -0.404, (167.279, 164.88, 147.062)), (' A 224  GLU  HA ', ' A 225  PRO  HD3', -0.404, (171.122, 198.322, 137.187)), (' C  50  SER  HB3', ' C 304  LYS  HE3', -0.403, (133.197, 156.726, 148.078)), (' C 546  LEU HD21', ' C 573  THR HG21', -0.403, (154.917, 188.407, 139.707)), (' B 566  GLY  HA3', ' B 575  ALA  HB3', -0.403, (131.005, 138.878, 143.811)), (' C1018  ILE  O  ', ' C1022  ALA  N  ', -0.403, (153.824, 151.858, 173.853)), (' B 294  ASP  N  ', ' B 294  ASP  OD1', -0.402, (169.349, 122.567, 151.845)), (' B1011  GLN  O  ', ' B1015  ALA  N  ', -0.402, (167.428, 157.54, 163.841)), (' C1105  THR  OG1', ' C1106  GLN  N  ', -0.402, (145.758, 165.972, 212.123)), (' B 705  VAL HG12', ' C 895  GLN  HB3', -0.401, (150.653, 134.125, 200.178)), (' C 763  LEU HD22', ' C1008  VAL HG21', -0.401, (158.356, 149.114, 153.44)), (' C 901  GLN HE21', ' C 905  ARG HH21', -0.401, (148.596, 146.714, 196.843)), (' A 715  PRO  HA ', ' A1072  GLU  HA ', -0.4, (178.399, 172.309, 205.051)), (' B 220  PHE  HE2', ' B 285  ILE HG22', -0.4, (184.763, 126.657, 146.741))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
