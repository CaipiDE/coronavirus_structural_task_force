# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 130 ', 'SER', 0.03651565516441377, (46.97499999999998, -1.077, 124.988)), ('L', '  31 ', 'SER', 0.03924035967117942, (3.9369999999999994, -16.266, 85.819)), ('Y', '  31 ', 'SER', 0.03998997889736422, (-19.5, -7.026, -3.633))]
data['omega'] = [('H', ' 130 ', 'SER', None, (48.33599999999999, -0.617, 125.25800000000001)), ('H', ' 147 ', 'PRO', None, (46.092, -8.379, 89.766)), ('H', ' 149 ', 'PRO', None, (42.802, -12.264, 93.22900000000001)), ('L', '   8 ', 'PRO', None, (12.261999999999997, -4.306, 99.87000000000002)), ('L', '  95 ', 'PRO', None, (15.290999999999997, -10.126, 76.274)), ('L', ' 141 ', 'PRO', None, (24.43999999999999, -1.145, 114.799)), ('X', ' 147 ', 'PRO', None, (22.622999999999994, -14.691, -7.700000000000001)), ('X', ' 149 ', 'PRO', None, (19.459, -10.752, -11.202)), ('Y', '   8 ', 'PRO', None, (-11.048, -18.947, -17.68)), ('Y', '  95 ', 'PRO', None, (-8.063, -13.232999999999995, 5.945)), ('Y', ' 141 ', 'PRO', None, (0.6490000000000004, -22.283999999999992, -32.308))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' H  66  ARG  NH2', ' H  86  ASP  OD2', -0.748, (34.168, -7.023, 75.876)), (' Z 408  ARG  NH2', ' Z 701  HOH  O  ', -0.745, (-12.826, -8.227, 12.2)), (' X  82  MET  HE2', ' X  82C LEU HD21', -0.716, (12.151, -12.003, 3.45)), (' A 371  SER  HG ', ' A 373  SER  HG ', -0.716, (-9.411, -9.813, 56.981)), (' H 199  ASN HD21', ' H 201  LYS  HG2', -0.706, (48.53, -17.881, 95.094)), (' Z 384  PRO  HA ', ' Z 387  LEU  HG ', -0.663, (-23.443, -11.497, 35.62)), (' L 107  LYS  NZ ', ' L 303  HOH  O  ', -0.658, (19.064, -2.882, 116.118)), (' X  66  ARG  NH2', ' X  86  ASP  OD2', -0.655, (10.294, -16.321, 5.535)), (' H   1  GLN  NE2', ' H 304  HOH  O  ', -0.637, (29.792, -37.653, 90.76)), (' X  51  ILE HD12', ' X  57  THR HG22', -0.633, (1.241, -1.103, 11.196)), (' A 532  ASN  OD1', ' A 701  HOH  O  ', -0.632, (-23.758, -18.046, 24.483)), (' A 501  ASN  ND2', ' A 707  HOH  O  ', -0.592, (-2.302, -13.443, 81.393)), (' H  82  MET  HE2', ' H  82C LEU HD21', -0.592, (35.427, -11.821, 77.881)), (' Z 357  ARG  NH2', ' Z 707  HOH  O  ', -0.584, (-27.744, 9.079, 36.353)), (' A 450  ASN  ND2', ' A 706  HOH  O  ', -0.583, (-9.903, -27.255, 73.991)), (' A 408  ARG  NH2', ' A 709  HOH  O  ', -0.576, (10.666, -15.135, 68.632)), (' Y 145  LYS  HB3', ' Y 197  THR  OG1', -0.576, (5.693, -32.565, -29.901)), (' Y  18  ARG  HG3', ' Y  76  SER  HA ', -0.572, (-16.201, -6.434, -25.18)), (' Z 393  THR HG21', ' Z 518  LEU  HB2', -0.559, (-20.089, 5.987, 42.577)), (' H 117  LYS  NZ ', ' H 302  HOH  O  ', -0.554, (53.031, -3.087, 95.302)), (' A 532  ASN  O  ', ' A 702  HOH  O  ', -0.546, (-22.058, -16.254, 30.608)), (' A 528  LYS  HG3', ' A 529  LYS  H  ', -0.543, (-11.144, -13.904, 31.542)), (' Y  19  ALA  HB2', ' Y  78  LEU HD11', -0.541, (-10.793, -10.894, -24.561)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.529, (49.403, -7.082, 96.422)), (' Z 345  THR HG22', ' Z 346  ARG  HG3', -0.52, (-36.715, 1.641, 15.308)), (' Z 393  THR HG21', ' Z 518  LEU HD12', -0.519, (-20.517, 6.461, 42.028)), (' X 119  PRO  HB3', ' X 145  TYR  HB3', -0.515, (25.586, -16.504, -14.942)), (' H  33  TYR  HB2', ' H  95  ASP  O  ', -0.507, (18.273, -25.625, 79.521)), (' A 403  ARG  HE ', ' A 405  ASP  HB2', -0.507, (5.849, -15.177, 72.819)), (' Y 197  THR HG22', ' Y 204  PRO  HG3', -0.505, (6.361, -35.211, -35.04)), (' X  33  TYR  HB2', ' X  95  ASP  O  ', -0.503, (-4.944, 1.873, 2.732)), (' H  30  SER  OG ', ' H 301  HOH  O  ', -0.499, (23.507, -35.029, 73.062)), (' L 189  HIS  O  ', ' L 211  ARG  NE ', -0.495, (54.794, 14.61, 112.332)), (' L 147  GLN  HG2', ' L 154  LEU HD13', -0.487, (36.678, 14.639, 110.215)), (' A 337  PRO  HD2', ' A 358  ILE HD12', -0.485, (-7.94, -25.843, 48.626)), (' Z 378  LYS  HD2', ' Z 380  TYR  OH ', -0.477, (-14.644, -11.235, 25.714)), (' H  11  LEU  HB2', ' H 147  PRO  HG3', -0.466, (44.802, -10.308, 86.795)), (' L 105  GLU  HG2', ' L 106  ILE  N  ', -0.454, (21.225, -8.429, 109.193)), (' H 199  ASN  ND2', ' H 201  LYS  HG2', -0.454, (48.031, -17.426, 95.98)), (' Z 493  GLN  NE2', ' Z 709  HOH  O  ', -0.453, (-16.565, -0.41, 1.474)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.452, (16.843, -18.124, 98.106)), (' L  33  LEU HD13', ' L  34  ALA  N  ', -0.452, (10.959, -15.345, 89.217)), (' Y 206  THR HG23', ' Y 360  HOH  O  ', -0.452, (12.65, -35.845, -37.102)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.451, (0.623, -13.081, 61.251)), (' Z 387  LEU  HA ', ' Z 390  LEU HD12', -0.45, (-23.01, -9.21, 40.733)), (' Y 185  ASP  OD2', ' Y 301  HOH  O  ', -0.449, (25.829, -41.424, -17.688)), (' H  28  THR  HB ', ' H  31  SER  HB2', -0.449, (22.208, -34.794, 77.284)), (' Y  12  SER  O  ', ' Y  13  LEU HD13', -0.448, (-9.413, -16.263, -27.769)), (' Y 105  GLU  HG2', ' Y 106  ILE  N  ', -0.447, (-1.989, -14.823, -27.279)), (' A 528  LYS  HA ', ' A 528  LYS  HD3', -0.446, (-9.977, -12.94, 34.371)), (' Z 342  PHE  HB2', ' Z 601  NAG  H82', -0.444, (-33.467, -5.516, 26.787)), (' X  30  SER  HB3', ' X  73  ASN  HB2', -0.44, (3.623, 9.698, 8.982)), (' X  12  ILE HD11', ' X  18  LEU HD13', -0.432, (19.303, -9.1, 2.949)), (' A 517  LEU  HA ', ' A 517  LEU HD23', -0.432, (4.175, -25.937, 40.067)), (' L  60  ASP  O  ', ' L 301  HOH  O  ', -0.431, (6.455, -22.777, 103.253)), (' Y  32  TYR  HB3', ' Y  91  TYR  CD2', -0.428, (-14.105, -5.962, -0.083)), (' L  32  TYR  HB3', ' L  91  TYR  CD2', -0.428, (9.354, -17.388, 82.309)), (' H  17  SER  O  ', ' H  18  LEU HD12', -0.427, (41.843, -13.617, 76.747)), (' Y 119  PRO  HB3', ' Y 209  PHE  CE2', -0.425, (27.067, -31.363, -31.388)), (' Y  12  SER  HA ', ' Y 105  GLU  O  ', -0.424, (-5.435, -14.942, -26.484)), (' A 443  SER  HB3', ' A 499  PRO  HD3', -0.423, (-8.393, -16.173, 77.718)), (' X  94  ARG  NH2', ' Z 487  ASN  OD1', -0.42, (-4.21, 9.451, -1.35)), (' Z 501  ASN  HB3', ' Z 505  TYR  HB2', -0.417, (-23.873, -10.31, 4.663)), (' L 163  VAL HG22', ' L 175  LEU HD12', -0.414, (32.591, -0.078, 107.162)), (' A 455  LEU HD22', ' A 493  GLN  HG3', -0.413, (8.77, -26.397, 78.082)), (' L  40  PRO  O  ', ' L 302  HOH  O  ', -0.41, (29.685, -16.74, 101.103)), (' A 399  SER  HA ', ' A 510  VAL  O  ', -0.408, (-1.823, -22.019, 60.122)), (' Y 195  GLU  OE2', ' Y 302  HOH  O  ', -0.408, (9.342, -37.298, -31.686)), (' A 497  PHE  CD2', ' A 507  PRO  HB3', -0.408, (-3.389, -18.996, 72.324)), (' H 123  PRO  HD3', ' H 209  LYS  HE2', -0.407, (55.887, -5.512, 108.278)), (' L 124  GLN  HG2', ' L 129  THR  O  ', -0.407, (54.661, 4.225, 103.623)), (' Z 399  SER  HA ', ' Z 510  VAL  O  ', -0.407, (-25.221, -1.746, 22.163)), (' Z 398  ASP  O  ', ' Z 511  VAL  HA ', -0.407, (-24.742, -1.926, 24.302)), (' L   2  ILE  CD1', ' L  27  GLN  HB2', -0.405, (7.374, -6.46, 80.491)), (' H 189  LEU  HA ', ' H 189  LEU HD23', -0.404, (50.895, -10.315, 121.727)), (' H 170  LEU  HG ', ' H 176  TYR  CE2', -0.401, (39.89, -2.972, 93.142))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
