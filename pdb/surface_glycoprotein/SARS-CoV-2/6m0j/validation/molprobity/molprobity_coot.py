# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 102 ', 'GLN', 0.011607652290390708, (-34.434, 36.377, -17.863))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (-39.203, 2.158, -31.026999999999997))]
data['rota'] = [('A', '  19 ', 'SER', 0.027918329080154545, (-31.359000000000005, 50.852, 2.04)), ('A', '  35 ', 'GLU', 0.18701868788832812, (-38.883, 29.5, -0.794)), ('A', '  37 ', 'GLU', 0.17171276308812064, (-35.581, 25.145, -2.039)), ('A', '  88 ', 'ILE', 0.023323605852363774, (-25.484, 46.113, -8.412)), ('A', ' 103 ', 'ASN', 0.007864391332319885, (-38.177, 36.545, -18.526999999999997)), ('A', ' 105 ', 'SER', 0.2428686043179559, (-40.967, 33.936, -23.507)), ('A', ' 110 ', 'GLU', 0.27205516126909063, (-49.584, 36.643, -24.351)), ('A', ' 125 ', 'THR', 0.09440483332863679, (-45.866, 15.290999999999999, -30.339)), ('A', ' 401 ', 'HIS', 0.07401046298204335, (-21.738, 18.284999999999997, -16.337)), ('A', ' 409 ', 'SER', 0.0, (-16.142, 6.063, -17.898)), ('A', ' 455 ', 'MET', 0.015336769189423251, (-22.738, 21.675, -39.111999999999995)), ('A', ' 581 ', 'VAL', 0.26248399356553953, (-8.573, 20.776000000000003, -29.242)), ('A', ' 584 ', 'LEU', 0.21153563429443306, (-8.657, 15.555000000000001, -28.083999999999993)), ('A', ' 607 ', 'SER', 0.05837943441728472, (-16.024, 15.828, -53.899)), ('E', ' 393 ', 'THR', 0.0013599335943581536, (-28.51699999999999, 28.147000000000002, 42.477)), ('E', ' 493 ', 'GLN', 0.10844185741580677, (-39.92, 30.982, 7.452)), ('E', ' 493 ', 'GLN', 0.016149557312602824, (-39.896, 30.974, 7.447))]
data['cbeta'] = []
data['probe'] = [(' A 458  LYS  HG2', ' A 462  MET  HE2', -0.767, (-22.769, 27.962, -40.381)), (' A  57  GLU  O  ', ' A  61  ASN  ND2', -0.673, (-50.846, 12.37, -8.584)), (' A 538  PRO  HD2', ' A 541  LYS  HD3', -0.67, (-0.759, 3.631, -23.843)), (' A 121  ASN  O  ', ' A 125  THR HG23', -0.666, (-46.818, 18.499, -29.796)), (' E 384  PRO  HA ', ' E 387  LEU  HG ', -0.639, (-20.725, 18.427, 33.879)), (' A 192  ARG  NH2', ' A 197  GLU  O  ', -0.627, (-31.87, 39.254, -34.992)), (' A 229  THR  HB ', ' A 581  VAL HG13', -0.621, (-10.987, 22.587, -31.629)), (' A 320  LEU HD13', ' A 380  GLN  HG2', -0.62, (-16.489, 12.609, -7.483)), (' A 131  LYS  HB3', ' A 143  LEU HD23', -0.617, (-45.342, 5.787, -35.807)), (' A 103  ASN  N  ', ' A 103  ASN  OD1', -0.566, (-36.73, 37.391, -19.283)), (' E 443  SER  HB3', ' E 497  PHE  HB3', -0.565, (-38.35, 16.226, 8.812)), (' A  81  GLN HE22', ' A 103  ASN  HB3', -0.564, (-38.881, 38.755, -17.606)), (' A 477  TRP  CE3', ' A 500  PRO  HG3', -0.547, (-30.713, 21.205, -41.698)), (' A 187  LYS  HD2', ' A 199  TYR  CZ ', -0.536, (-36.148, 29.682, -29.305)), (' A 402  GLU  HB3', ' A 518  ARG  HD3', -0.513, (-21.516, 15.97, -22.349)), (' A 170  SER  O  ', ' A 174  LYS  HD2', -0.509, (-43.077, 13.878, -46.183)), (' E 366  SER  OG ', ' E 388  ASN  ND2', -0.49, (-23.35, 12.058, 37.006)), (' A 455  MET  HB3', ' A 455  MET  HE3', -0.479, (-23.517, 19.225, -39.538)), (' A  50  TYR  CE1', ' A  59  VAL HG22', -0.478, (-47.486, 9.884, -15.615)), (' E 354  ASN  O  ', ' E 398  ASP  HA ', -0.473, (-35.553, 26.27, 26.27)), (' A 231  GLU  OE2', ' A 234  LYS  NZ ', -0.472, (-11.925, 24.339, -42.665)), (' A 460  ARG HH21', ' A 506  VAL  HA ', -0.47, (-33.553, 22.431, -32.668)), (' A 460  ARG  NH2', ' A 506  VAL  HA ', -0.469, (-33.202, 21.687, -32.785)), (' A 101  GLN  O  ', ' A 103  ASN  N  ', -0.469, (-36.25, 37.622, -17.706)), (' E 431  GLY  HA3', ' E 513  LEU  O  ', -0.461, (-24.813, 25.526, 30.02)), (' E 462  LYS  HB3', ' E 462  LYS  HE2', -0.445, (-28.68, 41.22, 25.409)), (' A 302  TRP  CH2', ' A 310  GLU  HG3', -0.439, (-17.452, -3.799, -9.178)), (' E 358  ILE  HB ', ' E 395  VAL  HB ', -0.43, (-31.508, 23.679, 36.484)), (' A 168  TRP  CZ3', ' A 172  VAL HG21', -0.428, (-41.904, 10.352, -37.885)), (' E 382  VAL  CG1', ' E 387  LEU  HB3', -0.426, (-19.459, 21.048, 35.587)), (' A  99  ALA  O  ', ' A 102  GLN  HG2', -0.426, (-32.98, 34.159, -15.897)), (' E 378  LYS  HA ', ' E 378  LYS  HD3', -0.425, (-18.657, 18.354, 23.868)), (' A  45  LEU  HA ', ' A  45  LEU HD12', -0.42, (-39.24, 13.165, -4.929)), (' E 380  TYR  O  ', ' E 430  THR  HA ', -0.42, (-19.439, 27.221, 30.207)), (' A 322  ASN  N  ', ' A 322  ASN  OD1', -0.42, (-18.466, 9.502, 0.952)), (' A 375  GLU  O  ', ' A 378  HIS  HB2', -0.418, (-24.304, 11.759, -12.216)), (' E 340  GLU  OE2', ' E 356  LYS  HE3', -0.416, (-40.717, 20.138, 33.937)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.415, (-32.993, 18.299, -44.04)), (' E 497  PHE  CE2', ' E 507  PRO  HB3', -0.414, (-36.667, 19.367, 11.677)), (' A 581  VAL HG22', ' A1058  HOH  O  ', -0.412, (-7.698, 23.806, -30.609)), (' A 402  GLU  HB3', ' A 518  ARG  CD ', -0.41, (-21.098, 15.802, -22.228)), (' A 318  VAL  O  ', ' A 551  GLY  HA3', -0.406, (-9.548, 12.932, -5.561)), (' E 399  SER  HA ', ' E 510  VAL  O  ', -0.404, (-33.432, 22.432, 23.025)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.403, (-28.229, 27.332, 43.827)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.402, (-31.48, 15.413, 6.681)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.4, (-22.701, -7.303, -18.673)), (' A 416  LYS  HD2', ' A 543  ASP  HB3', -0.4, (-5.216, 2.842, -14.252))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
