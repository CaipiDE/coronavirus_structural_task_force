# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 130 ', 'PRO', 0.00301368, (40.852, 14.834, 4.538)), ('L', '  35 ', 'ASN', 0.011342849171240073, (-9.172, 41.266, 40.916))]
data['omega'] = [('B', ' 151 ', 'PRO', None, (44.523, 18.201, 33.991)), ('B', ' 153 ', 'PRO', None, (38.832, 19.678, 32.011)), ('C', '   8 ', 'PRO', None, (18.15, -2.7129999999999996, 33.074)), ('C', ' 101 ', 'PRO', None, (23.881999999999994, 2.9809999999999994, 56.084)), ('C', ' 147 ', 'PRO', None, (22.240999999999993, 1.101, 16.087)), ('E', ' 330 ', 'PRO', None, (-5.189, 11.004999999999999, 41.149)), ('H', ' 151 ', 'PRO', None, (39.61299999999998, 39.73299999999998, 45.81199999999999)), ('H', ' 153 ', 'PRO', None, (35.481999999999985, 36.62999999999999, 49.156)), ('L', '   8 ', 'PRO', None, (9.509, 51.856999999999985, 56.743)), ('L', ' 101 ', 'PRO', None, (9.432, 47.183, 32.804)), ('L', ' 147 ', 'PRO', None, (21.664, 49.492, 71.884))]
data['rota'] = [('E', ' 331 ', 'ASN', 0.01785679476672607, (-9.692, 9.391, 39.959)), ('E', ' 368 ', 'LEU', 0.0, (-0.5309999999999998, 21.03, 28.731)), ('E', ' 376 ', 'THR', 0.02447880688123405, (5.476999999999999, 28.352, 22.185)), ('E', ' 387 ', 'LEU', 0.23122517602104747, (-3.097, 26.996000000000006, 39.127)), ('E', ' 390 ', 'LEU', 0.18332478642187894, (-6.820999999999997, 27.34, 41.907)), ('E', ' 480 ', 'CYS', 0.022562679744670334, (-18.419999999999995, 50.419, -3.8629999999999995)), ('E', ' 483 ', 'VAL', 0.0260695979327226, (-18.702999999999992, 45.252, -6.092)), ('E', ' 506 ', 'GLN', 0.014234939168267003, (4.045, 27.229, 7.262999999999998)), ('H', '   5 ', 'VAL', 0.10449474961959561, (21.829999999999995, 26.132000000000005, 38.392999999999994)), ('H', ' 192 ', 'SER', 0.10295347034482172, (43.556999999999995, 30.200999999999993, 79.111)), ('H', ' 203 ', 'ASN', 0.29853414876748285, (41.714, 31.15099999999999, 53.687999999999995)), ('L', '   1 ', 'ASP', 0.0826252705271205, (7.437999999999998, 52.67499999999998, 34.34)), ('A', ' 368 ', 'LEU', 0.003457436947381367, (5.563999999999999, 22.814, 64.839)), ('A', ' 376 ', 'THR', 0.023110138219513382, (15.751999999999995, 19.161999999999995, 68.883)), ('A', ' 387 ', 'LEU', 0.07525065921342355, (2.9069999999999996, 15.584999999999997, 55.481)), ('A', ' 405 ', 'ASP', 0.0005037797125281857, (21.848999999999993, 14.210999999999997, 78.593)), ('A', ' 440 ', 'ASN', 0.14752296223271713, (12.012999999999998, 28.399999999999995, 83.38999999999999)), ('A', ' 477 ', 'SER', 0.10111133060768739, (17.727, -13.334999999999997, 97.022)), ('A', ' 480 ', 'CYS', 0.14038939305079395, (10.849999999999996, -7.811, 100.21799999999999)), ('A', ' 503 ', 'VAL', 0.08294901249595543, (22.509999999999998, 22.580999999999996, 80.824)), ('A', ' 517 ', 'LEU', 0.0, (-0.021999999999999992, 4.29, 57.708)), ('A', ' 529 ', 'LYS', 0.21002411114200742, (-6.7, 17.74599999999999, 52.080999999999996)), ('A', ' 532 ', 'ASN', 0.04355979565782054, (-15.033, 19.61, 56.148)), ('B', '   5 ', 'VAL', 0.052276224383647964, (23.57, 26.892999999999994, 48.42899999999999)), ('B', '  12 ', 'LYS', 0.009726228475308976, (43.542, 22.18499999999999, 44.533)), ('B', '  59 ', 'ARG', 0.02455779361080083, (26.682, 8.856999999999996, 60.153999999999996)), ('C', '   1 ', 'ASP', 0.03244682564584802, (24.039999999999992, -2.857, 54.839)), ('C', ' 191 ', 'ASP', 0.092567747997689, (56.678, 0.40699999999999986, 14.773999999999997))]
data['cbeta'] = []
data['probe'] = [(' A 455  LEU HD11', ' A 493  GLN  HG3', -0.788, (15.832, 6.503, 92.224)), (' L  47  GLY  H  ', ' L1603  1PE H221', -0.739, (24.593, 37.17, 50.438)), (' E 378  LYS  NZ ', ' H  57  GLU  OE2', -0.705, (7.245, 36.869, 23.321)), (' A 378  LYS  NZ ', ' B  57  GLU  OE2', -0.669, (20.288, 12.361, 66.022)), (' B 123  PRO  HB3', ' B 149  TYR  HB3', -0.614, (46.029, 18.372, 26.106)), (' A 403  ARG  NH1', ' A 405  ASP  OD2', -0.612, (22.112, 13.296, 82.759)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.611, (43.712, 39.524, 51.841)), (' L  46  PRO  HA ', ' L1603  1PE H232', -0.581, (23.762, 38.422, 52.3)), (' E 383  SER  OG ', ' H 104  THR  OG1', -0.531, (3.411, 33.337, 37.866)), (' A 430  THR HG21', ' C  34  ILE HG12', -0.524, (6.786, 4.316, 58.777)), (' B  23  LYS  HE2', ' L  48  GLN HE21', -0.516, (22.156, 31.238, 54.911)), (' L 190  ALA  O  ', ' L 194  LYS  HG3', -0.508, (55.675, 59.491, 63.665)), (' E 355  ARG  HB3', ' E 904  DMS  H13', -0.505, (-16.403, 31.981, 20.891)), (' C  48  GLN HE21', ' H  23  LYS  HE2', -0.502, (20.203, 20.978, 31.828)), (' A 440  ASN  N  ', ' A 440  ASN  OD1', -0.493, (12.378, 27.519, 81.948)), (' C  34  ILE HD11', ' C  38  TYR  OH ', -0.483, (8.043, 5.812, 56.927)), (' E 517  LEU  HB2', ' L  34  ILE HG22', -0.474, (-10.032, 35.347, 38.176)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.473, (13.518, 18.479, 84.951)), (' B 105  PRO  HG3', ' C  97  TYR  CZ ', -0.473, (11.941, 8.131, 50.35)), (' L  67  ARG  HB2', ' L  82  SER  O  ', -0.472, (4.377, 36.836, 62.97)), (' L  91  VAL HG21', ' L1603  1PE H241', -0.471, (20.207, 43.237, 53.12)), (' H 116  THR HG21', ' H 151  PRO  HG3', -0.467, (37.824, 39.168, 42.967)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.463, (10.616, 12.46, 64.303)), (' L  34  ILE  O  ', ' L  36  LYS  N  ', -0.462, (-7.114, 41.02, 40.352)), (' C 190  ALA  O  ', ' C 194  LYS  HG3', -0.461, (58.828, 0.219, 12.464)), (' B 114  THR  OG1', ' B 304  MLI  O7 ', -0.452, (31.246, 21.829, 39.087)), (' B 130  PRO  O  ', ' B 131 ASER  OG ', -0.442, (42.748, 13.366, 2.279)), (' A 498  GLN  H  ', ' A 501  ASN  ND2', -0.441, (18.487, 21.153, 89.131)), (' E 379  CYS  HA ', ' E 432  CYS  HA ', -0.438, (0.165, 32.579, 28.735)), (' A 396  TYR  HB2', ' A 514  SER  OG ', -0.435, (2.065, 7.526, 68.519)), (' H 105  PRO  HG3', ' L  97  TYR  CZ ', -0.433, (3.535, 37.536, 41.704)), (' L  47  GLY  N  ', ' L1603  1PE H221', -0.432, (24.182, 36.936, 51.127)), (' A 461  LEU HD22', ' A 465  GLU  HB3', -0.428, (7.274, -0.869, 78.552)), (' A 374  PHE  CE1', ' A 901  DMS  H23', -0.426, (8.591, 23.497, 71.306)), (' E 497  PHE  CE2', ' E 507  PRO  HB3', -0.426, (-1.454, 27.594, 7.489)), (' C  14  SER  HB2', ' C  17  GLU  HG3', -0.424, (8.828, 3.043, 20.601)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.421, (-16.058, 30.043, 38.892)), (' B  19  LYS  HE3', ' B  80  TYR  CD1', -0.421, (33.077, 24.089, 57.004)), (' C  60  ARG  NH1', ' C  68  PHE  O  ', -0.418, (3.436, 8.674, 38.131)), (' E 447  GLY  HA2', ' E 498  GLN  HG2', -0.417, (0.222, 25.391, -1.228)), (' A 353  TRP  O  ', ' A 466  ARG  NH2', -0.416, (1.24, 7.7, 80.013)), (' A 517  LEU  N  ', ' C  34  ILE HG22', -0.415, (1.547, 4.699, 58.869)), (' B  18  LEU  HB2', ' B  86  LEU HD11', -0.408, (41.019, 20.118, 49.083)), (' B   0  THR  O  ', ' L  51  LYS  NZ ', -0.407, (10.695, 29.084, 50.692)), (' E 393  THR HG21', ' E 518  LEU  H  ', -0.407, (-15.638, 35.057, 38.455)), (' B 131 ASER  HB2', ' B 132  SER  H  ', -0.407, (42.009, 12.293, -0.76)), (' B 188  VAL HG11', ' B 198  TYR  CE1', -0.406, (33.981, 22.445, 7.188)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.404, (-17.851, 24.845, 36.014)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.404, (-4.018, 25.717, 13.134)), (' E 368  LEU  HA ', ' E 368  LEU HD12', -0.403, (-1.265, 20.725, 27.222)), (' C  67  ARG  HB2', ' C  82  SER  O  ', -0.4, (4.676, 8.325, 30.133)), (' H 188  VAL HG11', ' H 198  TYR  CE1', -0.4, (40.087, 31.029, 72.859)), (' E 412  PRO  HB3', ' E 426  PRO  O  ', -0.4, (-2.681, 42.118, 26.548))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
