# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 161 ', 'PRO', None, (-0.22900000000000006, -56.178, -6.588)), ('H', ' 163 ', 'PRO', None, (3.157, -53.574999999999996, -2.0789999999999993)), ('L', ' 145 ', 'PRO', None, (32.429, -52.27, -3.399999999999999))]
data['rota'] = [('E', ' 399 ', 'SER', 0.19385684539932588, (-18.287, -12.697000000000003, 24.144999999999992)), ('E', ' 493 ', 'GLN', 0.29922693111275156, (-0.2639999999999999, -16.665999999999997, 19.966)), ('L', '   1 ', 'GLN', 0.276310784035812, (11.756, -31.01, -12.933999999999996)), ('L', '  17 ', 'SER', 0.13022683421970446, (31.392999999999986, -31.799, 8.117)), ('L', '  28 ', 'ASP', 0.06620308770458709, (10.165999999999997, -19.212, -2.298999999999999)), ('L', '  36 ', 'SER', 0.21631072468498708, (12.34, -27.346, 5.847999999999998)), ('L', ' 110 ', 'LEU', 0.2634250169185424, (32.87100000000001, -42.344, 2.081999999999999)), ('L', ' 149 ', 'THR', 0.1721674615749616, (27.81, -59.49799999999999, -12.247)), ('L', ' 159 ', 'VAL', 0.2968069173051414, (22.207, -70.239, -19.013)), ('L', ' 185 ', 'THR', 0.28604423939307727, (10.542999999999992, -76.22499999999998, -15.056999999999999)), ('L', ' 196 ', 'SER', 0.15918598315018206, (25.46, -72.868, -10.182)), ('H', '  71 ', 'SER', 0.008039985550567508, (-11.874, -34.152, 3.0869999999999993))]
data['cbeta'] = []
data['probe'] = [(' L   3  ALA  HB3', ' L 100  VAL HG21', -0.877, (8.985, -25.776, -7.35)), (' H 207  THR HG23', ' H 224  LYS  HE3', -0.697, (8.947, -73.52, 14.129)), (' H  53  TYR  CD2', ' H 104  VAL HG11', -0.691, (-7.999, -24.695, 10.308)), (' L 136  LEU HD12', ' L 182  LEU HD23', -0.683, (18.429, -72.794, -12.218)), (' E 454  ARG  HA ', ' E 492  LEU HD23', -0.64, (-2.385, -11.241, 19.079)), (' H  24  VAL  CG2', ' H  29  ILE HD11', -0.632, (-6.696, -37.109, 11.461)), (' H  18  LEU HD13', ' H 123  VAL HG11', -0.61, (-4.563, -45.264, -5.607)), (' E 429  PHE  HE1', ' E 514  SER  HB3', -0.602, (-20.19, -2.446, 28.198)), (' H 173  LEU HD21', ' H 196  VAL HG21', -0.588, (16.276, -64.538, 11.023)), (' L 136  LEU  HB2', ' L 182  LEU  HB3', -0.571, (17.332, -70.648, -10.892)), (' E 392  PHE  HD1', ' E 517  LEU  HG ', -0.565, (-29.499, 2.341, 29.01)), (' H 137  PRO  HD3', ' H 223  LYS  HE2', -0.564, (6.528, -73.56, 2.245)), (' E 490  PHE  CD1', ' H 107  PRO  HD3', -0.557, (0.805, -15.055, 11.001)), (' L  85  GLU  HB2', ' L 109  VAL HG23', -0.552, (26.415, -42.999, 4.648)), (' E 393  THR HG23', ' E 517  LEU HD23', -0.545, (-31.267, 4.2, 26.366)), (' E 453  TYR  HE2', ' E 455  LEU HD13', -0.541, (0.425, -13.559, 24.162)), (' L  10  ALA  O  ', ' L 107  LEU  HA ', -0.537, (26.117, -37.206, -0.387)), (' H 173  LEU HD21', ' H 196  VAL HG11', -0.532, (15.512, -65.419, 10.829)), (' E 452  LEU HD23', ' E 494  SER  HB2', -0.528, (-3.565, -19.92, 19.046)), (' H  21  THR HG22', ' H  80  SER  OG ', -0.526, (-10.981, -40.411, 3.769)), (' E 390  LEU HD12', ' E 391  CYS  H  ', -0.522, (-34.344, 1.823, 32.729)), (' H  53  TYR  CE2', ' H 104  VAL HG11', -0.521, (-8.463, -24.144, 10.565)), (' H  92  ALA  HB3', ' H  94  TYR  CE1', -0.514, (1.088, -42.259, -5.142)), (' L 112  GLN  HB2', ' L 144  TYR  CE1', -0.51, (33.682, -47.916, -0.568)), (' E 420  ASP  O  ', ' E 461  LEU  N  ', -0.503, (-4.598, -1.786, 23.318)), (' E 411  ALA  HB3', ' E 414  GLN  HG3', -0.499, (-10.063, -4.8, 35.133)), (' E 377  PHE  H  ', ' E 378  LYS  HZ3', -0.486, (-18.683, -11.773, 39.101)), (' H   4  LEU HD13', ' H 116  ILE  CG2', -0.484, (1.405, -38.234, 12.802)), (' H 159  TYR  CE2', ' H 164  VAL HG23', -0.484, (4.428, -58.615, -2.873)), (' E 403  ARG HH21', ' E 405  ASP  HB2', -0.483, (-3.587, -15.772, 33.52)), (' E 421  TYR  CD1', ' E 457  ARG  HB3', -0.482, (-1.024, -4.519, 22.063)), (' H  30  SER  HA ', ' H  54  HIS  HB3', -0.475, (-10.638, -30.201, 13.289)), (' L  82  ALA  HA ', ' L 109  VAL HG21', -0.473, (27.594, -43.118, 6.852)), (' H 214  HIS  CD2', ' H 216  PRO  HD2', -0.472, (-0.17, -57.008, -1.241)), (' E 354  ASN  O  ', ' E 398  ASP  HA ', -0.471, (-19.186, -9.441, 21.776)), (' L 114  LYS  H  ', ' L 114  LYS  HD2', -0.468, (38.198, -51.662, 0.336)), (' H  24  VAL HG21', ' H  29  ILE HD11', -0.468, (-6.191, -36.893, 11.865)), (' H  52  ILE HG13', ' H  57  SER  O  ', -0.467, (-8.922, -28.485, 4.437)), (' H  29  ILE HG23', ' H  35  TRP  NE1', -0.466, (-6.119, -32.161, 11.982)), (' H  48  TRP  CE3', ' L  99  LEU  HB3', -0.465, (2.807, -28.171, -1.116)), (' E 376  THR  O  ', ' E 434  ILE  HA ', -0.464, (-19.715, -12.972, 34.992)), (' H  18  LEU HD11', ' H 123  VAL HG21', -0.458, (-4.076, -44.658, -3.443)), (' H  24  VAL HG23', ' H  29  ILE HD11', -0.458, (-6.612, -37.8, 11.57)), (' E 485  GLY  HA2', ' L  33  ASN HD22', -0.457, (12.074, -15.061, 9.409)), (' H  48  TRP  CZ3', ' L  98  ASN  HB2', -0.457, (0.761, -26.28, -2.158)), (' L  99  LEU  HA ', ' L  99  LEU HD12', -0.457, (6.144, -25.744, 0.482)), (' E 484  GLU  O  ', ' L  33  ASN  ND2', -0.448, (11.521, -14.975, 8.442)), (' H  46  LEU  HA ', ' H  46  LEU HD23', -0.447, (8.128, -37.884, -1.706)), (' H   4  LEU HD13', ' H 116  ILE HG21', -0.446, (0.846, -38.3, 13.326)), (' H   6  GLU  HG3', ' H  96  CYS  SG ', -0.444, (-1.865, -41.295, 6.452)), (' L 115  ALA  HB3', ' L 144  TYR  H  ', -0.442, (31.688, -55.095, -0.097)), (' H 101  VAL HG11', ' H 106  VAL HG11', -0.441, (1.783, -21.484, 13.263)), (' H  33  TYR  CD1', ' H 102  GLY  HA2', -0.439, (-0.895, -27.37, 15.053)), (' H  91  THR HG23', ' H 124  THR  HA ', -0.438, (1.771, -47.836, -8.516)), (' H   8  GLY  HA3', ' H  20  LEU HD23', -0.433, (-6.173, -46.301, 0.334)), (' H  53  TYR  CG ', ' H 104  VAL HG11', -0.432, (-7.774, -24.835, 10.302)), (' H  18  LEU  O  ', ' H  82  LYS  HA ', -0.427, (-9.058, -40.402, -3.885)), (' H 203  LEU  HA ', ' H 203  LEU HD23', -0.426, (18.168, -74.218, 13.466)), (' E 337  PRO  O  ', ' E 340  GLU  HG2', -0.426, (-29.235, -14.715, 22.047)), (' H 183  VAL HG21', ' L 164  GLU  HB3', -0.424, (14.22, -60.638, -11.776)), (' H  21  THR HG22', ' H  80  SER  CB ', -0.423, (-10.545, -40.814, 3.519)), (' H  11  LEU HD21', ' H 128  ALA  O  ', -0.421, (-5.182, -54.627, -10.68)), (' H  39  ARG  HB3', ' H  49  ILE HD11', -0.42, (1.214, -38.286, -2.616)), (' L  10  ALA  O  ', ' L 107  LEU HD12', -0.42, (27.071, -36.813, 0.286)), (' H  44  LYS  HB3', ' H  44  LYS  HE2', -0.42, (9.42, -38.809, -8.742)), (' H  34  TYR  CE1', ' H 104  VAL HG13', -0.419, (-5.257, -24.219, 9.229)), (' H 173  LEU HD11', ' H 196  VAL HG21', -0.418, (17.141, -64.238, 11.938)), (' E 378  LYS  HA ', ' E 378  LYS  HD3', -0.417, (-19.541, -8.419, 40.608)), (' E 371  SER  C  ', ' E 373  SER  H  ', -0.416, (-25.175, -20.012, 38.447)), (' L  24  GLY  HA3', ' L  28  ASP  OD2', -0.416, (13.65, -21.326, -4.371)), (' H 168  TRP  HB3', ' H 173  LEU HD23', -0.415, (12.82, -64.555, 11.607)), (' L 137  VAL HG12', ' L 139  LEU HD11', -0.415, (17.775, -66.633, -2.738)), (' L  38  TYR  CE2', ' L  48  LEU HD13', -0.414, (9.991, -32.064, 7.532)), (' E 382  VAL HG12', ' E 383  SER  N  ', -0.413, (-27.88, -1.143, 40.593)), (' E 517  LEU  HA ', ' E 517  LEU HD23', -0.413, (-30.381, 4.394, 26.365)), (' L 110  LEU  HA ', ' L 110  LEU HD12', -0.411, (32.834, -42.749, 0.42)), (' E 394  ASN  HB2', ' E 516  GLU  HG2', -0.41, (-27.464, 0.74, 23.521)), (' E 452  LEU  CD2', ' E 494  SER  HB2', -0.409, (-3.778, -19.604, 18.859)), (' L 144  TYR  CD1', ' L 145  PRO  HA ', -0.408, (31.413, -50.532, -2.546)), (' E 453  TYR  CE2', ' E 455  LEU HD13', -0.406, (0.483, -13.814, 24.15)), (' E 382  VAL HG12', ' E 383  SER  H  ', -0.406, (-27.517, -1.3, 41.116)), (' E 498  GLN  H  ', ' E 501  ASN  ND2', -0.405, (-4.442, -26.157, 29.187)), (' E 377  PHE  H  ', ' E 378  LYS  NZ ', -0.404, (-18.947, -11.74, 39.864)), (' L 138  CYS  HB2', ' L 152  TRP  CH2', -0.403, (21.334, -68.221, -7.665)), (' H  48  TRP  HB2', ' L 101  PHE  HE1', -0.402, (5.142, -31.244, 0.002)), (' H 210  CYS  O  ', ' H 222  ASP  HA ', -0.401, (5.146, -66.638, 7.943)), (' L  37  TRP  HB2', ' L  50  ILE  HB ', -0.401, (16.234, -29.397, 8.104))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
