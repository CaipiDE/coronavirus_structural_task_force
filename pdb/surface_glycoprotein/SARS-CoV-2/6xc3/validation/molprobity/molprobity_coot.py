# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  96 ', 'PHE', 0.026042928214718524, (-35.40400000000001, 54.955, 31.904))]
data['omega'] = [('A', '   8 ', 'PRO', None, (-24.555999999999994, 64.838, 46.88100000000001)), ('A', '  95 ', 'PRO', None, (-45.292, 55.419, 30.094)), ('A', ' 141 ', 'PRO', None, (-3.9829999999999997, 67.671, 46.777)), ('B', ' 147 ', 'PRO', None, (-10.63, 61.577999999999996, 14.474000000000004)), ('B', ' 149 ', 'PRO', None, (-10.192999999999998, 57.75699999999999, 19.278000000000006)), ('H', ' 147 ', 'PRO', None, (-66.678, 93.81399999999998, 11.21)), ('H', ' 149 ', 'PRO', None, (-71.956, 90.62799999999999, 12.295)), ('L', '   8 ', 'PRO', None, (-78.53, 62.807, -4.675000000000002)), ('L', '  95 ', 'PRO', None, (-59.74099999999998, 58.31399999999999, 10.483)), ('L', ' 141 ', 'PRO', None, (-88.20499999999997, 77.74899999999997, -9.725000000000003))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C 389  ASP  HB3', ' C 528  LYS  HB2', -0.906, (-84.799, 49.189, 24.45)), (' A  92  ASN  O  ', ' C 403  ARG  NH2', -0.837, (-43.681, 51.228, 35.551)), (' A  83  PHE  HB3', ' A 106  ILE HD13', -0.787, (-11.663, 56.991, 45.134)), (' H  87  THR HG23', ' H 110  THR  HA ', -0.755, (-63.493, 84.715, 8.939)), (' C 389  ASP  HB3', ' C 528  LYS  CB ', -0.715, (-85.29, 48.878, 24.632)), (' A  36  TYR  HE1', ' A  89  GLN  HG2', -0.69, (-30.777, 52.124, 37.004)), (' B 126  PRO  HG3', ' B 138  LEU  HB3', -0.688, (13.292, 61.507, 28.919)), (' B  98  VAL HG21', ' C 493  GLN  HG2', -0.673, (-40.971, 43.123, 38.961)), (' A  39  LYS  NZ ', ' A  83  PHE  O  ', -0.667, (-12.711, 54.922, 40.991)), (' B  87  THR HG23', ' B 110  THR  HA ', -0.634, (-19.792, 62.03, 18.242)), (' B 199  ASN  ND2', ' B 201  LYS  HG3', -0.623, (-4.535, 51.584, 15.316)), (' L 105  GLU  OE1', ' L 173  TYR  OH ', -0.611, (-84.17, 75.672, -2.991)), (' C 384  PRO  HA ', ' C 387  LEU HD12', -0.604, (-73.33, 50.809, 26.38)), (' B  29  VAL HG13', ' B  34  MET  HG3', -0.564, (-31.045, 41.521, 22.712)), (' H 212  GLU  HG2', ' H 213  PRO  HD2', -0.556, (-90.892, 109.466, -1.21)), (' B  82  MET  HE2', ' B  82C LEU HD21', -0.554, (-26.879, 58.068, 15.019)), (' L  54  ARG  HG2', ' L  58  VAL  HB ', -0.554, (-85.218, 59.187, 14.423)), (' H 129  LYS  HE3', ' L 215  SER  HB2', -0.553, (-88.691, 106.506, -15.095)), (' A  37  GLN  HB2', ' A  47  LEU HD11', -0.552, (-21.361, 51.265, 42.358)), (' C 346  ARG  O  ', ' C 701  HOH  O  ', -0.548, (-62.491, 41.335, 42.925)), (' C 444  LYS  O  ', ' C 448  ASN  N  ', -0.541, (-48.814, 48.552, 51.942)), (' B 119  PRO  HB3', ' B 145  TYR  HB3', -0.535, (-3.306, 62.332, 15.727)), (' A   3  VAL  H  ', ' A  26  SER  HB3', -0.529, (-40.113, 63.726, 39.239)), (' L 124  GLN  O  ', ' L 127  SER  HB3', -0.528, (-71.055, 107.041, -3.692)), (' A  40  PRO  HG2', ' A 165  GLU  HG3', -0.528, (-11.484, 58.783, 35.604)), (' L 184  ALA  O  ', ' L 188  LYS  HG3', -0.522, (-67.504, 107.535, -16.213)), (' A 142  ARG  NH1', ' A 142  ARG  O  ', -0.513, (-5.847, 70.343, 39.637)), (' B 193  THR HG22', ' B 195  ILE HD11', -0.505, (13.965, 51.432, 22.198)), (' A  95B LYS  O  ', ' A  97  THR  N  ', -0.502, (-36.563, 56.825, 32.459)), (' A  19  VAL HG21', ' A  78  LEU HD13', -0.499, (-16.773, 56.612, 49.599)), (' A  96  PHE  HB2', ' B  47  TRP  CB ', -0.495, (-33.603, 54.645, 29.394)), (' A   2  ILE HD13', ' A  27  GLN  HB2', -0.487, (-43.316, 60.458, 40.4)), (' L 214  CYS  O  ', ' L 215  SER  HB2', -0.486, (-88.437, 107.638, -14.228)), (' A 159  SER  HA ', ' A 178  THR  O  ', -0.476, (-0.709, 75.533, 26.673)), (' C 389  ASP  N  ', ' C 389  ASP  OD2', -0.468, (-81.508, 50.391, 24.322)), (' A 145  LYS  HB3', ' A 197  THR  HB ', -0.468, (-0.094, 78.135, 41.862)), (' H 199  ASN HD21', ' H 201  LYS  NZ ', -0.467, (-77.448, 96.482, 18.602)), (' L  13  VAL HG21', ' L  19  ALA  HB2', -0.466, (-87.415, 64.494, -0.621)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.459, (-62.847, 39.799, 34.067)), (' B 186  SER  HA ', ' B 189  LEU  HG ', -0.457, (17.522, 58.739, 33.427)), (' B  72  ASP  OD2', ' B  75  LYS  HD2', -0.455, (-28.436, 37.529, 11.696)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.454, (-81.064, 83.784, -17.699)), (' B 199  ASN HD21', ' B 201  LYS  HG3', -0.452, (-4.531, 51.063, 15.294)), (' A  49  TYR  CE1', ' B  99  TYR  HD1', -0.445, (-33.921, 42.122, 41.807)), (' C 393  THR HG23', ' C 517  LEU  HA ', -0.442, (-74.612, 37.962, 20.275)), (' C 403  ARG  HD2', ' C 505  TYR  HA ', -0.441, (-47.596, 52.932, 39.538)), (' H  72  ASP  OD2', ' H  74  SER  OG ', -0.441, (-59.329, 71.7, 34.627)), (' C 366  SER  O  ', ' C 370  ASN  HB2', -0.44, (-75.772, 55.981, 35.223)), (' L  80  ALA  HA ', ' L 106  ILE HD11', -0.439, (-91.434, 72.411, 4.15)), (' C 388  ASN  HB2', ' C 527  PRO  HD2', -0.436, (-81.44, 49.545, 29.133)), (' B 188  SER  HA ', ' B 191  THR  OG1', -0.432, (20.451, 52.576, 32.496)), (' A  21  ILE HG12', ' A 102  THR HG21', -0.432, (-22.614, 60.26, 45.949)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.431, (-58.484, 47.341, 41.554)), (' H 216  CYS  HB2', ' L 214  CYS  HB2', -0.429, (-87.039, 112.763, -12.79)), (' H 123  PRO  HD3', ' H 209  LYS  HE2', -0.423, (-79.862, 106.938, 1.956)), (' B  70  SER  O  ', ' B  78  LEU HD12', -0.421, (-32.069, 44.518, 18.352)), (' A 107  LYS  HA ', ' A 140  TYR  OH ', -0.42, (-8.705, 63.752, 48.713)), (' C 364  ASP  O  ', ' C 367  VAL HG12', -0.417, (-76.656, 50.151, 35.347)), (' L 134  CYS  HB2', ' L 148  TRP  CH2', -0.412, (-79.679, 94.866, -11.697)), (' H  47  TRP  HZ2', ' H  50  ILE  HB ', -0.412, (-62.084, 62.401, 16.046)), (' B 152  VAL HG22', ' B 198  VAL HG22', -0.411, (1.207, 57.237, 21.74)), (' L 125  LEU  HA ', ' L 125  LEU HD23', -0.407, (-72.315, 107.389, -7.161)), (' C 425  LEU HD21', ' C 512  VAL HG11', -0.405, (-60.808, 44.502, 27.35)), (' B 186  SER  O  ', ' B 189  LEU  HB2', -0.403, (19.626, 58.424, 32.85)), (' A 158  ASN  N  ', ' A 158  ASN  OD1', -0.401, (-1.795, 80.947, 26.248))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
