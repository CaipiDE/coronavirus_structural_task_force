# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  87 ', 'ASN', None, (172.433, 121.203, 132.38)), ('A', ' 384 ', 'PRO', None, (150.94200000000006, 145.149, 122.931)), ('B', '  87 ', 'ASN', None, (119.995, 168.0, 132.382)), ('B', ' 384 ', 'PRO', None, (151.478, 174.596, 122.89999999999998)), ('C', '  87 ', 'ASN', None, (186.771, 190.031, 132.374)), ('C', ' 384 ', 'PRO', None, (176.772, 159.449, 122.92099999999998))]
data['rota'] = [('A', ' 391 ', 'CYS', 0.16520853211317274, (140.313, 139.833, 127.572)), ('B', ' 391 ', 'CYS', 0.16232648868351676, (152.2, 186.468, 127.51599999999999)), ('C', ' 391 ', 'CYS', 0.16418153632165805, (186.69, 152.90000000000006, 127.557))]
data['cbeta'] = []
data['probe'] = [(' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.827, (192.944, 150.235, 186.239)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.823, (134.91, 136.021, 186.554)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.817, (151.629, 193.206, 186.334)), (' A 557  LYS  NZ ', ' A 574  ASP  OD2', -0.741, (134.871, 137.315, 149.679)), (' B 557  LYS  NZ ', ' B 574  ASP  OD2', -0.738, (152.77, 191.926, 149.44)), (' C 557  LYS  NZ ', ' C 574  ASP  OD2', -0.737, (191.728, 149.568, 149.632)), (' B 328  ARG HH21', ' B 533  LEU  HB2', -0.716, (140.904, 196.983, 136.348)), (' A 328  ARG HH21', ' A 533  LEU  HB2', -0.709, (136.8, 125.209, 135.917)), (' C 328  ARG HH21', ' C 533  LEU  HB2', -0.697, (201.363, 157.532, 136.405)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.645, (188.672, 152.718, 125.536)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.644, (139.07, 138.59, 126.077)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.62, (151.609, 188.067, 125.945)), (' B 804  GLN  OE1', ' B 935  GLN  NE2', -0.595, (132.845, 142.293, 193.215)), (' B 448  ASN  HB3', ' B 497  PHE  HB2', -0.588, (169.609, 175.069, 96.543)), (' A 448  ASN  HB3', ' A 497  PHE  HB2', -0.58, (141.839, 160.845, 96.677)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.577, (157.977, 191.875, 193.111)), (' C 448  ASN  HB3', ' C 497  PHE  HB2', -0.571, (167.654, 143.656, 96.69)), (' B 193  VAL  HB ', ' B 204  TYR  HB2', -0.569, (119.877, 154.282, 137.456)), (' A 804  GLN  OE1', ' A 935  GLN  NE2', -0.568, (188.414, 145.284, 193.082)), (' C 193  VAL  HB ', ' C 204  TYR  HB2', -0.559, (175.421, 197.254, 137.241)), (' A 193  VAL  HB ', ' A 204  TYR  HB2', -0.559, (184.486, 127.89, 137.263)), (' A  64  TRP  HD1', ' A 266  TYR  HE1', -0.556, (184.201, 110.135, 141.627)), (' A 329  PHE  O  ', ' A 580  GLN  NE2', -0.552, (135.326, 128.813, 129.8)), (' C 328  ARG  NH1', ' C 580  GLN  OE1', -0.548, (200.852, 155.32, 131.917)), (' B  64  TRP  HD1', ' B 266  TYR  HE1', -0.545, (104.575, 163.375, 141.843)), (' A 815  ARG  HD2', ' A 823  PHE  HE2', -0.545, (187.648, 155.361, 182.733)), (' A 328  ARG  NH1', ' A 580  GLN  OE1', -0.543, (134.99, 126.274, 131.568)), (' C  64  TRP  HD1', ' C 266  TYR  HE1', -0.541, (190.628, 206.285, 141.827)), (' C 858  LEU HD23', ' C 959  LEU HD22', -0.54, (153.486, 176.075, 159.505)), (' B 815  ARG  HD2', ' B 823  PHE  HE2', -0.539, (141.954, 137.476, 183.13)), (' B 328  ARG  NH1', ' B 580  GLN  OE1', -0.539, (142.939, 197.542, 131.767)), (' B 438  SER  HB3', ' B 509  ARG  HG3', -0.537, (162.273, 176.987, 102.541)), (' B 329  PHE  O  ', ' B 580  GLN  NE2', -0.536, (145.12, 196.245, 129.563)), (' C 815  ARG  HD2', ' C 823  PHE  HE2', -0.536, (149.735, 186.311, 182.728)), (' A 858  LEU HD23', ' A 959  LEU HD22', -0.534, (176.964, 156.804, 159.956)), (' A 438  SER  HB3', ' A 509  ARG  HG3', -0.533, (143.09, 153.125, 102.934)), (' C 329  PHE  O  ', ' C 580  GLN  NE2', -0.532, (198.647, 154.235, 129.617)), (' C  93  ALA  HB1', ' C 189  LEU HD11', -0.528, (182.566, 205.997, 141.875)), (' C 393  THR  O  ', ' C 523  THR  OG1', -0.523, (188.546, 144.934, 124.947)), (' B  31  SER  OG ', ' B  60  SER  N  ', -0.522, (115.155, 165.961, 147.537)), (' C 438  SER  HB3', ' C 509  ARG  HG3', -0.521, (173.821, 148.905, 103.073)), (' A1039  ARG  NE ', ' B1031  GLU  OE2', -0.52, (160.239, 156.543, 193.362)), (' B 858  LEU HD23', ' B 959  LEU HD22', -0.519, (148.447, 146.159, 160.038)), (' B 980  ILE HG23', ' B 984  LEU HD12', -0.519, (151.281, 148.139, 133.637)), (' A  93  ALA  HB1', ' A 189  LEU HD11', -0.518, (188.404, 116.924, 141.817)), (' B 393  THR  O  ', ' B 523  THR  OG1', -0.518, (158.262, 192.143, 124.926)), (' C 726  ILE HG12', ' C1061  VAL HG22', -0.516, (160.063, 179.364, 184.92)), (' B  93  ALA  HB1', ' B 189  LEU HD11', -0.515, (108.196, 156.438, 141.827)), (' A 726  ILE HG12', ' A1061  VAL HG22', -0.515, (176.359, 149.262, 184.907)), (' C  31  SER  OG ', ' C  60  SER  N  ', -0.514, (187.408, 195.309, 147.675)), (' B 726  ILE HG12', ' B1061  VAL HG22', -0.514, (142.542, 150.266, 184.9)), (' A  31  SER  OG ', ' A  60  SER  N  ', -0.513, (176.705, 117.991, 147.703)), (' A 393  THR  O  ', ' A 523  THR  OG1', -0.511, (132.306, 142.314, 124.903)), (' C 980  ILE HG23', ' C 984  LEU HD12', -0.509, (154.067, 172.669, 133.67)), (' A 277  LEU HD22', ' A 285  ILE HD13', -0.509, (183.41, 132.595, 147.894)), (' C 277  LEU HD22', ' C 285  ILE HD13', -0.505, (171.632, 193.517, 148.181)), (' B1041  ASP  HB2', ' C1030  SER  HB3', -0.504, (150.079, 165.146, 193.311)), (' A 980  ILE HG23', ' A 984  LEU HD12', -0.503, (173.702, 158.579, 134.115)), (' B 277  LEU HD22', ' B 285  ILE HD13', -0.5, (124.639, 152.669, 147.893)), (' B 826  VAL  HB ', ' B1057  PRO  HG2', -0.497, (139.718, 144.853, 177.676)), (' C 452  LEU  HA ', ' C 494  SER  HA ', -0.496, (164.6, 136.524, 102.502)), (' C 826  VAL  HB ', ' C1057  PRO  HG2', -0.496, (156.89, 184.46, 177.646)), (' B 452  LEU  HA ', ' B 494  SER  HA ', -0.496, (177.395, 175.449, 102.465)), (' A 826  VAL  HB ', ' A1057  PRO  HG2', -0.495, (182.629, 149.919, 177.575)), (' B1039  ARG  NE ', ' C1031  GLU  OE2', -0.493, (156.096, 161.118, 193.342)), (' C 143  VAL  HB ', ' C 245  HIS  HA ', -0.492, (187.954, 220.837, 126.697)), (' A 143  VAL  HB ', ' A 245  HIS  HA ', -0.49, (198.373, 104.816, 126.638)), (' A 703  ASN  ND2', ' B 787  GLN  OE1', -0.489, (158.468, 131.896, 198.937)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.489, (179.221, 200.761, 151.491)), (' C 902  MET  HE1', ' C1049  LEU HD13', -0.487, (160.19, 176.926, 205.043)), (' B 143  VAL  HB ', ' B 245  HIS  HA ', -0.487, (92.811, 153.772, 126.528)), (' A 231  ILE HD12', ' A 233  ILE HD12', -0.486, (180.816, 127.394, 122.7)), (' A 985  CYS  HB3', ' C 383  CYS  HB3', -0.485, (175.149, 162.407, 125.849)), (' A 452  LEU  HA ', ' A 494  SER  HA ', -0.485, (137.549, 166.784, 102.864)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.484, (185.477, 122.177, 151.529)), (' A 902  MET  HE1', ' A1049  LEU HD13', -0.483, (173.99, 150.631, 205.016)), (' A 201  PHE  HB3', ' A 229  LEU  HB2', -0.48, (183.731, 130.877, 126.488)), (' C 516  GLU  OE2', ' C 518  LEU HD12', -0.479, (181.699, 140.764, 130.234)), (' C 736  VAL HG22', ' C 858  LEU  HG ', -0.478, (150.819, 174.542, 158.295)), (' B 196  ASN HD21', ' B 235  ILE HD12', -0.476, (121.843, 160.245, 126.651)), (' B 902  MET  HE1', ' B1049  LEU HD13', -0.476, (144.633, 152.101, 205.112)), (' B 736  VAL HG22', ' B 858  LEU  HG ', -0.475, (151.459, 144.505, 158.263)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.475, (173.385, 194.984, 126.477)), (' B 229  LEU  HB3', ' B 231  ILE HG23', -0.475, (122.276, 152.658, 124.165)), (' C 196  ASN HD21', ' C 235  ILE HD12', -0.473, (179.527, 192.537, 126.417)), (' B 383  CYS  HB3', ' C 985  CYS  HB3', -0.473, (149.675, 171.981, 126.019)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.473, (122.554, 153.875, 126.593)), (' B 231  ILE HD12', ' B 233  ILE HD12', -0.473, (120.939, 157.342, 122.282)), (' A 196  ASN HD21', ' A 235  ILE HD12', -0.472, (178.271, 126.204, 126.589)), (' A 383  CYS  HB3', ' B 985  CYS  HB3', -0.472, (153.925, 145.321, 125.615)), (' A 201  PHE  N  ', ' A 229  LEU  O  ', -0.471, (182.11, 132.384, 127.134)), (' A 736  VAL HG22', ' A 858  LEU  HG ', -0.47, (176.638, 160.405, 158.402)), (' C 201  PHE  N  ', ' C 229  LEU  O  ', -0.47, (172.204, 192.747, 127.142)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.47, (166.169, 153.036, 190.934)), (' A 516  GLU  OE2', ' A 518  LEU HD12', -0.469, (132.364, 150.078, 129.844)), (' C 231  ILE HD12', ' C 233  ILE HD12', -0.466, (177.027, 194.223, 122.649)), (' A1031  GLU  OE2', ' C1039  ARG  NE ', -0.465, (162.385, 161.758, 193.534)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.465, (150.821, 157.552, 191.42)), (' A 229  LEU  HB3', ' A 231  ILE HG23', -0.464, (184.237, 130.673, 123.866)), (' B 516  GLU  OE2', ' B 518  LEU HD12', -0.464, (165.164, 188.131, 130.173)), (' B 703  ASN  ND2', ' C 787  GLN  OE1', -0.463, (136.267, 174.542, 199.104)), (' A 310  LYS  NZ ', ' A 663  ASP  OD1', -0.462, (168.615, 131.708, 176.578)), (' C 229  LEU  HB3', ' C 231  ILE HG23', -0.461, (172.314, 195.599, 124.2)), (' B 444  LYS  O  ', ' B 447  GLY  N  ', -0.461, (169.93, 173.76, 91.109)), (' A1030  SER  HB3', ' C1041  ASP  HB2', -0.459, (169.184, 165.401, 193.464)), (' A 444  LYS  O  ', ' A 447  GLY  N  ', -0.459, (142.679, 161.246, 91.39)), (' A  92  PHE  HB3', ' A 192  PHE  HB2', -0.456, (186.13, 121.062, 135.99)), (' C  92  PHE  HB3', ' C 192  PHE  HB2', -0.455, (180.546, 202.024, 136.026)), (' B 357  ARG  HG3', ' B 396  TYR  HE1', -0.455, (164.066, 190.556, 120.93)), (' C 310  LYS  NZ ', ' C 663  ASP  OD1', -0.454, (179.465, 181.685, 176.731)), (' C 444  LYS  O  ', ' C 447  GLY  N  ', -0.454, (167.021, 144.228, 91.237)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.454, (114.288, 156.317, 151.613)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.453, (162.283, 168.541, 190.945)), (' C 743  CYS  HB3', ' C 749  CYS  HB3', -0.451, (146.159, 171.292, 143.426)), (' A  35  GLY  HA3', ' A  56  LEU  HB3', -0.451, (179.839, 124.076, 144.118)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.449, (180.266, 195.326, 143.96)), (' A 787  GLN  OE1', ' C 703  ASN  ND2', -0.448, (184.552, 172.631, 198.9)), (' C 103  GLY  HA3', ' C 241  LEU HD12', -0.447, (182.416, 207.574, 125.42)), (' B1086  LYS  HB3', ' B1122  VAL HG13', -0.446, (160.712, 175.562, 229.023)), (' A1086  LYS  HB3', ' A1122  VAL HG13', -0.446, (145.822, 152.738, 229.127)), (' B  35  GLY  HA3', ' B  56  LEU  HB3', -0.446, (118.746, 159.722, 144.146)), (' A 103  GLY  HA3', ' A 241  LEU HD12', -0.446, (189.58, 116.133, 125.031)), (' B  92  PHE  HB3', ' B 192  PHE  HB2', -0.446, (113.187, 156.267, 135.935)), (' A1041  ASP  HB2', ' B1030  SER  HB3', -0.443, (160.418, 148.882, 193.589)), (' B 103  GLY  HA3', ' B 241  LEU HD12', -0.443, (107.018, 155.39, 125.407)), (' C 374  PHE  HA ', ' C 436  TRP  HB3', -0.441, (174.307, 156.091, 107.796)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.441, (149.149, 148.817, 107.718)), (' A 357  ARG  HG3', ' A 396  TYR  HE1', -0.44, (130.681, 147.644, 120.931)), (' A 129  LYS  HE2', ' A 169  GLU  OE2', -0.438, (193.675, 125.046, 116.685)), (' A 743  CYS  HB3', ' A 749  CYS  HB3', -0.438, (176.463, 165.824, 143.433)), (' C 357  ARG  HG3', ' C 396  TYR  HE1', -0.436, (184.722, 140.425, 120.94)), (' C1086  LYS  HB3', ' C1122  VAL HG13', -0.436, (172.856, 151.079, 229.069)), (' B 374  PHE  HA ', ' B 436  TRP  HB3', -0.435, (155.982, 174.445, 107.663)), (' B 596  SER  OG ', ' B 613  GLN  NE2', -0.435, (137.66, 173.066, 163.913)), (' C 129  LYS  HE2', ' C 169  GLU  OE2', -0.433, (172.39, 206.584, 116.537)), (' B 201  PHE  N  ', ' B 229  LEU  O  ', -0.433, (125.424, 154.055, 127.065)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.43, (192.126, 116.529, 144.728)), (' B 562  PHE  HD2', ' C  41  LYS  HG2', -0.429, (163.655, 195.794, 137.904)), (' B1129  VAL HG13', ' C 917  TYR  HB3', -0.429, (157.59, 180.589, 218.422)), (' C 596  SER  OG ', ' C 613  GLN  NE2', -0.428, (182.344, 171.782, 163.772)), (' A 344  ALA  HB3', ' A 347  PHE  HE1', -0.428, (136.576, 148.79, 105.718)), (' B 129  LYS  HE2', ' B 169  GLU  OE2', -0.427, (112.611, 147.623, 116.582)), (' B 725  GLU  OE2', ' B1028  LYS  HE3', -0.427, (149.117, 156.851, 188.375)), (' B 189  LEU  HB2', ' B 210  ILE HD13', -0.427, (106.036, 153.302, 144.728)), (' A 596  SER  OG ', ' A 613  GLN  NE2', -0.427, (159.185, 133.912, 163.687)), (' B 344  ALA  HB3', ' B 347  PHE  HE1', -0.427, (161.797, 185.198, 105.725)), (' C 344  ALA  HB3', ' C 347  PHE  HE1', -0.426, (180.809, 145.216, 105.705)), (' B1011  GLN  OE1', ' B1014  ARG  NH1', -0.425, (150.909, 152.975, 165.961)), (' A 917  TYR  HB3', ' C1129  VAL HG13', -0.425, (178.806, 151.269, 218.456)), (' A 725  GLU  OE2', ' A1028  LYS  HE3', -0.425, (167.702, 152.036, 188.298)), (' C 189  LEU  HB2', ' C 210  ILE HD13', -0.424, (181.084, 209.427, 144.673)), (' A 316  SER  OG ', ' A 317  ASN  N  ', -0.424, (160.938, 133.095, 154.535)), (' C 725  GLU  OE2', ' C1028  LYS  HE3', -0.424, (162.199, 170.155, 188.192)), (' C 316  SER  OG ', ' C 317  ASN  N  ', -0.423, (182.369, 174.1, 154.446)), (' B 316  SER  OG ', ' B 317  ASN  N  ', -0.423, (136.035, 172.072, 154.526)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.421, (158.291, 170.771, 165.892)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.418, (160.997, 142.722, 156.044)), (' A 796  ASP  N  ', ' A 796  ASP  OD1', -0.418, (190.177, 156.239, 207.802)), (' A1011  GLN  OE1', ' A1014  ARG  NH1', -0.417, (170.19, 155.841, 165.726)), (' B 707  TYR  HB3', ' C 792  PRO  HG3', -0.414, (143.191, 183.82, 205.395)), (' C 725  GLU  OE1', ' C1064  HIS  NE2', -0.414, (161.741, 172.921, 191.072)), (' A 738  CYS  SG ', ' A 764  ASN  ND2', -0.414, (173.67, 169.199, 155.666)), (' C1077  THR  OG1', ' C1078  ALA  N  ', -0.413, (180.689, 161.931, 218.439)), (' B1077  THR  OG1', ' B1078  ALA  N  ', -0.412, (147.312, 177.047, 218.306)), (' A1077  THR  OG1', ' A1078  ALA  N  ', -0.412, (151.19, 140.548, 218.474)), (' C 738  CYS  SG ', ' C 764  ASN  ND2', -0.41, (144.608, 167.014, 155.691)), (' B 566  GLY  O  ', ' B 574  ASP  N  ', -0.41, (153.458, 189.04, 145.574)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.407, (159.54, 119.276, 181.167)), (' C 802  PHE  HD1', ' C 805  ILE HD11', -0.406, (153.998, 183.789, 198.696)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.406, (138.085, 176.596, 211.086)), (' B 858  LEU HD21', ' B 962  LEU HD23', -0.404, (149.61, 147.022, 157.73)), (' C 656  VAL HG12', ' C 658  ASN  H  ', -0.403, (194.883, 179.798, 181.161)), (' B 725  GLU  OE1', ' B1064  HIS  NE2', -0.402, (147.572, 155.02, 191.177)), (' A 566  GLY  O  ', ' A 574  ASP  N  ', -0.402, (137.48, 139.62, 145.633)), (' C 201  PHE  O  ', ' C 229  LEU  N  ', -0.401, (170.948, 195.162, 128.144)), (' A 802  PHE  HD1', ' A 805  ILE HD11', -0.401, (183.477, 152.644, 198.661)), (' C 229  LEU  HA ', ' C 229  LEU HD23', -0.401, (169.457, 196.361, 125.219)), (' A 858  LEU HD21', ' A 962  LEU HD23', -0.4, (175.5, 157.076, 157.224)), (' B 656  VAL HG12', ' B 658  ASN  H  ', -0.4, (124.68, 180.85, 180.956))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
