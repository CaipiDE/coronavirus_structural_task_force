# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', '  97 ', 'ASP', 0.020136523531098245, (6.667000000000012, -14.623000000000003, 43.528)), ('X', '  97 ', 'ASP', 0.02129943492680456, (-5.070999999999994, 54.79500000000001, 43.51))]
data['omega'] = [('H', '  97 ', 'ASP', None, (8.088000000000012, -14.872999999999996, 43.302)), ('H', ' 128 ', 'SER', None, (-13.289000000000003, 12.574, -3.065)), ('H', ' 148 ', 'PRO', None, (-1.1949999999999998, -13.281, 6.864)), ('H', ' 150 ', 'PRO', None, (2.3670000000000018, -8.841, 8.811)), ('L', '   8 ', 'PRO', None, (-7.26, 5.520999999999999, 35.109)), ('L', '  30 ', 'SER', None, (-3.096999999999994, -8.177, 50.022)), ('L', '  94 ', 'TYR', None, (-4.320999999999994, -17.297, 43.385)), ('L', ' 143 ', 'PRO', None, (-9.044999999999996, 14.623000000000003, 22.273)), ('X', '  97 ', 'ASP', None, (-6.501999999999992, 55.003, 43.313)), ('X', ' 128 ', 'SER', None, (13.242999999999997, 27.529000000000007, -3.201)), ('X', ' 148 ', 'PRO', None, (1.3870000000000018, 53.462, 6.942)), ('X', ' 150 ', 'PRO', None, (-2.112, 48.986, 8.912)), ('Y', '   8 ', 'PRO', None, (8.585, 34.59600000000001, 34.957)), ('Y', '  30 ', 'SER', None, (4.852999999999998, 48.358, 49.875)), ('Y', ' 143 ', 'PRO', None, (9.787, 25.446, 22.262999999999998))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' Y  36  TYR  CE1', ' Y  89  GLN  OE1', -1.067, (-2.632, 48.199, 36.629)), (' Y  36  TYR  CZ ', ' Y  89  GLN  OE1', -0.899, (-3.433, 48.764, 36.654)), (' Y  12  SER  OG ', ' Y 142  TYR  OH ', -0.84, (5.051, 26.159, 26.01)), (' Y  36  TYR  OH ', ' Y  89  GLN  OE1', -0.791, (-3.962, 49.08, 37.833)), (' X 127  PRO  HG3', ' X 139  LEU  HB3', -0.79, (7.838, 28.861, -3.007)), (' Z 383  SER  HB2', ' Z 386  LYS  HG3', -0.78, (15.472, 85.142, 59.42)), (' Y  30  SER  OG ', ' Z 501  ASN  ND2', -0.773, (5.748, 49.369, 51.909)), (' A 383  SER  HB2', ' A 386  LYS  HG3', -0.766, (-13.135, -44.778, 59.217)), (' X  96  LEU  HB3', ' X  99  TYR  HB2', -0.766, (-9.205, 51.647, 42.86)), (' H  96  LEU  HB3', ' H  99  TYR  HB2', -0.764, (10.551, -11.674, 42.897)), (' H 127  PRO  HG3', ' H 139  LEU  HB3', -0.74, (-7.534, 11.486, -2.363)), (' L  95  PRO  HB2', ' L  96  PRO  HD3', -0.74, (-7.052, -18.299, 38.406)), (' H   6  GLU  O  ', ' H 106  GLN  NE2', -0.729, (13.058, -15.204, 20.966)), (' X 128  SER  HB3', ' X 215  LYS  HB2', -0.729, (15.357, 27.933, -5.7)), (' A 360  ASN  H  ', ' A 523  THR  HB ', -0.728, (2.456, -43.457, 73.307)), (' A 366  SER  O  ', ' A 370  ASN  HB3', -0.716, (-15.677, -34.388, 67.978)), (' Y  36  TYR  HE1', ' Y  89  GLN  OE1', -0.714, (-2.179, 47.751, 37.775)), (' X   2  VAL  HA ', ' X  26  GLY  HA3', -0.712, (-20.31, 53.35, 32.613)), (' H  87  THR HG23', ' H 111  THR  HA ', -0.708, (-1.662, -15.705, 15.946)), (' A 403  ARG  NH1', ' A 405  ASP  OD1', -0.697, (-4.244, -16.784, 47.695)), (' Z 444  LYS  O  ', ' Z 448  ASN  N  ', -0.687, (3.105, 46.177, 59.844)), (' X  87  THR HG23', ' X 111  THR  HA ', -0.686, (3.002, 55.979, 16.228)), (' Z 360  ASN  H  ', ' Z 523  THR  HB ', -0.679, (-0.16, 83.56, 73.378)), (' X  98  VAL  HA ', ' Y  91  LEU  HG ', -0.677, (-3.684, 51.024, 43.67)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.672, (11.259, -20.546, 32.453)), (' Z 403  ARG  NH1', ' Z 405  ASP  OD1', -0.671, (5.988, 56.857, 47.476)), (' Y  94  TYR  HB3', ' Y  95  PRO  HD3', -0.67, (8.216, 59.253, 42.767)), (' H 127  PRO  HD2', ' H 214  PRO  HA ', -0.669, (-10.36, 10.995, -6.253)), (' Y  37  GLN  HB2', ' Y  47  LEU HD11', -0.669, (-5.507, 38.852, 33.524)), (' A 444  LYS  O  ', ' A 448  ASN  N  ', -0.667, (-1.182, -5.909, 59.975)), (' L 122  PRO  HD3', ' L 134  VAL HG22', -0.65, (-20.005, 2.211, 1.17)), (' X 127  PRO  HD2', ' X 214  PRO  HA ', -0.648, (10.04, 29.052, -5.757)), (' H  82  MET  HE2', ' H  82C LEU HD21', -0.646, (0.229, -22.191, 20.866)), (' H  32  ASN  OD1', ' H  94  ARG  NH1', -0.646, (15.994, -16.411, 38.709)), (' L  33  LEU HD22', ' L  71  PHE  HD1', -0.645, (-1.36, -2.8, 43.091)), (' Y  94  TYR  HB2', ' Z 405  ASP  HB3', -0.643, (6.651, 60.557, 45.92)), (' Y  34  ALA  HB3', ' Y  89  GLN  HG2', -0.639, (-1.894, 47.174, 39.182)), (' Y  30  SER  HB3', ' Z 498  GLN  NE2', -0.638, (4.727, 45.896, 52.663)), (' A 405  ASP  HB3', ' L  94  TYR  HB2', -0.635, (-4.755, -20.346, 45.948)), (' A 501  ASN  OD1', ' L  30  SER  OG ', -0.635, (-3.464, -9.029, 52.195)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.632, (6.555, 1.395, 34.063)), (' H 128  SER  HB3', ' H 215  LYS  HB2', -0.632, (-15.477, 12.048, -5.465)), (' A 498  GLN  NE2', ' L  30  SER  HB3', -0.629, (-2.244, -5.984, 52.798)), (' A 403  ARG HH21', ' L  92  ASN  HB3', -0.625, (-0.024, -16.729, 46.23)), (' H  39  GLN  HB2', ' H  45  LEU HD23', -0.623, (1.109, -9.656, 27.002)), (' X  39  GLN  HB2', ' X  45  LEU HD23', -0.618, (0.038, 49.7, 26.992)), (' Y  92  ASN  O  ', ' Z 403  ARG  NH2', -0.614, (3.439, 56.309, 45.748)), (' X  32  ASN  OD1', ' X  94  ARG  NH1', -0.614, (-14.518, 56.497, 39.092)), (' L  89  GLN  NE2', ' L  98  PHE  HB3', -0.607, (1.388, -11.317, 37.817)), (' A 403  ARG  HD2', ' A 505  TYR  HA ', -0.601, (-4.124, -15.72, 50.379)), (' Y  95  PRO  HB2', ' Y  96  PRO  HD3', -0.599, (8.706, 58.192, 38.14)), (' X  34  MET  HB3', ' X  78  LEU HD22', -0.598, (-9.601, 60.625, 32.095)), (' X  82  MET  HE2', ' X  82C LEU HD21', -0.596, (0.883, 63.009, 20.988)), (' L  19  VAL HG22', ' L  75  ILE  HB ', -0.59, (3.686, 9.533, 36.104)), (' Z 403  ARG  HD2', ' Z 505  TYR  HA ', -0.588, (5.295, 55.663, 50.108)), (' X  98  VAL HG12', ' Z 493  GLN HE22', -0.584, (-6.711, 51.497, 47.315)), (' H 215  LYS  HE2', ' L 121  PRO  HG2', -0.583, (-17.142, 6.855, -3.994)), (' Y  19  VAL HG22', ' Y  75  ILE  HB ', -0.581, (-2.745, 30.406, 36.116)), (' X 102  ASP  HB2', ' Y  55  GLN HE22', -0.573, (-12.303, 48.221, 38.76)), (' Y 122  PRO  HD3', ' Y 134  VAL HG22', -0.572, (19.739, 37.714, 0.638)), (' L  34  ALA  HB3', ' L  89  GLN  HG2', -0.571, (3.316, -7.444, 38.716)), (' X  96  LEU  O  ', ' X  99  TYR  N  ', -0.57, (-6.747, 51.691, 43.759)), (' A 403  ARG  NH2', ' L  92  ASN  HB3', -0.567, (-0.607, -16.912, 46.298)), (' X 102  ASP  HB2', ' Y  55  GLN  NE2', -0.565, (-11.822, 47.602, 38.643)), (' Y  92  ASN  HB3', ' Z 403  ARG HH21', -0.565, (1.713, 56.31, 46.425)), (' Z 498  GLN  OE1', ' Z 500  THR  OG1', -0.56, (8.063, 44.824, 53.448)), (' H  11  LEU HD22', ' H 148  PRO  HG3', -0.538, (0.389, -15.633, 8.661)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.535, (1.888, -47.881, 69.579)), (' A 425  LEU HD21', ' A 512  VAL HG11', -0.534, (0.021, -33.822, 56.79)), (' H  96  LEU  O  ', ' H  99  TYR  N  ', -0.533, (9.026, -11.843, 43.538)), (' L  33  LEU  HB2', ' L  71  PHE  HE1', -0.527, (-1.154, -5.059, 44.615)), (' A 487  ASN  ND2', ' H  26  GLY  O  ', -0.526, (21.575, -14.355, 37.142)), (' Y  39  LYS  HB2', ' Y  42  LYS  HG2', -0.523, (-6.694, 41.126, 25.025)), (' H  98  VAL  HA ', ' L  91  LEU  HG ', -0.521, (5.203, -10.956, 43.741)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.52, (5.375, -24.736, 54.411)), (' X 143  VAL HG11', ' X 151  VAL HG11', -0.519, (2.333, 44.293, 2.948)), (' L  33  LEU  HB2', ' L  71  PHE  CE1', -0.516, (-0.962, -4.686, 44.5)), (' A 498  GLN  OE1', ' A 500  THR  OG1', -0.516, (-6.191, -4.825, 53.625)), (' Y  11  LEU HD22', ' Y 106  VAL HG13', -0.515, (1.963, 30.63, 31.909)), (' Y   2  ILE HD13', ' Y  27  GLN  HG2', -0.508, (12.026, 50.627, 45.329)), (' L  36  TYR  HE1', ' L  89  GLN  HG2', -0.507, (3.055, -7.587, 38.05)), (' X  40  ALA  HB3', ' X  43  LYS  HB2', -0.504, (5.973, 50.28, 23.637)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.501, (-1.988, -20.376, 61.433)), (' Z 350  VAL HG11', ' Z 418  ILE HD12', -0.5, (-1.879, 62.373, 53.601)), (' X  96  LEU  HB2', ' X 100  GLY  O  ', -0.5, (-8.433, 52.131, 40.067)), (' Z 341  VAL HG11', ' Z 397  ALA  HB1', -0.495, (3.1, 71.421, 66.364)), (' Z 401  VAL HG22', ' Z 509  ARG  HG2', -0.495, (4.114, 60.537, 61.369)), (' H 143  VAL HG11', ' H 151  VAL HG11', -0.494, (-2.34, -4.224, 3.137)), (' X 215  LYS  HE2', ' Y 121  PRO  HG2', -0.493, (17.005, 33.215, -4.011)), (' Y  30  SER  HB3', ' Z 498  GLN HE21', -0.492, (4.079, 45.894, 53.352)), (' A 448  ASN  N  ', ' A 448  ASN HD22', -0.486, (-0.696, -4.918, 59.327)), (' Z 418  ILE  HA ', ' Z 422  ASN  HB2', -0.486, (-3.467, 64.919, 51.916)), (' A 374  PHE  HD1', ' A 436  TRP  HB3', -0.484, (-10.437, -25.121, 61.608)), (' Z 393  THR  HA ', ' Z 522  ALA  HA ', -0.483, (0.529, 87.604, 69.315)), (' X  72  ASP  HB2', ' X  79  TYR  HE2', -0.482, (-14.397, 68.068, 27.392)), (' Y 109  LYS  HA ', ' Y 142  TYR  OH ', -0.482, (4.153, 25.36, 25.702)), (' Y  25  ALA  O  ', ' Y  69  THR  OG1', -0.479, (11.844, 43.933, 45.64)), (' Z 350  VAL HG22', ' Z 422  ASN  HB3', -0.478, (-3.315, 65.232, 54.89)), (' A 498  GLN HE21', ' L  30  SER  HB3', -0.477, (-2.273, -5.848, 53.605)), (' Y  21  ILE HG12', ' Y 104  THR HG21', -0.474, (3.754, 34.759, 34.502)), (' L  90  GLN  CD ', ' L  93  SER  HB3', -0.474, (-4.481, -12.19, 42.252)), (' L   8  PRO  HG2', ' L  11  LEU  HB2', -0.474, (-5.255, 7.924, 32.702)), (' H  96  LEU  HB2', ' H 100  GLY  O  ', -0.473, (10.101, -11.844, 40.064)), (' A 341  VAL HG11', ' A 397  ALA  HB1', -0.473, (-1.043, -31.061, 66.711)), (' H 182  VAL HG21', ' L 137  LEU HD13', -0.472, (-7.874, 8.613, 7.624)), (' A 337  PRO  HB2', ' A 340  GLU  HG2', -0.47, (-0.588, -30.899, 74.273)), (' H 160  LEU HD21', ' H 183  VAL HG21', -0.47, (-0.332, 11.517, 1.059)), (' Z 448  ASN  N  ', ' Z 448  ASN HD22', -0.466, (2.749, 45.41, 59.03)), (' H  98  VAL  O  ', ' L  49  TYR  HB2', -0.463, (7.231, -7.748, 43.776)), (' H  95  ASP  HA ', ' H 101  LEU HD13', -0.462, (8.218, -14.217, 37.56)), (' Z 337  PRO  HB2', ' Z 340  GLU  HG2', -0.46, (3.001, 70.979, 74.338)), (' X 128  SER  O  ', ' X 129  SER  HB3', -0.458, (14.071, 23.081, -2.971)), (' Z 395  VAL HG22', ' Z 515  PHE  HD1', -0.458, (4.193, 81.158, 65.462)), (' L  33  LEU  HG ', ' L  34  ALA  N  ', -0.457, (1.506, -5.485, 41.519)), (' Y 115  PRO  CA ', ' Y 141  PHE  HB3', -0.453, (11.205, 25.077, 14.761)), (' Z 347  PHE  HB3', ' Z 401  VAL HG23', -0.451, (1.894, 61.167, 62.386)), (' Y  33  LEU HD22', ' Y  71  PHE  CG ', -0.45, (3.274, 42.391, 43.754)), (' H 185  VAL HG11', ' H 195  TYR  CE1', -0.449, (-1.44, 13.623, -2.024)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.449, (-4.933, -10.092, 23.709)), (' L 109  LYS  HA ', ' L 142  TYR  OH ', -0.448, (-3.373, 14.764, 25.895)), (' Y  94  TYR  HB2', ' Z 405  ASP  CB ', -0.448, (6.781, 59.72, 46.261)), (' A 349  SER  HB3', ' A 452  LEU  O  ', -0.448, (6.468, -19.186, 57.843)), (' H 118  LYS  HB2', ' H 118  LYS  HE2', -0.447, (-6.214, -14.722, -0.199)), (' X 120  PRO  HB3', ' X 146  TYR  HB3', -0.446, (4.1, 48.521, 2.293)), (' X  38  ARG  NH2', ' X  62  SER  OG ', -0.446, (7.416, 59.646, 27.273)), (' X  52  TYR  HB3', ' Z 421  TYR  OH ', -0.445, (-7.787, 65.244, 42.367)), (' Z 392  PHE  CD1', ' Z 515  PHE  HB3', -0.444, (4.451, 84.335, 63.401)), (' A 417  LYS  H  ', ' A 417  LYS  HG2', -0.443, (2.938, -22.401, 45.645)), (' Y 115  PRO  HA ', ' Y 141  PHE  HB3', -0.443, (10.69, 25.15, 14.466)), (' A 392  PHE  CD1', ' A 515  PHE  HB3', -0.442, (-2.281, -43.708, 63.528)), (' Y 186  ALA  O  ', ' Y 190  LYS  HG3', -0.441, (28.755, 45.268, -1.366)), (' L  21  ILE HG12', ' L 104  THR HG21', -0.44, (-2.603, 5.148, 34.305)), (' A 476  GLY  HA2', ' H  27  LEU  HA ', -0.44, (20.925, -17.257, 37.083)), (' A 366  SER  O  ', ' A 370  ASN  CB ', -0.44, (-16.334, -34.773, 67.818)), (' H  72  ASP  HB2', ' H  79  TYR  HE2', -0.44, (15.658, -27.777, 27.47)), (' A 498  GLN  H  ', ' A 501  ASN  ND2', -0.439, (-3.565, -10.056, 55.195)), (' A 493  GLN HE22', ' H  98  VAL HG12', -0.439, (8.484, -11.386, 47.485)), (' A 347  PHE  HB3', ' A 401  VAL HG23', -0.438, (0.29, -20.971, 62.416)), (' X  12  ILE HG22', ' X  13  GLN  O  ', -0.437, (3.083, 65.01, 13.823)), (' Z 461  LEU HD22', ' Z 465  GLU  HB3', -0.436, (-9.517, 71.069, 53.343)), (' A 395  VAL HG22', ' A 515  PHE  HD1', -0.436, (-2.304, -41.191, 65.28)), (' X 185  VAL HG11', ' X 195  TYR  CE1', -0.434, (1.471, 26.51, -1.943)), (' H 128  SER  O  ', ' H 129  SER  HB3', -0.433, (-13.862, 16.71, -3.018)), (' L  65  SER  OG ', ' L  72  THR  OG1', -0.432, (-0.076, 5.312, 45.426)), (' X  95  ASP  HA ', ' X 101  LEU HD13', -0.432, (-6.569, 54.408, 37.617)), (' H   6  GLU  H  ', ' H 106  GLN HE21', -0.431, (13.286, -14.637, 22.659)), (' X 196  ILE HG12', ' X 211  LYS  HA ', -0.43, (2.137, 34.838, -8.194)), (' Y 160  ASN  N  ', ' Y 160  ASN  OD1', -0.43, (22.31, 43.816, 11.518)), (' X  72  ASP  OD2', ' X  75  LYS  NZ ', -0.429, (-16.704, 69.434, 25.544)), (' Z 425  LEU HD21', ' Z 512  VAL HG11', -0.427, (1.445, 74.028, 56.617)), (' L 161  SER  HA ', ' L 180  THR  O  ', -0.426, (-17.153, -1.855, 9.832)), (' X  98  VAL  O  ', ' Y  49  TYR  HB2', -0.425, (-5.768, 47.93, 43.848)), (' Y  35  TRP  CD2', ' Y  73  LEU  HB2', -0.424, (-0.226, 38.742, 39.682)), (' Y  88  CYS  O  ', ' Y 101  GLY  N  ', -0.422, (4.275, 46.079, 36.466)), (' X 144  LYS  HE2', ' Y 131  THR HG21', -0.421, (15.744, 46.81, 1.767)), (' Y  36  TYR  CZ ', ' Y  46  LEU HD13', -0.421, (-5.151, 46.847, 37.882)), (' A 439  ASN  O  ', ' A 443  SER  HB2', -0.421, (-6.395, -11.435, 60.556)), (' L  97  LYS  HA ', ' L  97  LYS  HD2', -0.42, (-0.163, -18.342, 40.745)), (' A 350  VAL HG11', ' A 418  ILE HD12', -0.419, (3.8, -22.454, 53.644)), (' Y 138  LEU  O  ', ' Y 176  SER  HA ', -0.418, (8.532, 30.035, 13.219)), (' L  93  SER  O  ', ' L  96  PRO  HD2', -0.416, (-5.146, -16.915, 40.047)), (' H 120  PRO  HB3', ' H 146  TYR  HB3', -0.416, (-4.098, -7.939, 2.124)), (' X 210  LYS  NZ ', ' Y 125  GLU  OE2', -0.414, (8.182, 41.174, -8.752)), (' L 186  ALA  O  ', ' L 190  LYS  HG3', -0.412, (-28.798, -5.043, -1.157)), (' X 118  LYS  HB2', ' X 118  LYS  HE2', -0.412, (6.461, 54.863, -0.219)), (' X  38  ARG  NH1', ' X  86  ASP  OD1', -0.412, (4.924, 60.104, 24.54)), (' Z 417  LYS  H  ', ' Z 417  LYS  HG2', -0.412, (-1.28, 62.584, 45.548)), (' H  96  LEU  HA ', ' H  96  LEU HD23', -0.412, (11.087, -15.49, 41.921)), (' L   4  MET  O  ', ' L 102  PRO  HD3', -0.411, (-8.009, -5.234, 35.976)), (' A 460  ASN  OD1', ' H  54  GLY  HA3', -0.41, (10.537, -28.74, 43.456)), (' Y 192  LYS  HD2', ' Y 212  ASN  HB3', -0.41, (28.56, 32.368, -3.091)), (' Z 418  ILE  HA ', ' Z 422  ASN HD22', -0.41, (-3.909, 64.441, 50.779)), (' L 192  LYS  HD2', ' L 212  ASN  HB3', -0.409, (-28.566, 7.887, -2.999)), (' L 160  ASN  N  ', ' L 160  ASN  OD1', -0.409, (-22.199, -3.265, 11.434)), (' H 201  HIS  CD2', ' H 203  PRO  HD2', -0.408, (2.148, -10.033, 4.191)), (' Z 406  GLU  OE1', ' Z 495  TYR  OH ', -0.408, (0.414, 59.937, 52.047)), (' H 147  PHE  HA ', ' H 148  PRO  HA ', -0.408, (-3.098, -11.964, 7.572)), (' A 421  TYR  OH ', ' H  52  TYR  HB3', -0.407, (9.295, -24.961, 42.394)), (' X 182  VAL HG21', ' Y 137  LEU HD13', -0.406, (7.942, 31.335, 7.792)), (' L  93  SER  O  ', ' L  96  PRO  O  ', -0.405, (-3.665, -16.726, 40.644)), (' Z 358  ILE  HB ', ' Z 395  VAL  HB ', -0.402, (2.334, 78.79, 68.56)), (' H 167  PHE  HE1', ' H 182  VAL HG22', -0.402, (-6.035, 7.069, 7.484)), (' A 472  ILE HD12', ' A 484  GLU  HG2', -0.4, (19.413, -13.19, 50.425)), (' H 106  GLN  H  ', ' H 106  GLN  HG3', -0.4, (13.684, -11.968, 24.27))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
