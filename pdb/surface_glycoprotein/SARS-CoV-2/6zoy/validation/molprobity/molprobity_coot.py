# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 112 ', 'SER', 0.043389095823590136, (155.189, 177.483, 178.26999999999998)), ('A', ' 138 ', 'ASP', 0.03584821161922807, (160.404, 189.014, 170.83)), ('A', ' 214 ', 'ARG', 0.02542083898081144, (165.747, 187.132, 143.323)), ('B', ' 112 ', 'SER', 0.04413313458187211, (89.94600000000003, 131.886, 178.215)), ('B', ' 138 ', 'ASP', 0.03527818808414252, (77.359, 130.638, 170.763)), ('B', ' 214 ', 'ARG', 0.025053892249511624, (76.35400000000003, 136.17, 143.247)), ('C', ' 112 ', 'SER', 0.0449237082695557, (162.176, 98.082, 178.218)), ('C', ' 138 ', 'ASP', 0.03539805822938874, (169.549, 87.805, 170.766)), ('C', ' 214 ', 'ARG', 0.025537108972826964, (165.248, 84.15599999999998, 143.254))]
data['omega'] = []
data['rota'] = [('A', ' 517 ', 'LEU', 0.029529555915418344, (114.68200000000003, 148.64299999999994, 159.796)), ('A', ' 582 ', 'LEU', 0.058969801000616585, (103.962, 165.34799999999998, 152.887)), ('B', ' 517 ', 'LEU', 0.0295499602859018, (135.177, 111.159, 159.82)), ('B', ' 582 ', 'LEU', 0.058979837024137435, (126.06200000000004, 93.521, 152.925)), ('C', ' 517 ', 'LEU', 0.02957525316877407, (157.491, 147.609, 159.805)), ('C', ' 582 ', 'LEU', 0.05894274364553738, (177.32, 148.536, 152.9))]
data['cbeta'] = []
data['probe'] = [(' B 807  LYS  NZ ', ' B 816  ASP  OD2', -0.803, (111.436, 160.024, 104.242)), (' A 807  LYS  NZ ', ' A 816  ASP  OD2', -0.797, (169.082, 144.088, 104.282)), (' A 783  GLN  OE1', ' C 699  ASN  ND2', -0.791, (160.7, 121.912, 92.748)), (' A 699  ASN  ND2', ' B 783  GLN  OE1', -0.791, (134.931, 163.63, 92.419)), (' C 807  LYS  NZ ', ' C 816  ASP  OD2', -0.789, (126.895, 102.653, 104.201)), (' B 699  ASN  ND2', ' C 783  GLN  OE1', -0.781, (111.394, 121.275, 92.619)), (' C1112  THR  OG1', ' C1114  ASP  OD1', -0.759, (143.208, 131.579, 61.663)), (' B1112  THR  OG1', ' B1114  ASP  OD1', -0.759, (128.44, 131.974, 62.264)), (' A1112  THR  OG1', ' A1114  ASP  OD1', -0.753, (136.326, 144.145, 62.19)), (' A 439  ASN  ND2', ' A 506  GLN  OE1', -0.735, (126.436, 139.481, 192.789)), (' C 439  ASN  ND2', ' C 506  GLN  OE1', -0.733, (143.799, 141.89, 192.782)), (' B 439  ASN  ND2', ' B 506  GLN  OE1', -0.733, (137.014, 125.991, 192.826)), (' B 654  GLU  OE1', ' B 687  SER  OG ', -0.711, (95.335, 120.392, 116.593)), (' A 654  GLU  OE1', ' A 687  SER  OG ', -0.698, (143.152, 178.712, 117.027)), (' C 654  GLU  OE1', ' C 687  SER  OG ', -0.689, (169.29, 107.941, 116.955)), (' A 799  SER  OG ', ' A 800  GLN  OE1', -0.677, (166.478, 147.416, 92.974)), (' C 799  SER  OG ', ' C 800  GLN  OE1', -0.673, (130.539, 103.272, 92.946)), (' B 799  SER  OG ', ' B 800  GLN  OE1', -0.668, (110.24, 156.688, 92.997)), (' A 100  ILE  HA ', ' A 243  ALA  HB3', -0.651, (170.063, 185.497, 160.878)), (' C 100  ILE  HA ', ' C 243  ALA  HB3', -0.642, (161.729, 81.247, 160.754)), (' C  66  HIS  ND1', ' C 263  ALA  O  ', -0.641, (167.777, 84.252, 152.136)), (' B 100  ILE  HA ', ' B 243  ALA  HB3', -0.633, (75.583, 141.184, 160.298)), (' A  66  HIS  ND1', ' A 263  ALA  O  ', -0.632, (164.183, 189.285, 152.235)), (' B  66  HIS  ND1', ' B 263  ALA  O  ', -0.629, (75.173, 134.326, 152.584)), (' B 457  ARG  NE ', ' B 467  ASP  OD2', -0.623, (157.875, 116.212, 174.756)), (' C 457  ARG  NE ', ' C 467  ASP  OD2', -0.62, (141.813, 164.82, 174.697)), (' C1007  GLN  OE1', ' C1010  ARG  NH1', -0.619, (134.236, 124.337, 124.668)), (' A1007  GLN  OE1', ' A1010  ARG  NH1', -0.618, (145.98, 139.847, 124.738)), (' B1007  GLN  OE1', ' B1010  ARG  NH1', -0.616, (126.875, 143.329, 124.883)), (' C 748  LEU HD11', ' C 986  GLU  OE1', -0.614, (124.038, 128.889, 153.23)), (' B 334  ASN  ND2', ' B 360  ASN  O  ', -0.612, (128.375, 97.863, 171.684)), (' C 334  ASN  ND2', ' C 360  ASN  O  ', -0.611, (172.536, 148.343, 171.448)), (' A 748  LEU HD11', ' A 986  GLU  OE1', -0.603, (147.645, 129.075, 153.253)), (' B 748  LEU HD11', ' B 986  GLU  OE1', -0.601, (135.88, 149.61, 153.107)), (' A 732  VAL HG22', ' A 854  LEU HD13', -0.6, (153.009, 135.133, 131.867)), (' B 732  VAL HG22', ' B 854  LEU HD13', -0.595, (128.336, 151.173, 131.806)), (' A 334  ASN  ND2', ' A 360  ASN  O  ', -0.595, (106.564, 161.26, 171.511)), (' C 732  VAL HG22', ' C 854  LEU HD13', -0.586, (126.149, 121.537, 131.636)), (' A  81  ASN  ND2', ' A 265  TYR  OH ', -0.582, (159.142, 185.608, 158.756)), (' B  81  ASN  ND2', ' B 265  TYR  OH ', -0.581, (81.332, 131.455, 158.358)), (' A 457  ARG  NE ', ' A 467  ASP  OD2', -0.579, (107.658, 126.525, 174.659)), (' C  81  ASN  ND2', ' C 265  TYR  OH ', -0.574, (167.123, 90.48, 158.598)), (' A 349  SER  OG ', ' A 452  LEU  O  ', -0.566, (111.387, 133.646, 184.744)), (' B 782  LYS  NZ ', ' B 887  GLY  O  ', -0.558, (138.113, 157.067, 92.523)), (' B 349  SER  OG ', ' B 452  LEU  O  ', -0.557, (149.735, 115.885, 184.686)), (' A 782  LYS  NZ ', ' A 887  GLY  O  ', -0.556, (153.166, 123.116, 92.525)), (' C 457  ARG  NH1', ' C 459  SER  OG ', -0.556, (139.156, 164.999, 170.829)), (' A 457  ARG  NH1', ' A 459  SER  OG ', -0.555, (108.414, 124.308, 171.194)), (' B 439  ASN  O  ', ' B 443  SER  OG ', -0.554, (138.421, 121.255, 194.749)), (' B 457  ARG  NH1', ' B 459  SER  OG ', -0.553, (159.298, 117.91, 171.148)), (' C 349  SER  OG ', ' C 452  LEU  O  ', -0.551, (146.141, 157.993, 184.937)), (' C 439  ASN  O  ', ' C 443  SER  OG ', -0.55, (146.575, 145.622, 194.888)), (' C  31  SER  HG ', ' C  60  SER  N  ', -0.548, (163.0, 100.388, 142.557)), (' C 782  LYS  NZ ', ' C 887  GLY  O  ', -0.546, (116.116, 127.328, 92.513)), (' B 366  SER  O  ', ' B 370  ASN  ND2', -0.546, (120.331, 115.829, 176.247)), (' C 366  SER  O  ', ' C 370  ASN  ND2', -0.545, (160.786, 132.337, 176.195)), (' A 439  ASN  O  ', ' A 443  SER  OG ', -0.544, (121.752, 140.216, 194.782)), (' A 366  SER  O  ', ' A 370  ASN  ND2', -0.542, (126.202, 158.636, 175.956)), (' A 342  PHE  HE1', ' A 434  ILE HG21', -0.542, (120.724, 149.13, 178.434)), (' B  31  SER  HG ', ' B  60  SER  N  ', -0.541, (91.501, 130.064, 142.449)), (' C 342  PHE  HE1', ' C 434  ILE HG21', -0.539, (154.873, 142.134, 178.418)), (' A 901  ARG  NH1', ' A1045  LEU  O  ', -0.533, (148.93, 139.571, 89.024)), (' A  31  SER  HG ', ' A  60  SER  N  ', -0.532, (152.887, 177.093, 142.484)), (' B 340  GLU  N  ', ' B 340  GLU  OE1', -0.528, (131.155, 105.273, 181.805)), (' B 435  ALA  HB2', ' B 510  VAL HG12', -0.523, (137.473, 121.262, 179.705)), (' C 901  ARG  NH1', ' C1045  LEU  O  ', -0.52, (132.497, 122.756, 89.046)), (' C 435  ALA  HB2', ' C 510  VAL HG12', -0.519, (147.512, 144.531, 179.77)), (' C 962  LEU  O  ', ' C 971  SER  OG ', -0.519, (133.432, 118.468, 145.478)), (' B 342  PHE  HE1', ' B 434  ILE HG21', -0.518, (132.227, 115.764, 178.614)), (' B 962  LEU  O  ', ' B 971  SER  OG ', -0.515, (122.024, 146.481, 145.479)), (' B 901  ARG  NH1', ' B1045  LEU  O  ', -0.514, (126.094, 145.222, 89.095)), (' C 442  ASP  O  ', ' C 448  ASN  ND2', -0.508, (148.602, 152.16, 193.992)), (' A 435  ALA  HB2', ' A 510  VAL HG12', -0.508, (122.666, 141.847, 179.629)), (' A 340  GLU  N  ', ' A 340  GLU  OE1', -0.493, (111.037, 154.625, 181.67)), (' B 381  GLY  O  ', ' C 980  LEU HD21', -0.492, (131.453, 121.053, 161.294)), (' A 962  LEU  O  ', ' A 971  SER  OG ', -0.492, (151.928, 142.333, 145.56)), (' A 358  ILE  HB ', ' A 395  VAL HG13', -0.487, (111.843, 151.977, 171.187)), (' B 358  ILE  HB ', ' B 395  VAL HG13', -0.484, (133.925, 106.678, 171.526)), (' C 358  ILE  HB ', ' C 395  VAL HG13', -0.483, (161.966, 148.475, 171.033)), (' B1046  MET  HE2', ' B1048  PHE  CE1', -0.483, (122.244, 149.949, 91.017)), (' C 202  LYS  NZ ', ' C 228  ASP  OD2', -0.483, (144.321, 104.968, 159.881)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.482, (115.122, 138.74, 193.898)), (' B 442  ASP  O  ', ' B 448  ASN  ND2', -0.48, (143.605, 116.68, 193.912)), (' C 340  GLU  N  ', ' C 340  GLU  OE1', -0.478, (164.502, 147.618, 181.737)), (' A1046  MET  HE2', ' A1048  PHE  CE1', -0.477, (155.058, 140.574, 90.909)), (' C1046  MET  HE2', ' C1048  PHE  CE1', -0.476, (130.619, 116.571, 91.303)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.475, (127.232, 106.384, 164.318)), (' A 979  ARG  NH1', ' C 381  GLY  O  ', -0.475, (151.511, 140.61, 160.668)), (' B 437  ASN  OD1', ' B 438  SER  N  ', -0.475, (136.449, 122.011, 188.924)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.474, (165.979, 143.129, 164.665)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.473, (114.501, 158.363, 164.54)), (' C 105  ILE  CG2', ' C 110  LEU HD23', -0.471, (161.798, 96.402, 168.37)), (' B 105  ILE  CG2', ' B 110  LEU HD23', -0.47, (88.668, 132.624, 168.276)), (' C 437  ASN  OD1', ' C 438  SER  N  ', -0.468, (147.533, 143.258, 188.992)), (' B 202  LYS  NZ ', ' B 228  ASP  OD2', -0.467, (104.68, 143.682, 160.242)), (' B 326  ILE HD12', ' B 539  VAL HG21', -0.466, (115.242, 104.325, 149.664)), (' B 452  LEU HD23', ' B 494  SER  HB2', -0.466, (153.382, 118.164, 189.866)), (' A 437  ASN  OD1', ' A 438  SER  N  ', -0.466, (123.331, 142.085, 188.996)), (' A 105  ILE  CG2', ' A 110  LEU HD23', -0.466, (156.879, 178.071, 168.429)), (' C 326  ILE HD12', ' C 539  VAL HG21', -0.465, (173.283, 133.766, 149.7)), (' B 390  LEU HD11', ' C 979  ARG  CB ', -0.464, (127.842, 115.955, 161.208)), (' B 375  SER  N  ', ' B 435  ALA  O  ', -0.463, (131.701, 122.627, 181.782)), (' C 452  LEU HD23', ' C 494  SER  HB2', -0.462, (142.381, 160.22, 189.484)), (' B 551  VAL HG12', ' B 588  THR  O  ', -0.461, (117.576, 106.848, 140.7)), (' A 375  SER  N  ', ' A 435  ALA  O  ', -0.461, (126.216, 146.124, 181.771)), (' A 390  LEU HD11', ' B 979  ARG  CB ', -0.461, (122.628, 152.61, 161.307)), (' C 175  PHE  O  ', ' C 176  LEU HD22', -0.46, (146.48, 77.459, 164.696)), (' C 551  VAL HG12', ' C 588  THR  O  ', -0.46, (169.613, 134.591, 140.924)), (' A 326  ILE HD12', ' A 539  VAL HG21', -0.457, (118.948, 169.177, 149.282)), (' B 715  THR HG23', ' B1066  ALA  HB2', -0.456, (111.21, 135.262, 85.361)), (' A 381  GLY  O  ', ' B 979  ARG  NH1', -0.455, (123.714, 147.013, 160.672)), (' A 452  LEU HD23', ' A 494  SER  HB2', -0.455, (111.614, 129.138, 189.782)), (' A 715  THR HG23', ' A1066  ALA  HB2', -0.454, (147.304, 157.354, 85.18)), (' A 175  PHE  O  ', ' A 176  LEU HD22', -0.453, (180.994, 174.09, 164.707)), (' B 537  LYS  N  ', ' B 551  VAL HG23', -0.451, (113.926, 103.503, 142.812)), (' B 175  PHE  O  ', ' B 176  LEU HD22', -0.451, (79.498, 156.012, 164.649)), (' A 537  LYS  N  ', ' A 551  VAL HG23', -0.45, (118.611, 170.839, 142.956)), (' C 537  LYS  N  ', ' C 551  VAL HG23', -0.45, (175.146, 132.885, 142.902)), (' A 551  VAL HG12', ' A 588  THR  O  ', -0.45, (119.725, 165.633, 140.861)), (' C 715  THR HG23', ' C1066  ALA  HB2', -0.449, (148.754, 114.742, 85.509)), (' A  31  SER  OG ', ' A  60  SER  N  ', -0.448, (153.23, 176.808, 143.054)), (' C 375  SER  N  ', ' C 435  ALA  O  ', -0.447, (149.293, 138.847, 181.68)), (' C 391  CYS  CB ', ' C 525  CYS  HA ', -0.446, (165.853, 142.658, 164.584)), (' B 391  CYS  CB ', ' B 525  CYS  HA ', -0.446, (126.814, 106.552, 164.197)), (' B  31  SER  OG ', ' B  60  SER  N  ', -0.445, (91.475, 130.513, 142.821)), (' A 202  LYS  NZ ', ' A 228  ASP  OD2', -0.445, (158.176, 158.867, 160.142)), (' A1308  NAG  H3 ', ' A1308  NAG  H83', -0.441, (118.824, 175.418, 129.277)), (' C 912  LEU  O  ', ' C 916  GLN  N  ', -0.441, (137.143, 113.672, 77.22)), (' B  54  LEU HD23', ' B 272  PRO  HA ', -0.44, (104.14, 131.996, 150.718)), (' A 391  CYS  CB ', ' A 525  CYS  HA ', -0.439, (114.761, 158.523, 164.493)), (' A 153  MET  N  ', ' A 153  MET  SD ', -0.438, (181.589, 187.669, 167.445)), (' C 153  MET  N  ', ' C 153  MET  SD ', -0.436, (157.814, 70.275, 167.454)), (' B1308  NAG  H3 ', ' B1308  NAG  H83', -0.436, (109.894, 101.488, 128.839)), (' C  31  SER  OG ', ' C  60  SER  N  ', -0.435, (162.678, 100.079, 142.951)), (' C  54  LEU HD23', ' C 272  PRO  HA ', -0.434, (154.925, 110.233, 150.682)), (' B 153  MET  N  ', ' B 153  MET  SD ', -0.434, (67.974, 149.846, 167.32)), (' A  54  LEU HD23', ' A 272  PRO  HA ', -0.433, (148.196, 164.953, 150.3)), (' B 912  LEU  O  ', ' B 916  GLN  N  ', -0.432, (115.519, 145.694, 77.118)), (' B 115  GLN  NE2', ' B 130  VAL  O  ', -0.432, (95.041, 138.208, 175.386)), (' C1308  NAG  H3 ', ' C1308  NAG  H83', -0.431, (178.544, 130.621, 128.821)), (' A 326  ILE HD11', ' A 534  VAL HG12', -0.431, (118.766, 171.647, 150.069)), (' A 912  LEU  O  ', ' A 916  GLN  N  ', -0.43, (154.504, 148.532, 77.179)), (' B 326  ILE HD11', ' B 534  VAL HG12', -0.43, (113.162, 103.264, 150.163)), (' B 711  PRO  HD3', ' C 890  LEU HD13', -0.429, (117.891, 126.942, 81.999)), (' A 979  ARG  CB ', ' C 390  LEU HD11', -0.428, (156.503, 138.659, 161.15)), (' A 899  ALA  HB1', ' A 909  GLN  HB2', -0.428, (149.465, 140.773, 76.798)), (' C 326  ILE HD11', ' C 534  VAL HG12', -0.427, (175.729, 132.36, 150.022)), (' C 172  SER  OG ', ' C 173  GLN  N  ', -0.427, (142.513, 86.063, 165.296)), (' A 172  SER  OG ', ' A 173  GLN  N  ', -0.426, (175.419, 166.503, 165.4)), (' C 115  GLN  NE2', ' C 130  VAL  O  ', -0.426, (153.988, 99.681, 175.652)), (' B 420  ASP  OD1', ' B 421  TYR  N  ', -0.424, (153.793, 123.028, 175.152)), (' A 115  GLN  NE2', ' A 130  VAL  O  ', -0.423, (158.088, 169.98, 175.438)), (' A 711  PRO  HD3', ' B 890  LEU HD13', -0.423, (137.411, 155.716, 81.689)), (' C 454  ARG  NH2', ' C 467  ASP  O  ', -0.422, (144.647, 165.194, 178.569)), (' A 420  ASP  OD1', ' A 421  TYR  N  ', -0.421, (115.317, 126.853, 175.127)), (' C 435  ALA  CB ', ' C 510  VAL HG12', -0.421, (147.665, 143.929, 180.297)), (' C 899  ALA  HB1', ' C 909  GLN  HB2', -0.419, (133.227, 121.68, 76.752)), (' C 398  ASP  OD2', ' C 423  TYR  OH ', -0.418, (150.624, 152.082, 172.502)), (' C 420  ASP  OD1', ' C 421  TYR  N  ', -0.418, (137.878, 157.874, 175.058)), (' C 240  THR HG22', ' C 241  LEU  H  ', -0.417, (161.812, 89.871, 161.666)), (' B 398  ASP  HB2', ' B 512  VAL HG22', -0.416, (140.89, 114.95, 174.649)), (' A 105  ILE HG22', ' A 110  LEU HD23', -0.415, (156.213, 177.924, 168.467)), (' B 398  ASP  OD2', ' B 423  TYR  OH ', -0.414, (142.412, 114.906, 172.571)), (' B 899  ALA  HB1', ' B 909  GLN  HB2', -0.413, (124.706, 145.409, 77.084)), (' A 969  ILE HD12', ' A 979  ARG  NH2', -0.413, (151.078, 141.776, 157.712)), (' A 454  ARG  NH2', ' A 467  ASP  O  ', -0.411, (105.852, 128.688, 178.447)), (' B 172  SER  OG ', ' B 173  GLN  N  ', -0.41, (89.256, 154.971, 165.166)), (' A 435  ALA  CB ', ' A 510  VAL HG12', -0.41, (122.71, 142.032, 180.375)), (' A 240  THR HG22', ' A 241  LEU  H  ', -0.41, (162.536, 181.355, 161.738)), (' B 435  ALA  CB ', ' B 510  VAL HG12', -0.409, (137.244, 121.259, 180.374)), (' B 240  THR HG22', ' B 241  LEU  H  ', -0.409, (82.981, 136.366, 161.651)), (' B 969  ILE HD12', ' B 979  ARG  NH2', -0.408, (122.917, 146.036, 157.678)), (' A 804  ASP  O  ', ' A 806  SER  N  ', -0.408, (172.845, 139.419, 100.973)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.408, (156.842, 113.47, 178.571)), (' A 398  ASP  HB2', ' A 512  VAL HG22', -0.407, (115.485, 141.688, 174.486)), (' A 398  ASP  OD2', ' A 423  TYR  OH ', -0.406, (114.153, 140.403, 172.433)), (' B1090  VAL HG12', ' B1091  PHE  N  ', -0.405, (124.237, 123.071, 72.579)), (' B 105  ILE HG22', ' B 110  LEU HD23', -0.402, (89.06, 132.503, 168.57)), (' C 969  ILE HD12', ' C 979  ARG  NH2', -0.401, (133.372, 119.145, 157.525)), (' A 980  LEU HD21', ' C 381  GLY  O  ', -0.401, (150.438, 139.093, 161.589)), (' C 398  ASP  HB2', ' C 512  VAL HG22', -0.4, (150.82, 150.972, 174.485)), (' C 105  ILE HG22', ' C 110  LEU HD23', -0.4, (161.678, 97.008, 168.646)), (' C1090  VAL HG12', ' C1091  PHE  N  ', -0.4, (152.649, 132.216, 72.571)), (' A1090  VAL HG12', ' A1091  PHE  N  ', -0.4, (130.574, 152.273, 72.551))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
