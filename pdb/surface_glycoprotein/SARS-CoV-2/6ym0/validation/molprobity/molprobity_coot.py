# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('E', ' 411 ', 'ALA', 0.042679648160353606, (-53.516, -30.32, -24.072000000000006)), ('E', ' 521 ', 'PRO', 0.016549198522123082, (-68.453, -48.293, -8.073)), ('H', ' 118 ', 'ALA', 0.00204960038753113, (-25.662, -6.653, -0.542)), ('H', ' 153 ', 'PRO', 0.010695822366554824, (-26.62, -15.681000000000003, 9.23)), ('L', '  50 ', 'PRO', 0.05257810053006259, (-42.425, -26.605, 3.47)), ('L', '  90 ', 'ALA', 0.00688845894658163, (-44.992, -24.297, 13.304))]
data['omega'] = [('H', ' 132 ', 'SER', None, (-21.816000000000006, -11.161999999999997, 39.972)), ('H', ' 151 ', 'PRO', None, (-24.385, -10.333999999999996, 5.725000000000001)), ('H', ' 153 ', 'PRO', None, (-26.485, -15.446, 7.787000000000001)), ('H', ' 154 ', 'VAL', None, (-25.288, -15.595, 11.277)), ('L', '   8 ', 'PRO', None, (-57.353, -18.247, 12.201)), ('L', '  90 ', 'ALA', None, (-45.182, -24.337000000000007, 14.75)), ('L', ' 101 ', 'PRO', None, (-52.17000000000001, -18.94100000000001, -11.769)), ('L', ' 147 ', 'PRO', None, (-46.955, -15.929, 29.609))]
data['rota'] = [('E', ' 354 ', 'ASN', 0.10946765957301674, (-58.88600000000001, -44.903999999999996, -30.978000000000005)), ('E', ' 359 ', 'SER', 0.14866638486099706, (-62.063, -51.795, -16.494)), ('E', ' 362 ', 'VAL', 0.08008756060698563, (-55.524, -53.101, -11.463000000000003)), ('E', ' 368 ', 'LEU', 0.0, (-45.474, -46.077, -17.536)), ('E', ' 375 ', 'SER', 0.09455672935770958, (-40.319, -37.893000000000015, -25.166000000000007)), ('E', ' 376 ', 'THR', 0.027198673342354596, (-43.324000000000005, -36.312000000000005, -23.437)), ('E', ' 380 ', 'TYR', 0.045718958599109974, (-52.891, -32.47499999999999, -15.867000000000003)), ('E', ' 382 ', 'VAL', 0.2756353837463927, (-53.337, -35.831, -11.487)), ('E', ' 387 ', 'LEU', 0.019446705874976232, (-52.337, -43.014, -8.224)), ('E', ' 388 ', 'ASN', 0.12942033769325798, (-51.161, -46.529, -7.402)), ('E', ' 390 ', 'LEU', 0.24703947007654048, (-56.153000000000006, -44.755, -5.857)), ('E', ' 399 ', 'SER', 0.10401100998670093, (-54.336, -43.63, -29.132)), ('E', ' 408 ', 'ARG', 0.0, (-47.98, -29.589, -27.845000000000006)), ('E', ' 409 ', 'GLN', 0.15244695481413878, (-51.508, -29.366, -29.265)), ('E', ' 441 ', 'LEU', 0.005724434300865916, (-42.263, -47.512, -37.164)), ('E', ' 444 ', 'LYS', 0.0, (-41.703, -45.64999999999999, -45.418)), ('E', ' 448 ', 'ASN', 0.2467496612635411, (-46.367, -43.119, -45.309)), ('E', ' 450 ', 'ASN', 0.05816591280303836, (-52.103, -44.085, -44.39700000000001)), ('E', ' 455 ', 'LEU', 0.009989607138221555, (-58.091, -30.188, -42.578)), ('E', ' 458 ', 'LYS', 0.0, (-67.808, -26.401, -40.37500000000001)), ('E', ' 466 ', 'ARG', 0.2695652171657061, (-64.788, -37.909, -32.952)), ('E', ' 477 ', 'SER', 0.0596202866972489, (-71.073, -19.712, -51.529)), ('E', ' 480 ', 'CYS', 0.012204796803416684, (-70.87, -28.891999999999992, -53.92500000000001)), ('E', ' 483 ', 'VAL', 0.02601642376016104, (-68.18, -33.339, -55.686)), ('E', ' 509 ', 'ARG', 0.27894981244446315, (-47.456, -42.024, -31.305000000000003)), ('E', ' 517 ', 'LEU', 0.0763648122503846, (-64.862, -40.687, -10.864)), ('H', '   1 ', 'GLN', 0.0, (-39.934, -40.976, -6.35)), ('H', '   5 ', 'VAL', 0.07632066672717655, (-30.943000000000012, -30.906, -5.119)), ('H', '  12 ', 'LYS', 0.10537246851739879, (-24.073, -11.16, -4.9430000000000005)), ('H', '  13 ', 'LYS', 0.007123156856716104, (-23.765, -7.398, -5.379)), ('H', '  22 ', 'CYS', 0.048986571936682446, (-32.512, -27.311, -9.115)), ('H', '  56 ', 'SER', 0.08808319050762606, (-40.30200000000001, -25.933, -21.448000000000004)), ('H', '  59 ', 'ARG', 0.0, (-46.214, -20.088, -16.307)), ('H', '  61 ', 'SER', 0.2451812222333468, (-47.178, -15.333, -11.19)), ('H', '  71 ', 'SER', 0.09351777049243877, (-35.631, -21.945, -17.868)), ('H', '  81 ', 'LEU', 0.0581944697076136, (-34.191, -19.490000000000006, -12.177)), ('H', '  84 ', 'SER', 0.11700873751052804, (-30.432, -10.169, -15.113)), ('H', '  93 ', 'ILE', 0.16326810451256674, (-34.465, -18.07, 0.24000000000000002)), ('H', ' 103 ', 'SER', 0.14747266494249014, (-52.589, -28.858000000000004, -11.038)), ('H', ' 113 ', 'THR', 0.05134799799933462, (-30.918, -21.841, -1.711)), ('H', ' 114 ', 'THR', 0.05794746810953901, (-30.359, -18.539, 0.105)), ('H', ' 116 ', 'THR', 0.17327255370732111, (-27.937, -12.348000000000003, -0.47000000000000003)), ('H', ' 117 ', 'VAL', 0.07636871499874749, (-27.634, -9.162, -2.517)), ('H', ' 120 ', 'THR', 0.13643827730735275, (-20.442, -8.313, 3.54)), ('H', ' 131 ', 'SER', 0.16005181913814706, (-22.401000000000003, -9.060000000000002, 37.679500000000004)), ('H', ' 133 ', 'LYS', 0.0, (-25.278, -10.847, 43.04500000000001)), ('H', ' 142 ', 'LEU', 0.049389438506612225, (-23.61, -14.982999999999997, 30.684000000000005)), ('H', ' 152 ', 'GLU', 0.099092945217567, (-27.52, -13.246, 8.057)), ('H', ' 160 ', 'SER', 0.24751276000575453, (-17.077, -25.964000000000006, 20.78600000000001)), ('H', ' 182 ', 'LEU', 0.018890134308899995, (-27.77, -10.472999999999997, 18.121)), ('H', ' 192 ', 'SER', 0.0800128937214225, (-19.183, -23.195999999999998, 37.877)), ('H', ' 201 ', 'ASN', 0.097241534582802, (-17.722, -19.795, 19.069)), ('H', ' 218 ', 'LYS', 0.12524943130088817, (-15.184, -8.99, 35.606)), ('L', '  10 ', 'SER', 0.05712052355941319, (-52.19, -16.732, 15.44)), ('L', '  18 ', 'ARG', 0.000946616604000581, (-57.745000000000005, -29.48100000000001, 19.144)), ('L', '  24 ', 'LYS', 0.0002750254485394438, (-61.261, -19.16, 2.591)), ('L', '  30 ', 'LEU', 0.0535511255343278, (-63.881, -28.358, -7.201)), ('L', '  33 ', 'SER', 0.10199791436331122, (-64.487, -35.14, -13.341000000000003)), ('L', '  36 ', 'LYS', 0.18316180133853707, (-62.455, -33.441, -5.291000000000002)), ('L', '  43 ', 'GLN', 0.0, (-46.411, -26.878000000000004, 7.556000000000001)), ('L', '  60 ', 'ARG', 0.2872171873087256, (-53.067, -37.26, 4.273)), ('L', '  61 ', 'GLU', 0.019204406061817638, (-49.56, -37.267, 2.801)), ('L', '  83 ', 'SER', 0.09563640788672316, (-54.284, -33.76200000000001, 20.412)), ('L', '  89 ', 'VAL', 0.003150532575091347, (-45.795, -25.771, 16.615000000000002)), ('L', '  95 ', 'GLN', 0.13212513708278723, (-52.345, -23.68, -0.991)), ('L', ' 111 ', 'GLU', 0.0, (-48.288, -22.137000000000004, 19.59700000000001)), ('L', ' 120 ', 'SER', 0.13719803633126565, (-35.735, -15.028, 35.576)), ('L', ' 132 ', 'LYS', 0.05329688550172689, (-12.985, 1.4380000000000002, 23.243)), ('L', ' 135 ', 'THR', 0.008159601566148922, (-20.545000000000005, 2.45, 21.634000000000007)), ('L', ' 146 ', 'TYR', 0.246226614161532, (-44.918, -17.268, 29.419)), ('L', ' 151 ', 'LYS', 0.2850857019917926, (-43.369, -4.796, 29.403)), ('L', ' 160 ', 'LEU', 0.030058480621051303, (-37.342, 6.396, 31.472000000000005)), ('L', ' 186 ', 'THR', 0.10331358290218673, (-27.72, 1.3740000000000006, 22.871)), ('L', ' 187 ', 'LEU', 0.024610966113194323, (-26.066, 4.713999999999999, 23.572)), ('L', ' 191 ', 'ASP', 0.005693134666335195, (-23.56, 9.202999999999998, 27.122)), ('L', ' 196 ', 'LYS', 0.016042411062962468, (-24.388, 5.748, 37.077)), ('L', ' 203 ', 'THR', 0.13129616232449381, (-43.514, -6.182, 34.181000000000004)), ('L', ' 209 ', 'SER', 0.19679550447993452, (-45.129, -6.844000000000001, 41.092)), ('L', ' 220 ', 'CYS', 0.11832193021624177, (-18.946, -5.552, 40.40900000000001))]
data['cbeta'] = [('H', ' 131 ', 'SER', 'A', 2.411152739116205, (-22.03300000000001, -9.665000000000003, 37.71600000000001)), ('H', ' 131 ', 'SER', 'B', 1.2400495476888675, (-23.521000000000008, -9.461000000000004, 37.666))]
data['probe'] = [(' H  22  CYS  SG ', ' H  96  CYS  SG ', -1.306, (-36.553, -27.504, -7.681)), (' E 366  SER  HA ', ' E 369  TYR  CE1', -1.279, (-45.533, -45.227, -12.841)), (' L 140  CYS  SG ', ' L 200  CYS  SG ', -1.264, (-34.488, -5.734, 30.968)), (' L 146  TYR  CG ', ' L 147  PRO  HA ', -1.17, (-46.724, -17.945, 27.558)), (' H 150  PHE  CE1', ' H 151  PRO  HB3', -1.158, (-27.234, -8.772, 4.102)), (' H 116  THR HG21', ' H 151  PRO  CG ', -1.022, (-25.725, -11.906, 3.204)), (' E 366  SER  HA ', ' E 369  TYR  CZ ', -1.018, (-44.128, -45.575, -12.102)), (' H 116  THR HG21', ' H 151  PRO  HG3', -1.006, (-25.566, -11.923, 2.997)), (' H 150  PHE  CD1', ' H 151  PRO  HB3', -0.941, (-26.228, -8.772, 4.102)), (' E 366  SER  CA ', ' E 369  TYR  CE1', -0.928, (-45.543, -46.172, -13.015)), (' L  39  LEU HD22', ' L  95  GLN  O  ', -0.896, (-54.796, -25.28, -2.116)), (' L  86  ALA  O  ', ' L  89  VAL HG12', -0.874, (-44.844, -27.248, 18.961)), (' E 347  PHE  CE2', ' E 509  ARG  HG2', -0.873, (-49.588, -44.463, -31.606)), (' L  43  GLN  HB3', ' L  53  LEU HD11', -0.868, (-47.687, -29.307, 7.782)), (' E 394  ASN  HB2', ' E 516  GLU  OE2', -0.865, (-65.588, -44.156, -16.949)), (' E 401  VAL HG21', ' E 451  TYR  CE1', -0.865, (-49.69, -43.321, -37.444)), (' L 146  TYR  CD1', ' L 147  PRO  HA ', -0.855, (-46.798, -17.188, 26.603)), (' E 378  LYS  CD ', ' H  52  TYR  CE2', -0.844, (-44.899, -32.201, -21.683)), (' H 144  CYS  SG ', ' H 200  CYS  SG ', -0.838, (-19.252, -14.916, 22.334)), (' E 384  PRO  HA ', ' E 387  LEU HD21', -0.829, (-50.982, -40.265, -12.283)), (' L  31  TYR  CE1', ' L  98  TYR  CD1', -0.82, (-59.968, -26.798, -10.631)), (' L 146  TYR  CD2', ' L 147  PRO  HA ', -0.813, (-47.479, -17.75, 27.822)), (' L 187  LEU  N  ', ' L 187  LEU HD23', -0.81, (-26.875, 3.064, 24.195)), (' H 182  LEU  O  ', ' H 182  LEU HD23', -0.81, (-25.591, -11.969, 18.517)), (' E 378  LYS  HD2', ' H  52  TYR  CE2', -0.802, (-44.781, -32.128, -20.255)), (' L  52  LEU HD23', ' L  61  GLU  HG3', -0.8, (-47.833, -34.348, -0.06)), (' H 143  GLY  HA2', ' H 158  TRP  CH2', -0.788, (-22.539, -16.007, 26.233)), (' H 182  LEU  C  ', ' H 182  LEU HD23', -0.785, (-26.466, -11.468, 18.721)), (' E 405  ASP  OD2', ' E 504  GLY  O  ', -0.784, (-43.091, -30.676, -36.889)), (' L 146  TYR  CG ', ' L 147  PRO  CA ', -0.781, (-47.021, -16.811, 28.181)), (' L  31  TYR  HE1', ' L  98  TYR  CD1', -0.772, (-59.406, -26.665, -10.452)), (' L 146  TYR  CD2', ' L 147  PRO  CA ', -0.767, (-47.901, -17.294, 27.953)), (' H 116  THR  CG2', ' H 151  PRO  HG3', -0.765, (-26.403, -10.997, 2.191)), (' E 517  LEU  HB2', ' L  34  ILE HG22', -0.757, (-62.855, -39.366, -10.848)), (' E 448  ASN  ND2', ' E 450  ASN  OD1', -0.75, (-48.707, -45.279, -44.958)), (' E 390  LEU HD21', ' L  56  TRP  CZ3', -0.748, (-56.756, -39.514, -6.278)), (' E 366  SER  CA ', ' E 369  TYR  CZ ', -0.738, (-44.479, -46.623, -11.963)), (' H 102  ILE HG13', ' H 103  SER  H  ', -0.73, (-51.369, -27.801, -12.395)), (' L 192  TYR  CD1', ' L 198  TYR  CZ ', -0.728, (-24.431, 3.413, 30.116)), (' E 408  ARG  HG2', ' E 408  ARG  NH2', -0.723, (-45.327, -28.353, -30.262)), (' H 143  GLY  HA2', ' H 158  TRP  HH2', -0.722, (-22.179, -15.849, 26.403)), (' L  18  ARG  HG2', ' L  18  ARG  O  ', -0.721, (-59.181, -27.983, 17.94)), (' H 150  PHE  CD1', ' H 151  PRO  CB ', -0.716, (-26.182, -9.643, 5.326)), (' L 146  TYR  CE2', ' L 147  PRO  HB3', -0.704, (-49.287, -16.642, 27.521)), (' E 347  PHE  CD2', ' E 509  ARG  HG2', -0.703, (-49.485, -44.958, -32.366)), (' E 390  LEU HD21', ' L  56  TRP  HZ3', -0.702, (-57.115, -39.229, -5.329)), (' H 102  ILE HG13', ' H 103  SER  N  ', -0.701, (-51.532, -27.925, -12.571)), (' L  95  GLN  HB2', ' L 104  PHE  CD2', -0.699, (-49.786, -22.803, -1.238)), (' E 378  LYS  HD2', ' H  52  TYR  CD2', -0.693, (-45.186, -31.036, -20.755)), (' L  31  TYR  CE1', ' L  98  TYR  CE1', -0.69, (-60.593, -27.414, -10.408)), (' E 378  LYS  HD3', ' H  52  TYR  CE2', -0.689, (-44.538, -31.545, -22.009)), (' H  11  VAL  O  ', ' H  11  VAL HG23', -0.682, (-21.256, -12.823, -2.67)), (' L  86  ALA  O  ', ' L  89  VAL  CG1', -0.677, (-44.469, -27.382, 18.494)), (' E 386  LYS  HE3', ' H 107  ASP  OD1', -0.675, (-46.894, -36.532, -4.321)), (' E 486  PHE  CZ ', ' E 487  ASN  OD1', -0.656, (-64.433, -20.863, -54.994)), (' L 125  PRO  HB3', ' L 215  PHE  CZ ', -0.641, (-23.1, -2.478, 32.843)), (' H  68  VAL HG12', ' H  83  TRP  CD1', -0.641, (-35.482, -11.96, -10.861)), (' E 363  ALA  HB3', ' E 365  TYR  CE2', -0.638, (-54.084, -47.324, -12.72)), (' H 150  PHE  CD1', ' H 151  PRO  CA ', -0.633, (-25.424, -9.579, 5.328)), (' E 366  SER  HA ', ' E 369  TYR  CD1', -0.628, (-45.159, -45.356, -13.286)), (' H  88  ALA  HA ', ' H 117  VAL HG22', -0.626, (-30.695, -6.727, -2.84)), (' L  67  ARG  HB2', ' L  82  SER  O  ', -0.626, (-54.193, -34.719, 16.355)), (' L  56  TRP  O  ', ' L  57  ALA  HB3', -0.625, (-60.118, -32.294, -0.176)), (' E 401  VAL HG21', ' E 451  TYR  CZ ', -0.619, (-49.69, -43.821, -37.36)), (' E 437  ASN HD21', ' E 506  GLN HE21', -0.618, (-39.32, -39.101, -35.463)), (' L 192  TYR  HA ', ' L 198  TYR  OH ', -0.613, (-24.005, 4.965, 30.172)), (' E 347  PHE  CZ ', ' E 509  ARG  HG2', -0.604, (-48.634, -45.576, -30.794)), (' E 408  ARG  HG2', ' E 408  ARG HH21', -0.603, (-45.54, -27.771, -30.734)), (' H  29  PHE  CE2', ' H  77  ASN  HA ', -0.602, (-35.27, -33.254, -15.665)), (' E 366  SER  CB ', ' E 369  TYR  CZ ', -0.598, (-44.219, -46.804, -11.485)), (' E 401  VAL  CG2', ' E 451  TYR  CE1', -0.584, (-50.39, -42.958, -36.605)), (' L 125  PRO  HB3', ' L 215  PHE  CE2', -0.583, (-22.782, -2.293, 33.271)), (' L 146  TYR  C  ', ' L 146  TYR  CD2', -0.582, (-46.842, -17.074, 29.408)), (' H 150  PHE  CG ', ' H 151  PRO  HA ', -0.574, (-25.759, -9.068, 6.283)), (' H 130  PRO  O  ', ' H 131 ASER  HB3', -0.57, (-21.438, -10.345, 36.448)), (' H   6  GLN  HB3', ' H 113  THR HG22', -0.57, (-31.346, -24.132, -4.311)), (' L 219  GLU  O  ', ' L 220  CYS  HB3', -0.569, (-16.693, -4.279, 39.792)), (' E 403  ARG  HG2', ' E 406  GLU  OE1', -0.567, (-49.59, -33.329, -37.091)), (' L 146  TYR  CD2', ' L 147  PRO  N  ', -0.565, (-47.216, -17.391, 29.164)), (' E 366  SER  HB2', ' E 369  TYR  OH ', -0.565, (-44.533, -46.473, -10.541)), (' H 188  VAL HG21', ' H 198  TYR  CZ ', -0.564, (-21.259, -21.334, 32.95)), (' H 117  VAL  O  ', ' H 118  ALA  HB2', -0.563, (-28.025, -6.96, -0.476)), (' E 366  SER  HB2', ' E 369  TYR  CZ ', -0.562, (-43.907, -46.775, -10.963)), (' E 366  SER  CB ', ' E 369  TYR  OH ', -0.559, (-44.839, -46.421, -10.672)), (' H 132  SER  C  ', ' H 133  LYS  HG3', -0.556, (-24.056, -10.261, 40.97)), (' L 155  LYS  HG2', ' L 160  LEU HD22', -0.553, (-37.441, 4.665, 33.601)), (' E 363  ALA  CB ', ' E 365  TYR  CZ ', -0.551, (-54.399, -47.416, -13.5)), (' L 100  THR  HA ', ' L 101  PRO  C  ', -0.547, (-51.246, -20.78, -10.698)), (' E 380  TYR  CD1', ' E 380  TYR  N  ', -0.545, (-51.814, -33.363, -17.479)), (' E 364  ASP  OD1', ' E 367  VAL HG23', -0.543, (-46.21, -51.584, -13.862)), (' L  52  LEU HD23', ' L  61  GLU  CG ', -0.537, (-48.24, -35.07, 0.015)), (' L 192  TYR  CD1', ' L 198  TYR  OH ', -0.536, (-23.98, 4.245, 30.734)), (' L 186  THR  C  ', ' L 187  LEU HD23', -0.53, (-27.113, 2.616, 24.175)), (' E 383  SER  HA ', ' H 100  SER  O  ', -0.525, (-48.683, -35.66, -11.08)), (' L  27  GLN  CG ', ' L  28  SER  N  ', -0.525, (-64.071, -20.58, -7.362)), (' E 377  PHE  CG ', ' H  31  THR HG22', -0.524, (-45.477, -38.89, -17.793)), (' L  95  GLN  HB2', ' L 104  PHE  CE2', -0.523, (-49.104, -23.609, -0.768)), (' H  11  VAL  CG2', ' H  11  VAL  O  ', -0.521, (-21.634, -13.311, -2.535)), (' H  22  CYS  CB ', ' H  96  CYS  SG ', -0.519, (-34.836, -26.902, -7.795)), (' L 190  ALA  O  ', ' L 194  LYS  HG3', -0.516, (-21.393, 10.563, 28.62)), (' H  88  ALA  HA ', ' H 117  VAL  CG2', -0.515, (-30.048, -6.541, -3.261)), (' H  68  VAL HG12', ' H  83  TRP  NE1', -0.513, (-35.73, -12.427, -10.021)), (' E 384  PRO  HA ', ' E 387  LEU  CD2', -0.511, (-51.066, -41.066, -11.563)), (' L 192  TYR  CE2', ' L 217  ARG  HD3', -0.51, (-21.094, 3.522, 31.938)), (' L  52  LEU  CD2', ' L  61  GLU  HG3', -0.51, (-48.458, -33.966, 0.255)), (' E 383  SER  HB3', ' H 100  SER  HG ', -0.509, (-47.993, -36.942, -9.533)), (' L 142  LEU  N  ', ' L 142  LEU HD12', -0.508, (-34.921, -10.928, 30.102)), (' H 188  VAL HG21', ' H 198  TYR  OH ', -0.508, (-21.492, -22.019, 33.403)), (' L 187  LEU  CD2', ' L 187  LEU  N  ', -0.508, (-27.106, 3.49, 24.955)), (' L  53  LEU  HA ', ' L  64  VAL HG21', -0.503, (-48.469, -34.41, 5.727)), (' L   7  SER  HA ', ' L   8  PRO  C  ', -0.501, (-56.054, -16.96, 10.574)), (' H 117  VAL  CG2', ' H 117  VAL  O  ', -0.498, (-28.817, -7.554, -2.437)), (' H 151  PRO  O  ', ' H 204  HIS  HE1', -0.498, (-24.188, -12.792, 7.543)), (' E 506  GLN  HB3', ' E 507  PRO  HD2', -0.494, (-41.36, -39.554, -37.854)), (' E 377  PHE  CD1', ' H  31  THR HG22', -0.492, (-45.635, -39.003, -17.627)), (' L 153  GLN  HG2', ' L 160  LEU HD13', -0.49, (-39.529, 2.998, 31.675)), (' L 146  TYR  CZ ', ' L 147  PRO  HB3', -0.486, (-49.017, -17.19, 27.281)), (' H 182  LEU  C  ', ' H 182  LEU  CD2', -0.485, (-27.002, -11.884, 18.763)), (' L 176  ASP  C  ', ' L 176  ASP  OD1', -0.484, (-41.221, -24.868, 27.831)), (' H  30  ILE HG23', ' H  31  THR HG23', -0.483, (-43.19, -39.113, -16.895)), (' H 103  SER  N  ', ' L 102  TYR  OH ', -0.479, (-51.308, -27.907, -11.479)), (' L  31  TYR  CD1', ' L  38  TYR  CE2', -0.479, (-59.218, -30.348, -9.69)), (' H 150  PHE  CE1', ' H 151  PRO  CB ', -0.478, (-27.356, -9.661, 4.929)), (' H  33  TRP  CD1', ' H  33  TRP  N  ', -0.477, (-44.077, -31.478, -14.051)), (' E 363  ALA  CB ', ' E 365  TYR  CE2', -0.476, (-53.442, -47.899, -13.177)), (' H 205  LYS  N  ', ' H 206  PRO  CD ', -0.472, (-20.826, -16.608, 6.753)), (' E 390  LEU HD21', ' L  56  TRP  CH2', -0.47, (-56.607, -39.076, -6.543)), (' H  69  THR  HB ', ' H  82  GLN  HG2', -0.47, (-34.087, -16.016, -16.5)), (' E 393  THR HG21', ' E 518  LEU  H  ', -0.465, (-67.22, -43.099, -10.73)), (' E 365  TYR  O  ', ' E 369  TYR  CD1', -0.464, (-46.292, -45.047, -14.121)), (' E 354  ASN HD22', ' E 355  ARG  N  ', -0.464, (-59.971, -46.184, -29.514)), (' E 404  GLY  C  ', ' E 406  GLU  H  ', -0.462, (-45.663, -32.005, -33.344)), (' H  68  VAL  CG1', ' H  83  TRP  NE1', -0.462, (-35.858, -12.652, -9.843)), (' E 363  ALA  HB3', ' E 365  TYR  CZ ', -0.461, (-54.141, -47.364, -12.971)), (' E 362  VAL  O  ', ' E 362  VAL HG22', -0.46, (-52.982, -53.694, -11.65)), (' L 160  LEU  N  ', ' L 160  LEU HD23', -0.459, (-37.709, 6.681, 33.425)), (' L  31  TYR  CD1', ' L  98  TYR  CE1', -0.454, (-60.676, -27.948, -10.772)), (' E 455  LEU  CD1', ' E 455  LEU  O  ', -0.454, (-57.797, -27.902, -43.053)), (' E 365  TYR  CD2', ' E 387  LEU HD12', -0.453, (-51.632, -44.691, -11.494)), (' E 368  LEU  HA ', ' E 368  LEU HD12', -0.452, (-45.559, -46.607, -19.167)), (' L 141  LEU  C  ', ' L 142  LEU HD12', -0.452, (-34.738, -10.336, 30.297)), (' E 437  ASN HD21', ' E 506  GLN  NE2', -0.45, (-38.879, -38.344, -35.685)), (' E 436  TRP  CZ2', ' E 509  ARG  HB3', -0.449, (-46.912, -44.635, -29.55)), (' E 382  VAL  C  ', ' H 104  THR HG21', -0.448, (-51.226, -34.693, -10.911)), (' H 117  VAL  O  ', ' H 118  ALA  CB ', -0.447, (-27.381, -6.894, -0.257)), (' H 147  LYS  O  ', ' H 148  ASP  HB2', -0.447, (-21.006, -5.497, 14.648)), (' E 403  ARG  NH1', ' E 505  TYR  CE2', -0.445, (-45.006, -29.531, -40.379)), (' H 204  HIS  HD2', ' H 207  SER  OG ', -0.444, (-18.788, -12.481, 8.207)), (' H 187  THR HG21', ' L 143  ASN  ND2', -0.444, (-31.068, -18.627, 32.36)), (' L   7  SER  HB2', ' L   8  PRO  HA ', -0.444, (-57.667, -15.996, 11.494)), (' E 366  SER  N  ', ' E 369  TYR  CE1', -0.443, (-46.348, -46.276, -12.567)), (' L 118  ALA  HB1', ' L 207  LEU  CD2', -0.443, (-41.888, -13.122, 37.522)), (' H 117  VAL  O  ', ' H 117  VAL HG22', -0.443, (-29.244, -7.688, -2.172)), (' L  42  TYR  HE1', ' L  95  GLN HE21', -0.443, (-49.962, -26.433, -1.618)), (' L 192  TYR  CE1', ' L 198  TYR  CE2', -0.441, (-24.236, 2.639, 31.874)), (' E 411  ALA  N  ', ' E 425  LEU HD12', -0.439, (-54.709, -32.002, -24.467)), (' L  45  LYS  O  ', ' L  46  PRO  C  ', -0.439, (-37.804, -23.973, 9.488)), (' E 359  SER  HB3', ' E 360  ASN HD22', -0.439, (-63.979, -53.402, -16.587)), (' H  33  TRP  CD2', ' H  52  TYR  HB2', -0.437, (-45.332, -29.101, -16.774)), (' L  56  TRP  O  ', ' L  57  ALA  CB ', -0.437, (-59.676, -32.039, -0.165)), (' E 444  LYS  HB2', ' E 444  LYS  HE3', -0.437, (-44.812, -46.303, -45.512)), (' E 520  ALA  O  ', ' E 521  PRO  C  ', -0.435, (-67.57, -46.732, -8.685)), (' E 455  LEU  O  ', ' E 455  LEU HD12', -0.435, (-58.246, -27.798, -42.835)), (' E 365  TYR  O  ', ' E 368  LEU  HB2', -0.435, (-47.04, -45.771, -15.342)), (' H 158  TRP  CZ3', ' H 200  CYS  HB3', -0.433, (-20.146, -18.178, 24.826)), (' E 403  ARG  O  ', ' E 404  GLY  C  ', -0.433, (-45.46, -32.792, -33.597)), (' L 204  HIS  CD2', ' L 206  GLY  H  ', -0.429, (-45.896, -13.005, 34.545)), (' L 146  TYR  HA ', ' L 147  PRO  C  ', -0.429, (-45.028, -16.082, 28.269)), (' H  55  ASP  C  ', ' H  55  ASP  OD1', -0.429, (-42.141, -27.768, -22.802)), (' H 195  THR  OG1', ' H 196  GLN  N  ', -0.429, (-15.37, -24.829, 36.991)), (' E 346  ARG  HB2', ' E 346  ARG  NH1', -0.429, (-51.095, -52.096, -38.619)), (' H 131 ASER  HB2', ' H 132  SER  H  ', -0.426, (-20.971, -9.845, 39.088)), (' E 474  GLN  HG2', ' E 474  GLN  O  ', -0.423, (-69.068, -24.098, -48.24)), (' H 133  LYS  C  ', ' H 133  LYS  HD3', -0.422, (-26.357, -11.587, 41.933)), (' L  27  GLN  HG2', ' L  28  SER  O  ', -0.422, (-62.649, -21.866, -7.396)), (' H  38  ARG  HB2', ' H  48  MET  SD ', -0.422, (-39.418, -16.404, -5.432)), (' L 196  LYS  HB2', ' L 196  LYS  HE3', -0.421, (-22.586, 7.201, 37.773)), (' L 160  LEU  CD2', ' L 160  LEU  N  ', -0.421, (-37.735, 6.465, 33.214)), (' H 150  PHE  CD1', ' H 151  PRO  HA ', -0.42, (-25.915, -8.682, 5.903)), (' E 418  ILE  HA ', ' E 422  ASN  HB2', -0.419, (-56.829, -32.427, -34.989)), (' E 408  ARG  CG ', ' E 408  ARG HH21', -0.417, (-45.913, -27.7, -30.369)), (' E 455  LEU  C  ', ' E 455  LEU  CD1', -0.416, (-57.747, -28.502, -43.179)), (' E 342  PHE  CZ ', ' E 511  VAL HG11', -0.415, (-51.308, -44.881, -23.438)), (' L  85  GLN  HA ', ' L  85  GLN  NE2', -0.415, (-48.356, -32.716, 21.778)), (' L 192  TYR  HD1', ' L 198  TYR  CZ ', -0.414, (-24.588, 3.209, 30.107)), (' L  39  LEU HD13', ' L  40  ALA  N  ', -0.413, (-55.092, -27.295, 0.067)), (' E 378  LYS  CD ', ' H  52  TYR  CD2', -0.412, (-45.102, -30.912, -20.985)), (' L 118  ALA  HB1', ' L 207  LEU HD21', -0.409, (-41.384, -13.233, 37.517)), (' H 187  THR HG21', ' L 143  ASN HD22', -0.409, (-31.342, -18.516, 32.739)), (' L  27  GLN  HG2', ' L  28  SER  N  ', -0.408, (-63.516, -20.972, -7.239)), (' H   6  GLN  HG2', ' H  22  CYS  HB2', -0.407, (-33.283, -26.339, -6.504)), (' E 441  LEU  HA ', ' E 441  LEU HD22', -0.405, (-41.994, -49.225, -37.241)), (' L  43  GLN  HB2', ' L  92  TYR  CE2', -0.405, (-47.769, -27.59, 9.824)), (' L  16  GLY  C  ', ' L  83  SER  HA ', -0.404, (-54.716, -32.797, 22.313)), (' E 407  VAL  C  ', ' E 409  GLN  H  ', -0.403, (-49.437, -30.904, -29.174)), (' E 335  LEU HD12', ' E 362  VAL HG22', -0.403, (-52.698, -54.564, -11.497)), (' H  12  LYS  HA ', ' H  12  LYS  HD2', -0.401, (-22.87, -12.368, -5.96)), (' E 342  PHE  CE1', ' E 511  VAL HG11', -0.401, (-51.259, -45.503, -23.195)), (' E 453  TYR  CE1', ' E 455  LEU HD22', -0.4, (-54.567, -31.15, -43.207))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
