# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 387 ', 'LEU', 0.0, (-4.631999999999998, 1.822, -94.125)), ('H', ' 134 ', 'SER', 0.014106226981982299, (-68.28299999999999, -4.477000000000002, -80.591))]
data['omega'] = [('C', ' 153 ', 'PRO', None, (16.154, 12.596, -32.067)), ('C', ' 155 ', 'PRO', None, (11.520000000000001, 8.464, -31.291)), ('D', '   8 ', 'PRO', None, (-18.595, 16.065999999999995, -38.206)), ('D', '  30 ', 'SER', None, (-19.703000000000003, 4.895, -55.556000000000004)), ('D', '  95 ', 'PRO', None, (-6.214, 4.715, -61.75)), ('D', ' 143 ', 'PRO', None, (-13.464000000000002, 17.6, -16.664)), ('H', ' 134 ', 'SER', None, (-68.15899999999999, -5.351, -79.44)), ('H', ' 153 ', 'PRO', None, (-64.132, -11.419, -47.295000000000016)), ('H', ' 155 ', 'PRO', None, (-60.098, -15.122, -50.45000000000001)), ('L', '   8 ', 'PRO', None, (-30.411, -6.029, -56.427)), ('L', '  30 ', 'SER', None, (-21.193000000000005, -16.629, -41.329)), ('L', '  95 ', 'PRO', None, (-30.327000000000012, -17.476, -29.911)), ('L', ' 143 ', 'PRO', None, (-43.84900000000002, -3.525, -72.478))]
data['rota'] = [('L', '  93 ', 'SER', 0.2984172240123731, (-28.289000000000012, -16.65500000000001, -34.854)), ('C', ' 119 ', 'SER', 0.0026799951228895225, (19.21, 18.796999999999997, -40.347)), ('D', ' 109 ', 'LYS', 0.005277314319898274, (-18.006999999999998, 12.698, -22.055000000000007))]
data['cbeta'] = [('C', ' 119 ', 'SER', ' ', 0.2648674695651443, (19.250999999999994, 20.176, -40.855)), ('D', ' 109 ', 'LYS', ' ', 0.2719702134931826, (-18.725, 13.957, -22.499))]
data['probe'] = [(' A 384  PRO  HA ', ' A 387  LEU HD23', -0.884, (-17.494, -18.369, -5.686)), (' B 386  LYS  O  ', ' B 388  ASN  N  ', -0.838, (-6.393, 1.437, -94.653)), (' L   7  SER  HB2', ' L  24  ARG HH22', -0.83, (-28.363, -4.025, -52.804)), (' D  40  PRO  HG2', ' D 167  GLU  HG2', -0.823, (-5.861, 10.565, -27.887)), (' C  30  SER  CB ', ' C  73  ASN HD22', -0.821, (5.509, -13.141, -53.054)), (' B 337  PRO  HB2', ' B 340  GLU  HG3', -0.812, (-20.279, -11.901, -88.392)), (' L 187  ASP  HA ', ' L 190  LYS  HE2', -0.809, (-75.093, 10.719, -64.602)), (' A 337  PRO  HB2', ' A 340  GLU  HG3', -0.771, (-5.947, -32.338, -12.345)), (' C 192  SER  HA ', ' C 195  LEU HD13', -0.757, (4.126, 3.317, -1.375)), (' D 157  GLN  OE1', ' D 160  ASN  ND2', -0.756, (9.719, 31.205, -15.549)), (' C  96  ALA  HB3', ' C 106  LEU HD23', -0.749, (-2.601, -1.2, -45.217)), (' D 153  ASP  OD2', ' D 191  HIS  HB3', -0.744, (11.266, 32.705, -6.127)), (' C  30  SER  HB3', ' C  73  ASN HD22', -0.735, (6.307, -13.725, -52.276)), (' H  48  VAL HG23', ' H  63  VAL HG21', -0.729, (-44.512, -15.183, -34.516)), (' B 362  VAL HG13', ' B 526  GLY  HA2', -0.713, (-11.802, -6.105, -98.061)), (' B 450  ASN  ND2', ' L  18  ARG  O  ', -0.707, (-27.199, -11.46, -66.471)), (' A 384  PRO  HA ', ' A 387  LEU  CD2', -0.706, (-17.635, -18.763, -6.186)), (' C  30  SER  HB2', ' C  73  ASN HD22', -0.666, (5.886, -14.071, -53.095)), (' C  30  SER  HB3', ' C  73  ASN  ND2', -0.665, (6.297, -12.676, -52.739)), (' H 132  PRO  HG3', ' H 144  LEU  HB3', -0.653, (-67.613, -12.837, -75.349)), (' H 132  PRO  HD2', ' H 218  GLU  HB2', -0.651, (-71.632, -12.143, -75.223)), (' B 353  TRP  O  ', ' B 466  ARG  NH2', -0.648, (-11.638, -14.949, -74.543)), (' D  37  GLN  HB2', ' D  47  LEU HD11', -0.638, (-12.952, 2.744, -35.912)), (' L 115  PRO  HB3', ' L 141  PHE  HB3', -0.621, (-51.044, -4.546, -74.62)), (' C 171  THR HG23', ' C 184  LEU HD21', -0.618, (6.653, 8.471, -21.631)), (' A 495  TYR  O  ', ' A 505  TYR  OH ', -0.616, (-19.888, -23.814, -38.256)), (' L  83  PHE  HB3', ' L 108  ILE HG12', -0.614, (-40.314, -14.17, -66.1)), (' H  90  THR HG23', ' H 116  THR  HA ', -0.612, (-56.26, -11.079, -43.059)), (' H 134  SER  HB2', ' H 135  LYS  HD2', -0.606, (-67.024, -3.485, -82.408)), (' A 439  ASN  O  ', ' A 443  SER  OG ', -0.602, (-8.398, -19.425, -33.964)), (' C  27  PHE  O  ', ' C  76  ASN  ND2', -0.599, (3.602, -13.437, -43.94)), (' C  11  LEU  HB2', ' C 153  PRO  HG3', -0.599, (16.254, 11.46, -36.147)), (' C 136  SER  HA ', ' D 118  PHE  CD2', -0.597, (1.751, 13.26, -4.772)), (' B 365  TYR  HD1', ' B 388  ASN  HB2', -0.593, (-9.321, -2.343, -93.315)), (' B 363  ALA  O  ', ' B 526  GLY  HA3', -0.591, (-11.705, -5.059, -95.479)), (' H 215  LYS  HE2', ' L 125  GLU  OE2', -0.586, (-75.975, -11.923, -63.463)), (' C 125  PRO  HB3', ' C 151  TYR  HB3', -0.585, (16.048, 11.98, -24.727)), (' B 446  GLY  HA3', ' L   8  PRO  HB3', -0.584, (-30.723, -3.238, -58.302)), (' L  79  GLN  HG3', ' L  80  PRO  HD2', -0.583, (-37.149, -21.027, -70.311)), (' H  33  TYR  HB2', ' H  98  VAL  HB ', -0.577, (-36.819, -28.122, -38.364)), (' H 104  ASP  H  ', ' L  91  SER  HB2', -0.575, (-30.247, -21.759, -40.444)), (' D 169  ASP  HB3', ' D 172  ASP  OD2', -0.575, (-9.676, 6.854, -17.686)), (' A 371  SER  OG ', ' A 373  SER  OG ', -0.572, (-7.717, -15.756, -16.38)), (' B 359  SER  HB3', ' B 360  ASN  ND2', -0.565, (-10.68, -17.78, -93.283)), (' D 163  GLU  HB2', ' D 177  LEU HD21', -0.562, (0.26, 20.574, -18.918)), (' D 152  VAL HG12', ' D 157  GLN  HG2', -0.559, (8.53, 32.089, -10.995)), (' B 406  GLU  OE1', ' B 495  TYR  OH ', -0.557, (-12.794, -3.49, -64.978)), (' H 125  PRO  HB3', ' H 151  TYR  HB3', -0.555, (-67.428, -10.596, -54.159)), (' L 108  ILE  O  ', ' L 168  GLN  NE2', -0.554, (-41.212, -10.411, -68.672)), (' L  11  LEU HD21', ' L  19  VAL HG13', -0.55, (-31.305, -11.045, -62.739)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.545, (-35.783, -19.457, -56.791)), (' D 115  PRO  HB3', ' D 141  PHE  HB3', -0.542, (-7.769, 15.855, -12.616)), (' C 179  SER  HB3', ' C 181  LEU HD12', -0.541, (16.973, 21.718, -26.093)), (' D  21  ILE HD13', ' D 104  THR  OG1', -0.541, (-16.029, 11.416, -36.756)), (' D  63  SER  OG ', ' D  74  THR  OG1', -0.54, (-24.677, 2.127, -37.146)), (' A 484  GLU  OE2', ' A 490  PHE  HB2', -0.536, (-25.419, -38.204, -41.655)), (' A 362  VAL  HB ', ' A 526  GLY  HA2', -0.534, (-8.265, -26.882, -0.274)), (' B 452  LEU HD11', ' L  18  ARG HH22', -0.533, (-20.585, -13.628, -62.551)), (' H 166  THR  O  ', ' H 169  VAL HG12', -0.529, (-56.694, -20.232, -69.684)), (' B 495  TYR  O  ', ' B 505  TYR  OH ', -0.529, (-18.822, -2.104, -58.807)), (' H 140  GLY  O  ', ' H 192  SER  N  ', -0.524, (-63.18, -14.951, -82.975)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.522, (-23.287, -30.773, -26.379)), (' A 468  ILE  O  ', ' A 468  ILE HG13', -0.52, (-21.281, -41.712, -29.609)), (' B 493  GLN HE21', ' B 494  SER  H  ', -0.52, (-17.254, -8.846, -56.635)), (' H 136  SER  O  ', ' H 138  SER  N  ', -0.519, (-63.217, -7.806, -86.662)), (' C  12  VAL HG11', ' C  85  LEU HD13', -0.518, (14.63, 10.419, -44.95)), (' A 384  PRO  CA ', ' A 387  LEU HD23', -0.518, (-18.655, -17.845, -5.502)), (' B 359  SER  HB3', ' B 360  ASN HD22', -0.517, (-11.244, -17.816, -93.205)), (' A 369  TYR  CE1', ' A 384  PRO  HB2', -0.516, (-17.327, -15.401, -8.174)), (' L  45  LYS  HD2', ' L  46  LEU  N  ', -0.515, (-38.121, -24.43, -52.367)), (' B 445  VAL HG22', ' B 499  PRO  HG3', -0.515, (-31.284, 2.354, -63.375)), (' C 132  PRO  HG3', ' C 144  LEU  HB3', -0.515, (8.034, 7.019, -6.171)), (' A 393  THR HG21', ' A 518  LEU HD12', -0.515, (-20.903, -37.64, -1.068)), (' C 104  ASP  H  ', ' D  91  SER  HB2', -0.511, (-10.5, -0.108, -52.272)), (' C 136  SER  HA ', ' D 118  PHE  HD2', -0.51, (1.161, 13.882, -4.678)), (' B 439  ASN  O  ', ' B 443  SER  HB2', -0.51, (-26.807, 1.038, -68.201)), (' A 364  ASP  OD1', ' A 366  SER  OG ', -0.505, (-8.701, -18.639, -3.535)), (' A 389  ASP  N  ', ' A 389  ASP  OD2', -0.502, (-15.488, -20.355, 1.489)), (' D 160  ASN  N  ', ' D 160  ASN  OD1', -0.501, (8.291, 29.78, -18.09)), (' B 395  VAL HG22', ' B 515  PHE  HD1', -0.497, (-6.471, -8.019, -88.426)), (' L 165  VAL HG22', ' L 177  LEU HD12', -0.496, (-51.932, -3.446, -65.21)), (' L   7  SER  HB2', ' L  24  ARG  NH2', -0.493, (-28.008, -4.362, -51.782)), (' A 379  CYS  HB3', ' A 382  VAL HG13', -0.491, (-21.617, -20.589, -7.261)), (' C 194  SER  OG ', ' C 200  TYR  OH ', -0.486, (5.141, -0.608, -3.981)), (' A 379  CYS  SG ', ' A 384  PRO  HB3', -0.485, (-19.266, -17.632, -8.702)), (' A 338  PHE  HE2', ' A 363  ALA  HB1', -0.482, (-10.238, -25.651, -6.415)), (' D 165  VAL HG22', ' D 177  LEU  HG ', -0.481, (-2.217, 18.671, -19.486)), (' D 152  VAL  O  ', ' D 155  ALA  HB3', -0.48, (7.605, 34.439, -8.615)), (' B 369  TYR  CE2', ' B 384  PRO  HB2', -0.478, (-8.376, 5.933, -87.712)), (' L 185  LYS  O  ', ' L 189  GLU  HG3', -0.476, (-77.781, 6.118, -65.755)), (' H 187  VAL HG21', ' L 137  LEU HD22', -0.476, (-61.011, -9.661, -71.678)), (' A 338  PHE  CE2', ' A 363  ALA  HB1', -0.475, (-10.545, -25.901, -6.963)), (' A 505  TYR  CE2', ' L  32  TYR  HE1', -0.474, (-21.339, -21.045, -38.971)), (' A 370  ASN  ND2', ' A 370  ASN  O  ', -0.474, (-7.354, -14.741, -9.481)), (' D 142  TYR  CG ', ' D 143  PRO  HA ', -0.469, (-13.693, 15.584, -18.396)), (' H 140  GLY  O  ', ' H 191  PRO  HA ', -0.467, (-61.999, -15.94, -82.799)), (' C  98  VAL HG22', ' C 106  LEU  HG ', -0.467, (-4.067, -2.066, -47.551)), (' H 158  VAL  HA ', ' H 203  ASN  O  ', -0.463, (-64.988, -19.665, -60.797)), (' L 168  GLN  HG3', ' L 175  TYR  CZ ', -0.463, (-44.302, -9.452, -66.735)), (' D  39  LYS  HE3', ' D  81  GLU  O  ', -0.462, (-11.212, 3.195, -27.564)), (' A 387  LEU  HA ', ' A 389  ASP  OD2', -0.46, (-16.977, -19.515, 0.213)), (' L 192  LYS  HE2', ' L 212  ASN HD22', -0.46, (-73.133, 7.905, -79.823)), (' B 364  ASP  O  ', ' B 367  VAL HG22', -0.46, (-15.423, -0.813, -92.366)), (' D  96  PRO  HB3', ' D  98  TYR  CE1', -0.459, (-5.048, 2.537, -54.616)), (' L 209  LYS  HA ', ' L 209  LYS  HD3', -0.458, (-62.11, 1.88, -79.57)), (' C   6  GLU  OE2', ' C 110  GLY  HA3', -0.458, (3.529, -2.37, -38.374)), (' C 192  SER  HA ', ' C 195  LEU  CD1', -0.457, (4.066, 3.571, -1.571)), (' C 190  VAL HG21', ' C 200  TYR  CZ ', -0.456, (5.221, 0.589, -6.415)), (' A 447  GLY  HA3', ' A 449  TYR  CE2', -0.456, (-13.184, -25.596, -41.632)), (' B 338  PHE  HE2', ' B 363  ALA  HB1', -0.455, (-13.332, -5.579, -90.854)), (' B 456  PHE  HB3', ' B 473  TYR  CD1', -0.454, (-5.514, -14.979, -55.755)), (' D 177  LEU HD23', ' D 178  SER  N  ', -0.453, (0.333, 18.019, -17.701)), (' L 149  GLN  HB3', ' L 197  GLU  HB3', -0.452, (-56.874, 7.919, -72.43)), (' L 125  GLU  O  ', ' L 128  LYS  HB3', -0.452, (-79.425, -5.79, -63.041)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.451, (-52.913, -15.36, -34.4)), (' D  19  VAL HG21', ' D  78  LEU HD22', -0.451, (-20.538, 8.673, -28.904)), (' D   4  MET  HE1', ' D  25  ALA  HB2', -0.451, (-16.234, 10.344, -50.885)), (' H  33  TYR  CB ', ' H  98  VAL  HB ', -0.45, (-37.137, -28.022, -38.189)), (' C 120  ALA  HB3', ' C 152  PHE  CE1', -0.449, (17.24, 16.713, -35.412)), (' D 189  GLU  HA ', ' D 213  ARG  CZ ', -0.448, (17.751, 27.723, -4.46)), (' B 387  LEU  HA ', ' B 387  LEU HD12', -0.447, (-3.657, 1.523, -95.503)), (' L 188  TYR  O  ', ' L 194  TYR  OH ', -0.446, (-73.31, 7.615, -68.662)), (' H  75  MET  HE3', ' H  79  PHE  HZ ', -0.446, (-54.476, -32.237, -34.481)), (' C  30  SER  CB ', ' C  73  ASN  ND2', -0.446, (6.225, -12.709, -52.813)), (' H  20  LEU HD11', ' H  82  MET  HE2', -0.445, (-53.372, -17.97, -38.11)), (' L  66  GLY  HA3', ' L  71  PHE  HA ', -0.442, (-21.759, -14.707, -51.173)), (' B 368  LEU  HA ', ' B 368  LEU HD23', -0.442, (-17.141, 0.365, -88.298)), (' H  12  VAL  O  ', ' H 117  VAL  HA ', -0.44, (-59.679, -10.412, -38.141)), (' C 192  SER  CA ', ' C 195  LEU HD13', -0.438, (3.655, 3.054, -0.504)), (' H 194  SER  HA ', ' H 197  THR  OG1', -0.437, (-68.816, -21.604, -82.186)), (' A 456  PHE  HB3', ' A 473  TYR  CD1', -0.437, (-32.5, -37.264, -34.948)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.437, (-19.535, -4.347, -72.969)), (' L 153  ASP  OD2', ' L 191  HIS  HB3', -0.437, (-71.713, 12.2, -71.767)), (' A 455  LEU HD22', ' H 100  PRO  HB2', -0.436, (-29.64, -29.312, -36.65)), (' D 185  LYS  HE2', ' D 189  GLU  OE2', -0.434, (22.966, 25.299, -6.837)), (' L  67  SER  HA ', ' L  71  PHE  CE2', -0.433, (-21.282, -16.17, -47.042)), (' D 149  GLN  HB3', ' D 197  GLU  HB3', -0.432, (-1.784, 28.416, -10.106)), (' D 119  ILE HD12', ' D 196  CYS  SG ', -0.432, (2.996, 22.25, -8.117)), (' L  24  ARG  HA ', ' L  69  THR  O  ', -0.431, (-24.349, -9.458, -47.183)), (' C  34  MET  HB3', ' C  34  MET  HE2', -0.429, (2.459, -4.674, -47.282)), (' D  14  SER  HB3', ' D 109  LYS  HG2', -0.429, (-21.295, 12.937, -22.129)), (' L  45  LYS  HD2', ' L  46  LEU  H  ', -0.428, (-38.002, -24.753, -51.941)), (' D 122  PRO  HD3', ' D 134  VAL HG22', -0.428, (12.206, 21.595, -8.911)), (' C 132  PRO  HD2', ' C 218  GLU  HB2', -0.428, (11.19, 7.724, -4.146)), (' H  34  MET  HE3', ' H  78  LEU HD22', -0.428, (-44.867, -27.813, -39.205)), (' C 145  GLY  HA2', ' C 160  TRP  CH2', -0.427, (8.38, 6.842, -12.616)), (' L 142  TYR  CG ', ' L 143  PRO  HA ', -0.426, (-43.072, -5.628, -71.506)), (' C   3  GLN  HG2', ' C  25  SER  OG ', -0.425, (2.88, -12.259, -36.843)), (' A 379  CYS  HB2', ' A 384  PRO  HD3', -0.424, (-21.551, -17.263, -7.776)), (' D  63  SER  HG ', ' D  74  THR  HG1', -0.424, (-24.342, 2.662, -37.215)), (' B 393  THR HG21', ' B 518  LEU HD12', -0.424, (-0.997, -17.083, -90.612)), (' B 336  CYS  SG ', ' B 363  ALA  HB2', -0.422, (-12.809, -8.158, -92.613)), (' A 387  LEU  CA ', ' A 389  ASP  OD2', -0.422, (-16.756, -19.646, 0.17)), (' H  39  GLN  NE2', ' L  38  GLN  OE1', -0.421, (-44.985, -15.273, -50.154)), (' B 438  SER  O  ', ' B 438  SER  OG ', -0.417, (-23.007, -0.796, -71.462)), (' B 393  THR  O  ', ' B 523  THR  OG1', -0.417, (-6.526, -15.196, -93.04)), (' A 342  PHE  HB2', ' A 601  NAG  H82', -0.415, (-7.391, -24.602, -15.279)), (' D 152  VAL HG12', ' D 157  GLN  CG ', -0.413, (8.353, 31.667, -11.35)), (' A 412  PRO  HG3', ' A 429  PHE  HB3', -0.412, (-28.306, -24.858, -12.577)), (' A 438  SER  OG ', ' A 442  ASP  OD2', -0.411, (-11.075, -23.069, -28.428)), (' H  70  SER  OG ', ' H  71  ARG  N  ', -0.41, (-49.075, -29.116, -31.218)), (' H 212  LYS  C  ', ' H 212  LYS  HD2', -0.41, (-71.957, -20.947, -57.137)), (' C 194  SER  HG ', ' C 200  TYR  HH ', -0.408, (5.637, -0.723, -4.179)), (' C 175  VAL HG21', ' D 162  GLN  HB3', -0.406, (5.58, 21.667, -23.299)), (' A 336  CYS  SG ', ' A 363  ALA  HB2', -0.405, (-9.831, -28.546, -5.222)), (' A 361  CYS  H  ', ' A 524  VAL HG12', -0.404, (-9.956, -32.671, -2.278)), (' C 190  VAL HG22', ' C 191  PRO  HD2', -0.402, (2.347, 0.238, -5.254)), (' A 406  GLU  OE1', ' A 495  TYR  OH ', -0.402, (-22.833, -25.205, -30.077)), (' C 133  SER  OG ', ' C 134  SER  N  ', -0.402, (6.676, 13.363, -0.057)), (' L   4  MET  HE1', ' L  25  ALA  HB2', -0.402, (-26.762, -11.816, -44.322)), (' B 473  TYR  O  ', ' B 488  CYS  HA ', -0.401, (-7.723, -18.035, -50.211)), (' B 444  LYS  HD3', ' L  11  LEU HD12', -0.401, (-31.151, -6.206, -63.864)), (' C  90  THR HG23', ' C 116  THR  HA ', -0.4, (10.335, 12.974, -39.659))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
