# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 570 ', 'LEU', 0.011860264699573419, (177.447, 174.08, 169.65))]
data['omega'] = [('A', '  87 ', 'ASN', None, (191.423, 134.986, 190.49099999999999)), ('A', ' 571 ', 'ASP', None, (177.871, 173.726, 171.955)), ('B', '  87 ', 'ASN', None, (162.854, 198.689, 190.953)), ('B', ' 571 ', 'ASP', None, (136.034, 167.63, 172.405)), ('C', '  87 ', 'ASN', None, (121.957, 142.261, 190.923)), ('C', ' 571 ', 'ASP', None, (162.278, 134.575, 172.399))]
data['rota'] = [('A', ' 603 ', 'ASN', 0.014119987801906975, (183.05700000000004, 130.25, 151.13)), ('B', ' 603 ', 'ASN', 0.01450434586314324, (171.065, 193.886, 151.567)), ('C', ' 603 ', 'ASN', 0.014088445986720348, (122.038, 151.792, 151.541))]
data['cbeta'] = []
data['probe'] = [(' C 856  ILE HG21', ' C 966  LEU HD11', -0.974, (144.894, 170.981, 170.346)), (' A 856  ILE HG21', ' A 966  LEU HD11', -0.955, (155.682, 140.692, 170.791)), (' C 856  ILE HG21', ' C 966  LEU  CD1', -0.767, (144.179, 170.491, 170.787)), (' A 856  ILE HG21', ' A 966  LEU  CD1', -0.76, (155.768, 139.942, 170.503)), (' C 856  ILE  O  ', ' C 856  ILE HG22', -0.714, (145.991, 172.783, 169.76)), (' A 856  ILE  O  ', ' A 856  ILE HG22', -0.71, (153.024, 140.393, 169.21)), (' A 355  ARG  NH2', ' B 200  TYR  OH ', -0.62, (171.656, 181.568, 198.996)), (' B 448  ASN  HB3', ' B 497  PHE  HB2', -0.605, (140.795, 153.631, 225.61)), (' A 448  ASN  HB3', ' A 497  PHE  HB2', -0.596, (163.776, 176.47, 225.165)), (' C 448  ASN  HB3', ' C 497  PHE  HB2', -0.593, (172.205, 145.251, 225.764)), (' A 738  CYS  SG ', ' A 764  ASN  ND2', -0.569, (146.144, 148.403, 166.713)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.568, (173.962, 152.581, 166.735)), (' C 738  CYS  SG ', ' C 764  ASN  ND2', -0.567, (156.593, 174.733, 167.211)), (' B 707  TYR  HB3', ' C 792  PRO  HG3', -0.567, (140.296, 181.732, 117.327)), (' B 564  GLN  OE1', ' B 577  ARG  NH1', -0.56, (123.278, 172.115, 185.107)), (' A 564  GLN  OE1', ' A 577  ARG  NH1', -0.557, (188.112, 182.702, 184.647)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.557, (162.735, 150.561, 132.012)), (' C1116  THR HG22', ' C1138  TYR  HB3', -0.547, (150.624, 150.149, 90.903)), (' C 720  ILE HG13', ' C 923  ILE HG23', -0.546, (137.623, 160.909, 116.704)), (' B 720  ILE HG13', ' B 923  ILE HG23', -0.546, (171.503, 175.848, 116.356)), (' B1116  THR HG22', ' B1138  TYR  HB3', -0.546, (155.373, 170.281, 91.081)), (' A 894  LEU HD21', ' C1072  GLU  HG2', -0.546, (141.012, 144.524, 115.052)), (' C 722  VAL HG22', ' C1065  VAL HG22', -0.545, (138.806, 163.471, 124.304)), (' C 564  GLN  OE1', ' C 577  ARG  NH1', -0.545, (164.838, 121.267, 184.948)), (' A 980  ILE HG23', ' A 984  LEU HD12', -0.545, (155.602, 144.869, 188.144)), (' A1116  THR HG22', ' A1138  TYR  HB3', -0.544, (170.406, 155.904, 90.209)), (' B 454  ARG  NH1', ' B 468  ILE  O  ', -0.543, (131.25, 142.915, 210.318)), (' C 454  ARG  NH1', ' C 468  ILE  O  ', -0.543, (186.033, 142.746, 210.329)), (' C 340  GLU  OE1', ' C 356  LYS  NZ ', -0.543, (166.416, 126.347, 210.275)), (' C 826  VAL  HB ', ' C1057  PRO  HG2', -0.542, (136.576, 168.443, 145.078)), (' B 980  ILE HG23', ' B 984  LEU HD12', -0.542, (172.476, 162.626, 188.099)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.54, (163.542, 166.098, 132.368)), (' A 722  VAL HG22', ' A1065  VAL HG22', -0.539, (165.031, 138.942, 124.009)), (' A 720  ILE HG13', ' A 923  ILE HG23', -0.537, (167.214, 138.807, 115.94)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.536, (149.835, 159.104, 132.417)), (' C 277  LEU HD22', ' C 285  ILE HD11', -0.536, (121.56, 157.971, 172.083)), (' B 277  LEU HD22', ' B 285  ILE HD11', -0.534, (176.627, 191.302, 172.079)), (' A 895  GLN  NE2', ' C1074  ASN  OD1', -0.534, (141.876, 137.286, 112.15)), (' C 980  ILE HG23', ' C 984  LEU HD12', -0.533, (148.304, 168.483, 188.083)), (' A 355  ARG HH21', ' B 200  TYR  HH ', -0.533, (172.814, 181.619, 198.538)), (' A 826  VAL  HB ', ' A1057  PRO  HG2', -0.533, (161.027, 134.345, 144.388)), (' A1030  SER  HB3', ' C1041  ASP  HB2', -0.532, (150.273, 151.669, 129.341)), (' B 722  VAL HG22', ' B1065  VAL HG22', -0.532, (172.416, 173.961, 124.461)), (' C 815  ARG  HD2', ' C 823  PHE  HE2', -0.531, (136.785, 175.879, 139.485)), (' A 277  LEU HD22', ' A 285  ILE HD11', -0.53, (177.886, 127.335, 171.78)), (' B 340  GLU  OE1', ' B 356  LYS  NZ ', -0.529, (126.764, 168.121, 210.22)), (' A 340  GLU  OE1', ' A 356  LYS  NZ ', -0.528, (183.085, 181.46, 209.746)), (' A 815  ARG  HD2', ' A 823  PHE  HE2', -0.528, (154.72, 130.991, 139.222)), (' A 206  LYS  HB2', ' A 223  LEU  HA ', -0.527, (180.31, 119.516, 179.878)), (' A 454  ARG  NH1', ' A 468  ILE  O  ', -0.524, (158.71, 190.23, 209.818)), (' B1041  ASP  HB2', ' C1030  SER  HB3', -0.524, (156.775, 169.526, 129.491)), (' A 389  ASP  OD1', ' A 528  LYS  NZ ', -0.522, (187.732, 163.746, 191.141)), (' B 826  VAL  HB ', ' B1057  PRO  HG2', -0.522, (178.867, 172.883, 144.947)), (' C 206  LYS  HB2', ' C 223  LEU  HA ', -0.52, (114.578, 159.846, 180.255)), (' B 815  ARG  HD2', ' B 823  PHE  HE2', -0.519, (184.988, 169.209, 139.351)), (' B 726  ILE HG12', ' B1061  VAL HG22', -0.514, (172.627, 172.451, 137.694)), (' A 726  ILE HG12', ' A1061  VAL HG22', -0.513, (163.625, 139.7, 137.295)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.513, (148.616, 164.055, 157.221)), (' B 303  LEU HD12', ' B 308  VAL HG22', -0.513, (166.558, 186.631, 158.62)), (' C 726  ILE HG12', ' C1061  VAL HG22', -0.513, (139.601, 164.388, 137.76)), (' C 389  ASP  OD1', ' C 528  LYS  NZ ', -0.512, (148.748, 131.059, 191.558)), (' A1011  GLN  OE1', ' A1014  ARG  NH1', -0.511, (159.512, 147.396, 156.631)), (' B 206  LYS  HB2', ' B 223  LEU  HA ', -0.51, (181.916, 196.22, 180.489)), (' A 390  LEU HD21', ' B 983  ARG  HG2', -0.51, (178.221, 168.015, 192.483)), (' C 303  LEU HD12', ' C 308  VAL HG22', -0.51, (130.196, 151.268, 158.539)), (' A 666  ILE HD11', ' A 672  ALA  HB2', -0.51, (189.619, 147.687, 149.864)), (' C 666  ILE HD11', ' C 672  ALA  HB2', -0.508, (133.35, 137.379, 150.177)), (' B 451  TYR  HB2', ' B 497  PHE  HE2', -0.508, (139.857, 152.362, 221.155)), (' B1011  GLN  OE1', ' B1014  ARG  NH1', -0.506, (167.853, 164.766, 157.029)), (' B 389  ASP  OD1', ' B 528  LYS  NZ ', -0.506, (139.641, 180.942, 191.44)), (' A 303  LEU HD12', ' A 308  VAL HG22', -0.506, (179.406, 137.538, 158.12)), (' A 901  GLN HE21', ' A 905  ARG HH21', -0.504, (154.983, 142.806, 120.023)), (' B 598  ILE HG23', ' B 664  ILE HG21', -0.503, (157.009, 189.641, 151.777)), (' A 451  TYR  HB2', ' A 497  PHE  HE2', -0.502, (162.953, 178.009, 220.694)), (' C 856  ILE  CG2', ' C 856  ILE  O  ', -0.502, (145.53, 173.175, 169.997)), (' C 451  TYR  HB2', ' C 497  PHE  HE2', -0.5, (173.873, 145.17, 220.989)), (' A 598  ILE HG23', ' A 664  ILE HG21', -0.497, (185.99, 144.509, 151.113)), (' B 666  ILE HD11', ' B 672  ALA  HB2', -0.495, (152.573, 190.993, 150.25)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.495, (157.653, 124.374, 135.729)), (' C 366  SER  O  ', ' C 370  ASN  ND2', -0.492, (149.028, 134.906, 207.723)), (' C 598  ILE HG23', ' C 664  ILE HG21', -0.49, (132.923, 141.715, 151.901)), (' B 901  GLN HE21', ' B 905  ARG HH21', -0.488, (174.184, 163.741, 119.951)), (' C 358  ILE  HB ', ' C 395  VAL  HB ', -0.487, (164.657, 130.717, 202.016)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.486, (180.301, 178.143, 201.672)), (' C 901  GLN HE21', ' C 905  ARG HH21', -0.486, (146.64, 169.642, 119.953)), (' B 366  SER  O  ', ' B 370  ASN  ND2', -0.486, (142.889, 178.981, 207.756)), (' A 366  SER  O  ', ' A 370  ASN  ND2', -0.483, (184.185, 162.581, 207.317)), (' C 596  SER  HB2', ' C 611  LEU  HB3', -0.483, (136.944, 139.05, 157.567)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.481, (188.854, 174.901, 136.167)), (' B 596  SER  HB2', ' B 611  LEU  HB3', -0.478, (152.69, 187.487, 157.677)), (' B 727  LEU HD11', ' B1028  LYS  HD2', -0.475, (166.841, 165.934, 135.45)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.474, (131.509, 167.6, 201.966)), (' A  37  TYR  HB3', ' A 223  LEU  HB2', -0.473, (180.64, 123.549, 179.912)), (' A 792  PRO  HG3', ' C 707  TYR  HB3', -0.473, (148.048, 131.271, 117.259)), (' A 596  SER  HB2', ' A 611  LEU  HB3', -0.472, (186.299, 149.046, 157.283)), (' A 727  LEU HD11', ' A1028  LYS  HD2', -0.47, (161.157, 147.955, 135.51)), (' C 120  VAL  HB ', ' C 127  VAL  HB ', -0.464, (107.326, 157.563, 200.038)), (' B 120  VAL  HB ', ' B 127  VAL  HB ', -0.464, (183.872, 203.582, 200.169)), (' B 736  VAL HG22', ' B 858  LEU  HG ', -0.463, (175.81, 162.167, 164.428)), (' A 752  LEU HD11', ' A 990  GLU  HG2', -0.462, (148.756, 150.002, 185.013)), (' B  37  TYR  HB3', ' B 223  LEU  HB2', -0.46, (178.159, 195.198, 180.203)), (' C 727  LEU HD11', ' C1028  LYS  HD2', -0.46, (148.412, 162.196, 135.457)), (' A 856  ILE  CG2', ' A 856  ILE  O  ', -0.459, (152.612, 139.864, 169.839)), (' C  39  PRO  HG3', ' C  51  THR HG21', -0.457, (126.019, 158.191, 176.225)), (' B  34  ARG HH21', ' B 217  PRO  HB2', -0.457, (179.684, 206.046, 171.601)), (' C  37  TYR  HB3', ' C 223  LEU  HB2', -0.456, (117.341, 157.311, 180.163)), (' C 736  VAL HG22', ' C 858  LEU  HG ', -0.456, (147.109, 171.54, 164.385)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.456, (175.549, 131.058, 175.626)), (' A 726  ILE HD13', ' A 945  LEU HD13', -0.454, (165.312, 138.514, 139.578)), (' A 120  VAL  HB ', ' A 127  VAL  HB ', -0.453, (185.568, 114.617, 199.712)), (' C 802  PHE  HD1', ' C 805  ILE HD11', -0.452, (137.744, 171.175, 124.392)), (' B  39  PRO  HG3', ' B  51  THR HG21', -0.452, (174.189, 187.058, 176.008)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.451, (129.51, 176.52, 136.153)), (' B 752  LEU HD11', ' B 990  GLU  HG2', -0.451, (171.201, 154.314, 185.359)), (' B 726  ILE HD13', ' B 945  LEU HD13', -0.45, (172.799, 174.647, 139.95)), (' C 196  ASN HD21', ' C 235  ILE HD12', -0.449, (121.551, 150.123, 196.613)), (' A 802  PHE  HD1', ' A 805  ILE HD11', -0.448, (158.527, 133.987, 124.084)), (' B 802  PHE  HD1', ' B 805  ILE HD11', -0.447, (179.99, 170.433, 124.803)), (' A 736  VAL HG22', ' A 858  LEU  HG ', -0.446, (153.168, 142.312, 163.715)), (' C 344  ALA  HB3', ' C 347  PHE  HE1', -0.446, (167.133, 133.169, 216.277)), (' C  34  ARG HH21', ' C 217  PRO  HB2', -0.446, (106.785, 152.983, 171.658)), (' A 563  GLN  HG3', ' B  43  PHE  HB2', -0.444, (187.102, 182.518, 176.843)), (' A  95  THR  OG1', ' A 264  ALA  O  ', -0.444, (195.738, 114.535, 181.394)), (' C1086  LYS  HD2', ' C1122  VAL HG11', -0.444, (164.12, 144.688, 92.744)), (' C 985  ASP  O  ', ' C 989  ALA  N  ', -0.443, (152.286, 170.425, 191.197)), (' C 752  LEU HD11', ' C 990  GLU  HG2', -0.443, (156.26, 171.761, 185.359)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.442, (154.039, 167.419, 123.7)), (' B  95  THR  OG1', ' B 264  ALA  O  ', -0.441, (178.431, 212.718, 181.825)), (' B 196  ASN HD21', ' B 235  ILE HD12', -0.44, (169.656, 195.104, 196.664)), (' B 344  ALA  HB3', ' B 347  PHE  HE1', -0.44, (132.791, 164.039, 216.055)), (' A  34  ARG HH21', ' A 217  PRO  HB2', -0.439, (189.795, 116.62, 171.242)), (' A 196  ASN HD21', ' A 235  ILE HD12', -0.438, (184.967, 130.827, 196.189)), (' A1086  LYS  HD2', ' A1122  VAL HG11', -0.438, (167.863, 170.177, 92.71)), (' C 726  ILE HD13', ' C 945  LEU HD13', -0.437, (137.958, 163.02, 139.908)), (' B1086  LYS  HD2', ' B1122  VAL HG11', -0.437, (143.987, 160.891, 93.119)), (' B  91  TYR  HB2', ' B 270  LEU  HG ', -0.437, (170.364, 198.411, 183.333)), (' A 985  ASP  O  ', ' A 989  ALA  N  ', -0.437, (151.899, 147.211, 190.9)), (' A 917  TYR  HB3', ' C1129  VAL HG13', -0.431, (161.46, 137.811, 104.576)), (' B 656  VAL HG12', ' B 658  ASN  H  ', -0.43, (148.917, 198.217, 141.763)), (' A 344  ALA  HB3', ' A 347  PHE  HE1', -0.429, (176.785, 178.686, 215.66)), (' A 894  LEU HD13', ' C 715  PRO  HD3', -0.428, (143.398, 146.315, 113.887)), (' C 656  VAL HG12', ' C 658  ASN  H  ', -0.425, (129.571, 130.268, 141.39)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.425, (198.033, 147.149, 141.246)), (' C  91  TYR  HB2', ' C 270  LEU  HG ', -0.424, (118.371, 149.045, 183.374)), (' B 985  ASP  O  ', ' B 989  ALA  N  ', -0.422, (172.046, 158.395, 191.267)), (' A 743  CYS  HB3', ' A 749  CYS  HB3', -0.422, (148.029, 144.457, 178.562)), (' A 900  MET  HG2', ' C1079  PRO  HB3', -0.421, (155.305, 139.611, 107.519)), (' A  91  TYR  HB2', ' A 270  LEU  HG ', -0.421, (187.769, 128.422, 182.701)), (' C  95  THR  OG1', ' C 264  ALA  O  ', -0.42, (102.056, 148.611, 181.668)), (' A 395  VAL HG13', ' A 515  PHE  HE1', -0.42, (178.175, 173.53, 200.743)), (' A 603  ASN  HA ', ' A 603  ASN HD22', -0.418, (182.752, 128.604, 151.467)), (' B 395  VAL HG13', ' B 515  PHE  HE1', -0.417, (136.123, 167.872, 201.24)), (' B 287  ASP  HB3', ' B 306  PHE  HE2', -0.417, (176.243, 191.655, 164.996)), (' C 395  VAL HG13', ' C 515  PHE  HE1', -0.416, (162.133, 134.121, 201.35)), (' A 970  PHE  HA ', ' B 756  TYR  HD1', -0.413, (164.083, 150.165, 178.097)), (' C1086  LYS  HB3', ' C1122  VAL HG13', -0.413, (163.205, 143.237, 94.164)), (' B1123  SER  OG ', ' C 918  GLU  OE2', -0.412, (141.084, 159.332, 101.223)), (' C 743  CYS  HB3', ' C 749  CYS  HB3', -0.411, (152.106, 175.277, 178.512)), (' C 287  ASP  HB3', ' C 306  PHE  HE2', -0.411, (121.37, 157.326, 165.0)), (' A 790  LYS  HE2', ' C 704  SER  HB3', -0.411, (141.188, 130.163, 123.744)), (' A1086  LYS  HB3', ' A1122  VAL HG13', -0.41, (169.812, 170.075, 93.797)), (' A 913  GLN HE22', ' C1090  PRO  HD2', -0.41, (157.022, 146.081, 104.792)), (' A 357  ARG HH12', ' B 228  ASP  HB3', -0.409, (179.773, 187.216, 195.528)), (' A 789  TYR  HA ', ' C 703  ASN  O  ', -0.409, (142.674, 135.176, 124.771)), (' B 498  GLN  H  ', ' B 501  ASN HD21', -0.408, (145.958, 153.431, 226.526)), (' B1086  LYS  HB3', ' B1122  VAL HG13', -0.407, (143.309, 162.279, 94.349)), (' A 498  GLN  H  ', ' A 501  ASN HD21', -0.407, (160.991, 172.408, 226.424)), (' A 287  ASP  HB3', ' A 306  PHE  HE2', -0.406, (178.636, 126.477, 164.661)), (' C 726  ILE HG22', ' C 948  LEU HD13', -0.405, (141.501, 163.295, 141.475)), (' C 201  PHE  HB3', ' C 229  LEU  HB2', -0.405, (120.859, 156.862, 196.647)), (' B 326  ILE  HB ', ' B 541  PHE  HA ', -0.405, (135.187, 184.636, 183.666)), (' A 726  ILE HG22', ' A 948  LEU HD13', -0.404, (163.143, 141.224, 141.432)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.404, (175.668, 192.354, 196.513)), (' B 726  ILE HG22', ' B 948  LEU HD13', -0.403, (171.515, 171.172, 141.811)), (' C1126  CYS  HA ', ' C1132  ILE HD13', -0.402, (160.842, 136.318, 97.706)), (' C 498  GLN  H  ', ' C 501  ASN HD21', -0.401, (169.52, 150.273, 226.572)), (' B1126  CYS  HA ', ' B1132  ILE HD13', -0.401, (138.043, 167.696, 97.669)), (' B 716  THR  N  ', ' B1071  GLN  O  ', -0.401, (159.661, 181.981, 111.623)), (' C 804  GLN  OE1', ' C 935  GLN  NE2', -0.4, (128.88, 170.062, 129.58))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
