# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 982 ', 'PRO', None, (135.716, 149.43099999999995, 159.867)), ('B', ' 982 ', 'PRO', None, (124.08000000000006, 128.918, 159.88)), ('C', ' 982 ', 'PRO', None, (147.655, 129.12, 159.885))]
data['rota'] = [('A', ' 196 ', 'ASN', 0.08851268902351575, (104.072, 133.289, 162.202)), ('A', ' 304 ', 'LYS', 0.0, (111.37000000000002, 137.34799999999996, 134.235)), ('A', ' 331 ', 'ASN', 9.977263059147206e-05, (120.99100000000004, 100.736, 165.624)), ('A', ' 646 ', 'ARG', 0.0, (113.92299999999997, 111.26599999999998, 119.47600000000001)), ('A', ' 701 ', 'VAL', 0.01213447374023078, (114.566, 116.71099999999997, 86.981)), ('B', ' 196 ', 'ASN', 0.08794104875045894, (153.872, 109.568, 162.20400000000004)), ('B', ' 304 ', 'LYS', 0.0, (146.70400000000004, 113.86900000000003, 134.24)), ('B', ' 331 ', 'ASN', 0.00011402789906646866, (173.622, 140.485, 165.63)), ('B', ' 646 ', 'ARG', 0.0, (168.02, 129.113, 119.479)), ('B', ' 701 ', 'VAL', 0.012096845711085429, (162.975, 126.95699999999997, 86.986)), ('C', ' 196 ', 'ASN', 0.08674027369930262, (149.46500000000006, 164.59899999999993, 162.2)), ('C', ' 304 ', 'LYS', 0.0, (149.342, 156.233, 134.238)), ('C', ' 331 ', 'ASN', 0.00010323838124905731, (112.812, 166.192, 165.618)), ('C', ' 646 ', 'ARG', 0.0, (125.46900000000005, 167.03199999999995, 119.47)), ('C', ' 701 ', 'VAL', 0.012132467074276045, (129.869, 163.73899999999995, 86.978))]
data['cbeta'] = [('A', ' 515 ', 'PHE', ' ', 0.36641012355927705, (135.223, 113.76099999999997, 166.16)), ('A', ' 776 ', 'GLU', ' ', 0.3005351988881557, (136.616, 149.96599999999995, 106.081)), ('B', ' 515 ', 'PHE', ' ', 0.3688260076721991, (155.23, 146.308, 166.17100000000005)), ('B', ' 776 ', 'GLU', ' ', 0.30156855007292627, (123.15600000000006, 129.442, 106.094)), ('C', ' 515 ', 'PHE', ' ', 0.3674315594134083, (116.99300000000002, 147.358, 166.165)), ('C', ' 776 ', 'GLU', ' ', 0.3003648817571518, (147.675, 128.042, 106.1))]
data['probe'] = [(' C 442  ASP  O  ', ' C 448  ASN  ND2', -0.786, (118.466, 136.931, 194.876)), (' A 442  ASP  O  ', ' A 448  ASN  ND2', -0.785, (143.522, 119.721, 194.911)), (' B 442  ASP  O  ', ' B 448  ASN  ND2', -0.784, (146.113, 150.091, 194.579)), (' B 880  SER  OG ', ' B 890  LEU  O  ', -0.767, (119.134, 121.437, 86.183)), (' A 880  SER  OG ', ' A 890  LEU  O  ', -0.764, (131.64, 157.405, 86.12)), (' C 328  ARG  NH1', ' C 580  GLN  OE1', -0.749, (114.597, 169.174, 159.926)), (' B 328  ARG  NH1', ' B 580  GLN  OE1', -0.748, (175.337, 137.056, 159.42)), (' A 328  ARG  NH1', ' A 580  GLN  OE1', -0.742, (117.515, 100.786, 159.93)), (' A 328  ARG  NH2', ' A 531  THR  O  ', -0.737, (113.986, 103.676, 158.763)), (' B 752  TYR  OH ', ' B 990  ASP  OD1', -0.733, (128.656, 134.671, 146.884)), (' C 328  ARG  NH2', ' C 531  THR  O  ', -0.733, (118.358, 170.125, 158.294)), (' C 880  SER  OG ', ' C 890  LEU  O  ', -0.733, (157.459, 128.956, 86.037)), (' B 328  ARG  NH2', ' B 531  THR  O  ', -0.732, (174.464, 132.932, 158.665)), (' C 752  TYR  OH ', ' C 990  ASP  OD1', -0.721, (140.438, 130.284, 146.888)), (' B 331  ASN  N  ', ' B 331  ASN  OD1', -0.715, (173.155, 141.101, 163.609)), (' A 752  TYR  OH ', ' A 990  ASP  OD1', -0.708, (138.358, 142.684, 146.871)), (' B 675  GLN  NE2', ' B 676  THR  O  ', -0.696, (166.224, 103.901, 111.249)), (' C 675  GLN  NE2', ' C 676  THR  O  ', -0.689, (148.214, 178.042, 111.075)), (' C 331  ASN  N  ', ' C 331  ASN  OD1', -0.687, (112.499, 165.452, 163.592)), (' A 675  GLN  NE2', ' A 676  THR  O  ', -0.684, (92.925, 125.341, 111.1)), (' A 733  ASP  OD2', ' C 317  ASN  ND2', -0.667, (133.363, 158.925, 135.536)), (' C 137  ASN  ND2', ' C1321  NAG  O7 ', -0.661, (151.375, 190.974, 172.473)), (' A 134  GLN  N  ', ' A 162  SER  OG ', -0.66, (90.861, 130.54, 179.418)), (' C 323  THR  OG1', ' C 324  GLU  OE1', -0.659, (130.792, 171.304, 150.107)), (' A 323  THR  OG1', ' A 324  GLU  OE1', -0.656, (107.628, 113.842, 150.147)), (' B 134  GLN  N  ', ' B 162  SER  OG ', -0.655, (162.91, 99.584, 179.416)), (' B 563  GLN  O  ', ' B 577  ARG  NH2', -0.653, (167.993, 149.996, 153.968)), (' C 563  GLN  O  ', ' C 577  ARG  NH2', -0.651, (107.758, 156.514, 154.05)), (' C 809  SER  OG ', ' C 864  GLU  OE2', -0.651, (167.532, 136.205, 107.296)), (' A 317  ASN  ND2', ' B 733  ASP  OD2', -0.65, (117.462, 122.161, 135.671)), (' A 137  ASN  ND2', ' A1321  NAG  O7 ', -0.649, (80.156, 121.922, 172.588)), (' A 563  GLN  O  ', ' A 577  ARG  NH2', -0.649, (131.97, 100.423, 154.311)), (' C 134  GLN  N  ', ' C 162  SER  OG ', -0.648, (153.623, 177.521, 179.41)), (' B 574  ASP  OD1', ' B 575  ALA  N  ', -0.647, (164.915, 143.388, 145.559)), (' B 137  ASN  ND2', ' B1321  NAG  O7 ', -0.646, (175.697, 94.65, 172.541)), (' C 574  ASP  OD1', ' C 575  ALA  N  ', -0.643, (114.542, 157.963, 145.768)), (' A 574  ASP  OD1', ' A 575  ALA  N  ', -0.643, (127.24, 106.41, 145.714)), (' A 331  ASN  N  ', ' A 331  ASN  OD1', -0.632, (121.516, 100.795, 163.689)), (' C 732  VAL HG22', ' C 854  LEU HD23', -0.624, (152.684, 134.29, 131.459)), (' B 809  SER  OG ', ' B 864  GLU  OE2', -0.622, (120.299, 108.175, 107.475)), (' A 287  ASP  OD2', ' A 288  ALA  N  ', -0.62, (100.494, 139.79, 138.079)), (' A 732  VAL HG22', ' A 854  LEU HD23', -0.618, (129.073, 151.231, 131.039)), (' B 317  ASN  ND2', ' C 733  ASP  OD2', -0.609, (157.015, 126.28, 135.685)), (' C 287  ASP  OD2', ' C 288  ALA  N  ', -0.608, (156.927, 164.55, 138.205)), (' A 349  SER  OG ', ' A 452  LEU  O  ', -0.606, (150.692, 118.467, 185.02)), (' C1302  NAG  O3 ', ' C1302  NAG  O7 ', -0.606, (168.622, 173.092, 176.114)), (' A 898  MET  HE1', ' A1046  MET  HE2', -0.604, (121.209, 147.28, 87.096)), (' B 349  SER  OG ', ' B 452  LEU  O  ', -0.603, (143.443, 157.377, 184.992)), (' B 732  VAL HG22', ' B 854  LEU HD23', -0.603, (125.785, 122.315, 131.091)), (' B 287  ASP  OD2', ' B 288  ALA  N  ', -0.6, (150.156, 103.369, 138.093)), (' A 998  GLN  OE1', ' C 998  GLN  NE2', -0.597, (136.036, 138.051, 137.499)), (' C 349  SER  OG ', ' C 452  LEU  O  ', -0.595, (113.332, 131.641, 184.931)), (' C 218  GLN  N  ', ' C 218  GLN  OE1', -0.594, (161.685, 178.633, 139.783)), (' A 721  GLU  OE2', ' A1060  HIS  NE2', -0.594, (123.684, 141.209, 99.1)), (' A 218  GLN  N  ', ' A 218  GLN  OE1', -0.594, (85.804, 136.712, 139.906)), (' B 898  MET  HE1', ' B1046  MET  HE2', -0.591, (132.986, 117.466, 87.055)), (' A 444  LYS  N  ', ' A 448  ASN  OD1', -0.591, (143.274, 122.327, 196.428)), (' B 218  GLN  N  ', ' B 218  GLN  OE1', -0.589, (160.028, 92.014, 139.918)), (' A 319  ARG  NH1', ' A 592  PHE  O  ', -0.588, (113.467, 116.188, 135.546)), (' A 317  ASN  OD1', ' A 319  ARG  NH2', -0.587, (113.47, 119.834, 135.751)), (' C 317  ASN  OD1', ' C 319  ARG  NH2', -0.586, (133.132, 163.132, 135.849)), (' C 898  MET  HE1', ' C1046  MET  HE2', -0.586, (152.686, 142.456, 86.627)), (' C 319  ARG  NH1', ' C 592  PHE  O  ', -0.585, (130.03, 165.01, 135.337)), (' A1085  PHE  O  ', ' A1116  THR  OG1', -0.585, (131.345, 124.269, 66.175)), (' B 317  ASN  OD1', ' B 319  ARG  NH2', -0.581, (160.324, 124.178, 135.484)), (' A 712  THR  N  ', ' A1067  GLN  O  ', -0.581, (112.882, 131.07, 78.833)), (' B 998  GLN  NE2', ' C 998  GLN  OE1', -0.581, (137.622, 134.538, 137.446)), (' C 444  LYS  N  ', ' C 448  ASN  OD1', -0.58, (120.112, 136.3, 196.485)), (' A1302  NAG  O3 ', ' A1302  NAG  O7 ', -0.579, (87.183, 145.597, 176.387)), (' B 323  THR  OG1', ' B 324  GLU  OE1', -0.577, (168.695, 122.096, 150.371)), (' B 319  ARG  NH1', ' B 592  PHE  O  ', -0.576, (164.023, 125.709, 135.452)), (' B 712  THR  N  ', ' B1067  GLN  O  ', -0.574, (151.4, 118.309, 78.813)), (' C 721  GLU  OE2', ' C1060  HIS  NE2', -0.571, (146.494, 143.701, 99.091)), (' A  23  GLN  N  ', ' A  23  GLN  OE1', -0.568, (74.155, 121.954, 159.297)), (' C  23  GLN  N  ', ' C  23  GLN  OE1', -0.568, (154.408, 196.034, 159.225)), (' A 998  GLN  NE2', ' B 998  GLN  OE1', -0.566, (133.788, 134.908, 137.543)), (' B1085  PHE  O  ', ' B1116  THR  OG1', -0.565, (148.086, 137.8, 66.195)), (' B 437  ASN  OD1', ' B 439  ASN  N  ', -0.564, (144.081, 142.482, 189.847)), (' B 444  LYS  N  ', ' B 448  ASN  OD1', -0.564, (144.099, 149.193, 196.637)), (' B 326  ILE HG13', ' B 539  VAL HG21', -0.562, (169.595, 128.761, 153.392)), (' A 437  ASN  OD1', ' A 439  ASN  N  ', -0.561, (137.706, 125.083, 190.291)), (' B 721  GLU  OE2', ' B1060  HIS  NE2', -0.56, (137.25, 122.701, 99.071)), (' B1302  NAG  O3 ', ' B1302  NAG  O7 ', -0.56, (151.635, 88.761, 176.291)), (' C 437  ASN  OD1', ' C 439  ASN  N  ', -0.556, (125.565, 139.836, 190.178)), (' A 326  ILE HG13', ' A 539  VAL HG21', -0.556, (112.59, 110.001, 152.927)), (' C 393  THR  O  ', ' C 394  ASN  ND2', -0.555, (110.421, 149.98, 163.686)), (' B  23  GLN  N  ', ' B  23  GLN  OE1', -0.554, (178.681, 89.391, 159.237)), (' C 393  THR  C  ', ' C 394  ASN HD22', -0.554, (111.062, 150.282, 163.787)), (' A 437  ASN  OD1', ' A 438  SER  N  ', -0.553, (137.08, 125.363, 188.759)), (' C 326  ILE HG13', ' C 539  VAL HG21', -0.551, (124.988, 168.918, 152.918)), (' A 393  THR  C  ', ' A 394  ASN HD22', -0.551, (135.671, 107.198, 163.799)), (' C 437  ASN  OD1', ' C 438  SER  N  ', -0.548, (126.021, 139.819, 188.659)), (' A 112  SER  N  ', ' A 133  PHE  O  ', -0.547, (92.466, 128.084, 177.257)), (' B 112  SER  N  ', ' B 133  PHE  O  ', -0.545, (163.995, 102.64, 177.444)), (' B 437  ASN  OD1', ' B 438  SER  N  ', -0.54, (144.601, 142.663, 188.708)), (' C 112  SER  N  ', ' C 133  PHE  O  ', -0.54, (150.357, 176.911, 177.367)), (' B 358  ILE  HB ', ' B 395  VAL HG23', -0.539, (159.899, 148.21, 171.309)), (' A 358  ILE  HB ', ' A 395  VAL HG23', -0.539, (134.494, 108.845, 171.299)), (' A 454  ARG  NH2', ' A 467  ASP  O  ', -0.537, (157.808, 115.774, 178.999)), (' C 358  ILE  HB ', ' C 395  VAL HG23', -0.536, (113.052, 150.526, 171.302)), (' B1088  GLU  N  ', ' B1088  GLU  OE2', -0.531, (143.44, 134.038, 70.15)), (' C1085  PHE  O  ', ' C1116  THR  OG1', -0.531, (128.001, 145.493, 66.234)), (' A 130  VAL HG11', ' A 231  ILE HG23', -0.529, (101.583, 137.16, 171.781)), (' C1088  GLU  N  ', ' C1088  GLU  OE2', -0.529, (133.519, 143.325, 70.108)), (' C 915  ASN  O  ', ' C 919  ILE HD12', -0.528, (154.595, 150.476, 78.257)), (' C 130  VAL HG11', ' C 231  ILE HG23', -0.526, (153.92, 165.002, 171.763)), (' A 915  ASN  O  ', ' A 919  ILE HD12', -0.524, (113.289, 144.898, 77.94)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.524, (142.191, 164.838, 179.03)), (' A  99  ASN  O  ', ' A 102  ARG  NH1', -0.523, (80.244, 142.198, 163.048)), (' A  48  LEU HD22', ' A 306  PHE  CE1', -0.523, (106.033, 141.169, 135.808)), (' A1088  GLU  N  ', ' A1088  GLU  OE2', -0.523, (130.55, 130.098, 70.047)), (' C  48  LEU HD22', ' C 306  PHE  CE1', -0.523, (155.509, 159.025, 135.942)), (' C  99  ASN  O  ', ' C 102  ARG  NH1', -0.522, (169.583, 180.883, 163.376)), (' B  99  ASN  O  ', ' B 102  ARG  NH1', -0.521, (157.911, 83.942, 163.376)), (' A 490  PHE  CE2', ' A 492  LEU  HB2', -0.517, (159.864, 117.703, 187.334)), (' B 490  PHE  CE2', ' B 492  LEU  HB2', -0.517, (139.68, 165.388, 187.005)), (' B 915  ASN  O  ', ' B 919  ILE HD12', -0.517, (139.052, 112.201, 78.313)), (' A 393  THR  O  ', ' A 394  ASN  ND2', -0.515, (136.216, 106.425, 163.727)), (' B  48  LEU HD22', ' B 306  PHE  CE1', -0.515, (146.022, 107.14, 136.01)), (' B 130  VAL HG11', ' B 231  ILE HG23', -0.514, (152.001, 105.054, 171.845)), (' A  41  LYS  HE2', ' C 520  ALA  HB2', -0.511, (110.046, 149.24, 157.335)), (' C 712  THR  N  ', ' C1067  GLN  O  ', -0.51, (143.031, 158.073, 78.763)), (' A 130  VAL HG22', ' A 168  PHE  HB3', -0.508, (99.789, 139.355, 174.621)), (' C 130  VAL HG22', ' C 168  PHE  HB3', -0.507, (156.725, 165.189, 174.541)), (' B 501  ASN  OD1', ' B 502  GLY  N  ', -0.505, (134.141, 144.362, 193.405)), (' C 490  PHE  CE2', ' C 492  LEU  HB2', -0.505, (108.258, 124.486, 187.094)), (' A  91  TYR  OH ', ' A 191  GLU  OE1', -0.503, (91.741, 136.949, 149.269)), (' C 301  CYS  O  ', ' C 304  LYS  HE3', -0.503, (146.814, 156.691, 136.209)), (' B 130  VAL HG22', ' B 168  PHE  HB3', -0.501, (150.746, 102.944, 174.557)), (' A 301  CYS  O  ', ' A 304  LYS  HE3', -0.499, (112.236, 134.4, 136.054)), (' C 141  LEU  O  ', ' C 153  MET  N  ', -0.497, (168.213, 186.483, 169.411)), (' B 141  LEU  O  ', ' B 153  MET  N  ', -0.494, (163.808, 82.013, 169.352)), (' B 516  GLU  N  ', ' B 516  GLU  OE2', -0.493, (155.506, 148.959, 163.404)), (' A 520  ALA  HB2', ' B  41  LYS  HE2', -0.492, (137.05, 106.536, 157.569)), (' A 141  LEU  O  ', ' A 153  MET  N  ', -0.492, (75.226, 138.472, 169.415)), (' B 301  CYS  O  ', ' B 304  LYS  HE3', -0.492, (148.822, 115.781, 136.088)), (' C 516  GLU  N  ', ' C 516  GLU  OE2', -0.49, (114.997, 146.078, 163.385)), (' C 501  ASN  OD1', ' C 502  GLY  N  ', -0.49, (129.063, 130.282, 193.511)), (' A  16  VAL HG23', ' A 138  ASP  OD2', -0.489, (76.529, 128.136, 173.132)), (' C 393  THR  OG1', ' C 516  GLU  O  ', -0.488, (114.02, 148.37, 161.612)), (' B  16  VAL HG23', ' B 138  ASP  OD2', -0.485, (172.152, 88.515, 172.776)), (' A 843  ARG  NH1', ' C 574  ASP  OD2', -0.484, (111.986, 155.904, 143.14)), (' A 501  ASN  OD1', ' A 502  GLY  N  ', -0.483, (144.019, 132.777, 193.452)), (' A 516  GLU  N  ', ' A 516  GLU  OE2', -0.482, (137.109, 112.585, 163.442)), (' A 229  LEU  HB3', ' A 231  ILE HD11', -0.482, (101.856, 140.031, 168.996)), (' A 334  ASN  O  ', ' A 362  VAL HG12', -0.481, (123.971, 105.599, 173.473)), (' C  16  VAL HG23', ' C 138  ASP  OD2', -0.478, (158.692, 191.229, 173.103)), (' B1125  VAL HG13', ' B1128  ILE  HB ', -0.475, (157.505, 142.004, 67.556)), (' A 574  ASP  OD2', ' B 843  ARG  NH1', -0.475, (130.253, 105.158, 143.083)), (' B 334  ASN  O  ', ' B 362  VAL HG12', -0.475, (168.218, 140.982, 173.581)), (' B 646  ARG  HB3', ' B 646  ARG HH11', -0.475, (166.839, 131.305, 117.669)), (' C1125  VAL HG13', ' C1128  ILE  HB ', -0.474, (119.516, 151.43, 67.402)), (' C  62  VAL HG23', ' C 267  VAL  O  ', -0.473, (151.714, 178.586, 152.111)), (' C 229  LEU  HB3', ' C 231  ILE HD11', -0.473, (156.394, 163.034, 169.057)), (' A 646  ARG  HB3', ' A 646  ARG HH11', -0.472, (116.414, 111.178, 117.661)), (' B 229  LEU  HB3', ' B 231  ILE HD11', -0.472, (149.03, 104.378, 169.059)), (' C  83  VAL HG11', ' C 237  ARG  NH2', -0.472, (146.432, 181.752, 167.343)), (' A 646  ARG  CB ', ' A 646  ARG HH11', -0.471, (116.293, 110.781, 117.45)), (' B 646  ARG  CB ', ' B 646  ARG HH11', -0.471, (167.061, 131.196, 117.303)), (' C 782  LYS  HA ', ' C 782  LYS  HE3', -0.471, (155.762, 121.954, 100.167)), (' C 334  ASN  O  ', ' C 362  VAL HG12', -0.47, (115.571, 161.189, 173.643)), (' C 646  ARG  HB3', ' C 646  ARG HH11', -0.47, (123.865, 165.281, 118.033)), (' B  91  TYR  OH ', ' B 191  GLU  OE1', -0.469, (156.845, 97.036, 149.348)), (' A 898  MET  CE ', ' A1046  MET  HE2', -0.468, (121.529, 147.4, 86.59)), (' B 822  VAL HG11', ' B1053  PRO  HG2', -0.468, (131.769, 112.582, 112.086)), (' B 898  MET  CE ', ' B1046  MET  HE2', -0.467, (132.957, 117.738, 86.598)), (' B  62  VAL HG23', ' B 267  VAL  O  ', -0.467, (164.886, 100.512, 151.594)), (' C 822  VAL HG11', ' C1053  PRO  HG2', -0.467, (157.979, 144.387, 112.068)), (' A 822  VAL HG11', ' A1053  PRO  HG2', -0.465, (117.727, 150.849, 112.054)), (' C 898  MET  CE ', ' C1046  MET  HE2', -0.465, (152.94, 142.465, 86.601)), (' B  83  VAL HG11', ' B 237  ARG  NH2', -0.465, (170.426, 103.251, 167.16)), (' A1125  VAL HG13', ' A1128  ILE  HB ', -0.464, (130.769, 113.827, 67.684)), (' C1024  LYS  NZ ', ' C1038  PHE  O  ', -0.463, (142.847, 142.254, 99.356)), (' C 515  PHE  CE2', ' C 517  LEU HD11', -0.463, (120.395, 147.767, 163.732)), (' C 766  ILE HD11', ' C1008  LEU HD23', -0.463, (142.959, 131.46, 122.499)), (' A  83  VAL HG11', ' A 237  ARG  NH2', -0.462, (90.288, 122.074, 167.221)), (' A1024  LYS  NZ ', ' A1038  PHE  O  ', -0.462, (126.586, 138.943, 99.706)), (' C 646  ARG  CB ', ' C 646  ARG HH11', -0.462, (124.055, 165.554, 117.631)), (' B 515  PHE  CE2', ' B 517  LEU HD11', -0.462, (153.874, 142.748, 163.7)), (' A 766  ILE HD11', ' A1008  LEU HD23', -0.461, (135.772, 144.329, 122.052)), (' A  62  VAL HG23', ' A 267  VAL  O  ', -0.461, (90.814, 128.134, 151.524)), (' B 782  LYS  HA ', ' B 782  LYS  HE3', -0.46, (114.186, 125.417, 99.84)), (' B 766  ILE HD11', ' B1008  LEU HD23', -0.46, (128.348, 131.465, 122.2)), (' B1024  LYS  NZ ', ' B1038  PHE  O  ', -0.459, (137.887, 126.342, 99.344)), (' A 782  LYS  HA ', ' A 782  LYS  HE3', -0.459, (137.757, 160.015, 100.195)), (' A 515  PHE  CE2', ' A 517  LEU HD11', -0.459, (133.215, 116.41, 163.672)), (' C  91  TYR  OH ', ' C 191  GLU  OE1', -0.458, (158.808, 173.425, 149.358)), (' C 454  ARG  NH2', ' C 467  ASP  O  ', -0.457, (107.474, 126.767, 178.934)), (' A 751  GLN  OE1', ' C 965  ASN  ND2', -0.455, (146.912, 146.869, 148.892)), (' A 980  LEU  O  ', ' C 386  LYS  NZ ', -0.454, (131.291, 151.744, 159.109)), (' C 798  PHE  O  ', ' C 802  LEU HD12', -0.454, (165.191, 140.933, 91.57)), (' B 798  PHE  O  ', ' B 802  LEU HD12', -0.454, (125.072, 107.71, 91.691)), (' A1112  THR  OG1', ' A1114  ASP  OD2', -0.453, (128.757, 132.049, 60.868)), (' A 798  PHE  O  ', ' A 802  LEU HD12', -0.452, (116.893, 159.162, 91.454)), (' A 965  ASN  ND2', ' B 751  GLN  OE1', -0.451, (120.77, 139.506, 148.617)), (' A 364  ASP  OD1', ' A 365  TYR  N  ', -0.45, (124.24, 113.391, 175.887)), (' B 574  ASP  OD2', ' C 843  ARG  NH1', -0.449, (165.246, 146.29, 143.183)), (' C 101  ILE HG22', ' C 242  LEU HD23', -0.448, (161.372, 182.602, 161.477)), (' B1112  THR  OG1', ' B1114  ASP  OD2', -0.447, (142.714, 131.55, 61.17)), (' A 318  PHE  O  ', ' A 321  GLN  NE2', -0.446, (108.178, 123.051, 142.201)), (' A 662  CYS  HB2', ' A 693  MET  HE2', -0.446, (111.843, 122.664, 110.123)), (' B 364  ASP  OD1', ' B 365  TYR  N  ', -0.446, (161.471, 137.1, 175.961)), (' B 101  ILE HG22', ' B 242  LEU HD23', -0.446, (163.482, 90.02, 161.438)), (' C 662  CYS  HB2', ' C 693  MET  HE2', -0.445, (136.82, 163.195, 110.212)), (' C1112  THR  OG1', ' C1114  ASP  OD2', -0.445, (136.274, 143.539, 61.325)), (' B 318  PHE  O  ', ' B 321  GLN  NE2', -0.443, (160.636, 118.158, 142.224)), (' C 318  PHE  O  ', ' C 321  GLN  NE2', -0.442, (138.732, 166.092, 141.797)), (' B 662  CYS  HB2', ' B 693  MET  HE2', -0.441, (159.106, 121.653, 110.22)), (' B 624  ILE  O  ', ' B 634  ARG  NH1', -0.44, (170.699, 120.818, 137.516)), (' A 624  ILE  O  ', ' A 634  ARG  NH1', -0.439, (105.353, 112.929, 137.429)), (' C 364  ASP  OD1', ' C 365  TYR  N  ', -0.439, (122.182, 157.174, 175.8)), (' A  62  VAL HG23', ' A 267  VAL  C  ', -0.439, (90.92, 128.702, 151.763)), (' B 324  GLU  N  ', ' B 324  GLU  OE1', -0.437, (168.568, 122.727, 151.859)), (' A 324  GLU  N  ', ' A 324  GLU  OE1', -0.437, (108.172, 113.972, 151.817)), (' C 324  GLU  N  ', ' C 324  GLU  OE1', -0.436, (131.024, 170.415, 151.999)), (' B 727  MET  HE1', ' B1010  ARG  HB3', -0.436, (133.132, 126.189, 120.088)), (' B  62  VAL HG23', ' B 267  VAL  C  ', -0.435, (164.341, 100.499, 152.196)), (' B 965  ASN  ND2', ' C 751  GLN  OE1', -0.435, (139.742, 120.642, 148.729)), (' B1091  PHE  CD1', ' B1100  VAL HG12', -0.434, (149.969, 132.248, 67.6)), (' A 727  MET  HE1', ' A1010  ARG  HB3', -0.434, (128.741, 142.972, 120.016)), (' C 727  MET  HE1', ' C1010  ARG  HB3', -0.433, (145.782, 138.002, 119.945)), (' C 624  ILE  O  ', ' C 634  ARG  NH1', -0.433, (131.487, 173.96, 137.405)), (' A 101  ILE HG22', ' A 242  LEU HD23', -0.432, (82.537, 134.908, 161.084)), (' B 279  TYR  CZ ', ' B 285  ILE HD11', -0.432, (143.189, 104.778, 144.58)), (' C 279  TYR  CZ ', ' C 285  ILE HD11', -0.432, (159.225, 157.351, 144.652)), (' C1091  PHE  CD1', ' C1100  VAL HG12', -0.431, (131.805, 149.821, 67.345)), (' C  62  VAL HG23', ' C 267  VAL  C  ', -0.429, (151.997, 178.382, 151.764)), (' A 279  TYR  CZ ', ' A 285  ILE HD11', -0.427, (105.343, 144.824, 144.561)), (' A1091  PHE  CD1', ' A1100  VAL HG12', -0.427, (125.655, 125.335, 67.45)), (' A  31  SER  O  ', ' A  59  PHE  N  ', -0.425, (94.208, 129.551, 142.611)), (' C  31  SER  O  ', ' C  59  PHE  N  ', -0.424, (151.119, 175.057, 142.578)), (' A 386  LYS  NZ ', ' B 980  LEU  O  ', -0.423, (124.257, 124.016, 159.039)), (' A 865  MET  HE3', ' C 695  LEU HD21', -0.422, (130.807, 163.464, 107.093)), (' B 520  ALA  HB2', ' C  41  LYS  HE2', -0.422, (160.263, 151.888, 157.366)), (' C 822  VAL HG11', ' C1053  PRO  CG ', -0.421, (158.294, 144.341, 112.254)), (' B 296  LEU  O  ', ' B 299  THR  OG1', -0.421, (155.656, 112.078, 130.78)), (' A 732  VAL HG22', ' A 854  LEU  CD2', -0.42, (128.686, 150.997, 131.403)), (' C 732  VAL HG22', ' C 854  LEU  CD2', -0.42, (152.463, 134.427, 131.465)), (' A 129  LYS  HG2', ' A 169  GLU  OE1', -0.42, (94.347, 141.907, 175.828)), (' A 368  LEU  O  ', ' A 372  ALA  N  ', -0.419, (125.295, 119.584, 184.07)), (' B  31  SER  O  ', ' B  59  PHE  N  ', -0.418, (162.232, 102.62, 142.883)), (' B 129  LYS  HG2', ' B 169  GLU  OE1', -0.416, (151.303, 96.748, 175.747)), (' C 494  SER  OG ', ' C 495  TYR  N  ', -0.415, (116.508, 128.754, 191.053)), (' A 822  VAL HG11', ' A1053  PRO  CG ', -0.414, (117.505, 151.321, 112.075)), (' A 913  TYR  HB3', ' C1125  VAL HG23', -0.414, (119.065, 148.801, 71.881)), (' A 695  LEU HD21', ' B 865  MET  HE3', -0.413, (114.436, 117.767, 107.521)), (' B 822  VAL HG11', ' B1053  PRO  CG ', -0.413, (131.895, 112.016, 112.144)), (' C  31  SER  O  ', ' C  59  PHE  CA ', -0.412, (150.946, 175.755, 142.418)), (' C 129  LYS  HG2', ' C 169  GLU  OE1', -0.411, (161.4, 168.886, 175.739)), (' A1122  CYS  HB2', ' A1128  ILE HD13', -0.409, (130.961, 114.117, 64.198)), (' B 494  SER  OG ', ' B 495  TYR  N  ', -0.408, (139.409, 156.039, 191.021)), (' B  31  SER  O  ', ' B  59  PHE  CA ', -0.406, (162.827, 102.727, 142.467)), (' A  31  SER  O  ', ' A  59  PHE  CA ', -0.405, (93.553, 128.973, 142.395)), (' B 695  LEU HD21', ' C 865  MET  HE3', -0.405, (162.106, 126.193, 107.131)), (' A 494  SER  OG ', ' A 495  TYR  N  ', -0.403, (151.827, 122.372, 191.314)), (' C 640  SER  OG ', ' C 653  ALA  O  ', -0.403, (135.688, 176.672, 120.491)), (' A 102  ARG  NE ', ' A 121  ASN  O  ', -0.403, (82.892, 142.509, 166.439)), (' B 618  THR  O  ', ' B 621  PRO  HD2', -0.402, (176.087, 123.815, 132.765)), (' A 355  ARG  NH2', ' B 200  TYR  OH ', -0.401, (143.392, 111.886, 167.779)), (' A 524  VAL  O  ', ' A 524  VAL HG13', -0.401, (129.253, 109.231, 166.751)), (' A 618  THR  O  ', ' A 621  PRO  HD2', -0.4, (105.771, 107.416, 132.55)), (' B 368  LEU  O  ', ' B 372  ALA  N  ', -0.4, (155.099, 134.708, 184.077)), (' C 102  ARG  NE ', ' C 121  ASN  O  ', -0.4, (167.996, 178.405, 166.483)), (' B 355  ARG  NH2', ' C 200  TYR  OH ', -0.4, (152.837, 154.244, 167.394))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
