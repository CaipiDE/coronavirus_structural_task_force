# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 360 ', 'ASN', 0.023772089547037377, (6.384000000000003, 51.723, 38.499999999999986)), ('A', ' 518 ', 'LEU', 0.02073690017859398, (1.8779999999999994, 37.096, 33.777)), ('A', ' 527 ', 'PRO', 0.0911647245375816, (18.354000000000006, 48.42199999999998, 32.407)), ('B', ' 156 ', 'VAL', 0.09412736514919538, (51.29500000000001, 18.594, 13.842)), ('D', '  27 ', 'ARG', 0.002583478329347314, (12.366, 53.064000000000014, 74.933)), ('F', '  27 ', 'ARG', 0.04117932755203285, (24.488, 50.806, -21.117))]
data['omega'] = [('B', ' 151 ', 'PRO', None, (48.337, 9.802999999999997, 25.269)), ('B', ' 153 ', 'PRO', None, (46.085, 15.202, 23.109)), ('C', '   8 ', 'PRO', None, (16.372, 16.806, 13.47)), ('C', ' 101 ', 'PRO', None, (17.453000000000007, 16.713, 37.982)), ('C', ' 147 ', 'PRO', None, (29.174, 15.145, -1.293)), ('C', ' 172 ', 'GLN', None, (34.057, 19.738999999999997, 7.989999999999999)), ('H', ' 151 ', 'PRO', None, (58.536, 22.86199999999999, 39.426)), ('H', ' 153 ', 'PRO', None, (52.849, 24.828999999999994, 41.126)), ('L', '   8 ', 'PRO', None, (50.131, 55.837999999999994, 45.68)), ('L', ' 101 ', 'PRO', None, (53.655, 51.476, 21.9)), ('L', ' 147 ', 'PRO', None, (50.24200000000001, 45.47999999999999, 61.94299999999999))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 198  TYR  H  ', ' B 214  LYS  HE2', -1.084, (60.436, 19.17, 1.899)), (' B 214  LYS  NZ ', ' B 215  VAL  O  ', -0.912, (59.558, 16.304, 0.623)), (' B 198  TYR  N  ', ' B 214  LYS  HE2', -0.881, (60.365, 19.923, 2.4)), (' D  13  GLN  HG2', ' D 126  SER  HB2', -0.839, (2.874, 50.731, 111.842)), (' B  91  THR HG23', ' B 116  THR  HA ', -0.767, (41.969, 10.291, 29.266)), (' A 388  ASN  HB3', ' A 527  PRO  O  ', -0.74, (19.726, 45.101, 33.095)), (' A 391  CYS  HA ', ' A 525  CYS  HB3', -0.739, (10.355, 44.336, 33.417)), (' F  36  TRP  HD1', ' F  70  ILE  CD1', -0.734, (35.735, 57.53, -35.538)), (' B 147  LYS  HA ', ' B 181  SER  HB2', -0.73, (49.729, 5.824, 13.999)), (' C 127  SER  HG ', ' C 130  GLN  H  ', -0.723, (58.698, 3.339, 7.723)), (' L  96  GLN HE21', ' L 103  THR HG22', -0.715, (52.047, 52.784, 27.091)), (' C  22  ASN  OD1', ' C  78  THR  OG1', -0.7, (10.632, 22.928, 16.03)), (' F  83  MET  HE2', ' F  86  LEU HD21', -0.677, (36.997, 56.714, -46.304)), (' C  85  GLN  HG2', ' E 372  ALA  HB3', -0.676, (28.858, 33.983, 8.451)), (' B 155  THR  OG1', ' B 203  ASN  N  ', -0.675, (54.011, 17.184, 17.814)), (' B 142  LEU HD13', ' B 215  VAL HG21', -0.67, (55.705, 15.695, 1.719)), (' A 404  GLY  HA3', ' A 504  GLY  HA2', -0.67, (24.685, 31.726, 62.27)), (' A 337  PRO  HB2', ' A 340  GLU  HG3', -0.655, (14.61, 53.121, 48.855)), (' C   2  ILE HG12', ' C  27  GLN  HB3', -0.646, (9.79, 16.685, 32.235)), (' C  43  GLN  HB2', ' C  53  LEU HD11', -0.644, (25.135, 27.721, 18.852)), (' F  36  TRP  HD1', ' F  70  ILE HD11', -0.637, (35.222, 57.169, -34.641)), (' F  28  THR  HB ', ' F  77  ASN HD21', -0.636, (24.424, 55.792, -23.571)), (' C  81  ILE HG21', ' C  84  LEU HD13', -0.634, (22.713, 28.156, 9.951)), (' F  51  ILE HD13', ' F  70  ILE HG23', -0.633, (36.949, 62.05, -32.076)), (' B 214  LYS  HD3', ' B 215  VAL  N  ', -0.613, (60.185, 15.289, 3.338)), (' A 360  ASN  HA ', ' A 523  THR  HB ', -0.611, (5.934, 50.362, 36.979)), (' L  43  GLN  HB2', ' L  53  LEU HD11', -0.611, (40.97, 46.263, 39.636)), (' L   6  GLN  O  ', ' L 106  GLN  NE2', -0.61, (53.312, 54.112, 41.402)), (' H 142  LEU HD13', ' H 215  VAL HG21', -0.603, (51.164, 18.755, 62.623)), (' A 455  LEU HD11', ' A 493  GLN  HB2', -0.602, (10.504, 32.237, 72.284)), (' H  32  TYR  HA ', ' H 100  SER  HA ', -0.595, (38.49, 43.439, 18.658)), (' F  26  GLY  O  ', ' F  28  THR HG23', -0.594, (22.316, 53.271, -23.066)), (' D  27  ARG  O  ', ' D  98  ARG  NH2', -0.594, (11.168, 50.484, 76.413)), (' L 188  SER  OG ', ' L 191  ASP  OD2', -0.592, (77.137, 25.329, 56.391)), (' L 151  LYS  HG3', ' L 203  THR  HB ', -0.585, (61.637, 44.307, 65.451)), (' C   6  GLN  O  ', ' C 106  GLN  NE2', -0.583, (17.742, 14.104, 18.038)), (' H  51  ILE HG13', ' H  58  THR HG22', -0.574, (50.019, 40.075, 13.858)), (' C  54  ILE HD12', ' C  79  LEU HD12', -0.57, (17.991, 29.472, 19.361)), (' B  36  TRP  HB3', ' B  48  MET  HE3', -0.567, (31.132, 17.309, 36.158)), (' B 197  THR HG22', ' B 214  LYS  HG3', -0.565, (62.224, 19.012, 4.083)), (' A 349  SER  HB3', ' A 452  LEU  H  ', -0.559, (12.362, 39.18, 66.484)), (' L  60  ARG  NH1', ' L  68  PHE  O  ', -0.559, (32.949, 53.062, 39.461)), (' L  45  LYS  NZ ', ' L  87  GLU  O  ', -0.558, (38.444, 41.052, 45.83)), (' F  36  TRP  CD1', ' F  70  ILE HD11', -0.558, (35.162, 56.745, -35.022)), (' A 518  LEU  CD2', ' C  35  ASN  HB2', -0.553, (2.329, 33.709, 31.877)), (' C 121  VAL HG21', ' C 202  VAL HG11', -0.552, (39.14, 8.504, -5.51)), (' E 357  ARG  NH1', ' E 359  SER  OG ', -0.549, (20.998, 63.337, 10.047)), (' D  91  THR HG23', ' D 124  THR  HA ', -0.547, (9.188, 48.915, 106.435)), (' A 518  LEU  CD2', ' C  35  ASN  CB ', -0.546, (3.302, 33.919, 31.498)), (' E 378  LYS  NZ ', ' H  57  GLU  OE2', -0.546, (46.431, 46.983, 9.865)), (' F  36  TRP  CD1', ' F  70  ILE  CD1', -0.541, (35.421, 57.108, -35.673)), (' B 188  VAL HG11', ' B 198  TYR  CE2', -0.541, (54.045, 21.525, -0.529)), (' H  38  ARG  HD3', ' H  40  MET  HG3', -0.539, (58.207, 38.381, 32.442)), (' L 157  ASP  HA ', ' L 197  VAL HG22', -0.539, (73.73, 30.287, 70.909)), (' F  23  ALA  HA ', ' F  78  THR HG22', -0.537, (24.202, 56.45, -32.795)), (' F  27  ARG  O  ', ' F  98  ARG  NH2', -0.537, (27.101, 51.668, -22.371)), (' E 395  VAL HG13', ' E 524  VAL HG11', -0.537, (26.64, 58.453, 14.569)), (' A 336  CYS  SG ', ' A 363  ALA  HB2', -0.536, (13.978, 49.119, 40.45)), (' A 371  SER  HA ', ' L  67  ARG HH12', -0.536, (30.285, 45.755, 46.216)), (' A 393  THR  OG1', ' A 517  LEU  HA ', -0.534, (3.083, 40.255, 36.308)), (' E 384  PRO  HA ', ' E 387  LEU  HG ', -0.533, (31.549, 50.066, 18.618)), (' F  71  SER  OG ', ' F  80  TYR  HB2', -0.53, (31.664, 62.848, -36.118)), (' C 207  LEU HD13', ' C 211  VAL HG23', -0.526, (36.339, 8.439, -9.018)), (' H  88  ALA  O  ', ' H  91  THR HG23', -0.526, (63.437, 31.635, 32.96)), (' H   1  GLN  NE2', ' H  27  TYR  O  ', -0.525, (31.024, 38.207, 18.893)), (' B 158  TRP  CD1', ' B 167  VAL HG21', -0.52, (50.548, 20.263, 7.023)), (' L  53  LEU  HA ', ' L  64  VAL HG21', -0.52, (36.011, 47.24, 35.745)), (' E 363  ALA  O  ', ' E 527  PRO  HD2', -0.514, (22.721, 50.327, 18.154)), (' E 461  LEU HD22', ' E 465  GLU  HB3', -0.514, (41.023, 64.595, -1.636)), (' E 358  ILE  HB ', ' E 395  VAL HG22', -0.51, (26.12, 57.438, 11.706)), (' A 366  SER  HA ', ' A 369  TYR  CZ ', -0.509, (24.151, 43.667, 38.636)), (' B 118  ALA  HB3', ' B 150  PHE  CE1', -0.506, (45.85, 5.735, 28.319)), (' A 518  LEU HD21', ' C  35  ASN  CB ', -0.5, (2.782, 33.508, 31.031)), (' B 117  VAL  O  ', ' B 117  VAL HG23', -0.496, (42.029, 5.37, 32.167)), (' E 404  GLY  O  ', ' E 407  VAL HG12', -0.496, (42.837, 44.721, -0.107)), (' A 391  CYS  CA ', ' A 525  CYS  HB3', -0.495, (10.507, 44.28, 33.165)), (' L  30  LEU HD11', ' L  74  GLY  HA2', -0.495, (44.73, 65.319, 29.444)), (' B 170  PHE  CE2', ' C 182  SER  HB3', -0.494, (42.133, 11.774, 5.468)), (' H  38  ARG  HB2', ' H  48  MET  SD ', -0.494, (55.431, 38.932, 27.97)), (' E 336  CYS  SG ', ' E 363  ALA  HB2', -0.492, (22.569, 53.508, 14.169)), (' A 406  GLU  OE2', ' A 417  LYS  HE2', -0.491, (15.421, 29.668, 65.19)), (' H 105  PRO  HG3', ' L  97  TYR  CZ ', -0.49, (40.566, 51.588, 26.921)), (' E 498  GLN  O  ', ' E 501  ASN  HB2', -0.489, (39.024, 38.324, -11.721)), (' B 202  VAL  O  ', ' B 210  LYS  HA ', -0.488, (57.5, 16.02, 18.008)), (' B 196  GLN  HG3', ' B 197  THR  N  ', -0.487, (59.772, 22.631, 0.666)), (' C 145  PHE  N  ', ' C 178  THR  OG1', -0.484, (35.502, 18.193, -0.788)), (' H 118  ALA  HB3', ' H 150  PHE  CE1', -0.482, (62.221, 25.124, 36.423)), (' L 204  HIS  HB3', ' L 207  LEU HD12', -0.481, (55.949, 42.341, 67.554)), (' B 150  PHE  CE1', ' B 151  PRO  HB3', -0.481, (46.196, 8.387, 26.801)), (' L  67  ARG  HB2', ' L  82  SER  O  ', -0.479, (33.436, 51.743, 46.652)), (' A 382  VAL HG21', ' A 387  LEU HD23', -0.478, (14.468, 36.916, 37.525)), (' B 156  VAL  HA ', ' B 201  ASN  O  ', -0.477, (53.452, 18.412, 13.82)), (' E 366  SER  HA ', ' E 369  TYR  CZ ', -0.477, (27.488, 43.936, 17.365)), (' A 518  LEU HD21', ' C  35  ASN  HB2', -0.476, (2.294, 33.628, 31.624)), (' A 347  PHE  CD2', ' A 509  ARG  HG2', -0.475, (18.052, 42.928, 58.426)), (' F 106  LEU HD12', ' F 109  TYR  HD2', -0.475, (41.799, 56.431, -25.908)), (' C  86  ALA  O  ', ' C  89  VAL HG23', -0.475, (30.084, 26.582, 9.303)), (' E 387  LEU  HA ', ' E 389  ASP  OD2', -0.474, (29.401, 52.613, 23.596)), (' C  89  VAL HG13', ' C 111  GLU  HA ', -0.474, (28.352, 22.381, 9.274)), (' A 518  LEU HD23', ' C  35  ASN  CB ', -0.47, (3.204, 34.182, 32.039)), (' H  47  TRP  HZ2', ' H  50  ILE  HB ', -0.47, (49.544, 45.103, 21.055)), (' B 190  SER  HA ', ' B 193  LEU HD13', -0.468, (55.454, 18.519, -6.856)), (' B 123  PRO  HB3', ' B 149  TYR  HB3', -0.468, (52.207, 9.198, 18.807)), (' H 156  VAL  HB ', ' H 202  VAL HG12', -0.467, (51.367, 20.36, 51.352)), (' A 419  ALA  O  ', ' A 424  LYS  HD2', -0.466, (7.247, 27.654, 56.359)), (' C   6  GLN  HA ', ' C  23  CYS  HA ', -0.466, (14.587, 17.557, 19.518)), (' L   4  LEU HD23', ' L  23  CYS  SG ', -0.465, (48.812, 55.535, 34.016)), (' E 444  LYS  O  ', ' E 499  PRO  HD3', -0.465, (34.694, 38.55, -14.881)), (' D   5  VAL  O  ', ' D  22  CYS  HA ', -0.464, (8.267, 53.94, 89.34)), (' C  85  GLN  HG3', ' C  86  ALA  H  ', -0.463, (28.831, 31.333, 6.923)), (' B 210  LYS  HG3', ' B 210  LYS  O  ', -0.462, (60.949, 17.222, 18.645)), (' C   4  LEU HD11', ' C  96  GLN  HG2', -0.461, (15.139, 18.767, 29.991)), (' B   4  LEU  HG ', ' B 108  VAL HG12', -0.46, (32.719, 30.71, 34.021)), (' L 151  LYS  HZ2', ' L 153  GLN  HG3', -0.459, (65.537, 41.985, 65.535)), (' A 387  LEU  C  ', ' A 389  ASP  H  ', -0.454, (16.083, 41.896, 33.304)), (' A 439  ASN  OD1', ' A 443  SER  OG ', -0.454, (26.061, 40.671, 66.703)), (' D   5  VAL HG22', ' D  23  ALA  HB3', -0.454, (7.943, 57.193, 87.021)), (' H  31  THR HG22', ' H 100  SER  HB2', -0.453, (36.073, 44.819, 17.594)), (' F   6  GLU  HB2', ' F 121  THR HG23', -0.452, (28.04, 50.432, -40.056)), (' E 383  SER  OG ', ' H 104  THR  OG1', -0.451, (38.176, 48.994, 22.715)), (' C 172  GLN  HG2', ' C 177  SER  HA ', -0.451, (32.677, 22.974, 4.095)), (' B   1  GLN  HA ', ' L  63  GLY  HA3', -0.45, (30.92, 41.866, 35.584)), (' H  20  ILE HD11', ' H  81  LEU HD23', -0.45, (53.269, 33.463, 24.918)), (' E 349  SER  HB3', ' E 452  LEU  H  ', -0.449, (35.024, 53.347, -9.861)), (' A 335  LEU  HA ', ' A 362  VAL  O  ', -0.449, (14.873, 52.465, 38.713)), (' L 114  ARG  HG2', ' L 115  THR  N  ', -0.448, (42.85, 45.897, 63.249)), (' B   6  GLN  NE2', ' B 113  THR HG23', -0.448, (37.85, 21.63, 33.744)), (' F 105  LEU  HA ', ' F 105  LEU HD12', -0.447, (47.641, 58.193, -22.036)), (' B 203  ASN  ND2', ' B 210  LYS  HB2', -0.447, (57.705, 18.997, 19.337)), (' E 430  THR  O  ', ' E 430  THR  OG1', -0.446, (36.9, 57.742, 15.761)), (' A 452  LEU  HA ', ' A 494  SER  HA ', -0.446, (12.913, 37.166, 70.136)), (' B 142  LEU HD13', ' B 215  VAL  CG2', -0.443, (56.417, 15.839, 2.109)), (' D  34  MET  HG3', ' D  53  TRP  CZ3', -0.44, (5.65, 47.396, 82.948)), (' B 203  ASN  HA ', ' B 209  THR  O  ', -0.438, (56.393, 16.166, 20.272)), (' B 197  THR  HA ', ' B 214  LYS  HE3', -0.437, (61.536, 19.143, 1.514)), (' L   2  ILE  O  ', ' L 103  THR HG21', -0.437, (54.03, 53.984, 28.471)), (' B  12  LYS  HB2', ' B 117  VAL HG12', -0.436, (43.428, 9.376, 34.752)), (' E 341  VAL HG11', ' E 397  ALA  HB1', -0.434, (27.921, 53.136, 5.269)), (' H 105  PRO  HG2', ' L  55  TYR  HB2', -0.434, (38.607, 51.097, 27.739)), (' A 334  ASN  N  ', ' A 334  ASN  OD1', -0.434, (14.879, 57.247, 37.38)), (' D  23  ALA  HA ', ' D  78  THR HG22', -0.433, (5.477, 54.913, 85.46)), (' E 361  CYS  SG ', ' E 524  VAL HG23', -0.433, (21.876, 56.568, 14.405)), (' F  28  THR HG22', ' F  77  ASN  ND2', -0.432, (23.794, 55.452, -24.797)), (' B   6  GLN HE21', ' B 113  THR HG23', -0.432, (38.329, 21.514, 34.055)), (' L 207  LEU HD13', ' L 211  VAL HG12', -0.431, (57.482, 40.183, 70.38)), (' C  53  LEU  HA ', ' C  64  VAL HG21', -0.431, (23.332, 32.409, 22.036)), (' E 378  LYS  HE3', ' E 380  TYR  OH ', -0.43, (44.107, 49.382, 10.3)), (' D  47  PHE  HE1', ' D  50  ALA  HB2', -0.429, (9.36, 39.124, 88.582)), (' B  47  TRP  HZ2', ' B  50  ILE  HB ', -0.427, (23.646, 21.069, 38.834)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.427, (9.603, 44.889, 42.811)), (' A 408  ARG HH12', ' B  57  GLU  HB2', -0.425, (22.592, 22.713, 50.925)), (' C 190  ALA  O  ', ' C 194  LYS  HG3', -0.425, (53.337, -11.906, 3.514)), (' A 393  THR  N  ', ' A 516  GLU  O  ', -0.424, (4.999, 41.381, 37.733)), (' A 369  TYR  CZ ', ' A 385  THR HG22', -0.423, (24.151, 40.877, 37.407)), (' H 155  THR  O  ', ' H 202  VAL  HA ', -0.423, (50.15, 19.069, 49.081)), (' B 170  PHE  CZ ', ' C 182  SER  HB3', -0.422, (42.878, 11.986, 5.477)), (' L  37  ASN  O  ', ' L  56  TRP  HA ', -0.422, (39.517, 56.661, 28.324)), (' H  40  MET  HG2', ' H  92  ALA  HB2', -0.422, (58.345, 35.885, 33.381)), (' C 119  PRO  HB3', ' C 145  PHE  HB3', -0.422, (36.166, 13.842, -2.621)), (' A 366  SER  O  ', ' A 370  ASN  HB2', -0.422, (26.38, 44.926, 41.184)), (' L  34  ILE  O  ', ' L  36  LYS  N  ', -0.419, (37.743, 62.289, 24.016)), (' C 121  VAL  O  ', ' C 213  LYS  HD2', -0.418, (44.861, 9.355, -6.82)), (' C  36  LYS  HA ', ' C  36  LYS  HD3', -0.418, (8.571, 32.115, 28.844)), (' F  12  MET  HE3', ' F  16  GLY  HA3', -0.418, (33.957, 62.614, -52.538)), (' C 112  ILE  HB ', ' C 172  GLN  OE1', -0.417, (29.659, 23.583, 5.452)), (' E 419  ALA  O  ', ' E 424  LYS  HD2', -0.417, (45.767, 59.266, 1.279)), (' A 518  LEU  CD2', ' C  35  ASN  HB3', -0.416, (3.438, 34.134, 31.507)), (' A 518  LEU HD23', ' C  35  ASN  HB2', -0.414, (3.009, 33.848, 32.388)), (' C 130  GLN  O  ', ' C 133  SER  HB3', -0.414, (57.444, -0.742, 11.1)), (' L 151  LYS  HE3', ' L 203  THR  HB ', -0.412, (62.649, 44.342, 66.154)), (' A 445  VAL HG23', ' A 446  GLY  H  ', -0.412, (25.643, 44.481, 76.161)), (' C 176  ASP  OD1', ' C 178  THR HG22', -0.412, (36.601, 22.58, 0.965)), (' F   4  LEU HD13', ' F  24  VAL  HB ', -0.411, (27.022, 51.693, -29.956)), (' A 438  SER  HB3', ' A 509  ARG  HD2', -0.409, (22.567, 42.819, 59.247)), (' L   3  GLN  H  ', ' L  26  SER  HB3', -0.409, (55.251, 58.498, 29.709)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.409, (59.137, 20.164, 46.336)), (' A 377  PHE  CE2', ' A 434  ILE HG12', -0.409, (21.382, 38.975, 46.612)), (' C  37  ASN  O  ', ' C  56  TRP  HA ', -0.408, (12.918, 29.564, 28.995)), (' A 518  LEU HD23', ' C  35  ASN  HB3', -0.408, (3.625, 34.154, 31.776)), (' A 416  GLY  N  ', ' A 420  ASP  OD2', -0.407, (10.202, 23.999, 60.314)), (' A 444  LYS  O  ', ' A 499  PRO  HD3', -0.407, (26.107, 41.985, 72.766)), (' H  38  ARG  NH1', ' H  40  MET  SD ', -0.407, (60.275, 38.235, 32.457)), (' B 102  ILE HG13', ' B 103  SER  N  ', -0.407, (18.094, 25.52, 39.812)), (' H 150  PHE  HA ', ' H 151  PRO  HA ', -0.407, (59.553, 24.359, 41.297)), (' C  85  GLN  HG3', ' C  86  ALA  N  ', -0.405, (28.639, 31.231, 7.424)), (' A 518  LEU HD12', ' A 519  HIS  ND1', -0.404, (-1.788, 35.583, 33.856)), (' H 156  VAL  HA ', ' H 201  ASN  O  ', -0.403, (49.008, 18.734, 50.951)), (' D  83  MET  HB2', ' D  83  MET  HE3', -0.402, (1.877, 47.636, 100.005)), (' E 383  SER  HG ', ' H 104  THR  HG1', -0.402, (37.688, 49.048, 22.809)), (' F  18  LEU  HA ', ' F  18  LEU HD23', -0.402, (30.536, 61.159, -47.472)), (' A 493  GLN  HG3', ' D 104  SER  H  ', -0.401, (10.652, 33.0, 75.842)), (' A 404  GLY  CA ', ' A 504  GLY  HA2', -0.401, (23.675, 31.574, 62.148)), (' L  30  LEU  CD1', ' L  74  GLY  HA2', -0.4, (45.22, 65.416, 28.789)), (' D  18  LEU  HB2', ' D  86  LEU HD11', -0.4, (1.632, 48.381, 101.783)), (' A 455  LEU  CD1', ' A 493  GLN  HB2', -0.4, (10.291, 32.298, 71.874))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
