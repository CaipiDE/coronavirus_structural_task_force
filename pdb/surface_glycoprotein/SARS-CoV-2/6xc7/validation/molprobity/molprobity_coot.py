# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 130 ', 'SER', 0.0018129449647819316, (128.08899999999997, -46.459, 34.219)), ('D', '  31 ', 'SER', 0.04722239768218462, (70.93, -59.19000000000001, 44.881))]
data['omega'] = [('A', ' 450 ', 'ASN', None, (58.08799999999998, -68.02, 46.646999999999984)), ('C', ' 128 ', 'SER', None, (128.378, -44.924, 29.319999999999997)), ('C', ' 130 ', 'SER', None, (129.152, -45.667999999999985, 33.605)), ('C', ' 147 ', 'PRO', None, (98.55199999999999, -49.012, 13.773999999999996)), ('C', ' 149 ', 'PRO', None, (98.808, -52.972, 18.572)), ('D', '   8 ', 'PRO', None, (85.519, -45.65, 46.501)), ('D', '  31 ', 'SER', None, (69.63, -58.665, 44.47499999999999)), ('D', '  95 ', 'PRO', None, (69.517, -53.263, 29.957999999999995)), ('D', ' 141 ', 'PRO', None, (106.409, -43.613, 46.25199999999999)), ('H', ' 136 ', 'ALA', None, (14.936, -13.434, -5.945999999999998)), ('H', ' 147 ', 'PRO', None, (42.998, -17.823000000000008, 10.732999999999997)), ('H', ' 149 ', 'PRO', None, (37.87, -21.176, 11.904999999999996)), ('L', '   8 ', 'PRO', None, (32.055, -48.644, -6.549999999999998)), ('L', '  95 ', 'PRO', None, (50.485, -53.43, 9.318999999999999)), ('L', ' 141 ', 'PRO', None, (21.874, -33.262, -10.986999999999997))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' D  77  ARG  O  ', ' D  79  GLU  OE1', -0.94, (94.888, -60.998, 51.312)), (' A 383  SER  HB2', ' H  96  SER  HB3', -0.846, (37.748, -55.743, 21.327)), (' C 188  SER  HG ', ' C 194  TYR  HH ', -0.84, (124.694, -58.788, 30.131)), (' L   3  GLN  H  ', ' L  26  SER  HB3', -0.755, (46.335, -55.446, -0.785)), (' D  80  PRO  HA ', ' D  83  PHE  HE2', -0.754, (100.379, -57.247, 46.252)), (' D  78  LEU  C  ', ' D  79  GLU  OE2', -0.727, (97.433, -59.378, 51.129)), (' D 143  GLU  C  ', ' D 143  GLU  OE2', -0.709, (105.192, -37.316, 42.032)), (' C  66  ARG  NH2', ' C  86  ASP  OD2', -0.702, (80.294, -49.025, 14.835)), (' C 187  SER  HA ', ' C 189  LEU HD22', -0.694, (130.877, -54.845, 32.114)), (' C 186  SER  O  ', ' C 189  LEU  HB3', -0.693, (128.698, -53.363, 31.019)), (' D  77  ARG  O  ', ' D  79  GLU  CD ', -0.693, (95.995, -60.896, 51.12)), (' H 201  LYS  HG2', ' H 202  PRO  HD3', -0.659, (37.381, -17.676, 15.49)), (' A 455  LEU HD12', ' A 493  GLN  HG3', -0.651, (68.906, -70.097, 36.882)), (' D 122  ASP  HA ', ' D 125  LEU  HB2', -0.648, (122.359, -39.753, 15.014)), (' A 381  GLY  HA3', ' A 430  THR HG22', -0.634, (43.1, -63.219, 16.639)), (' D  78  LEU  O  ', ' D  79  GLU  OE2', -0.627, (97.867, -59.75, 51.751)), (' D 113  PRO  HD2', ' D 201  LEU HD11', -0.627, (113.623, -40.385, 43.683)), (' L  54  ARG  HG2', ' L  58  VAL  HB ', -0.621, (24.35, -52.451, 12.51)), (' C  11  LEU  HB2', ' C 147  PRO  HG3', -0.62, (95.333, -50.213, 12.751)), (' D 185  ASP  HA ', ' D 188  LYS  HD2', -0.618, (117.819, -25.996, 17.043)), (' C 152  VAL HG22', ' C 198  VAL HG13', -0.609, (109.156, -53.849, 19.705)), (' C  29  VAL HG21', ' C  76  SER  HA ', -0.603, (80.494, -74.416, 19.132)), (' C 119  PRO  HB3', ' C 145  TYR  HB3', -0.6, (106.497, -48.229, 15.15)), (' D 182  SER  HG ', ' D 185  ASP  H  ', -0.591, (115.848, -28.297, 15.052)), (' C 163  VAL HG22', ' C 182  VAL HG12', -0.587, (114.638, -56.544, 29.829)), (' C 184  VAL HG11', ' C 194  TYR  OH ', -0.585, (123.158, -57.311, 30.985)), (' C 189  LEU HD23', ' C 190  GLY  H  ', -0.577, (131.275, -56.011, 29.172)), (' D 106  ILE  H  ', ' D 166  GLN HE22', -0.576, (99.647, -49.796, 44.327)), (' A 393  THR  O  ', ' A 394  ASN  ND2', -0.569, (35.17, -77.325, 23.739)), (' D   8  PRO  HD2', ' D  11  LEU HD11', -0.569, (87.033, -47.165, 47.038)), (' L  80  ALA  HA ', ' L 106  ILE HD11', -0.564, (18.691, -40.113, 2.038)), (' C  82  MET  HB3', ' C  82C LEU HD21', -0.557, (81.978, -53.802, 13.897)), (' D   3  VAL  H  ', ' D  26  SER  HB3', -0.548, (71.251, -46.955, 36.919)), (' D  77  ARG  O  ', ' D  79  GLU  OE2', -0.541, (96.363, -60.177, 51.866)), (' L  25  SER  OG ', ' L  27  GLN  O  ', -0.54, (43.494, -59.734, 0.916)), (' A 489  TYR  OH ', ' C  94  ARG  NH2', -0.536, (78.821, -73.663, 32.223)), (' C 195  ILE HG22', ' C 210  LYS  HA ', -0.52, (121.792, -56.166, 19.492)), (' D  38  GLN  O  ', ' D  84  ALA  HB1', -0.519, (92.944, -55.836, 37.661)), (' D 198  HIS  HB3', ' D 201  LEU  CD1', -0.516, (113.011, -39.265, 44.203)), (' L  13  VAL HG21', ' L  19  ALA  HB2', -0.516, (22.923, -47.205, -2.446)), (' C 123  PRO  HB3', ' C 211  VAL HG12', -0.513, (120.081, -50.358, 20.332)), (' A 501  ASN  HB3', ' A 505  TYR  HB2', -0.504, (61.848, -55.572, 42.806)), (' L  76  SER  OG ', ' L  77  SER  N  ', -0.501, (16.878, -51.445, 3.003)), (' D  85  VAL HG22', ' D 103  LYS  HG3', -0.499, (92.613, -50.067, 38.329)), (' D  29  VAL HG11', ' D  90  GLN  HB2', -0.499, (71.973, -54.267, 38.67)), (' A 403  ARG  NH2', ' A 405  ASP  OD2', -0.495, (63.511, -57.235, 36.0)), (' D  21  LEU HD13', ' D  73  LEU HD23', -0.488, (86.518, -54.911, 45.976)), (' C 188  SER  HA ', ' C 191  THR  OG1', -0.485, (128.91, -59.138, 30.702)), (' C 195  ILE HD12', ' C 208  ASP  HB3', -0.485, (117.603, -58.797, 16.972)), (' C 187  SER  C  ', ' C 189  LEU  H  ', -0.481, (129.438, -55.582, 31.371)), (' H  97  GLY  O  ', ' H 100  THR  OG1', -0.481, (41.49, -55.115, 18.461)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.477, (47.067, -72.333, 32.498)), (' L  27D TYR  HB3', ' L  28  ILE HG22', -0.477, (40.293, -66.183, 11.912)), (' C 189  LEU HD23', ' C 190  GLY  N  ', -0.476, (130.889, -55.677, 29.187)), (' D 198  HIS  HB3', ' D 201  LEU HD12', -0.473, (112.849, -38.763, 44.708)), (' A 425  LEU HD21', ' A 512  VAL HG11', -0.472, (48.693, -67.707, 26.207)), (' L  13  VAL HG12', ' L  14  SER  O  ', -0.471, (18.106, -45.005, -3.295)), (' D 113  PRO  HB3', ' D 139  PHE  CD1', -0.471, (111.591, -43.549, 40.541)), (' A 449  TYR  HD2', ' A 450  ASN  HA ', -0.47, (59.794, -69.242, 46.95)), (' D  80  PRO  HA ', ' D  83  PHE  CE2', -0.468, (99.889, -57.035, 46.329)), (' H 136  ALA  HB2', ' H 186  SER  HB3', -0.466, (13.304, -10.555, -5.789)), (' D 147  GLN  HG2', ' D 154  LEU HD13', -0.464, (112.455, -27.965, 34.473)), (' L  31  ASN  O  ', ' L  50  TRP  HA ', -0.462, (35.403, -60.073, 9.811)), (' L 183  LYS  O  ', ' L 187  GLU  HG3', -0.461, (39.8, -1.261, -12.504)), (' A 428  ASP  O  ', ' L  27D TYR  OH ', -0.458, (46.472, -67.987, 15.18)), (' C 211  VAL  O  ', ' C 211  VAL HG23', -0.457, (122.315, -52.588, 23.708)), (' C 138  LEU HD13', ' C 211  VAL HG21', -0.455, (119.947, -52.429, 24.785)), (' H 100A PRO  HD3', ' L  91  TYR  CZ ', -0.451, (37.661, -56.449, 13.128)), (' D 167  ASP  O  ', ' D 171  SER  HA ', -0.45, (104.781, -53.935, 42.446)), (' A 377  PHE  CG ', ' H  31  THR HG22', -0.449, (41.162, -56.217, 28.802)), (' D 120  PRO  HD3', ' D 132  VAL HG22', -0.449, (119.118, -36.654, 22.858)), (' L 184  ALA  O  ', ' L 188  LYS  HG3', -0.448, (42.054, -2.622, -16.389)), (' D  37  GLN  HB2', ' D  47  LEU HD11', -0.446, (88.886, -59.122, 41.788)), (' H 136  ALA  HB3', ' H 184  VAL  O  ', -0.446, (13.976, -12.715, -3.108)), (' C  69  ILE HD11', ' C  78  LEU HD11', -0.444, (77.852, -64.607, 20.749)), (' C 130  SER  O  ', ' C 131  THR HG23', -0.44, (127.252, -45.924, 37.73)), (' D 115  VAL HG12', ' D 207  LYS  HG3', -0.431, (119.558, -39.771, 36.093)), (' D 167  ASP  CG ', ' D 170  ASP  OD2', -0.427, (108.218, -55.738, 40.21)), (' C 101  ASP  N  ', ' C 101  ASP  OD1', -0.426, (81.3, -67.295, 33.149)), (' C  33  TYR  CE1', ' C  97  GLY  HA2', -0.423, (71.633, -68.611, 30.681)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.422, (50.793, -64.465, 40.424)), (' D 106  ILE HG22', ' D 107  LYS  N  ', -0.422, (101.294, -51.118, 48.573)), (' D 138  ASN  HA ', ' D 172  THR  HB ', -0.421, (109.725, -49.652, 41.103)), (' H 122  PHE  CE2', ' L 124  GLN  HG3', -0.419, (36.233, -6.858, -0.954)), (' C 127  SER  HG ', ' C 130  SER  HA ', -0.415, (127.079, -45.381, 33.532)), (' H   2  MET  HB2', ' H   2  MET  HE2', -0.414, (36.421, -45.292, 27.948)), (' H 181  VAL HG11', ' L 135  LEU HD13', -0.413, (25.143, -17.324, -3.303)), (' C 163  VAL HG22', ' C 182  VAL  CG1', -0.412, (114.906, -56.144, 29.646)), (' C 127  SER  OG ', ' C 130  SER  HA ', -0.411, (127.05, -45.315, 32.995)), (' D 140  TYR  CG ', ' D 141  PRO  HA ', -0.41, (105.122, -45.6, 46.057)), (' A 475  ALA  HB1', ' C  32  ASN HD21', -0.41, (77.335, -75.607, 29.061)), (' L 122  ASP  HA ', ' L 125  LEU  HB2', -0.41, (33.664, -0.552, -5.768)), (' D 143  GLU  OE2', ' D 144  ALA  N  ', -0.409, (105.679, -37.663, 41.846)), (' D  81  GLU  C  ', ' D  83  PHE  H  ', -0.408, (96.826, -57.571, 43.448)), (' A 398  ASP  O  ', ' A 511  VAL  HA ', -0.407, (46.486, -67.628, 32.822)), (' D  19  ALA  O  ', ' D  74  THR  HA ', -0.407, (87.225, -55.081, 51.113)), (' L 124  GLN  O  ', ' L 127  SER  OG ', -0.407, (38.441, -4.063, -2.946)), (' A 528  LYS  HB3', ' A 528  LYS  HE2', -0.407, (24.693, -63.69, 22.237)), (' H  99  SER  N  ', ' L  96  TYR  OH ', -0.407, (44.082, -55.342, 15.382)), (' A 366  SER  O  ', ' A 370  ASN  HB2', -0.407, (33.133, -56.244, 33.136)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.406, (37.857, -13.253, 6.969)), (' C 195  ILE  O  ', ' C 195  ILE HG13', -0.404, (118.123, -58.799, 21.036)), (' L  33  LEU HD22', ' L  89  GLN  O  ', -0.404, (38.226, -54.455, 6.176)), (' A 380  TYR  O  ', ' A 430  THR  HA ', -0.403, (44.171, -63.895, 19.314)), (' D 107  LYS  HA ', ' D 140  TYR  OH ', -0.403, (101.583, -47.26, 48.435)), (' L 140  TYR  CG ', ' L 141  PRO  HA ', -0.402, (21.711, -34.177, -8.717)), (' D  24  ARG  HA ', ' D  69  THR  O  ', -0.401, (73.983, -49.195, 45.422)), (' D  18  ARG  HB2', ' D  75  ILE  O  ', -0.4, (90.024, -56.282, 53.835)), (' A 392  PHE  HB3', ' A 516  GLU  O  ', -0.4, (36.3, -72.681, 20.289)), (' D  82  ASP  O  ', ' D  86  TYR  OH ', -0.4, (92.939, -57.389, 44.226))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
