# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 177 ', 'MET', 0.0, (172.92700000000005, 182.19999999999993, 163.828)), ('A', ' 383 ', 'SER', 0.22010359829258974, (125.2680000000001, 148.59299999999996, 168.092)), ('A', ' 569 ', 'ILE', 0.05152334274560389, (114.45500000000003, 146.977, 142.024)), ('A', ' 864 ', 'GLU', 0.00515322610606519, (165.14800000000005, 136.723, 110.73999999999998)), ('A', ' 953 ', 'GLN', 0.249974399611053, (149.7, 147.885, 130.724)), ('B', ' 177 ', 'MET', 0.0, (157.39600000000004, 80.46899999999997, 163.83799999999997)), ('B', ' 383 ', 'SER', 0.22070737352416822, (152.122, 138.548, 168.094)), ('B', ' 569 ', 'ILE', 0.05128586478626271, (156.139, 148.71699999999996, 142.02699999999996)), ('B', ' 864 ', 'GLU', 0.005108247160580694, (121.92300000000003, 109.941, 110.73299999999998)), ('B', ' 953 ', 'GLN', 0.250627646109958, (139.30600000000007, 117.74, 130.723)), ('C', ' 177 ', 'MET', 0.0, (77.084, 144.738, 163.855)), ('C', ' 383 ', 'SER', 0.22170021380171565, (130.037, 120.304, 168.095)), ('C', ' 569 ', 'ILE', 0.05169403557674884, (136.83800000000005, 111.75399999999998, 142.02499999999998)), ('C', ' 864 ', 'GLU', 0.005003358345861525, (120.32400000000003, 160.77199999999993, 110.749)), ('C', ' 953 ', 'GLN', 0.25067173268827814, (118.40300000000003, 141.81099999999995, 130.73299999999998))]
data['cbeta'] = [('A', ' 378 ', 'LYS', ' ', 0.3798508737249102, (126.10700000000006, 141.12999999999994, 175.00799999999995)), ('A', ' 734 ', 'CYS', ' ', 0.2874786653628401, (149.725, 130.632, 140.807)), ('A', '1122 ', 'CYS', ' ', 0.28251971924761093, (116.12600000000003, 147.865, 65.87299999999999)), ('B', ' 378 ', 'LYS', ' ', 0.3806393868952129, (145.23700000000005, 141.55299999999994, 175.00699999999995)), ('B', ' 734 ', 'CYS', ' ', 0.2876599054592645, (124.3480000000001, 126.347, 140.8)), ('B', '1122 ', 'CYS', ' ', 0.2831211928117267, (156.101, 146.819, 65.876)), ('C', ' 378 ', 'LYS', ' ', 0.3815226536856578, (136.08, 124.767, 175.009)), ('C', ' 734 ', 'CYS', ' ', 0.28843010177046957, (133.331, 150.469, 140.811)), ('C', '1122 ', 'CYS', ' ', 0.2841944337744556, (135.20100000000005, 112.759, 65.875))]
data['probe'] = [(' B 395  VAL HG23', ' B 524  VAL HG11', -0.726, (160.476, 150.265, 170.274)), (' B  66  HIS  O  ', ' B  80  ASP  N  ', -0.722, (175.056, 91.919, 159.945)), (' C 395  VAL HG23', ' C 524  VAL HG11', -0.721, (136.099, 107.202, 170.339)), (' A 395  VAL HG23', ' A 524  VAL HG11', -0.717, (110.825, 149.855, 170.246)), (' C  66  HIS  O  ', ' C  80  ASP  N  ', -0.712, (78.249, 123.658, 160.544)), (' A  66  HIS  O  ', ' A  80  ASP  N  ', -0.71, (154.24, 191.869, 159.93)), (' B 908  THR  OG1', ' B1102  GLN  NE2', -0.696, (142.574, 124.91, 75.353)), (' A 908  THR  OG1', ' A1102  GLN  NE2', -0.692, (141.794, 147.007, 75.359)), (' C 908  THR  OG1', ' C1102  GLN  NE2', -0.682, (122.996, 135.95, 75.579)), (' C 454  ARG  NH2', ' C 467  ASP  O  ', -0.668, (159.543, 115.737, 180.769)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.661, (141.334, 166.465, 180.719)), (' A 454  ARG  NH2', ' A 467  ASP  O  ', -0.658, (106.556, 125.382, 180.929)), (' B1138  GLN  NE2', ' B1142  ASP  OD2', -0.65, (146.823, 134.019, 48.434)), (' C1138  GLN  NE2', ' C1142  ASP  OD2', -0.644, (128.522, 127.418, 48.04)), (' B 282  ASN  OD1', ' B1304  NAG  N2 ', -0.643, (142.5, 93.152, 138.27)), (' A 282  ASN  OD1', ' A1304  NAG  N2 ', -0.641, (169.132, 162.744, 138.625)), (' C 349  SER  OG ', ' C 452  LEU  O  ', -0.641, (153.335, 116.926, 186.931)), (' C 282  ASN  OD1', ' C1304  NAG  N2 ', -0.64, (96.036, 151.665, 138.829)), (' B 349  SER  OG ', ' B 452  LEU  O  ', -0.64, (143.405, 160.337, 187.23)), (' A1138  GLN  NE2', ' A1142  ASP  OD2', -0.637, (131.82, 146.167, 48.419)), (' A 349  SER  OG ', ' A 452  LEU  O  ', -0.63, (111.093, 130.233, 187.047)), (' B 979  ARG  NH1', ' C 381  GLY  O  ', -0.629, (134.901, 118.698, 162.662)), (' A 381  GLY  O  ', ' C 979  ARG  NH1', -0.625, (121.692, 145.546, 163.014)), (' B 406  GLU  N  ', ' B 406  GLU  OE2', -0.618, (136.844, 149.281, 184.597)), (' A 406  GLU  N  ', ' A 406  GLU  OE2', -0.616, (123.968, 129.474, 185.039)), (' A 979  ARG  NH1', ' B 381  GLY  O  ', -0.612, (151.481, 143.236, 163.152)), (' C 406  GLU  N  ', ' C 406  GLU  OE2', -0.612, (147.366, 128.695, 184.895)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.612, (99.28, 124.311, 171.518)), (' B 807  LYS  NZ ', ' B 816  ASP  OD2', -0.611, (130.791, 101.679, 106.483)), (' B1046  MET  HE2', ' B1048  PHE  CE2', -0.604, (132.935, 115.634, 93.581)), (' B 108  THR  OG1', ' B 234  ASN  O  ', -0.604, (163.512, 109.869, 171.442)), (' A1046  MET  HE2', ' A1048  PHE  CE2', -0.603, (154.581, 143.505, 93.662)), (' A 807  LYS  NZ ', ' A 816  ASP  OD2', -0.602, (167.902, 148.588, 106.557)), (' C1046  MET  HE2', ' C1048  PHE  CE2', -0.6, (119.812, 148.611, 93.438)), (' A 383  SER  HB3', ' C 980  LEU  HA ', -0.598, (126.378, 148.837, 165.745)), (' A 108  THR  OG1', ' A 234  ASN  O  ', -0.597, (144.44, 172.855, 171.399)), (' C 807  LYS  NZ ', ' C 816  ASP  OD2', -0.592, (108.59, 157.039, 106.564)), (' C1007  GLN  OE1', ' C1010  ARG  NH1', -0.581, (126.55, 141.691, 127.394)), (' A 899  ALA  HB1', ' A 909  GLN  HB2', -0.579, (148.757, 142.094, 78.707)), (' B1007  GLN  OE1', ' B1010  ARG  NH1', -0.577, (135.403, 124.823, 127.461)), (' C 899  ALA  HB1', ' C 909  GLN  HB2', -0.575, (123.819, 144.298, 78.995)), (' A 980  LEU  HA ', ' B 383  SER  HB3', -0.573, (152.273, 137.162, 165.728)), (' A1007  GLN  OE1', ' A1010  ARG  NH1', -0.57, (145.449, 140.86, 127.469)), (' B 899  ALA  HB1', ' B 909  GLN  HB2', -0.56, (134.589, 121.134, 79.141)), (' B 980  LEU  HA ', ' C 383  SER  HB3', -0.557, (128.999, 121.256, 165.647)), (' A 403  ARG  NE ', ' A 406  GLU  OE1', -0.538, (122.587, 127.135, 187.484)), (' A 457  ARG  NH1', ' A 459  SER  OG ', -0.536, (108.613, 121.279, 173.304)), (' B 493  GLN  NE2', ' B 494  SER  O  ', -0.534, (135.412, 159.166, 192.356)), (' B 642  VAL HG12', ' B 651  ILE  CD1', -0.533, (173.412, 121.412, 130.019)), (' C 493  GLN  NE2', ' C 494  SER  O  ', -0.532, (156.123, 124.591, 192.32)), (' C 642  VAL HG12', ' C 651  ILE  CD1', -0.53, (104.433, 110.54, 130.044)), (' C 403  ARG  NE ', ' C 406  GLU  OE1', -0.529, (150.028, 128.856, 187.439)), (' B 457  ARG  NH1', ' B 459  SER  OG ', -0.529, (136.74, 166.821, 173.428)), (' B 326  ILE HD11', ' B 534  VAL HG22', -0.528, (175.359, 136.083, 154.32)), (' A 326  ILE HD11', ' A 534  VAL HG22', -0.527, (115.418, 169.95, 153.91)), (' C 457  ARG  NH1', ' C 459  SER  OG ', -0.525, (162.195, 119.509, 173.409)), (' A 564  GLN  NE2', ' A 577  ARG  O  ', -0.522, (106.73, 157.332, 156.453)), (' A 493  GLN  NE2', ' A 494  SER  O  ', -0.522, (116.163, 123.494, 192.092)), (' A 642  VAL HG12', ' A 651  ILE  CD1', -0.521, (129.174, 176.034, 129.921)), (' B 367  VAL HG23', ' B 368  LEU HD12', -0.52, (160.623, 141.314, 179.974)), (' C 367  VAL HG23', ' C 368  LEU HD12', -0.52, (128.635, 111.668, 179.921)), (' C 326  ILE HD11', ' C 534  VAL HG22', -0.52, (116.59, 100.938, 154.005)), (' B 403  ARG  NE ', ' B 406  GLU  OE1', -0.519, (134.926, 151.511, 187.489)), (' C 564  GLN  NE2', ' C 577  ARG  O  ', -0.518, (131.734, 99.857, 156.547)), (' B 564  GLN  NE2', ' B 577  ARG  O  ', -0.515, (169.564, 150.38, 156.307)), (' B 200  TYR  HH ', ' C 396  TYR  HE2', -0.514, (145.351, 108.293, 169.196)), (' A 342  PHE  HE1', ' A 434  ILE HG21', -0.513, (118.644, 146.337, 181.313)), (' B 342  PHE  HE1', ' B 434  ILE HG21', -0.51, (153.52, 145.327, 181.31)), (' A 367  VAL HG23', ' A 368  LEU HD12', -0.509, (118.542, 154.609, 180.062)), (' C 342  PHE  HE1', ' C 434  ILE HG21', -0.509, (135.131, 115.707, 181.234)), (' C 551  VAL HG12', ' C 588  THR  O  ', -0.506, (121.669, 105.169, 143.666)), (' B 551  VAL HG12', ' B 588  THR  O  ', -0.505, (168.974, 138.728, 143.881)), (' B 979  ARG  HG3', ' B 980  LEU HD12', -0.505, (132.112, 118.896, 162.286)), (' A 551  VAL HG12', ' A 588  THR  O  ', -0.503, (116.246, 163.41, 143.753)), (' A 386  LYS  NZ ', ' C 977  LEU  O  ', -0.497, (126.048, 153.68, 161.856)), (' A 979  ARG  HG3', ' A 980  LEU HD12', -0.497, (152.267, 140.576, 162.611)), (' B 977  LEU  O  ', ' C 386  LYS  NZ ', -0.496, (125.198, 118.6, 161.826)), (' B1046  MET  HE2', ' B1048  PHE  CZ ', -0.492, (133.171, 115.985, 93.131)), (' B  36  VAL HG11', ' B 220  PHE  CE2', -0.491, (155.001, 100.968, 144.529)), (' C 979  ARG  HG3', ' C 980  LEU HD12', -0.491, (122.964, 147.409, 162.347)), (' A 977  LEU  O  ', ' B 386  LYS  NZ ', -0.49, (155.599, 135.504, 161.457)), (' B 722  ILE HG22', ' B 944  LEU HD13', -0.488, (138.186, 118.183, 112.518)), (' C1046  MET  HE2', ' C1048  PHE  CZ ', -0.488, (119.817, 147.867, 93.845)), (' C 346  ARG  NH2', ' C 451  TYR  OH ', -0.487, (146.098, 115.472, 191.86)), (' A1046  MET  HE2', ' A1048  PHE  CZ ', -0.485, (154.307, 143.841, 93.443)), (' C  36  VAL HG11', ' C 220  PHE  CE2', -0.485, (96.165, 136.462, 144.997)), (' A 346  ARG  NH2', ' A 451  TYR  OH ', -0.484, (112.678, 137.027, 192.22)), (' B 346  ARG  NH2', ' B 451  TYR  OH ', -0.483, (148.651, 155.07, 192.001)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.482, (163.584, 182.173, 149.337)), (' B 189  LEU  HB2', ' B 210  ILE HD13', -0.481, (162.037, 88.451, 149.411)), (' C 189  LEU  HB2', ' C 210  ILE HD13', -0.48, (81.645, 136.762, 149.44)), (' A 722  ILE HG22', ' A 944  LEU HD13', -0.48, (149.875, 146.821, 112.09)), (' A  36  VAL HG11', ' A 220  PHE  CE2', -0.478, (156.418, 169.942, 144.56)), (' C 722  ILE HG22', ' C 944  LEU HD13', -0.478, (119.409, 142.359, 112.116)), (' B 524  VAL  O  ', ' B 524  VAL HG13', -0.476, (162.586, 149.06, 168.95)), (' C 498  GLN  OE1', ' C 501  ASN  ND2', -0.475, (148.162, 127.184, 198.218)), (' C 524  VAL  O  ', ' C 524  VAL HG13', -0.475, (133.5, 106.059, 168.818)), (' A 498  GLN  OE1', ' A 501  ASN  ND2', -0.473, (122.184, 129.481, 198.246)), (' B  35  GLY  HA3', ' B  56  LEU  HB3', -0.465, (160.231, 103.266, 149.834)), (' A  35  GLY  HA3', ' A  56  LEU  HB3', -0.465, (151.778, 173.433, 149.782)), (' C 518  LEU HD11', ' C 522  ALA  HB2', -0.464, (133.762, 103.756, 162.648)), (' A 524  VAL  O  ', ' A 524  VAL HG13', -0.463, (111.022, 152.395, 169.095)), (' B 465  GLU  N  ', ' B 465  GLU  OE1', -0.459, (144.665, 162.293, 171.894)), (' C 465  GLU  N  ', ' C 465  GLU  OE1', -0.458, (154.404, 115.234, 171.5)), (' C  35  GLY  HA3', ' C  56  LEU  HB3', -0.456, (95.047, 131.234, 149.721)), (' B 518  LEU HD11', ' B 522  ALA  HB2', -0.455, (164.521, 150.324, 162.688)), (' A 642  VAL HG12', ' A 651  ILE HD12', -0.454, (129.356, 176.219, 130.373)), (' B 642  VAL HG12', ' B 651  ILE HD12', -0.454, (173.514, 121.137, 130.49)), (' A 465  GLU  N  ', ' A 465  GLU  OE1', -0.453, (108.443, 130.404, 171.795)), (' C 821  LYS  NZ ', ' C 934  LEU  O  ', -0.453, (107.833, 144.048, 109.99)), (' C 452  LEU  HB3', ' C 492  LEU HD12', -0.453, (157.732, 117.424, 187.905)), (' C 642  VAL HG12', ' C 651  ILE HD12', -0.453, (104.214, 110.487, 130.524)), (' A 452  LEU  HB3', ' A 492  LEU HD12', -0.451, (108.948, 126.059, 187.895)), (' B1308  NAG  H3 ', ' B1308  NAG  H83', -0.45, (177.622, 136.032, 131.647)), (' A1308  NAG  H3 ', ' A1308  NAG  H83', -0.449, (114.919, 172.077, 131.216)), (' A 518  LEU HD11', ' A 522  ALA  HB2', -0.448, (109.154, 153.373, 162.299)), (' B 391  CYS  SG ', ' B 522  ALA  HB1', -0.447, (164.8, 148.713, 165.299)), (' A 391  CYS  SG ', ' A 392  PHE  N  ', -0.447, (111.448, 153.634, 166.159)), (' C1308  NAG  H3 ', ' C1308  NAG  H83', -0.442, (114.915, 99.663, 131.257)), (' B 452  LEU  HB3', ' B 492  LEU HD12', -0.441, (140.895, 163.674, 188.212)), (' A 138  ASP  N  ', ' A 138  ASP  OD1', -0.441, (154.207, 191.589, 174.83)), (' C 391  CYS  SG ', ' C 392  PHE  N  ', -0.439, (132.728, 105.716, 166.043)), (' A 821  LYS  NZ ', ' A 934  LEU  O  ', -0.436, (156.924, 155.917, 109.98)), (' B 191  GLU  HB2', ' B 223  LEU HD21', -0.436, (156.8, 95.916, 152.176)), (' B 391  CYS  SG ', ' B 392  PHE  N  ', -0.435, (163.412, 148.089, 166.089)), (' C 138  ASP  N  ', ' C 138  ASP  OD1', -0.435, (78.378, 124.007, 174.886)), (' A 391  CYS  SG ', ' A 522  ALA  HB1', -0.435, (109.775, 154.373, 165.118)), (' A 466  ARG  HG2', ' A 468  ILE HG23', -0.435, (104.124, 130.742, 179.752)), (' C 391  CYS  SG ', ' C 522  ALA  HB1', -0.434, (132.47, 104.155, 165.376)), (' C 466  ARG  HG2', ' C 468  ILE HG23', -0.434, (156.474, 110.782, 179.897)), (' B  99  ASN  ND2', ' B 177  MET  HG3', -0.432, (159.696, 83.462, 163.5)), (' B 138  ASP  N  ', ' B 138  ASP  OD1', -0.432, (174.944, 91.567, 174.973)), (' C 779  ALA  HB2', ' C 869  TYR  HE2', -0.432, (130.81, 156.345, 108.162)), (' C  99  ASN  ND2', ' C 177  MET  HG3', -0.432, (78.567, 140.849, 163.696)), (' C 231  ILE HD12', ' C 233  ILE HG12', -0.43, (99.035, 132.703, 170.985)), (' A 494  SER  OG ', ' A 495  TYR  N  ', -0.429, (114.344, 127.186, 193.354)), (' A  99  ASN  ND2', ' A 177  MET  HG3', -0.429, (169.2, 182.721, 163.489)), (' B 779  ALA  HB2', ' B 869  TYR  HE2', -0.426, (120.701, 120.848, 108.024)), (' A 734  CYS  HB3', ' A 738  ILE HD12', -0.426, (149.134, 131.334, 142.287)), (' A 231  ILE HD12', ' A 233  ILE HG12', -0.425, (151.212, 169.114, 171.295)), (' B 821  LYS  NZ ', ' B 934  LEU  O  ', -0.425, (142.525, 107.399, 110.04)), (' B 494  SER  OG ', ' B 495  TYR  N  ', -0.425, (138.993, 158.728, 193.387)), (' A 191  GLU  HB2', ' A 223  LEU HD21', -0.424, (159.776, 173.996, 152.087)), (' B 231  ILE HD12', ' B 233  ILE HG12', -0.423, (157.029, 105.866, 171.12)), (' B 466  ARG  HG2', ' B 468  ILE HG23', -0.423, (147.233, 166.162, 179.97)), (' C 494  SER  OG ', ' C 495  TYR  N  ', -0.421, (153.826, 121.876, 193.137)), (' C 191  GLU  HB2', ' C 223  LEU HD21', -0.419, (90.715, 137.646, 152.179)), (' B 734  CYS  HB3', ' B 738  ILE HD12', -0.419, (125.24, 126.479, 142.299)), (' A 418  ILE HG23', ' A 422  ASN  OD1', -0.417, (115.854, 128.828, 180.838)), (' C 418  ILE HG23', ' C 422  ASN  OD1', -0.416, (151.99, 121.685, 180.657)), (' A 281  GLU  OE2', ' A1304  NAG  N2 ', -0.415, (170.593, 161.81, 137.619)), (' B 418  ILE HG23', ' B 422  ASN  OD1', -0.415, (139.881, 156.848, 180.51)), (' A 748  LEU HD11', ' A 986  GLU  OE1', -0.415, (147.828, 130.253, 156.11)), (' A 779  ALA  HB2', ' A 869  TYR  HE2', -0.414, (156.136, 129.795, 108.132)), (' B 281  GLU  OE2', ' B1304  NAG  N2 ', -0.414, (140.921, 92.731, 137.775)), (' C1024  LYS  NZ ', ' C1038  PHE  O  ', -0.413, (127.016, 136.99, 103.026)), (' A 475  ALA  HB3', ' A 487  ASN  HA ', -0.413, (110.676, 108.302, 185.121)), (' C 748  LEU HD11', ' C 986  GLU  OE1', -0.413, (134.503, 148.995, 156.169)), (' B 498  GLN  OE1', ' B 501  ASN  ND2', -0.411, (136.99, 150.641, 198.354)), (' B 748  LEU HD11', ' B 986  GLU  OE1', -0.411, (125.293, 128.141, 155.834)), (' C 734  CYS  HB3', ' C 738  ILE HD12', -0.409, (132.864, 149.228, 142.478)), (' A 901  ARG  NH1', ' A1045  LEU  O  ', -0.408, (147.998, 140.574, 91.306)), (' B 412  PRO  HB3', ' B 427  ASP  HA ', -0.407, (141.59, 150.877, 167.367)), (' A 532  ASN  OD1', ' A 533  LEU  N  ', -0.405, (110.763, 171.119, 156.841)), (' C 412  PRO  HB3', ' C 427  ASP  HA ', -0.405, (146.026, 123.298, 167.401)), (' A 412  PRO  HB3', ' A 427  ASP  HA ', -0.401, (119.708, 133.157, 167.02))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
