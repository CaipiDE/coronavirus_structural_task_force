# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  32 ', 'PHE', 0.024489649318039125, (160.964, 181.27, 194.316)), ('G', '  51 ', 'VAL', 0.0005282555960971404, (169.15900000000005, 223.547, 249.831)), ('K', '  31 ', 'ASN', 0.008741830292572373, (196.74400000000006, 160.02, 247.869))]
data['omega'] = [('A', ' 521 ', 'PRO', None, (216.313, 173.037, 212.052)), ('B', ' 521 ', 'PRO', None, (222.532, 229.534, 212.075)), ('C', ' 521 ', 'PRO', None, (170.35000000000005, 206.923, 211.434))]
data['rota'] = [('A', ' 488 ', 'CYS', 0.2568425739508838, (241.13300000000007, 203.659, 240.002)), ('A', ' 489 ', 'TYR', 0.0, (238.32800000000006, 202.37699999999995, 242.272)), ('A', ' 690 ', 'GLN', 0.0040580661433917906, (169.344, 174.349, 173.194)), ('B', ' 140 ', 'PHE', 0.2107690093567333, (251.666, 165.21599999999995, 222.243)), ('C', ' 619 ', 'GLU', 0.0003194891293851837, (178.77700000000004, 234.03199999999995, 193.05799999999996)), ('C', ' 658 ', 'ASN', 0.07414698845270784, (183.42600000000004, 237.85799999999998, 164.26)), ('G', '  49 ', 'TYR', 0.09495780815340561, (174.00700000000006, 223.24899999999994, 253.78699999999998))]
data['cbeta'] = [('C', ' 617 ', 'CYS', ' ', 0.35661017628525216, (179.92200000000005, 234.13399999999996, 186.89899999999997))]
data['probe'] = [(' G  49  TYR  HE2', ' G  54  ARG  C  ', -0.91, (175.748, 217.365, 253.532)), (' B 140  PHE  HD2', ' B 142  GLY  O  ', -0.853, (251.734, 161.859, 220.933)), (' B 140  PHE  CD2', ' B 142  GLY  O  ', -0.822, (251.311, 161.59, 220.824)), (' A 130  VAL HG21', ' A 231  ILE HG12', -0.692, (163.059, 192.44, 224.817)), (' G  45  LYS  HG3', ' G  47  MET  HE3', -0.681, (176.595, 220.161, 262.628)), (' G  49  TYR  CE2', ' G  54  ARG  C  ', -0.677, (175.207, 218.025, 253.235)), (' F 100C TYR  HB3', ' G  96  LEU HD12', -0.673, (176.258, 233.048, 253.751)), (' A1041  ASP  HB3', ' B1030  SER  HB3', -0.667, (197.237, 194.118, 154.76)), (' G  49  TYR  HE2', ' G  55  PRO  N  ', -0.651, (175.747, 217.672, 254.459)), (' B 126  VAL HG13', ' B 174  PRO  HA ', -0.649, (236.757, 160.158, 215.4)), (' A 126  VAL HG13', ' A 174  PRO  HA ', -0.642, (149.271, 195.34, 215.459)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.64, (207.231, 262.957, 203.338)), (' B 916  LEU HD12', ' B 923  ILE HD13', -0.638, (213.642, 186.254, 137.221)), (' C 126  VAL HG13', ' C 174  PRO  HA ', -0.632, (223.471, 253.968, 215.409)), (' F  32  TYR  HD1', ' F  94  ARG  HD2', -0.618, (189.094, 224.772, 255.011)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.604, (238.918, 174.268, 221.154)), (' G  31  ASN  O  ', ' G  51  VAL HG23', -0.6, (170.174, 226.263, 247.667)), (' A 226  LEU  HG ', ' A 227  VAL HG23', -0.599, (156.79, 197.466, 213.001)), (' A 201  PHE  HB3', ' A 229  LEU  HB2', -0.592, (163.344, 193.466, 218.484)), (' B 722  VAL HG22', ' B1065  VAL HG12', -0.588, (213.786, 185.428, 149.13)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.588, (148.844, 176.977, 203.878)), (' A 454  ARG  NH1', ' A 469  SER  O  ', -0.587, (234.558, 193.02, 235.682)), (' C  83  VAL HG13', ' C 239  GLN  HB2', -0.577, (203.749, 256.335, 218.929)), (' H  96  ARG  HD2', ' H 101  ASP  HB3', -0.573, (230.998, 211.628, 256.369)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.571, (160.349, 186.227, 221.225)), (' A 489  TYR  CD2', ' H 100  VAL HG12', -0.57, (234.476, 204.976, 242.566)), (' C1131  GLY  HA2', ' C1317  NAG  H81', -0.565, (177.98, 214.069, 128.661)), (' A 489  TYR  CD1', ' A 489  TYR  N  ', -0.56, (238.826, 204.071, 241.375)), (' L  47  MET  HE1', ' L  59  PRO  HD2', -0.557, (228.488, 223.477, 261.385)), (' A 599  THR HG22', ' A 601  GLY  H  ', -0.554, (175.531, 184.343, 177.869)), (' C1011  GLN  HA ', ' C1011  GLN HE21', -0.552, (211.093, 209.756, 181.676)), (' B1086  LYS  HD2', ' B1122  VAL HG21', -0.551, (209.516, 215.93, 117.976)), (' B 866  THR HG22', ' B 869  MET  HE3', -0.549, (195.611, 175.182, 168.085)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.547, (209.715, 196.047, 157.531)), (' A 475  ALA  HB2', ' A 488  CYS  SG ', -0.544, (242.982, 205.832, 238.363)), (' C 454  ARG  NH1', ' C 469  SER  O  ', -0.54, (178.369, 180.519, 236.115)), (' B 555  SER  HB3', ' B 586  ASP  HB2', -0.54, (233.479, 228.079, 196.697)), (' B 886  TRP  HB3', ' B1035  GLY  HA2', -0.54, (200.341, 191.198, 146.631)), (' B 454  ARG  NH1', ' B 469  SER  O  ', -0.537, (196.274, 235.648, 235.832)), (' B  87  ASN  OD1', ' B  88  ASP  N  ', -0.534, (239.514, 184.374, 211.74)), (' C 352  ALA  HB2', ' C 468  ILE HD13', -0.533, (174.53, 186.509, 236.473)), (' B1116  THR HG22', ' B1138  TYR  HB3', -0.531, (215.178, 203.39, 115.654)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.53, (253.038, 169.822, 203.896)), (' A 699  LEU HD11', ' B 869  MET  HG2', -0.53, (194.788, 176.254, 163.495)), (' C 493  GLN HE22', ' J  31  GLY  HA2', -0.529, (186.952, 181.494, 248.654)), (' K   4  LEU  HB2', ' K  99  GLY  HA2', -0.528, (193.46, 155.708, 259.474)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.528, (212.817, 247.022, 204.855)), (' C1030  SER  HA ', ' C1034  LEU HD12', -0.527, (215.981, 204.962, 154.678)), (' L  54  ARG HH11', ' L  60  ASP  HA ', -0.524, (226.594, 227.212, 256.745)), (' C 752  LEU HD21', ' C 990  GLU  HG2', -0.523, (214.576, 200.933, 211.096)), (' C1104  VAL HG23', ' C1115  ILE HG12', -0.523, (193.845, 214.912, 122.568)), (' C 131  CYS  HA ', ' C 166  CYS  HA ', -0.522, (214.856, 248.003, 231.265)), (' H  87  THR HG22', ' H 111  VAL  H  ', -0.52, (249.474, 201.497, 276.115)), (' H 101  ASP  OD1', ' H 102  VAL  N  ', -0.518, (231.44, 209.715, 259.172)), (' C1043  CYS  HB2', ' C1064  HIS  CE1', -0.517, (209.172, 214.123, 154.949)), (' B1049  LEU  HB2', ' B1065  VAL HG23', -0.516, (210.951, 189.25, 146.238)), (' B 140  PHE  HB3', ' B 242  LEU  O  ', -0.514, (250.971, 164.743, 219.158)), (' A 562  PHE  HD2', ' B  41  LYS  HG3', -0.512, (223.331, 169.828, 206.455)), (' C1029  MET  HE2', ' C1053  PRO  HB3', -0.511, (217.54, 211.677, 157.801)), (' B  31  SER  HA ', ' B 216  LEU HD12', -0.511, (245.66, 176.23, 198.668)), (' C 866  THR  H  ', ' C 869  MET  HE3', -0.51, (229.071, 210.08, 168.726)), (' C 974  SER  H  ', ' C 980  ILE HD12', -0.509, (213.761, 213.789, 210.79)), (' A1086  LYS  HD2', ' A1122  VAL HG21', -0.508, (210.682, 191.059, 118.188)), (' F  87  THR HG23', ' F 110  THR  HA ', -0.507, (181.337, 241.901, 276.198)), (' C1031  GLU  OE2', ' C1039  ARG  NH1', -0.506, (205.661, 204.6, 155.358)), (' C 143  VAL  HA ', ' C 246  ARG  H  ', -0.505, (220.074, 270.157, 220.483)), (' B 898  PHE  HZ ', ' B1050  MET  HE1', -0.504, (207.906, 183.646, 144.878)), (' C  34  ARG  NH1', ' C 191  GLU  OE2', -0.501, (213.737, 251.995, 198.44)), (' C 658  ASN  C  ', ' C 658  ASN HD22', -0.496, (184.791, 238.272, 165.322)), (' L  25  GLY  HA3', ' L  27C VAL HG21', -0.494, (249.507, 221.567, 253.182)), (' A 393  THR HG21', ' A 518  LEU  HB2', -0.493, (215.821, 178.969, 213.202)), (' C 977  LEU HD11', ' C 993  ILE HG12', -0.493, (217.099, 208.095, 207.792)), (' A 898  PHE  HZ ', ' A1050  MET  HE1', -0.493, (183.404, 208.56, 144.676)), (' B1029  MET  O  ', ' B1033  VAL  HB ', -0.491, (201.838, 189.698, 154.146)), (' B 395  VAL HG22', ' B 515  PHE  HB3', -0.49, (217.593, 225.044, 222.396)), (' A 656  VAL HG12', ' A 658  ASN  H  ', -0.49, (181.578, 168.683, 166.866)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.488, (170.759, 195.496, 201.583)), (' A 662  CYS  HB2', ' A 697  MET  HE3', -0.485, (187.872, 180.207, 167.274)), (' B 983  ARG  HG3', ' B 984  LEU  HG ', -0.485, (204.631, 186.849, 216.431)), (' B1104  VAL HG23', ' B1115  ILE HG12', -0.484, (217.584, 205.604, 122.713)), (' B 699  LEU HD11', ' C 869  MET  HG2', -0.483, (230.906, 208.93, 163.276)), (' B  31  SER  OG ', ' B  60  SER  N  ', -0.482, (243.655, 181.442, 198.319)), (' C  84  LEU HD13', ' C 267  VAL HG11', -0.482, (202.719, 255.148, 210.909)), (' A 984  LEU  HB2', ' A 989  ALA  HB2', -0.481, (191.664, 212.107, 216.035)), (' A  90  VAL HG11', ' A 238  PHE  HE1', -0.48, (162.093, 180.782, 212.619)), (' A 338  PHE  HA ', ' A 341  VAL HG12', -0.48, (214.364, 176.443, 233.452)), (' B1040  VAL HG21', ' C1035  GLY  HA3', -0.479, (212.769, 205.316, 149.252)), (' C 662  CYS  HB2', ' C 697  MET  HE3', -0.479, (190.793, 227.912, 167.349)), (' C 102  ARG  NH1', ' C 143  VAL  O  ', -0.478, (220.955, 265.966, 218.73)), (' A1029  MET  HE2', ' A1053  PRO  HB3', -0.477, (188.34, 211.585, 157.759)), (' B  39  PRO  HG3', ' B  51  THR HG21', -0.477, (226.355, 179.444, 201.505)), (' H  32  TYR  HD1', ' H  94  ARG  HD2', -0.476, (228.49, 204.164, 255.343)), (' B 699  LEU  HB3', ' C 873  TYR  HE1', -0.475, (229.052, 206.289, 160.382)), (' H  32  TYR  CD1', ' H  94  ARG  HD2', -0.473, (228.823, 204.419, 255.056)), (' C  39  PRO  HG3', ' C  51  THR HG21', -0.473, (212.135, 234.849, 201.865)), (' A 493  GLN HE22', ' H  31  GLY  HA3', -0.473, (229.51, 200.26, 248.067)), (' A 886  TRP  HB3', ' A1035  GLY  HA2', -0.472, (194.576, 211.277, 147.044)), (' B  31  SER  HG ', ' B  60  SER  N  ', -0.47, (244.309, 181.438, 198.336)), (' A  53  ASP  OD2', ' A 195  LYS  NZ ', -0.468, (169.878, 192.741, 207.074)), (' L  54  ARG  NH1', ' L  60  ASP  HA ', -0.467, (226.519, 227.434, 256.627)), (' A1083  HIS  HB3', ' A1088  HIS  CE1', -0.465, (206.101, 187.91, 117.315)), (' A 339  GLY  HA2', ' A1306  NAG  H83', -0.465, (211.052, 174.209, 236.437)), (' G  27C VAL HG21', ' G  71  ALA  HB2', -0.465, (164.766, 228.675, 253.982)), (' C  34  ARG HH21', ' C 217  PRO  HG2', -0.464, (212.954, 254.158, 195.158)), (' A  32  PHE  CD1', ' A 218  GLN  HA ', -0.461, (157.962, 181.964, 191.771)), (' C 898  PHE  HZ ', ' C1050  MET  HE1', -0.461, (217.066, 217.912, 144.881)), (' C 374  PHE  HA ', ' C 436  TRP  HB3', -0.46, (185.648, 207.839, 239.476)), (' F  59  TYR  OH ', ' F  69  MET  N  ', -0.46, (189.232, 243.868, 257.944)), (' B 401  VAL HG22', ' B 509  ARG  HG3', -0.459, (211.267, 224.324, 241.649)), (' A 707  TYR  HB3', ' B 792  PRO  HG3', -0.459, (199.469, 173.984, 142.76)), (' H  47  TRP  HZ2', ' H  50  TRP  HD1', -0.459, (243.155, 204.816, 254.017)), (' C 395  VAL  HA ', ' C 515  PHE  HB3', -0.458, (176.456, 203.48, 223.092)), (' C  50  SER  HB2', ' C 304  LYS  HE2', -0.458, (208.622, 229.182, 194.231)), (' A 525  CYS  SG ', ' A 526  GLY  N  ', -0.457, (207.69, 172.6, 220.101)), (' C 418  ILE  HA ', ' C 422  ASN HD22', -0.457, (187.124, 188.444, 235.581)), (' A 980  ILE HG22', ' A 983  ARG HH21', -0.456, (186.787, 207.922, 212.587)), (' A 869  MET  HG3', ' C 699  LEU HD11', -0.456, (184.373, 223.846, 163.104)), (' B1043  CYS  HB2', ' B1064  HIS  CE1', -0.455, (209.443, 192.523, 154.998)), (' H  37  VAL HG11', ' H 100E MET  HE1', -0.455, (241.195, 209.084, 260.205)), (' B 159  VAL  H  ', ' B 249  LEU HD12', -0.452, (250.097, 161.545, 226.858)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.452, (187.185, 205.416, 226.686)), (' G  49  TYR  CE2', ' G  55  PRO  N  ', -0.451, (176.154, 218.331, 254.109)), (' L  26  THR  OG1', ' L  27A SER  O  ', -0.451, (252.665, 220.531, 250.39)), (' A 873  TYR  HE1', ' C 699  LEU  HB3', -0.451, (187.677, 223.806, 160.56)), (' A 894  LEU HD13', ' C 715  PRO  HD3', -0.451, (195.167, 221.095, 139.233)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.45, (196.653, 210.703, 148.573)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.45, (196.836, 190.678, 160.949)), (' C 715  PRO  HA ', ' C1072  GLU  HA ', -0.449, (196.567, 225.081, 137.367)), (' B 884  SER  OG ', ' B 887  THR  OG1', -0.449, (195.372, 184.773, 144.147)), (' B 713  ALA  HB1', ' B1072  GLU  HB2', -0.449, (227.109, 201.537, 137.85)), (' A 484  GLU  HB2', ' H  50  TRP  HH2', -0.448, (241.9, 200.068, 247.595)), (' B 867  ASP  N  ', ' B 867  ASP  OD1', -0.447, (200.909, 175.111, 169.062)), (' G  34  SER  HA ', ' G  49  TYR  O  ', -0.446, (171.912, 225.01, 253.428)), (' B 968  SER  OG ', ' C 755  GLN  O  ', -0.445, (212.243, 192.95, 202.036)), (' B  96  GLU  O  ', ' B 190  ARG  NH2', -0.445, (246.558, 162.291, 207.139)), (' C 198  ASP  N  ', ' C 198  ASP  OD1', -0.442, (209.807, 234.876, 215.997)), (' A 366  SER  HB3', ' A 388  ASN HD21', -0.442, (201.55, 175.706, 228.247)), (' K  34  SER  OG ', ' K  89  SER  OG ', -0.44, (195.077, 164.497, 255.79)), (' A1052  PHE  HB2', ' A1063  LEU  HB2', -0.439, (183.014, 206.639, 153.715)), (' H 100D TYR  HH ', ' L  32  TYR  HD1', -0.439, (237.242, 215.47, 248.166)), (' B 143  VAL  N  ', ' B 244  LEU  O  ', -0.439, (253.795, 158.624, 220.08)), (' B  91  TYR  N  ', ' B 268  GLY  O  ', -0.438, (241.207, 178.157, 207.435)), (' B 903  ALA  HB1', ' B 913  GLN  HB2', -0.438, (207.478, 189.178, 133.945)), (' A 721  SER  OG ', ' A1066  THR  OG1', -0.437, (185.032, 196.529, 149.646)), (' F  69  MET  HG2', ' F  80  MET  HG2', -0.436, (187.822, 240.992, 260.942)), (' B1115  ILE HG22', ' B1137  VAL HG13', -0.436, (215.4, 207.79, 119.309)), (' B  90  VAL HG11', ' B 238  PHE  CE1', -0.436, (243.051, 178.231, 212.649)), (' C 187  LYS  O  ', ' C 210  ILE  N  ', -0.435, (217.879, 259.891, 197.514)), (' A 729  VAL HG22', ' A1059  GLY  HA2', -0.434, (188.123, 209.746, 167.865)), (' A 391  CYS  HA ', ' A 525  CYS  HA ', -0.434, (209.706, 174.483, 219.311)), (' B 600  PRO  HD3', ' B 692  ILE HD11', -0.433, (237.596, 191.666, 177.756)), (' A  31  SER  HA ', ' A 216  LEU HD12', -0.432, (159.065, 180.278, 198.618)), (' J   3  GLN  O  ', ' J  25  SER  OG ', -0.432, (190.623, 184.725, 264.505)), (' K  90  SER  OG ', ' K  91  TYR  N  ', -0.431, (192.797, 160.337, 251.123)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.431, (213.973, 197.879, 229.426)), (' C 598  ILE  HB ', ' C 609  ALA  HB3', -0.431, (192.437, 235.761, 179.308)), (' B 201  PHE  HB3', ' B 229  LEU  HB2', -0.429, (231.281, 173.151, 218.836)), (' A 141  LEU  O  ', ' A 157  PHE  N  ', -0.429, (142.498, 184.486, 224.407)), (' L  27B ASP  HB3', ' L  92  ALA  HA ', -0.428, (250.336, 215.771, 250.185)), (' C 433  VAL HG13', ' C 512  VAL HG22', -0.428, (185.053, 200.504, 231.679)), (' H  37  VAL  HB ', ' H  45  LEU HD21', -0.428, (242.514, 209.601, 263.222)), (' C 615  VAL HG12', ' C 617  CYS  H  ', -0.427, (180.329, 231.323, 188.419)), (' C  67  ALA  O  ', ' C  69  HIS  ND1', -0.427, (204.679, 266.838, 213.764)), (' B  91  TYR  OH ', ' B 191  GLU  OE2', -0.426, (241.067, 172.005, 200.842)), (' C 138  ASP  N  ', ' C 138  ASP  OD1', -0.426, (205.722, 264.028, 224.645)), (' C 197  ILE HG13', ' C 198  ASP  H  ', -0.426, (210.161, 236.451, 215.477)), (' B 405  ASP  N  ', ' B 405  ASP  OD1', -0.426, (201.329, 215.589, 242.096)), (' C 391  CYS  HA ', ' C 525  CYS  HA ', -0.425, (174.79, 212.115, 219.655)), (' J  52A PRO  HA ', ' J  71  ARG  HD3', -0.423, (179.194, 180.425, 254.024)), (' C 121  ASN  HA ', ' C 126  VAL HG12', -0.423, (221.186, 254.749, 216.658)), (' B 433  VAL HG12', ' B 512  VAL HG22', -0.423, (209.647, 220.244, 230.534)), (' G  70  THR  OG1', ' G  71  ALA  N  ', -0.419, (160.702, 228.477, 254.365)), (' B 738  CYS  HB2', ' B 760  CYS  HB2', -0.418, (195.577, 191.673, 195.05)), (' A1042  PHE  HB3', ' A1043  CYS  H  ', -0.417, (195.233, 200.736, 153.44)), (' H  45  LEU HD22', ' L  98  PHE  CE1', -0.415, (242.673, 212.445, 262.549)), (' H   6  GLN  NE2', ' H  90  TYR  O  ', -0.415, (238.429, 202.715, 268.34)), (' H 103  TRP  HB2', ' L  43  ALA  HB1', -0.412, (234.184, 209.963, 266.363)), (' A1039  ARG  H  ', ' A1039  ARG  HG2', -0.412, (199.466, 202.135, 150.642)), (' J  30  THR  HA ', ' J  52A PRO  HB2', -0.412, (183.247, 182.302, 253.204)), (' A 724  THR HG23', ' A 934  ILE HD12', -0.411, (180.47, 200.145, 157.146)), (' F  32  TYR  CD1', ' F  94  ARG  HD2', -0.409, (188.846, 224.706, 255.008)), (' B 743  CYS  SG ', ' B 750  SER  N  ', -0.409, (194.192, 187.729, 204.376)), (' C 347  PHE  CE2', ' C 399  SER  HB2', -0.409, (177.355, 200.242, 237.681)), (' C 743  CYS  SG ', ' C 750  SER  N  ', -0.408, (220.866, 202.805, 204.509)), (' C 102  ARG  O  ', ' C 121  ASN  N  ', -0.408, (218.311, 257.209, 217.257)), (' A 676  THR  HA ', ' A 690  GLN  N  ', -0.408, (169.826, 175.592, 171.644)), (' A1100  THR HG23', ' A1101  HIS  ND1', -0.406, (190.419, 180.216, 118.763)), (' A 131  CYS  HA ', ' A 166  CYS  HA ', -0.406, (158.527, 189.952, 231.198)), (' A 345  THR HG23', ' A 346  ARG  HG2', -0.405, (221.885, 177.294, 245.337)), (' B 193  VAL HG23', ' B 223  LEU HD22', -0.405, (236.431, 172.828, 205.037)), (' A  67  ALA  O  ', ' A  69  HIS  ND1', -0.402, (145.875, 173.663, 213.968)), (' B 922  LEU HD11', ' B1307  NAG  H5 ', -0.401, (223.926, 184.977, 137.935)), (' A1030  SER  HB3', ' C1041  ASP  HB3', -0.401, (198.618, 213.206, 154.778)), (' G  90  SER  OG ', ' G  91  TYR  N  ', -0.401, (170.986, 233.825, 251.109)), (' C 316  SER  OG ', ' C 317  ASN  N  ', -0.4, (193.263, 227.819, 193.124)), (' A 378  LYS  HB2', ' A 378  LYS  HE2', -0.4, (206.387, 192.943, 230.62))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
