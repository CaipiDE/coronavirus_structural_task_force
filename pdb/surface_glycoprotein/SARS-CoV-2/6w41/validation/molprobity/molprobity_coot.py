# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 147 ', 'PRO', None, (-81.315, -16.213, 22.475)), ('H', ' 149 ', 'PRO', None, (-75.724, -16.327, 25.264000000000003)), ('L', '   8 ', 'PRO', None, (-61.950999999999986, -44.791999999999994, 35.175)), ('L', '  95 ', 'PRO', None, (-61.105999999999995, -43.687, 10.546)), ('L', ' 141 ', 'PRO', None, (-70.083, -34.589, 48.733))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' C 455  LEU HD23', ' C 493  GLN  HB2', -0.884, (-45.056, -45.289, -22.215)), (' L  27B VAL HG23', ' L  92  TYR  HB2', -0.8, (-52.826, -46.982, 15.534)), (' L  80  ALA  HA ', ' L 106  ILE HD11', -0.723, (-58.083, -29.316, 42.438)), (' H  98  ILE  O  ', ' L  96  TYR  OH ', -0.696, (-54.328, -38.026, 11.566)), (' C 369  TYR  OH ', ' C 384  PRO  O  ', -0.691, (-40.424, -30.408, 11.758)), (' L  54  ARG  NH1', ' L  59  PRO  O  ', -0.67, (-45.37, -33.141, 32.811)), (' L  54  ARG HH22', ' L  60  ASP  HA ', -0.614, (-43.574, -33.529, 33.686)), (' C 444  LYS  H  ', ' C 448  ASN  HB2', -0.595, (-37.561, -29.497, -21.866)), (' C 398  ASP  OD2', ' C 423  TYR  OH ', -0.566, (-38.989, -42.585, -1.871)), (' C 381  GLY  HA3', ' C 430  THR  HA ', -0.563, (-44.976, -41.992, 9.295)), (' C 408  ARG  O  ', ' C 414  GLN  NE2', -0.558, (-52.305, -40.295, -4.412)), (' H  87  THR HG23', ' H 110  THR  HA ', -0.554, (-77.498, -24.903, 18.892)), (' C 358  ILE  HB ', ' C 395  VAL HG13', -0.541, (-31.183, -38.95, 6.219)), (' C 457  ARG  NH2', ' C 467  ASP  OD1', -0.539, (-39.784, -54.379, -12.815)), (' C 393  THR  HA ', ' C 522  ALA  HA ', -0.531, (-29.983, -43.867, 14.017)), (' L  60  ASP  N  ', ' L  60  ASP  OD1', -0.514, (-44.249, -31.188, 35.974)), (' C 406  GLU  HB3', ' C 418  ILE HG13', -0.504, (-47.321, -40.162, -11.763)), (' L  39  LYS  HB2', ' L  42  GLN  HG3', -0.501, (-60.323, -25.445, 30.89)), (' L  85  VAL HG22', ' L 103  LYS  HD2', -0.5, (-65.259, -33.583, 33.008)), (' L   6  GLN  O  ', ' L 100  GLN  NE2', -0.5, (-64.681, -45.814, 30.148)), (' L  33  LEU  HB3', ' L  51  ALA  HB2', -0.494, (-50.139, -44.247, 23.269)), (' H  31  THR  OG1', ' H  96  SER  O  ', -0.494, (-47.401, -31.847, 8.85)), (' C 350  VAL HG11', ' C 418  ILE HD12', -0.487, (-43.528, -41.795, -12.03)), (' C 388  ASN  N  ', ' C 388  ASN  OD1', -0.486, (-37.356, -30.963, 15.617)), (' H  72  ASP  OD1', ' H  74  SER  OG ', -0.483, (-58.145, -19.217, -1.375)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.483, (-83.386, -14.116, 29.172)), (' H 100A PRO  HD3', ' L  91  TYR  CE2', -0.482, (-50.0, -38.379, 16.708)), (' H 159  LEU HD21', ' H 182  VAL HG21', -0.482, (-73.408, -10.832, 46.792)), (' H  93  ALA  HB1', ' H 100B MET  HB3', -0.48, (-56.208, -31.182, 16.823)), (' H  38  ARG  CZ ', ' H  40  MET  HE3', -0.477, (-74.37, -34.702, 17.354)), (' H  51  ILE HD12', ' H  69  ILE HG22', -0.473, (-62.726, -30.419, 4.282)), (' C 336  CYS  HA ', ' C 361  CYS  HB2', -0.472, (-26.262, -33.557, 7.73)), (' H   6  GLN  H  ', ' H 105  GLN HE22', -0.47, (-62.284, -18.855, 15.894)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.465, (-44.538, -36.753, 5.021)), (' H  59  TYR  HD1', ' H  64  GLN  HA ', -0.461, (-69.0, -37.736, 4.997)), (' H 197  ASN  ND2', ' H 208  ASP  OD1', -0.461, (-76.955, -3.909, 37.082)), (' L  27C LEU HD23', ' L  31  ASN  HB3', -0.46, (-48.494, -49.059, 20.235)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.456, (-38.5, -31.992, -10.503)), (' C 449  TYR  O  ', ' C 494  SER  OG ', -0.449, (-38.876, -38.111, -23.13)), (' L  54  ARG HH12', ' L  60  ASP  HA ', -0.447, (-44.573, -33.603, 33.71)), (' L 105  GLU  OE1', ' L 173  TYR  OH ', -0.444, (-66.599, -32.946, 41.304)), (' L  31  ASN  ND2', ' L  71  PHE  HE2', -0.44, (-48.72, -47.432, 23.531)), (' H  32  TYR  HA ', ' H  96  SER  HA ', -0.439, (-49.703, -30.168, 10.136)), (' L  27B VAL  O  ', ' L  27C LEU HD23', -0.438, (-49.333, -49.272, 19.718)), (' C 390  LEU HD11', ' L  50  TRP  HZ3', -0.429, (-40.624, -39.167, 17.954)), (' H   2  MET  HB2', ' H   2  MET  HE2', -0.429, (-50.382, -20.739, 12.176)), (' L  54  ARG  NH1', ' L  62  PHE  O  ', -0.423, (-45.965, -35.595, 32.85)), (' C 388  ASN  HB2', ' C 527  PRO  HD2', -0.42, (-33.518, -29.508, 15.654)), (' L  88  CYS  O  ', ' L  99  GLY  N  ', -0.415, (-60.652, -41.255, 23.265)), (' H  48  MET  HA ', ' H  63  PHE  CD2', -0.412, (-67.632, -36.466, 12.313)), (' C 349  SER  OG ', ' C 452  LEU  O  ', -0.41, (-38.64, -40.576, -15.966)), (' L  27B VAL  CG2', ' L  92  TYR  HB2', -0.408, (-53.183, -46.528, 16.658)), (' H 129  LYS  HB3', ' H 129  LYS  HE2', -0.407, (-87.837, -18.723, 60.343)), (' L   6  GLN  HB3', ' L   6  GLN HE21', -0.404, (-61.151, -42.866, 30.542))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
