# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  87 ', 'ASN', 0.005322356298118863, (142.528, 173.994, 154.915)), ('A', '1122 ', 'CYS', 0.04083759221099521, (115.533, 147.01699999999997, 61.752999999999986)), ('B', '  87 ', 'ASN', 0.005243992378227741, (99.384, 122.532, 154.941)), ('B', '1122 ', 'CYS', 0.041546298518512256, (136.218, 112.653, 61.768)), ('C', '  87 ', 'ASN', 0.005203077319831154, (165.522, 110.907, 154.92799999999997)), ('C', '1122 ', 'CYS', 0.04136026730461328, (155.67699999999994, 147.733, 61.748))]
data['omega'] = [('A', ' 518 ', 'LEU', None, (113.199, 148.75199999999995, 154.62)), ('B', ' 518 ', 'LEU', None, (135.915, 109.774, 154.635)), ('C', ' 518 ', 'LEU', None, (158.35999999999996, 148.933, 154.614))]
data['rota'] = [('A', ' 192 ', 'PHE', 0.28117879145144026, (157.69, 173.956, 151.24999999999997)), ('A', ' 196 ', 'ASN', 0.05021354963548692, (148.631, 166.63, 158.223)), ('A', ' 238 ', 'PHE', 0.24563992677446977, (148.076, 178.933, 160.308)), ('A', ' 376 ', 'THR', 0.024925372986523503, (127.68100000000004, 142.684, 174.34899999999993)), ('A', ' 603 ', 'ASN', 0.040664476088979794, (152.971, 169.068, 117.471)), ('A', ' 720 ', 'THR', 0.08858953983884923, (149.598, 150.166, 98.045)), ('A', ' 780 ', 'GLN', 0.03594448664165551, (152.381, 128.672, 97.95899999999997)), ('A', ' 806 ', 'SER', 0.0431362964814805, (174.752, 144.225, 98.326)), ('A', ' 998 ', 'GLN', 0.23496519464369742, (141.266, 136.96, 135.291)), ('B', ' 192 ', 'PHE', 0.28204654361860276, (91.828, 135.678, 151.277)), ('B', ' 196 ', 'ASN', 0.05021166479208987, (102.706, 131.502, 158.247)), ('B', ' 238 ', 'PHE', 0.243780560867207, (92.334, 124.86499999999997, 160.336)), ('B', ' 376 ', 'THR', 0.02495494326703317, (133.92799999999994, 125.34999999999997, 174.363)), ('B', ' 603 ', 'ASN', 0.040564289090838306, (98.40899999999998, 134.035, 117.49599999999998)), ('B', ' 720 ', 'THR', 0.08853483111643123, (116.455, 140.573, 98.064)), ('B', ' 780 ', 'GLN', 0.035790262945295484, (133.67099999999994, 153.74, 97.97)), ('B', ' 806 ', 'SER', 0.041983244847976005, (109.00999999999998, 165.323, 98.345)), ('B', ' 998 ', 'GLN', 0.2357110232192015, (132.07099999999994, 139.972, 135.304)), ('C', ' 192 ', 'PHE', 0.27972616958755636, (157.896, 97.8, 151.271)), ('C', ' 196 ', 'ASN', 0.05044454311342687, (156.092, 109.31299999999997, 158.238)), ('C', ' 238 ', 'PHE', 0.24493270745663062, (167.019, 103.63399999999997, 160.325)), ('C', ' 376 ', 'THR', 0.025033496158190872, (145.859, 139.448, 174.35)), ('C', ' 603 ', 'ASN', 0.04161719779920822, (156.02299999999994, 104.314, 117.489)), ('C', ' 720 ', 'THR', 0.08868380678058105, (141.348, 116.689, 98.05899999999997)), ('C', ' 780 ', 'GLN', 0.036257629942518105, (121.34999999999997, 125.044, 97.971)), ('C', ' 806 ', 'SER', 0.042827806586538716, (123.60899999999998, 97.892, 98.35199999999999)), ('C', ' 998 ', 'GLN', 0.23541336880188238, (134.09599999999995, 130.535, 135.299))]
data['cbeta'] = [('A', ' 102 ', 'ARG', ' ', 0.31195139658178955, (161.599, 182.862, 161.584)), ('A', ' 238 ', 'PHE', ' ', 0.3537708835679306, (148.124, 178.486, 158.805)), ('A', ' 287 ', 'ASP', ' ', 0.25121107785606833, (157.49, 167.828, 132.839)), ('A', ' 346 ', 'ARG', ' ', 0.2746028402378593, (108.951, 141.018, 185.156)), ('A', ' 617 ', 'CYS', ' ', 0.25653947241709085, (125.72300000000006, 173.532, 125.82499999999999)), ('A', ' 986 ', 'GLU', ' ', 0.2595736435234469, (145.617, 130.63, 152.775)), ('B', ' 102 ', 'ARG', ' ', 0.3121996759222931, (82.165, 134.606, 161.61499999999998)), ('B', ' 238 ', 'PHE', ' ', 0.3528403685142575, (92.696, 125.12999999999998, 158.83299999999997)), ('B', ' 287 ', 'ASP', ' ', 0.2510644843803471, (97.227, 138.57, 132.865)), ('B', ' 346 ', 'ARG', ' ', 0.27665396357733707, (144.748, 109.969, 185.168)), ('B', ' 617 ', 'CYS', ' ', 0.25709192626330435, (108.185, 108.212, 125.84899999999998)), ('B', ' 986 ', 'GLU', ' ', 0.25885272911404167, (135.38, 146.909, 152.786)), ('C', ' 102 ', 'ARG', ' ', 0.3098565147993946, (163.648, 89.962, 161.609)), ('C', ' 238 ', 'PHE', ' ', 0.35500661502911, (166.608, 103.816, 158.821)), ('C', ' 287 ', 'ASP', ' ', 0.25079683574608613, (152.689, 101.03200000000002, 132.86)), ('C', ' 346 ', 'ARG', ' ', 0.2753741774149439, (153.79799999999994, 156.5, 185.147)), ('C', ' 617 ', 'CYS', ' ', 0.25863563904890574, (173.533, 125.669, 125.82899999999997)), ('C', ' 986 ', 'GLU', ' ', 0.2588610261234448, (126.44000000000004, 129.948, 152.78399999999996))]
data['probe'] = [(' C 442  ASP  OD1', ' C 451  TYR  OH ', -0.781, (147.599, 152.845, 185.382)), (' A 442  ASP  OD1', ' A 451  TYR  OH ', -0.764, (114.921, 137.786, 185.554)), (' B 346  ARG  NH2', ' B 451  TYR  OH ', -0.764, (145.876, 115.646, 185.853)), (' A 346  ARG  NH2', ' A 451  TYR  OH ', -0.763, (113.943, 137.549, 185.705)), (' C 346  ARG  NH2', ' C 451  TYR  OH ', -0.758, (148.331, 153.917, 185.664)), (' A 319  ARG  NH2', ' A 590  CYS  O  ', -0.754, (122.911, 162.927, 136.007)), (' B 319  ARG  NH2', ' B 590  CYS  O  ', -0.753, (118.323, 111.373, 136.45)), (' C 319  ARG  NH2', ' C 590  CYS  O  ', -0.753, (165.708, 133.515, 136.028)), (' B 442  ASP  OD1', ' B 451  TYR  OH ', -0.75, (144.635, 116.921, 185.575)), (' B 748  LEU HD21', ' B 986  GLU  OE1', -0.714, (136.593, 148.639, 150.542)), (' C 748  LEU HD21', ' C 986  GLU  OE1', -0.712, (124.336, 130.153, 150.545)), (' A 748  LEU HD21', ' A 986  GLU  OE1', -0.703, (146.749, 128.534, 149.985)), (' B  98  SER  OG ', ' B 180  GLU  O  ', -0.698, (71.947, 136.811, 156.481)), (' C 821  LYS  NZ ', ' C 934  LEU  O  ', -0.691, (141.728, 106.987, 104.58)), (' A  98  SER  OG ', ' A 180  GLU  O  ', -0.688, (168.605, 190.629, 156.488)), (' A  33  THR  OG1', ' A 219  GLY  O  ', -0.684, (156.96, 175.777, 136.189)), (' A 821  LYS  NZ ', ' A 934  LEU  O  ', -0.68, (158.004, 155.365, 104.65)), (' C  98  SER  OG ', ' C 180  GLU  O  ', -0.673, (166.35, 80.148, 156.583)), (' C  33  THR  OG1', ' C 219  GLY  O  ', -0.672, (159.803, 97.567, 136.244)), (' B 821  LYS  NZ ', ' B 934  LEU  O  ', -0.668, (106.839, 144.446, 104.668)), (' B  33  THR  OG1', ' B 219  GLY  O  ', -0.658, (90.642, 134.189, 136.168)), (' B 807  LYS  NZ ', ' B 816  ASP  OD2', -0.656, (109.079, 157.623, 101.072)), (' A 457  ARG  NE ', ' A 467  ASP  OD1', -0.654, (109.052, 123.757, 169.684)), (' C 807  LYS  NZ ', ' C 816  ASP  OD2', -0.653, (130.376, 101.876, 101.018)), (' C 457  ARG  NE ', ' C 467  ASP  OD1', -0.652, (138.772, 165.103, 169.705)), (' B 457  ARG  NE ', ' B 467  ASP  OD1', -0.65, (159.669, 118.748, 169.774)), (' A 807  LYS  NZ ', ' A 816  ASP  OD2', -0.647, (168.06, 148.017, 101.058)), (' A 466  ARG  NH1', ' B 231  ILE  O  ', -0.637, (103.555, 134.272, 168.494)), (' C 172  SER  OG ', ' C 173  GLN  OE1', -0.628, (147.97, 89.388, 161.57)), (' B 172  SER  OG ', ' B 173  GLN  OE1', -0.626, (89.643, 148.053, 161.753)), (' A 172  SER  OG ', ' A 173  GLN  OE1', -0.626, (170.067, 169.878, 161.559)), (' B 466  ARG  NH1', ' C 231  ILE  O  ', -0.623, (153.34, 108.266, 168.514)), (' A 357  ARG  NH2', ' A 396  TYR  OH ', -0.62, (104.666, 143.37, 162.969)), (' A 231  ILE  O  ', ' C 466  ARG  NH1', -0.619, (150.903, 164.604, 168.45)), (' B 367  VAL HG23', ' B 368  LEU HD12', -0.613, (127.822, 111.758, 173.825)), (' A 457  ARG  NH2', ' B1303  NAG  O7 ', -0.612, (107.271, 122.687, 167.102)), (' A 904  GLY  O  ', ' A1034  LYS  NZ ', -0.611, (140.407, 141.331, 82.615)), (' C 357  ARG  NH2', ' C 396  TYR  OH ', -0.61, (157.624, 158.559, 162.735)), (' C 367  VAL HG23', ' C 368  LEU HD12', -0.61, (161.404, 140.91, 173.817)), (' B 904  GLY  O  ', ' B1034  LYS  NZ ', -0.609, (128.712, 137.203, 82.621)), (' B 357  ARG  NH2', ' B 396  TYR  OH ', -0.606, (144.517, 105.665, 162.844)), (' A1303  NAG  O7 ', ' C 457  ARG  NH2', -0.606, (138.696, 166.963, 167.008)), (' A 367  VAL HG23', ' A 368  LEU HD12', -0.606, (118.549, 155.421, 173.904)), (' C 904  GLY  O  ', ' C1034  LYS  NZ ', -0.592, (138.1, 128.904, 82.581)), (' B 457  ARG  NH2', ' C1303  NAG  O7 ', -0.592, (161.379, 117.766, 167.042)), (' A 800  GLN  NE2', ' A1314  NAG  O6 ', -0.591, (165.104, 153.078, 91.424)), (' A 898  MET  SD ', ' A1046  MET  HE3', -0.591, (152.289, 143.227, 83.717)), (' B 898  MET  SD ', ' B1046  MET  HE3', -0.591, (121.161, 145.875, 83.279)), (' B 800  GLN  NE2', ' B1314  NAG  O6 ', -0.589, (106.185, 152.477, 91.944)), (' C 800  GLN  NE2', ' C1314  NAG  O6 ', -0.589, (135.681, 101.816, 91.835)), (' A 196  ASN  ND2', ' A 196  ASN  O  ', -0.589, (146.112, 167.083, 157.698)), (' B 472  ILE HD11', ' B 482  GLY  H  ', -0.583, (173.793, 119.193, 180.874)), (' C 196  ASN  ND2', ' C 196  ASN  O  ', -0.582, (157.77, 111.344, 157.643)), (' C 472  ILE HD11', ' C 482  GLY  H  ', -0.58, (131.568, 176.609, 180.777)), (' C 898  MET  SD ', ' C1046  MET  HE3', -0.58, (134.376, 117.946, 83.284)), (' A1024  LYS  NZ ', ' A1038  PHE  O  ', -0.578, (141.744, 143.642, 97.381)), (' B 196  ASN  ND2', ' B 196  ASN  O  ', -0.578, (103.651, 129.065, 157.873)), (' A 472  ILE HD11', ' A 482  GLY  H  ', -0.574, (102.507, 111.13, 180.857)), (' A  90  VAL HG21', ' A 238  PHE  CE1', -0.572, (150.556, 176.772, 155.226)), (' C  90  VAL HG21', ' C 238  PHE  CE1', -0.569, (164.537, 102.608, 155.377)), (' B  90  VAL HG21', ' B 238  PHE  CE1', -0.569, (92.638, 127.593, 155.382)), (' A 711  PRO  O  ', ' A1106  TYR  N  ', -0.568, (139.416, 155.364, 73.772)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.563, (104.372, 149.718, 154.3)), (' B 711  PRO  O  ', ' B1106  TYR  N  ', -0.562, (116.967, 129.01, 73.72)), (' C 520  ALA  HB1', ' C 521  PRO  HD2', -0.556, (164.094, 156.334, 154.106)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.555, (139.606, 101.566, 154.151)), (' C 711  PRO  O  ', ' C1106  TYR  N  ', -0.553, (151.155, 122.978, 73.709)), (' B 312  ILE HD12', ' B 598  ILE HD11', -0.548, (111.095, 120.598, 118.869)), (' C 312  ILE HD12', ' C 598  ILE HD11', -0.542, (161.254, 121.875, 118.851)), (' A 312  ILE HD12', ' A 598  ILE HD11', -0.539, (135.097, 164.342, 118.734)), (' C 334  ASN  O  ', ' C 362  VAL HG12', -0.538, (170.497, 146.427, 168.561)), (' C 236  THR HG21', ' C1303  NAG  H5 ', -0.537, (166.659, 114.58, 163.231)), (' B 236  THR HG21', ' B1303  NAG  H5 ', -0.536, (101.64, 119.993, 162.946)), (' A 334  ASN  O  ', ' A 362  VAL HG12', -0.534, (109.374, 160.33, 168.416)), (' B 334  ASN  O  ', ' B 362  VAL HG12', -0.533, (127.873, 100.785, 168.43)), (' A 236  THR HG21', ' A1303  NAG  H5 ', -0.529, (138.768, 173.189, 163.187)), (' A 977  LEU  O  ', ' C 386  LYS  NZ ', -0.518, (156.123, 134.336, 155.45)), (' B 801  ILE  O  ', ' B 812  SER  OG ', -0.513, (115.566, 155.01, 95.882)), (' A 386  LYS  NZ ', ' B 977  LEU  O  ', -0.508, (127.108, 154.101, 155.36)), (' A 472  ILE HD12', ' A 488  CYS  SG ', -0.508, (105.846, 111.583, 180.772)), (' A  28  TYR  O  ', ' A1301  NAG  H82', -0.507, (148.179, 188.648, 140.907)), (' C 472  ILE HD12', ' C 488  CYS  SG ', -0.505, (129.899, 173.893, 180.75)), (' B 472  ILE HD12', ' B 488  CYS  SG ', -0.503, (172.128, 121.561, 180.986)), (' C 130  VAL HG21', ' C 231  ILE HG23', -0.503, (154.92, 104.506, 167.47)), (' C  28  TYR  O  ', ' C1301  NAG  H82', -0.503, (175.191, 98.831, 140.957)), (' B 386  LYS  NZ ', ' C 977  LEU  O  ', -0.501, (124.386, 119.264, 155.365)), (' A 167  THR HG21', ' C 466  ARG HH22', -0.5, (151.447, 165.177, 172.551)), (' B 130  VAL HG21', ' B 231  ILE HG23', -0.498, (99.181, 134.8, 167.622)), (' B  28  TYR  O  ', ' B1301  NAG  H82', -0.497, (83.663, 120.411, 141.159)), (' C 912  LEU  O  ', ' C 916  GLN  N  ', -0.497, (139.561, 113.566, 73.911)), (' A 130  VAL HG21', ' A 231  ILE HG23', -0.496, (153.55, 168.45, 167.741)), (' B1309  NAG  H3 ', ' B1309  NAG  H83', -0.494, (113.825, 100.085, 121.468)), (' A  84  LEU HD13', ' A 267  VAL HG21', -0.492, (148.384, 181.865, 153.317)), (' C 801  ILE  O  ', ' C 812  SER  OG ', -0.49, (129.012, 108.937, 95.986)), (' A 734  CYS  SG ', ' A 735  THR  N  ', -0.49, (151.086, 129.191, 134.642)), (' A 912  LEU  O  ', ' A 916  GLN  N  ', -0.489, (153.005, 149.705, 74.059)), (' B 912  LEU  O  ', ' B 916  GLN  N  ', -0.488, (114.617, 143.595, 73.985)), (' B 734  CYS  SG ', ' B 735  THR  N  ', -0.487, (133.883, 152.337, 134.668)), (' C1309  NAG  H3 ', ' C1309  NAG  H83', -0.487, (177.63, 134.541, 121.532)), (' A1309  NAG  H3 ', ' A1309  NAG  H83', -0.487, (115.604, 172.774, 121.826)), (' B 435  ALA  CB ', ' B 510  VAL HG12', -0.485, (139.382, 122.284, 175.964)), (' C  84  LEU HD13', ' C 267  VAL HG21', -0.485, (169.282, 101.678, 153.51)), (' C 734  CYS  SG ', ' C 735  THR  N  ', -0.484, (122.583, 125.851, 134.539)), (' C 435  ALA  CB ', ' C 510  VAL HG12', -0.483, (145.706, 145.672, 176.042)), (' A 435  ALA  CB ', ' A 510  VAL HG12', -0.483, (122.456, 140.046, 176.064)), (' A 801  ILE  O  ', ' A 812  SER  OG ', -0.479, (162.504, 143.794, 95.861)), (' C 642  VAL HG13', ' C 651  ILE HG22', -0.478, (173.079, 121.102, 123.715)), (' B 519  HIS  O  ', ' C  41  LYS  HB2', -0.477, (140.232, 104.652, 150.615)), (' B  84  LEU HD13', ' B 267  VAL HG21', -0.475, (89.749, 124.124, 153.218)), (' A 167  THR HG21', ' C 466  ARG  NH2', -0.473, (151.034, 164.912, 172.38)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.472, (157.154, 188.011, 147.45)), (' B  64  TRP  HE1', ' B 264  ALA  HB1', -0.47, (79.929, 127.857, 147.189)), (' A 642  VAL HG13', ' A 651  ILE HG22', -0.47, (129.453, 175.462, 123.57)), (' C 452  LEU HD13', ' C 494  SER  HB2', -0.47, (139.039, 161.089, 184.844)), (' C  91  TYR  OH ', ' C 191  GLU  OE2', -0.469, (160.59, 96.638, 144.478)), (' C 981  ASP  OD1', ' C 982  LYS  N  ', -0.468, (123.328, 124.138, 157.778)), (' C  64  TRP  HE1', ' C 264  ALA  HB1', -0.467, (170.353, 91.183, 147.457)), (' B 642  VAL HG13', ' B 651  ILE HG22', -0.467, (104.586, 110.484, 123.546)), (' A 519  HIS  O  ', ' B  41  LYS  HB2', -0.466, (106.217, 147.389, 150.408)), (' A 473  TYR  N  ', ' A 489  TYR  O  ', -0.465, (108.39, 114.598, 178.564)), (' A  91  TYR  OH ', ' A 191  GLU  OE2', -0.465, (157.005, 176.762, 144.791)), (' A 981  ASP  OD1', ' A 982  LYS  N  ', -0.464, (152.188, 130.85, 157.781)), (' A 452  LEU HD13', ' A 494  SER  HB2', -0.464, (112.647, 126.296, 185.123)), (' B  91  TYR  OH ', ' B 191  GLU  OE2', -0.463, (89.636, 133.608, 144.762)), (' B 452  LEU HD13', ' B 494  SER  HB2', -0.463, (155.997, 120.468, 184.809)), (' A1321  NAG  H81', ' C 351  TYR  OH ', -0.458, (145.741, 165.515, 180.974)), (' B 466  ARG HH22', ' C 167  THR HG21', -0.452, (153.519, 107.738, 172.765)), (' A  41  LYS  HB2', ' C 519  HIS  O  ', -0.449, (160.804, 155.415, 150.777)), (' A 466  ARG HH22', ' B 167  THR HG21', -0.448, (102.649, 134.495, 172.82)), (' A 732  VAL HG22', ' A 854  LEU  CD2', -0.441, (152.682, 136.245, 128.911)), (' C 473  TYR  N  ', ' C 489  TYR  O  ', -0.44, (131.492, 170.483, 178.768)), (' C 401  VAL HG21', ' C 451  TYR  CE1', -0.44, (146.093, 154.249, 183.821)), (' B 981  ASP  OD1', ' B 982  LYS  N  ', -0.44, (131.775, 152.6, 157.728)), (' C 732  VAL HG22', ' C 854  LEU  CD2', -0.439, (127.983, 120.753, 129.205)), (' A 289  VAL HG23', ' A 306  PHE  CZ ', -0.437, (152.393, 165.507, 132.015)), (' B 732  VAL HG22', ' B 854  LEU  CD2', -0.436, (126.693, 150.01, 129.224)), (' A 401  VAL HG21', ' A 451  TYR  CE1', -0.436, (114.76, 135.254, 183.781)), (' B 401  VAL HG21', ' B 451  TYR  CE1', -0.434, (146.345, 117.886, 183.498)), (' C 289  VAL HG23', ' C 306  PHE  CZ ', -0.434, (153.226, 106.614, 132.023)), (' A 901  ARG  NH1', ' A1045  LEU  O  ', -0.432, (148.278, 140.68, 86.281)), (' C 457  ARG  NH1', ' C 459  SER  O  ', -0.431, (135.828, 164.448, 167.575)), (' A 340  GLU  OE2', ' A 356  LYS  NZ ', -0.429, (106.541, 148.968, 175.6)), (' B 289  VAL HG23', ' B 306  PHE  CZ ', -0.426, (101.741, 135.758, 131.979)), (' A1007  GLN  OE1', ' A1010  ARG  NH1', -0.422, (146.028, 140.668, 121.88)), (' C1007  GLN  OE1', ' C1010  ARG  NH1', -0.422, (134.932, 124.524, 121.928)), (' C 118  LEU  CD2', ' C 120  VAL HG23', -0.421, (161.177, 94.823, 166.748)), (' A 118  LEU  CD2', ' A 120  VAL HG23', -0.421, (158.888, 178.393, 166.405)), (' A 117  LEU  HB2', ' A 233  ILE HD11', -0.42, (151.258, 171.22, 165.793)), (' B 117  LEU  HB2', ' B 233  ILE HD11', -0.419, (97.709, 131.186, 165.691)), (' B 732  VAL HG13', ' B 854  LEU HD23', -0.419, (127.568, 150.699, 130.562)), (' B 118  LEU  CD2', ' B 120  VAL HG23', -0.418, (87.691, 134.345, 166.694)), (' A 877  THR  O  ', ' A 897  GLN  NE2', -0.418, (154.419, 138.218, 84.991)), (' C 117  LEU  HB2', ' C 233  ILE HD11', -0.418, (158.675, 104.767, 165.748)), (' C 420  ASP  O  ', ' C 461  LEU  N  ', -0.417, (136.855, 160.443, 167.331)), (' C 732  VAL HG13', ' C 854  LEU HD23', -0.417, (127.103, 121.295, 130.605)), (' C 877  THR  O  ', ' C 897  GLN  NE2', -0.417, (128.559, 118.548, 85.001)), (' B 437  ASN  OD1', ' B 438  SER  N  ', -0.416, (138.161, 124.039, 184.712)), (' B 473  TYR  N  ', ' B 489  TYR  O  ', -0.415, (168.056, 122.531, 178.722)), (' A 466  ARG  NH2', ' B 167  THR HG21', -0.414, (103.146, 134.397, 172.59)), (' B 466  ARG  NH2', ' C 167  THR HG21', -0.414, (153.195, 107.951, 172.848)), (' A 560  LEU HD23', ' A 561  PRO  HD2', -0.413, (96.577, 150.842, 147.324)), (' B  35  GLY  HA3', ' B  56  LEU  HB3', -0.412, (95.563, 130.533, 144.298)), (' C  99  ASN HD22', ' C 123  ALA  HB2', -0.412, (160.198, 83.684, 159.377)), (' A 437  ASN  OD1', ' A 438  SER  N  ', -0.411, (124.436, 139.745, 184.852)), (' B1007  GLN  OE1', ' B1010  ARG  NH1', -0.411, (126.461, 142.212, 122.007)), (' A  99  ASN HD22', ' A 123  ALA  HB2', -0.41, (168.765, 183.044, 159.355)), (' C  57  PRO  HG3', ' C 271  GLN  NE2', -0.41, (164.595, 110.101, 142.908)), (' A 732  VAL HG13', ' A 854  LEU HD23', -0.41, (153.042, 135.784, 130.36)), (' C 172  SER  OG ', ' C 173  GLN  N  ', -0.41, (148.591, 89.035, 163.435)), (' A 454  ARG  NH1', ' A 467  ASP  O  ', -0.409, (106.901, 124.344, 173.538)), (' C 437  ASN  OD1', ' C 438  SER  N  ', -0.407, (144.955, 143.709, 184.85)), (' B 617  CYS  HB3', ' B 649  CYS  HB3', -0.407, (109.011, 109.534, 125.129)), (' C 454  ARG  NH1', ' C 467  ASP  O  ', -0.406, (140.405, 166.591, 173.567)), (' C 901  ARG  NH1', ' C1045  LEU  O  ', -0.406, (133.811, 122.806, 86.345)), (' A 420  ASP  O  ', ' A 461  LEU  N  ', -0.405, (114.099, 124.502, 167.759)), (' A  57  PRO  HG3', ' A 271  GLN  NE2', -0.404, (143.958, 173.634, 142.589)), (' B 798  PHE  CD2', ' B 801  ILE HD11', -0.404, (116.481, 151.322, 89.64)), (' B 560  LEU HD23', ' B 561  PRO  HD2', -0.404, (142.611, 94.701, 147.297)), (' A  35  GLY  HA3', ' A  56  LEU  HB3', -0.404, (151.758, 173.192, 144.128)), (' B  69  HIS  N  ', ' B 261  GLY  O  ', -0.403, (71.487, 128.616, 155.165)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.403, (153.065, 159.947, 142.863)), (' C 560  LEU HD23', ' C 561  PRO  HD2', -0.403, (168.092, 162.167, 147.468)), (' A 351  TYR  OH ', ' B1321  NAG  H81', -0.403, (105.562, 129.392, 181.117)), (' C  69  HIS  N  ', ' C 261  GLY  O  ', -0.403, (173.79, 83.679, 155.003)), (' B 454  ARG  NH1', ' B 467  ASP  O  ', -0.403, (160.191, 116.512, 173.645)), (' A 931  GLN  O  ', ' A 935  SER  N  ', -0.402, (159.388, 156.523, 100.493)), (' A1024  LYS  O  ', ' A1028  CYS  N  ', -0.401, (145.847, 138.108, 93.819)), (' C 420  ASP  OD1', ' C 421  TYR  N  ', -0.401, (135.085, 158.039, 170.6)), (' B 351  TYR  OH ', ' C1321  NAG  H81', -0.401, (156.423, 112.862, 181.192)), (' A 490  PHE  CE2', ' A 492  LEU  HB2', -0.4, (108.326, 122.419, 182.253)), (' B 490  PHE  CE2', ' B 492  LEU  HB2', -0.4, (161.202, 118.809, 182.234)), (' B 457  ARG  NH1', ' B 459  SER  O  ', -0.4, (160.583, 121.598, 167.51)), (' B1024  LYS  NZ ', ' B1038  PHE  O  ', -0.4, (126.425, 136.707, 97.352)), (' B  57  PRO  HG3', ' B 271  GLN  NE2', -0.4, (99.109, 123.623, 142.863))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
