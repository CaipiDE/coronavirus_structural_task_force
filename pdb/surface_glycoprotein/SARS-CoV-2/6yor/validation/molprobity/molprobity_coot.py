# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', '  35 ', 'ASN', 0.011132473178875321, (235.52299999999994, 205.28, 201.03599999999994)), ('L', '  35 ', 'ASN', 0.011294462423393273, (232.74899999999994, 242.66199999999998, 266.0619999999999))]
data['omega'] = [('B', ' 151 ', 'PRO', None, (229.73699999999994, 255.0709999999999, 211.92099999999994)), ('B', ' 153 ', 'PRO', None, (227.27799999999993, 252.3659999999999, 206.96999999999997)), ('C', '   8 ', 'PRO', None, (246.7939999999999, 228.495, 194.278)), ('C', ' 101 ', 'PRO', None, (237.55899999999997, 220.62299999999993, 215.43699999999995)), ('C', ' 147 ', 'PRO', None, (243.55299999999994, 247.2959999999999, 182.83699999999993)), ('H', ' 151 ', 'PRO', None, (229.448, 193.40899999999993, 254.08999999999997)), ('H', ' 153 ', 'PRO', None, (226.63099999999994, 196.03499999999994, 258.89099999999996)), ('L', '   8 ', 'PRO', None, (242.97999999999993, 219.263, 273.7719999999999)), ('L', ' 101 ', 'PRO', None, (236.1749999999999, 227.42199999999997, 251.81699999999995)), ('L', ' 147 ', 'PRO', None, (241.32599999999994, 201.501, 283.933))]
data['rota'] = [('E', ' 368 ', 'LEU', 0.0, (210.783, 239.64599999999996, 254.18799999999996)), ('E', ' 376 ', 'THR', 0.02447880688123405, (216.89699999999993, 235.697, 245.26699999999994)), ('E', ' 387 ', 'LEU', 0.23561591503674933, (217.87999999999994, 238.33099999999988, 264.0949999999999)), ('E', ' 390 ', 'LEU', 0.18348372691347062, (218.81399999999994, 240.916, 267.857)), ('E', ' 480 ', 'CYS', 0.022504777638391035, (238.598, 265.488, 225.82299999999995)), ('E', ' 483 ', 'VAL', 0.026116985001981258, (233.29899999999995, 266.779, 224.41399999999993)), ('E', ' 506 ', 'GLN', 0.014207068381676492, (214.55699999999987, 241.986, 231.81499999999994)), ('H', '   5 ', 'VAL', 0.10511737902244477, (214.67299999999994, 215.103, 255.56099999999998)), ('H', ' 192 ', 'SER', 0.1031612761493944, (222.709, 177.907, 284.578)), ('H', ' 203 ', 'ASN', 0.2985364423981058, (221.54899999999995, 188.46199999999988, 261.387)), ('L', '   1 ', 'ASP', 0.08302797332491041, (241.94299999999996, 228.487, 253.26099999999997)), ('A', ' 368 ', 'LEU', 0.0, (212.436, 208.639, 210.43499999999995)), ('A', ' 376 ', 'THR', 0.02447880688123405, (217.59399999999994, 212.612, 219.93099999999995)), ('A', ' 387 ', 'LEU', 0.23027061431254658, (220.57799999999995, 209.784, 201.34399999999994)), ('A', ' 390 ', 'LEU', 0.18494115264416977, (221.88599999999994, 207.152, 197.72699999999995)), ('A', ' 480 ', 'CYS', 0.022697735571232794, (236.72299999999996, 182.79, 241.86799999999994)), ('A', ' 483 ', 'VAL', 0.026056012271108132, (231.28699999999995, 181.568, 242.70499999999996)), ('A', ' 506 ', 'GLN', 0.014304250586568113, (213.74099999999996, 206.48, 233.10399999999996)), ('B', '   5 ', 'VAL', 0.1042258556315981, (216.72999999999993, 233.127, 209.27899999999994)), ('B', ' 192 ', 'SER', 0.10301352493586047, (224.362, 270.367, 181.05899999999994)), ('B', ' 203 ', 'ASN', 0.29791465549607765, (222.14299999999994, 259.795, 204.16599999999994)), ('C', '   1 ', 'ASP', 0.08120660475257391, (243.438, 219.484, 214.63499999999993))]
data['cbeta'] = []
data['probe'] = [(' A 378  LYS  NZ ', ' B  57  GLU  OE2', -0.698, (225.869, 214.954, 220.631)), (' E 378  LYS  NZ ', ' H  57  GLU  OE2', -0.697, (225.268, 233.162, 244.808)), (' B 123  PRO  HB3', ' B 149  TYR  HB3', -0.62, (230.2, 260.915, 206.94)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.618, (229.898, 187.016, 258.789)), (' A 383  SER  OG ', ' B 104  THR  OG1', -0.577, (225.761, 215.882, 205.783)), (' E 383  SER  OG ', ' H 104  THR  OG1', -0.568, (223.377, 232.506, 259.564)), (' C 190  ALA  O  ', ' C 194  LYS  HG3', -0.499, (250.255, 276.398, 203.248)), (' L 190  ALA  O  ', ' L 194  LYS  HG3', -0.497, (250.598, 172.407, 263.658)), (' A 485  GLY  O  ', ' H 119  SER  OG ', -0.496, (232.275, 189.889, 246.568)), (' A 517  LEU  HB2', ' C  34  ILE HG22', -0.472, (229.618, 203.699, 202.146)), (' C  67  ARG  HB2', ' C  82  SER  O  ', -0.465, (233.589, 224.567, 183.594)), (' C  34  ILE  O  ', ' C  36  LYS  N  ', -0.464, (234.616, 207.03, 201.898)), (' E 517  LEU  HB2', ' L  34  ILE HG22', -0.462, (227.225, 244.646, 264.114)), (' L  34  ILE  O  ', ' L  36  LYS  N  ', -0.46, (231.75, 240.909, 264.598)), (' L  67  ARG  HB2', ' L  82  SER  O  ', -0.456, (229.05, 222.972, 283.193)), (' E 447  GLY  HA2', ' E 498  GLN  HG2', -0.44, (212.261, 248.396, 225.332)), (' A 489  TYR  HH ', ' H 119  SER  N  ', -0.437, (232.421, 193.774, 246.477)), (' A 447  GLY  HA2', ' A 498  GLN  HG2', -0.436, (210.639, 199.8, 239.101)), (' H 105  PRO  HG3', ' L  97  TYR  CZ ', -0.43, (228.332, 230.756, 262.945)), (' B 105  PRO  HG3', ' C  97  TYR  CZ ', -0.428, (230.62, 217.468, 203.315)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.427, (214.926, 201.387, 231.198)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.426, (223.421, 209.435, 213.099)), (' E 379  CYS  HA ', ' E 432  CYS  HA ', -0.425, (221.906, 238.672, 252.506)), (' A 393  THR  HA ', ' A 522  ALA  HA ', -0.424, (224.994, 197.544, 198.361)), (' E 497  PHE  CE2', ' E 507  PRO  HB3', -0.42, (215.51, 247.058, 233.794)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.415, (222.193, 250.489, 267.718)), (' A 393  THR HG21', ' A 518  LEU  H  ', -0.415, (229.757, 198.151, 199.919)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.409, (213.955, 247.663, 240.23)), (' H 213  LYS  HA ', ' H 213  LYS  HD2', -0.408, (224.505, 177.253, 266.112)), (' E 347  PHE  HB3', ' E 348  ALA  H  ', -0.408, (215.424, 251.506, 241.453)), (' E 393  THR HG21', ' E 518  LEU  H  ', -0.407, (226.919, 249.856, 266.54)), (' A 360  ASN  H  ', ' A 523  THR  HB ', -0.407, (219.402, 194.668, 199.729)), (' B 188  VAL HG11', ' B 198  TYR  CE1', -0.406, (224.718, 265.686, 185.635)), (' H 188  VAL HG11', ' H 198  TYR  CE1', -0.401, (223.147, 182.618, 280.071)), (' A 412  PRO  HB3', ' A 426  PRO  O  ', -0.4, (233.027, 206.946, 215.963)), (' H 150  PHE  HA ', ' H 151  PRO  HA ', -0.4, (231.528, 193.699, 255.249))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
