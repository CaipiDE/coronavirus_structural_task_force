# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 262 ', 'ALA', 0.011358378959890577, (256.853, 180.892, 169.321)), ('C', ' 262 ', 'ALA', 0.014722545802150539, (153.946, 155.485, 169.465))]
data['omega'] = []
data['rota'] = [('A', '  62 ', 'VAL', 0.012140007131361978, (194.50600000000006, 243.31899999999993, 175.85700000000003)), ('A', ' 150 ', 'LYS', 0.25908086099706384, (167.336, 263.1119999999999, 158.769)), ('A', ' 213 ', 'VAL', 0.2075944895470269, (182.391, 255.133, 179.094)), ('A', ' 266 ', 'TYR', 0.25954744871730295, (190.41800000000006, 245.62899999999993, 172.33100000000002)), ('A', ' 289 ', 'VAL', 0.25164287873950597, (189.514, 229.80899999999994, 186.909)), ('A', ' 546 ', 'LEU', 0.29155432203141896, (217.928, 214.064, 169.683)), ('A', ' 844 ', 'ILE', 0.011582408976795846, (167.607, 213.26799999999994, 189.982)), ('B', '  15 ', 'CYS', 0.18423075594240995, (248.624, 176.364, 147.448)), ('B', '  61 ', 'ASN', 0.26692145722955596, (237.423, 175.98799999999994, 178.937)), ('B', '  62 ', 'VAL', 0.003150532575091347, (238.72400000000002, 178.033, 175.97)), ('B', ' 120 ', 'VAL', 0.14615894313786093, (244.438, 189.408, 156.432)), ('B', ' 127 ', 'VAL', 0.15163425112747125, (242.877, 193.80099999999993, 153.675)), ('B', ' 289 ', 'VAL', 0.1629563551468737, (229.68, 189.51199999999994, 186.922)), ('B', ' 641 ', 'ASN', 0.24067148418742745, (229.374, 167.532, 202.494)), ('B', ' 844 ', 'ILE', 0.010228028645893755, (226.41900000000007, 216.704, 189.992)), ('C', ' 289 ', 'VAL', 0.1808922433901148, (174.802, 174.797, 186.893)), ('C', ' 523 ', 'THR', 0.2582470646418659, (172.704, 217.204, 159.662)), ('C', ' 641 ', 'ASN', 0.15942504510707997, (155.977, 186.053, 202.479)), ('C', ' 738 ', 'CYS', 0.023638616900668614, (208.40100000000004, 185.904, 189.247)), ('C', ' 760 ', 'CYS', 0.2144966523311368, (210.40000000000003, 191.17, 189.36000000000004)), ('C', ' 844 ', 'ILE', 0.011778560068709039, (199.969, 164.036, 189.964))]
data['cbeta'] = [('A', ' 150 ', 'LYS', ' ', 0.28599158438477207, (165.888, 263.3339999999999, 159.26))]
data['probe'] = [(' A 122  ASN HD21', ' A1414  NAG  C1 ', -1.625, (177.396, 244.785, 150.494)), (' A 343  ASN HD21', ' A1402  NAG  C1 ', -1.566, (217.698, 210.162, 136.01)), (' A1074  ASN HD21', ' A1411  NAG  C1 ', -1.546, (207.514, 226.569, 246.124)), (' A 717  ASN HD21', ' A1406  NAG  C1 ', -1.53, (188.044, 222.573, 245.634)), (' A 801  ASN  ND2', ' A1431  NAG  C1 ', -1.498, (171.111, 216.596, 235.905)), (' A 343  ASN  ND2', ' A1402  NAG  C1 ', -1.43, (218.528, 209.955, 136.415)), (' A 657  ASN  ND2', ' A1404  NAG  C1 ', -1.427, (212.822, 239.768, 215.399)), (' A 657  ASN HD21', ' A1404  NAG  C1 ', -1.395, (212.61, 240.979, 214.915)), (' A 122  ASN  ND2', ' A1414  NAG  C1 ', -1.381, (178.333, 244.882, 151.214)), (' A 717  ASN  ND2', ' A1406  NAG  C1 ', -1.379, (189.758, 222.992, 245.815)), (' A1074  ASN  ND2', ' A1411  NAG  C1 ', -1.377, (207.244, 225.597, 247.432)), (' A 331  ASN  ND2', ' A1418  NAG  C1 ', -1.34, (231.524, 221.911, 160.485)), (' A  69  HIS  C  ', ' A 260  ALA  H  ', -1.12, (185.888, 262.118, 163.762)), (' A  97  LYS  HE2', ' A 262  ALA  HB3', -1.102, (180.881, 256.694, 170.186)), (' A  61  ASN  ND2', ' A1401  NAG  C1 ', -1.1, (200.512, 244.899, 178.731)), (' A 331  ASN HD21', ' A1418  NAG  C2 ', -1.051, (232.545, 221.112, 160.584)), (' B  69  HIS  C  ', ' B 260  ALA  H  ', -1.035, (259.508, 176.251, 163.94)), (' C  79  PHE  HB2', ' C 258  TRP  CH2', -0.983, (149.787, 160.736, 161.34)), (' A  69  HIS  C  ', ' A 260  ALA  N  ', -0.972, (185.555, 261.488, 163.446)), (' C1418  NAG  H62', ' C1419  NAG  HN2', -0.966, (155.038, 214.224, 162.066)), (' A1418  NAG  H62', ' A1419  NAG  HN2', -0.921, (233.562, 226.719, 161.446)), (' A  97  LYS  CE ', ' A 262  ALA  HB3', -0.892, (180.183, 257.437, 169.963)), (' B  97  LYS  HE2', ' B 262  ALA  HB3', -0.874, (258.065, 182.612, 170.037)), (' C  79  PHE  HB2', ' C 258  TRP  HH2', -0.872, (148.815, 161.4, 161.979)), (' A 331  ASN HD21', ' A1418  NAG  C1 ', -0.87, (231.774, 220.517, 160.821)), (' A 717  ASN  CG ', ' A1406  NAG  C1 ', -0.837, (189.485, 222.054, 246.246)), (' B  69  HIS  C  ', ' B 260  ALA  N  ', -0.82, (259.174, 176.965, 163.572)), (' C  97  LYS  NZ ', ' C 183  GLN  O  ', -0.816, (155.17, 149.97, 171.975)), (' C  79  PHE  CB ', ' C 258  TRP  CH2', -0.804, (149.71, 161.915, 161.12)), (' C  69  HIS  C  ', ' C 260  ALA  N  ', -0.803, (148.504, 155.529, 163.917)), (' A 147  LYS  O  ', ' A1417  NAG  H82', -0.773, (171.062, 265.063, 151.645)), (' A  18  LEU HD23', ' A 258  TRP  CD1', -0.763, (188.771, 260.513, 156.036)), (' A  97  LYS  HE2', ' A 262  ALA  CB ', -0.763, (181.557, 257.271, 170.172)), (' C  68  ILE  O  ', ' C 260  ALA  HB3', -0.762, (149.205, 158.169, 165.019)), (' A  61  ASN HD21', ' A1401  NAG  C1 ', -0.73, (200.994, 244.663, 179.964)), (' C  69  HIS  C  ', ' C 260  ALA  H  ', -0.73, (148.494, 155.947, 164.189)), (' A1074  ASN  CG ', ' A1411  NAG  C1 ', -0.718, (206.74, 225.388, 247.026)), (' B  79  PHE  HB2', ' B 258  TRP  CH2', -0.71, (253.806, 174.91, 161.872)), (' B 406  GLU  OE2', ' B 495  TYR  OH ', -0.708, (182.853, 192.937, 141.342)), (' C 544  ASN  ND2', ' C 564  GLN  OE1', -0.705, (171.936, 214.691, 166.352)), (' B  97  LYS  CE ', ' B 262  ALA  HB3', -0.704, (258.55, 183.226, 170.241)), (' C  79  PHE  CB ', ' C 258  TRP  HH2', -0.702, (149.283, 162.082, 161.76)), (' A 360  ASN  H  ', ' A 523  THR HG22', -0.7, (229.064, 209.918, 156.724)), (' C  22  THR  O  ', ' C  78  ARG  NH1', -0.699, (145.866, 166.999, 166.082)), (' C1418  NAG  H62', ' C1419  NAG  N2 ', -0.693, (155.598, 214.893, 162.535)), (' A1418  NAG  H62', ' A1419  NAG  N2 ', -0.691, (233.158, 226.767, 162.619)), (' B1418  NAG  H62', ' B1419  NAG  HN2', -0.689, (205.6, 152.824, 162.205)), (' C 326  ILE HD12', ' C 534  VAL HG22', -0.685, (160.643, 204.246, 171.787)), (' A 186  PHE  HE1', ' A 262  ALA  O  ', -0.685, (182.581, 254.782, 171.389)), (' B  46  SER  OG ', ' B 281  GLU  OE2', -0.681, (231.407, 207.352, 188.811)), (' A  79  PHE  HB2', ' A 258  TRP  CH2', -0.678, (190.183, 258.169, 161.409)), (' C 406  GLU  OE2', ' C 495  TYR  OH ', -0.677, (200.27, 213.939, 141.831)), (' A 801  ASN  CG ', ' A1431  NAG  C1 ', -0.676, (171.52, 216.132, 236.287)), (' C  69  HIS  C  ', ' C 260  ALA  O  ', -0.669, (149.525, 155.256, 164.748)), (' C  97  LYS  HE2', ' C 262  ALA  HB3', -0.669, (155.124, 153.468, 170.471)), (' A 801  ASN  ND2', ' A1431  NAG  C2 ', -0.655, (169.871, 216.921, 237.578)), (' A  61  ASN HD22', ' A1401  NAG  C1 ', -0.655, (200.986, 244.719, 178.723)), (' C  46  SER  OG ', ' C 281  GLU  OE2', -0.654, (189.402, 164.329, 189.0)), (' A1081  ILE HD13', ' A1133  VAL HG22', -0.653, (212.253, 213.813, 260.072)), (' C  63  THR HG21', ' C  65  PHE  CZ ', -0.644, (156.195, 172.604, 169.202)), (' A  18  LEU  HB3', ' A 258  TRP  HE1', -0.638, (191.422, 259.839, 156.425)), (' A 335  LEU HD11', ' A 364  ASP  HB3', -0.635, (219.825, 216.809, 149.741)), (' C 128  ILE HG21', ' C 229  LEU HD13', -0.629, (175.437, 167.648, 156.408)), (' A 236  THR HG21', ' A1423  NAG  H82', -0.626, (203.288, 235.65, 159.636)), (' A 657  ASN  CG ', ' A1404  NAG  C1 ', -0.623, (212.286, 239.306, 215.663)), (' C 128  ILE HD13', ' C 229  LEU HD11', -0.623, (175.356, 166.173, 157.277)), (' B 128  ILE HG21', ' B 229  LEU  CD1', -0.62, (235.488, 193.109, 156.552)), (' A  16  VAL HG11', ' A 255  SER  HB2', -0.618, (190.626, 260.187, 148.931)), (' B1418  NAG  H62', ' B1419  NAG  N2 ', -0.617, (204.709, 152.64, 162.403)), (' A  68  ILE  O  ', ' A 260  ALA  HB3', -0.616, (187.814, 260.015, 164.943)), (' C  97  LYS  CE ', ' C 262  ALA  HB3', -0.615, (154.672, 152.959, 170.284)), (' B 381  GLY  HA3', ' B 430  THR HG23', -0.61, (193.698, 182.326, 162.107)), (' C  63  THR  CG2', ' C  65  PHE  CZ ', -0.6, (156.089, 171.958, 169.668)), (' A1125  ASN  ND2', ' A1127  ASP  OD2', -0.594, (222.627, 202.649, 263.082)), (' A 122  ASN  CG ', ' A1414  NAG  C1 ', -0.592, (176.622, 245.532, 152.27)), (' A 331  ASN  CG ', ' A1418  NAG  C1 ', -0.591, (231.404, 221.376, 160.176)), (' B 581  THR  O  ', ' B 583  GLU  N  ', -0.59, (198.661, 157.148, 170.47)), (' B 258  TRP  HZ3', ' B 260  ALA  HB2', -0.59, (256.234, 175.712, 162.452)), (' C1125  ASN  ND2', ' C1127  ASP  OD2', -0.588, (181.367, 217.042, 263.136)), (' B  62  VAL HG23', ' B 267  VAL  O  ', -0.582, (239.17, 178.905, 173.128)), (' C 128  ILE HG21', ' C 229  LEU  CD1', -0.579, (174.93, 167.262, 156.422)), (' A 331  ASN  ND2', ' A1418  NAG  N2 ', -0.579, (231.721, 219.787, 161.291)), (' A 258  TRP  HZ3', ' A 260  ALA  HB2', -0.577, (187.978, 259.188, 162.747)), (' B  79  PHE  HB2', ' B 258  TRP  HH2', -0.576, (254.303, 174.13, 162.04)), (' A 147  LYS  O  ', ' A1417  NAG  C8 ', -0.565, (171.379, 264.58, 151.695)), (' B 326  ILE HG23', ' B 541  PHE  HA ', -0.562, (209.151, 167.374, 170.979)), (' C 258  TRP  HZ3', ' C 260  ALA  HB2', -0.561, (149.544, 158.633, 162.574)), (' B 146  HIS  ND1', ' B 146  HIS  O  ', -0.558, (269.377, 187.683, 158.493)), (' C  16  VAL HG11', ' C 255  SER  HB2', -0.556, (147.71, 161.237, 148.907)), (' B 360  ASN  H  ', ' B 523  THR HG22', -0.555, (193.528, 165.022, 156.71)), (' B  62  VAL HG23', ' B 267  VAL  C  ', -0.554, (239.293, 179.737, 172.787)), (' B 244  LEU HD11', ' B 258  TRP  CG ', -0.545, (256.6, 176.199, 157.731)), (' A  79  PHE  HB2', ' A 258  TRP  HH2', -0.544, (190.742, 258.547, 161.931)), (' B 128  ILE HD13', ' B 229  LEU HD11', -0.542, (236.467, 194.0, 157.394)), (' B 168  PHE  CZ ', ' B 229  LEU HD22', -0.538, (233.491, 195.728, 155.49)), (' A 331  ASN HD22', ' A1418  NAG  C1 ', -0.533, (230.644, 220.676, 161.805)), (' A  29  THR HG23', ' A  62  VAL HG23', -0.533, (192.804, 245.512, 177.655)), (' C 211  ASN  O  ', ' C 212  LEU HD12', -0.53, (161.739, 154.313, 181.806)), (' B 544  ASN  OD1', ' B 564  GLN  NE2', -0.524, (197.266, 167.016, 166.717)), (' B 468  ILE  O  ', ' B 468  ILE HG22', -0.519, (170.444, 180.95, 143.239)), (' A 834  ILE HG13', ' C1428  NAG  H81', -0.517, (163.724, 201.096, 203.704)), (' A 108  THR  OG1', ' A1422  NAG  H62', -0.517, (202.145, 235.039, 156.564)), (' B  79  PHE  CB ', ' B 258  TRP  CH2', -0.515, (253.468, 174.359, 161.598)), (' C 568  ASP  OD1', ' C 569  ILE  N  ', -0.514, (177.438, 213.274, 185.291)), (' A 335  LEU HD12', ' A 362  VAL  O  ', -0.51, (221.506, 215.438, 150.794)), (' C 211  ASN  C  ', ' C 212  LEU HD12', -0.509, (161.803, 154.649, 181.131)), (' A  69  HIS  O  ', ' A 259  THR  HA ', -0.508, (186.526, 262.663, 162.78)), (' B 258  TRP  CZ3', ' B 260  ALA  HB2', -0.508, (256.184, 175.906, 162.29)), (' B 215  ASP  OD1', ' B 216  LEU  N  ', -0.507, (247.165, 181.456, 179.294)), (' B 568  ASP  OD1', ' B 569  ILE  N  ', -0.505, (195.192, 172.666, 185.268)), (' B 128  ILE HG21', ' B 229  LEU HD13', -0.504, (235.415, 193.002, 156.297)), (' A  23  GLN  C  ', ' A  24  LEU HD22', -0.502, (198.408, 260.362, 168.698)), (' A 193  VAL HG13', ' A 270  LEU HD11', -0.498, (189.851, 232.639, 170.19)), (' C 168  PHE  CZ ', ' C 229  LEU HD22', -0.493, (178.42, 168.169, 155.313)), (' A  79  PHE  CB ', ' A 258  TRP  CH2', -0.491, (190.761, 257.918, 161.773)), (' A 326  ILE HD11', ' A 533  LEU  HA ', -0.489, (224.38, 225.745, 170.368)), (' B 186  PHE  HE1', ' B 262  ALA  O  ', -0.487, (255.207, 183.348, 171.204)), (' C 410  ILE  O  ', ' C 425  LEU HD12', -0.486, (194.476, 211.76, 154.004)), (' A 462  LYS  HE2', ' B1422  NAG  H82', -0.485, (221.604, 181.086, 157.482)), (' A 468  ILE  O  ', ' A 468  ILE HG22', -0.485, (226.21, 182.549, 143.131)), (' A 568  ASP  OD1', ' A 569  ILE  N  ', -0.485, (221.382, 208.233, 185.178)), (' A1422  NAG  H61', ' A1423  NAG  N2 ', -0.483, (205.558, 235.268, 157.999)), (' B 332  ILE HG21', ' B 360  ASN  C  ', -0.482, (196.901, 163.967, 154.107)), (' B  68  ILE  O  ', ' B 260  ALA  HB3', -0.481, (257.057, 175.823, 165.555)), (' B  18  LEU  HB3', ' B 258  TRP  HE1', -0.48, (254.62, 172.933, 156.618)), (' C 326  ILE HD11', ' C 533  LEU  HA ', -0.478, (161.201, 207.071, 170.533)), (' A  69  HIS  O  ', ' A 260  ALA  N  ', -0.476, (186.232, 261.678, 163.27)), (' A 326  ILE HG23', ' A 541  PHE  HA ', -0.476, (218.944, 222.352, 171.304)), (' C 551  VAL HG23', ' C 590  CYS  SG ', -0.474, (165.307, 201.835, 181.605)), (' A 258  TRP  CZ3', ' A 260  ALA  HB2', -0.473, (188.264, 259.431, 162.43)), (' A 164  ASN  OD1', ' A 165  ASN  N  ', -0.472, (191.592, 235.907, 142.143)), (' C 213  VAL HG13', ' C 214  ARG  HG2', -0.469, (154.001, 158.414, 180.597)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.468, (233.694, 192.915, 186.759)), (' A 717  ASN  OD1', ' A1406  NAG  C1 ', -0.465, (188.819, 221.611, 246.984)), (' C 326  ILE HG23', ' C 541  PHE  HA ', -0.464, (166.303, 203.809, 171.218)), (' B 714  ILE HD12', ' B1096  VAL HG11', -0.463, (211.874, 183.824, 252.537)), (' B1081  ILE  CD1', ' B1115  ILE HD13', -0.462, (205.616, 182.91, 261.495)), (' B 703  ASN  ND2', ' C 787  GLN  OE1', -0.461, (218.097, 178.304, 234.724)), (' C  61  ASN HD21', ' C1401  NAG  C7 ', -0.458, (155.73, 177.168, 181.839)), (' A1050  MET  HE2', ' A1052  PHE  CE1', -0.456, (180.671, 206.32, 235.836)), (' B 551  VAL HG23', ' B 590  CYS  SG ', -0.455, (210.846, 168.305, 181.755)), (' C 213  VAL HG13', ' C 214  ARG  N  ', -0.45, (155.221, 157.81, 179.881)), (' A 326  ILE HD12', ' A 534  VAL HG22', -0.447, (222.431, 226.723, 171.829)), (' C 468  ILE  O  ', ' C 468  ILE HG22', -0.445, (196.797, 230.351, 143.537)), (' C 715  PRO  HA ', ' C1072  GLU  HA ', -0.445, (177.847, 186.909, 246.651)), (' B 213  VAL HG13', ' B 214  ARG  N  ', -0.444, (254.248, 181.134, 179.698)), (' C  18  LEU HD23', ' C 258  TRP  CD1', -0.444, (148.751, 159.197, 156.302)), (' A 287  ASP  OD1', ' A 288  ALA  N  ', -0.443, (184.378, 231.502, 186.723)), (' A 433  VAL HG22', ' A 512  VAL HG13', -0.443, (213.838, 198.013, 152.817)), (' B 410  ILE  O  ', ' B 425  LEU HD12', -0.442, (187.967, 188.363, 153.815)), (' C 714  ILE HD12', ' C1096  VAL HG11', -0.442, (178.994, 193.139, 252.601)), (' A 884  SER  OG ', ' A 887  THR  OG1', -0.439, (178.26, 195.2, 239.853)), (' B  16  VAL HG11', ' B 255  SER  HB2', -0.439, (255.471, 173.272, 149.422)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.438, (214.891, 197.702, 139.291)), (' B 111  ASP  O  ', ' B 112  SER  OG ', -0.438, (235.622, 176.599, 145.422)), (' A 111  ASP  O  ', ' A 112  SER  OG ', -0.434, (197.752, 241.384, 145.438)), (' A 410  ILE  O  ', ' A 410  ILE HG22', -0.434, (211.151, 194.393, 152.423)), (' A  79  PHE  CB ', ' A 258  TRP  HH2', -0.433, (190.763, 258.08, 162.188)), (' B 841  LEU  C  ', ' B 841  LEU HD12', -0.432, (225.01, 221.431, 187.141)), (' A 472  ILE HG21', ' A 488  CYS  HB3', -0.432, (220.525, 168.768, 139.44)), (' C 821  LEU  O  ', ' C 825  LYS  HG2', -0.431, (192.222, 169.893, 217.479)), (' A 410  ILE  O  ', ' A 425  LEU HD12', -0.431, (211.337, 193.94, 153.825)), (' A 717  ASN  ND2', ' A1406  NAG  O5 ', -0.431, (189.29, 223.576, 245.295)), (' B 335  LEU  N  ', ' B 335  LEU HD12', -0.429, (201.922, 165.338, 149.053)), (' A 714  ILE HD12', ' A1096  VAL HG11', -0.429, (203.342, 216.909, 252.594)), (' A1081  ILE  CD1', ' A1133  VAL HG22', -0.428, (211.799, 213.672, 260.378)), (' C 159  VAL HG13', ' C 160  TYR  CD2', -0.426, (162.482, 165.008, 150.086)), (' B1050  MET  HE2', ' B1052  PHE  CE1', -0.422, (213.694, 209.113, 235.87)), (' B  61  ASN HD21', ' B1401  NAG  C7 ', -0.42, (237.096, 171.299, 181.746)), (' B 244  LEU HD11', ' B 258  TRP  CD2', -0.419, (256.579, 175.796, 158.593)), (' B 336  CYS  HA ', ' B 361  CYS  HB2', -0.419, (196.963, 167.697, 150.752)), (' B 830  ASP  N  ', ' B 830  ASP  OD1', -0.418, (219.21, 213.036, 203.164)), (' B  61  ASN  N  ', ' B  61  ASN  OD1', -0.416, (236.379, 175.349, 180.503)), (' A 417  LYS  O  ', ' A 421  TYR  HB2', -0.416, (213.457, 182.626, 147.5)), (' B 715  PRO  HA ', ' B1072  GLU  HA ', -0.416, (217.745, 186.095, 246.578)), (' A 830  ASP  N  ', ' A 830  ASP  OD1', -0.415, (174.234, 209.117, 203.266)), (' A 454  ARG  HD3', ' A 457  ARG  HG2', -0.415, (218.409, 179.036, 147.349)), (' B 401  VAL HG22', ' B 509  ARG  HG2', -0.414, (189.31, 183.548, 139.448)), (' C 117  LEU HD22', ' C 231  ILE HD13', -0.414, (172.833, 172.9, 157.315)), (' A  87  ASN  N  ', ' A  87  ASN  OD1', -0.414, (198.849, 235.762, 166.698)), (' B 802  PHE  HZ ', ' B 898  PHE  CZ ', -0.414, (216.626, 209.867, 239.32)), (' B 523  THR  O  ', ' B 523  THR HG22', -0.413, (194.418, 165.656, 157.355)), (' C 435  ALA  HA ', ' C 509  ARG  O  ', -0.413, (189.617, 208.323, 144.089)), (' B  97  LYS  HE2', ' B 262  ALA  CB ', -0.412, (257.74, 182.271, 170.967)), (' A 372  ALA  HB1', ' A 374  PHE  CZ ', -0.411, (211.731, 208.161, 144.409)), (' B 821  LEU  O  ', ' B 825  LYS  HG2', -0.411, (225.241, 207.137, 217.532)), (' C 108  THR HG23', ' C 109  THR  N  ', -0.411, (163.437, 180.301, 153.312)), (' B  79  PHE  CB ', ' B 258  TRP  HH2', -0.409, (253.665, 174.225, 162.242)), (' B 164  ASN HD21', ' B1420  NAG  C6 ', -0.409, (232.441, 181.919, 138.565)), (' A 108  THR  OG1', ' A1422  NAG  C6 ', -0.409, (202.576, 235.038, 156.715)), (' A 821  LEU  O  ', ' A 825  LYS  HG2', -0.409, (176.302, 216.506, 217.616)), (' A 339  GLY  O  ', ' A 343  ASN  HB2', -0.407, (219.965, 207.917, 139.922)), (' B 778  THR  CG2', ' B 870  ILE HD11', -0.407, (209.253, 215.201, 216.607)), (' A 656  VAL HG23', ' A 695  TYR  HB3', -0.406, (205.79, 234.683, 214.077)), (' B 433  VAL HG22', ' B 512  VAL HG13', -0.406, (190.356, 184.618, 153.018)), (' B 258  TRP  HB2', ' B 259  THR  H  ', -0.406, (259.103, 176.855, 159.153)), (' A 310  LYS  NZ ', ' A 663  ASP  OD2', -0.405, (194.933, 229.376, 211.221)), (' A 171  VAL HG21', ' A1415  NAG  H82', -0.405, (176.51, 238.435, 148.129)), (' C 152  TRP  CD1', ' C 180  GLU  HB3', -0.403, (158.66, 145.134, 161.172)), (' C 310  LYS  NZ ', ' C 663  ASP  OD2', -0.403, (172.352, 179.68, 211.132)), (' A 326  ILE  CG2', ' A 541  PHE  HA ', -0.403, (218.981, 223.059, 171.657)), (' B 330  PRO  HD2', ' B 525  CYS  SG ', -0.402, (200.119, 166.854, 161.212)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.402, (175.733, 169.555, 186.763)), (' C 830  ASP  N  ', ' C 830  ASP  OD1', -0.402, (199.905, 171.88, 202.947)), (' B 360  ASN  N  ', ' B 523  THR HG22', -0.401, (193.576, 165.186, 156.268)), (' B 884  SER  HG ', ' B 887  THR  HG1', -0.4, (205.437, 215.496, 240.218))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
