# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 338 ', 'ASN', 0.0, (-43.419, -6.59, -12.005)), ('B', ' 386 ', 'LYS', 0.003266660164723781, (-18.153, 13.713, 36.62100000000001)), ('B', ' 526 ', 'GLY', 0.04448361442626634, (-27.109999999999992, 16.586, 42.34))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (-39.293, 2.181, -31.411999999999995))]
data['rota'] = [('A', '  24 ', 'GLN', 0.03382115892526403, (-32.712, 44.846, -1.393)), ('A', '  35 ', 'GLU', 0.05045980899932719, (-38.816, 29.300000000000004, -0.893)), ('A', ' 338 ', 'ASN', 0.01740179690207767, (-43.419, -6.59, -12.005)), ('A', ' 339 ', 'VAL', 0.03360568080097437, (-46.647, -4.603999999999999, -12.415)), ('A', ' 419 ', 'LYS', 0.019217784476572766, (-7.606, -5.695000000000002, -14.223)), ('A', ' 455 ', 'MET', 0.01081114150112052, (-22.738, 21.535999999999998, -39.334)), ('B', ' 334 ', 'ASN', 0.00109110710459753, (-35.955, 15.208000000000002, 44.587)), ('B', ' 356 ', 'LYS', 0.013380483114877823, (-37.331, 25.301, 31.660000000000004)), ('B', ' 366 ', 'SER', 0.04058598477365852, (-23.506, 11.655, 34.183)), ('B', ' 498 ', 'GLN', 0.03440198219432987, (-39.04, 15.339, 4.976000000000002)), ('B', ' 498 ', 'GLN', 0.0002739862128661497, (-39.014, 15.356, 4.937000000000002)), ('B', ' 523 ', 'THR', 0.10026404347352534, (-30.112999999999992, 24.647999999999996, 45.141))]
data['cbeta'] = []
data['probe'] = [(' B 520  ALA  CB ', ' B 521  PRO  HD2', -1.193, (-29.276, 32.875, 45.53)), (' B 520  ALA  HB1', ' B 521  PRO  CD ', -1.156, (-29.322, 31.897, 46.212)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.777, (-28.547, 9.431, -53.157)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.737, (-29.524, 33.573, 46.299)), (' B 387  LEU  C  ', ' B 389  ASP  H  ', -0.702, (-19.747, 17.24, 39.564)), (' A  85  LEU HD11', ' A  98  GLN  HG3', -0.698, (-28.796, 40.605, -15.246)), (' B 360  ASN HD21', ' B 523  THR HG21', -0.697, (-33.665, 26.263, 45.901)), (' B 362  VAL HG13', ' B 526  GLY  HA2', -0.676, (-28.306, 14.978, 42.533)), (' B 383  SER  H  ', ' B 387  LEU HD22', -0.624, (-16.618, 20.231, 34.471)), (' B 360  ASN  ND2', ' B 523  THR HG21', -0.616, (-33.653, 25.273, 45.767)), (' B 520  ALA  CB ', ' B 521  PRO  CD ', -0.596, (-29.214, 31.918, 46.038)), (' B 333  THR  O  ', ' B 333  THR  OG1', -0.595, (-35.483, 11.637, 46.54)), (' A 190  MET  HE1', ' A 202  TYR  CE1', -0.559, (-33.886, 33.953, -24.917)), (' A 402  GLU  HB3', ' A 518  ARG  HD2', -0.549, (-21.514, 15.809, -21.812)), (' B 360  ASN  ND2', ' B 523  THR  CG2', -0.54, (-33.171, 25.488, 45.963)), (' A 402  GLU  HB3', ' A 518  ARG  CD ', -0.528, (-21.294, 16.167, -22.445)), (' B 369  TYR  CD2', ' B 384  PRO  HB2', -0.499, (-19.253, 14.328, 29.573)), (' B 387  LEU  C  ', ' B 389  ASP  N  ', -0.495, (-20.42, 17.048, 39.556)), (' A  24  GLN  HB3', ' A  83  TYR  CE2', -0.49, (-34.405, 45.205, -4.026)), (' A  50  TYR  CE1', ' A  54  ILE HG23', -0.488, (-46.024, 7.075, -16.014)), (' A  24  GLN  HB3', ' A  83  TYR  HE2', -0.484, (-34.845, 45.184, -3.729)), (' A  50  TYR  HE1', ' A  54  ILE HG23', -0.483, (-46.428, 7.082, -15.945)), (' A 612  PRO  HB3', ' A 836  HOH  O  ', -0.47, (-25.618, 6.018, -54.053)), (' A 524  GLN  HG2', ' A 583  PRO  HG2', -0.466, (-7.527, 19.938, -24.051)), (' B 334  ASN  O  ', ' B 362  VAL  N  ', -0.466, (-33.007, 16.51, 42.802)), (' A  90  ASN  OD1', ' A  92  THR HG22', -0.462, (-21.601, 38.348, -5.139)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.462, (-23.29, 24.154, 32.09)), (' A  24  GLN  HG2', ' B 487  ASN  ND2', -0.459, (-36.236, 45.413, -1.596)), (' A 518  ARG  HD3', ' A 966  HOH  O  ', -0.457, (-22.309, 16.527, -23.972)), (' A 607  SER  OG ', ' A 609  ASP  OD2', -0.45, (-17.72, 15.894, -57.045)), (' A 338  ASN  HB3', ' A 339  VAL  H  ', -0.45, (-45.304, -6.095, -10.2)), (' B 369  TYR  CG ', ' B 369  TYR  O  ', -0.444, (-21.353, 12.152, 28.463)), (' A 419  LYS  HG3', ' A 424  LEU  HB3', -0.443, (-8.2, -6.88, -16.694)), (' A 474  MET  HE1', ' A 499  ASP  HB2', -0.44, (-33.259, 18.309, -44.358)), (' B 379  CYS  HB2', ' B 384  PRO  HD3', -0.439, (-18.461, 19.525, 28.88)), (' A 465  LYS  HE3', ' A 841  HOH  O  ', -0.439, (-25.753, 36.472, -35.41)), (' A 458  LYS  HD3', ' A 480  MET  HE3', -0.438, (-22.668, 26.155, -42.325)), (' B 369  TYR  CE2', ' B 384  PRO  HB2', -0.435, (-18.755, 13.875, 29.502)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.43, (-35.422, 26.096, 26.467)), (' A 252  TYR  HB2', ' A 256  ILE HD12', -0.429, (-21.247, 1.103, -50.213)), (' A 232  GLU  HB2', ' A 581  VAL HG11', -0.429, (-7.895, 21.538, -33.362)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.426, (-22.717, -7.531, -18.384)), (' A 435  GLU  HG3', ' A 540  HIS  NE2', -0.423, (-4.554, 2.448, -27.259)), (' B 403  ARG  HG2', ' B 495  TYR  CE2', -0.422, (-33.159, 24.381, 9.791)), (' A 284  PRO  HB3', ' A 594  TRP  CH2', -0.419, (-7.669, -0.589, -39.12)), (' B 334  ASN  HA ', ' B 334  ASN HD22', -0.414, (-37.34, 14.136, 44.354)), (' A  55  THR  O  ', ' A  59  VAL HG23', -0.413, (-49.251, 8.653, -13.832)), (' A 439  LEU HD11', ' A 540  HIS  CG ', -0.412, (-6.386, 4.741, -27.045)), (' B 399  SER  HA ', ' B 510  VAL  O  ', -0.408, (-33.553, 22.415, 23.162)), (' A  97  LEU  HA ', ' A  97  LEU HD23', -0.404, (-31.856, 38.027, -9.25)), (' A  98  GLN  O  ', ' A 102  GLN  HG2', -0.404, (-31.628, 35.971, -15.888)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.401, (-24.972, 21.723, 42.986)), (' B 342  PHE  HB2', ' B 601  NAG  H82', -0.4, (-34.498, 13.843, 29.174))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
