# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 417 ', 'LYS', 1.1567615865078635e-05, (211.305, 190.84900000000005, 251.74)), ('A', ' 603 ', 'ASN', 0.12002383568954932, (192.46600000000007, 242.551, 195.387)), ('B', ' 417 ', 'LYS', 1.3262689320492845e-05, (225.93300000000005, 220.70600000000005, 251.74)), ('B', ' 603 ', 'ASN', 0.12007833827801613, (190.577, 178.539, 195.387)), ('C', ' 417 ', 'LYS', 1.2284326465116572e-05, (192.762, 218.445, 251.74)), ('C', ' 603 ', 'ASN', 0.12057837221083803, (246.95700000000005, 208.909, 195.387))]
data['cbeta'] = []
data['probe'] = [(' A 391  CYS  SG ', ' A 525  CYS  SG ', -1.197, (178.881, 201.933, 236.916)), (' B 391  CYS  SG ', ' B 525  CYS  SG ', -1.194, (232.661, 187.153, 236.864)), (' C 391  CYS  SG ', ' C 525  CYS  SG ', -1.092, (218.796, 240.908, 236.736)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.538, (217.931, 243.576, 178.87)), (' B 391  CYS  CB ', ' B 525  CYS  SG ', -0.535, (231.539, 188.172, 237.766)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.535, (177.31, 200.291, 179.201)), (' A 391  CYS  CB ', ' A 525  CYS  SG ', -0.532, (180.327, 202.259, 237.771)), (' C 391  CYS  CB ', ' C 525  CYS  SG ', -0.531, (218.078, 239.575, 237.907)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.53, (234.595, 186.452, 178.984)), (' B 342  PHE  HB2', ' B1307  NAG  H82', -0.472, (229.113, 193.552, 256.05)), (' C 342  PHE  HB2', ' C1307  NAG  H82', -0.471, (214.615, 234.74, 255.878)), (' C 655  HIS  O  ', ' C1310  NAG  H81', -0.461, (245.417, 234.247, 189.187)), (' A 655  HIS  O  ', ' A1310  NAG  H81', -0.455, (171.442, 229.028, 189.317)), (' B  81  ASN  N  ', ' B  81  ASN  OD1', -0.453, (186.627, 157.583, 236.608)), (' A 342  PHE  HB2', ' A1307  NAG  H82', -0.452, (186.667, 201.485, 256.14)), (' B 655  HIS  O  ', ' B1310  NAG  H81', -0.45, (213.288, 167.327, 189.124)), (' C  81  ASN  N  ', ' C  81  ASN  OD1', -0.445, (267.133, 216.057, 236.598)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.444, (217.697, 239.238, 239.473)), (' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.441, (231.686, 188.646, 239.431)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.441, (180.974, 201.926, 239.059)), (' A 111  ASP  N  ', ' A 111  ASP  OD1', -0.438, (181.05, 246.719, 249.337)), (' B 391  CYS  CB ', ' B 525  CYS  HA ', -0.433, (231.254, 188.544, 239.364)), (' C 111  ASP  N  ', ' C 111  ASP  OD1', -0.431, (256.247, 216.592, 249.429)), (' A  81  ASN  N  ', ' A  81  ASN  OD1', -0.428, (176.24, 256.541, 236.589)), (' A1142  GLN  N  ', ' A1143  PRO  HD2', -0.424, (203.017, 213.076, 125.774)), (' A 391  CYS  CB ', ' A 525  CYS  HA ', -0.423, (180.934, 202.408, 238.953)), (' C1142  GLN  N  ', ' C1143  PRO  HD2', -0.423, (216.174, 214.603, 125.841)), (' C 391  CYS  CB ', ' C 525  CYS  HA ', -0.422, (217.915, 239.04, 238.934)), (' B1142  GLN  N  ', ' B1143  PRO  HD2', -0.416, (210.541, 202.098, 125.756)), (' C1028  LYS  O  ', ' C1029  MET  C  ', -0.405, (215.36, 200.011, 172.987)), (' A 579  PRO  O  ', ' A1306  NAG  H82', -0.404, (170.914, 198.465, 234.673)), (' C 579  PRO  O  ', ' C1306  NAG  H82', -0.401, (219.564, 249.371, 234.352)), (' B 579  PRO  O  ', ' B1306  NAG  H82', -0.4, (239.616, 182.062, 234.673))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
