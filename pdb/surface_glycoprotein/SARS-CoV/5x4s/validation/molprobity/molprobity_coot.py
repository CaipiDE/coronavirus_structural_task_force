# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 288 ', 'CYS', None, (16.834, -58.021, 6.979))]
data['rota'] = [('A', '  24 ', 'ASP', 0.2150730824465469, (13.455, -13.491999999999997, -19.78)), ('A', '  34 ', 'THR', 0.24608808236330468, (20.797999999999988, -39.89199999999999, -8.184000000000003)), ('A', '  55 ', 'THR', 0.0, (10.915999999999997, -50.29799999999999, 10.033000000000003)), ('A', '  66 ', 'VAL', 0.03885656769853085, (16.142000000000003, -36.943, -8.041)), ('A', ' 102 ', 'VAL', 0.24163441550694825, (6.724999999999998, -22.026999999999994, 0.8450000000000002)), ('A', ' 150 ', 'THR', 0.08080906412244807, (12.968, -9.359, 0.23100000000000004))]
data['cbeta'] = []
data['probe'] = [(' A 289  SER  N  ', ' A 701  HOH  O  ', -1.036, (19.656, -58.61, 3.879)), (' A 286  LEU  CA ', ' A 701  HOH  O  ', -0.971, (19.225, -59.528, 3.481)), (' A 286  LEU  C  ', ' A 701  HOH  O  ', -0.908, (18.276, -59.294, 4.278)), (' A 286  LEU  CB ', ' A 701  HOH  O  ', -0.843, (19.378, -59.653, 3.998)), (' A 244  THR  N  ', ' A 705  HOH  O  ', -0.814, (14.791, -5.733, -14.722)), (' A 286  LEU  HB2', ' A 701  HOH  O  ', -0.772, (19.497, -59.539, 3.894)), (' A 151  MET  SD ', ' A 707  HOH  O  ', -0.748, (9.372, -7.066, -5.258)), (' A 139  ALA  HB3', ' A 149  HIS  HB2', -0.71, (15.993, -7.562, -4.103)), (' A  45  GLU  O  ', ' A 703  HOH  O  ', -0.7, (15.076, -39.95, 21.098)), (' A 126  ARG  NH1', ' A 159  CYS  SG ', -0.692, (1.043, -13.667, 8.953)), (' A  57  ASP  OD2', ' A 704  HOH  O  ', -0.687, (8.361, -42.424, 10.32)), (' A 286  LEU  N  ', ' A 701  HOH  O  ', -0.654, (18.806, -59.01, 3.555)), (' A 288  CYS  C  ', ' A 701  HOH  O  ', -0.648, (18.787, -58.733, 4.798)), (' A  99  ARG HH22', ' A 172  VAL HG13', -0.634, (21.689, -12.926, 1.703)), (' A  33  HIS  ND1', ' A 208  ASP  OD1', -0.628, (23.168, -34.27, -10.984)), (' A 287  LYS  N  ', ' A 288  CYS  HA ', -0.627, (17.128, -59.399, 4.635)), (' A 196  VAL  HB ', ' A 220  PHE  HB2', -0.608, (10.811, -28.68, 11.181)), (' A 126  ARG  NH1', ' A 708  HOH  O  ', -0.595, (1.904, -12.753, 10.841)), (' A 102  VAL HG22', ' A 234  ILE HD11', -0.553, (8.105, -19.21, 0.144)), (' A 287  LYS  NZ ', ' A 713  HOH  O  ', -0.546, (13.749, -66.952, 7.083)), (' A  99  ARG HH21', ' A 120  SER  HB3', -0.525, (20.127, -13.008, 4.235)), (' A 186  VAL HG23', ' A 216  LEU HD12', -0.509, (16.124, -35.933, 4.876)), (' A 131  GLU  HG3', ' A 601  NAG  HN2', -0.493, (-2.576, -11.966, -3.487)), (' A  99  ARG  NH2', ' A 120  SER  HB3', -0.493, (20.516, -12.955, 3.587)), (' A  99  ARG  HD3', ' A 138  PHE  CD2', -0.492, (16.172, -15.115, 0.559)), (' A 286  LEU  HB2', ' A 289  SER  HB3', -0.481, (20.928, -59.865, 4.086)), (' A 288  CYS  HA ', ' A 701  HOH  O  ', -0.468, (18.316, -58.759, 4.43)), (' A 288  CYS  CA ', ' A 701  HOH  O  ', -0.459, (18.558, -58.594, 4.7)), (' A 102  VAL HG13', ' A 115  ILE HG12', -0.451, (5.703, -19.056, 2.054)), (' A 284  ALA  O  ', ' A 288  CYS  HB3', -0.444, (18.243, -56.548, 3.478)), (' A 119  ASN  O  ', ' A 120  SER  OG ', -0.44, (18.959, -11.3, 6.06)), (' A  94  LYS  NZ ', ' A 249  ALA  HB3', -0.428, (28.241, -20.818, -8.3)), (' A 147  GLN  HB2', ' A 172  VAL HG11', -0.426, (21.499, -10.656, 1.345)), (' A  99  ARG HH12', ' A 172  VAL HG13', -0.425, (21.713, -13.145, 0.994)), (' A  93  GLU  OE2', ' A  98  VAL  N  ', -0.423, (20.409, -21.413, -1.494)), (' A  21  THR  HA ', ' A 709  HOH  O  ', -0.415, (8.831, -13.043, -12.205)), (' A 143  PRO  HD3', ' A 240  PRO  HA ', -0.415, (26.056, -5.285, -8.843)), (' A 102  VAL  O  ', ' A 231  PHE  HA ', -0.412, (5.517, -24.912, -1.266)), (' A 115  ILE  O  ', ' A 125  ILE  HA ', -0.411, (8.371, -19.952, 8.381)), (' A 239  SER  HA ', ' A 240  PRO  HD3', -0.41, (22.076, -8.191, -10.892)), (' A  94  LYS  HZ1', ' A 249  ALA  HB3', -0.409, (28.391, -20.818, -8.507)), (' A 100  GLY  HA3', ' A 117  ILE HG22', -0.408, (12.76, -19.28, 2.749)), (' A 141  SER  O  ', ' A 145  GLY  N  ', -0.404, (26.472, -6.664, -2.919)), (' A 198  LYS  HD2', ' A 219  ILE HD13', -0.403, (17.832, -27.643, 10.359)), (' A 186  VAL  HB ', ' A 197  TYR  HB2', -0.402, (14.171, -35.056, 7.132))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
