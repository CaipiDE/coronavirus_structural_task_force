# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  28 ', 'GLU', 0.022715232556376516, (10.115, -19.415, 46.558)), ('H', '  33 ', 'LEU', 0.02597597010813301, (-4.077, -3.475000000000005, 37.759))]
data['omega'] = [('H', '   2 ', 'ILE', None, (10.529999999999998, 5.514000000000002, -28.439))]
data['rota'] = [('A', '   2 ', 'GLN', 0.05765267448015951, (-4.592, -16.320999999999998, 54.96)), ('A', '   3 ', 'LYS', 0.08924252802601497, (-2.469999999999999, -13.353000000000002, 53.994)), ('A', '   4 ', 'GLN', 0.0, (0.6690000000000009, -15.558, 53.748)), ('A', '  11 ', 'LYS', 0.0017593425316937683, (3.425, -14.521, 43.489)), ('A', '  24 ', 'SER', 0.006716856656121798, (3.601, -18.137, 23.274)), ('A', '  46 ', 'LYS', 0.0016538424532374447, (9.688, -24.891, -8.079)), ('B', '   5 ', 'ILE', 0.02336051562643939, (17.411, -19.727000000000004, -1.892)), ('B', '   9 ', 'VAL', 0.03780638799071312, (17.77, -20.470999999999997, 11.931)), ('B', '  28 ', 'GLU', 0.014434526812229242, (10.115, -19.415, 46.558)), ('C', '   3 ', 'LYS', 0.0, (-3.2450000000000006, -27.186, 55.67299999999999)), ('C', '   4 ', 'GLN', 0.03685052657136636, (-5.722, -28.64099999999999, 53.146)), ('C', '   5 ', 'ILE', 0.09379185115456085, (-5.526999999999999, -25.505000000000003, 50.907999999999994)), ('C', '  24 ', 'SER', 0.21165823429601666, (11.328, -25.924999999999997, 27.783)), ('C', '  39 ', 'GLN', 0.00854805838683828, (21.509, -26.584999999999997, 7.556999999999999)), ('C', '  43 ', 'THR', 0.0013599335943581536, (23.99599999999999, -27.168999999999993, 2.015)), ('D', '   9 ', 'VAL', 0.03825830363082371, (13.024999999999999, -35.998, 12.660999999999996)), ('D', '  21 ', 'GLU', 0.0, (-0.9679999999999993, -35.907999999999994, 31.811)), ('D', '  24 ', 'LYS', 0.004326628416347016, (-5.254, -34.463, 33.868)), ('D', '  28 ', 'GLU', 0.0007250234410351681, (-6.564, -34.11, 41.763)), ('E', '  14 ', 'SER', 0.16233946758849668, (-8.687999999999999, -24.575999999999997, 35.458)), ('E', '  18 ', 'GLU', 0.001882885364549163, (-6.172999999999999, -25.112000000000002, 29.625)), ('E', '  39 ', 'GLN', 0.11308602584756824, (10.482000000000003, -36.266999999999996, 4.864)), ('E', '  46 ', 'LYS', 0.0898785092495096, (16.96900000000001, -39.108, -2.985)), ('E', '  49 ', 'SER', 0.13720220034325648, (20.95, -38.429, -6.305)), ('F', '  33 ', 'LEU', 0.29678413673412407, (-5.614999999999999, -8.856999999999998, 50.12)), ('G', '   7 ', 'ASN', 0.1825972456846662, (-7.299000000000003, 8.893999999999997, 31.432)), ('G', '  15 ', 'GLN', 0.08529920199192652, (-2.5139999999999993, 7.642999999999999, 19.714)), ('G', '  36 ', 'GLN', 0.017178156377174358, (1.1509999999999998, 6.48, -11.765999999999996)), ('G', '  46 ', 'LYS', 0.05764233210476271, (0.8089999999999999, 1.948000000000003, -26.273999999999994)), ('H', '  14 ', 'LYS', 0.0, (7.884999999999999, 8.504, 7.839)), ('H', '  18 ', 'ARG', 0.0909881831202688, (5.387999999999998, 6.793999999999997, 13.145999999999999)), ('I', '  39 ', 'GLN', 0.0, (13.269, 0.8150000000000006, -11.156)), ('J', '   9 ', 'VAL', 0.009055209794039922, (6.158, -9.832999999999998, -6.5779999999999985)), ('K', '   3 ', 'LYS', 0.0, (-21.353, 1.218999999999998, 32.778)), ('K', '   4 ', 'GLN', 0.04807880540443104, (-20.764, 4.420999999999997, 30.812)), ('K', '  11 ', 'LYS', 0.0, (-17.883999999999993, 1.7029999999999983, 21.105)), ('K', '  18 ', 'GLU', 0.17556966021464185, (-13.734, -1.8750000000000004, 11.661999999999997)), ('K', '  41 ', 'LEU', 0.014721388002905334, (5.813000000000001, -6.032, -16.726)), ('K', '  46 ', 'LYS', 0.0030930433704570654, (9.362, -11.873999999999997, -22.028)), ('L', '   9 ', 'VAL', 0.04031599713292878, (-5.215000000000002, 0.46900000000000097, -11.416)), ('L', '  14 ', 'LYS', 0.17465630017874648, (-13.192, 4.146, 0.048))]
data['cbeta'] = [('B', '   5 ', 'ILE', ' ', 0.333137521315769, (17.623, -18.285, -2.4779999999999993)), ('B', '  28 ', 'GLU', ' ', 0.2901482053046329, (11.038, -18.174000000000007, 46.311)), ('C', '  43 ', 'THR', ' ', 0.2901318356517719, (24.97, -28.061, 2.857)), ('H', '   1 ', 'ASP', ' ', 0.5632361833429926, (8.718999999999998, 4.455000000000002, -31.170999999999992)), ('L', '  29 ', 'SER', ' ', 0.27916946534925347, (-15.75, 6.234999999999998, 21.937))]
data['probe'] = [(' H  24  LYS  CE ', ' H  24  LYS  NZ ', -1.511, (10.474, 1.06, 17.06)), (' B  13  GLN  CD ', ' B  13  GLN  CG ', -1.5, (19.123, -21.358, 23.548)), (' E  47  GLN  NE2', ' F   5  ILE HD11', -1.414, (10.778, -36.312, -5.522)), (' H   1  ASP  CG ', ' H   1  ASP  OD2', -1.297, (7.417, 5.023, -32.663)), (' E  47  GLN  NE2', ' F   5  ILE  CD1', -1.05, (10.318, -35.049, -5.463)), (' E  39  GLN  O  ', ' E  43  THR HG23', -1.027, (10.877, -36.189, 1.667)), (' A  35  ASN  O  ', ' A  39  GLN  HG3', -0.962, (7.84, -21.545, 4.585)), (' G   1  ASN  HB3', ' G   4  GLN  HG2', -0.953, (-7.735, 6.378, 38.887)), (' K  35  ASN  O  ', ' K  39  GLN  HG3', -0.895, (1.796, -9.645, -11.803)), (' E  47  GLN  CD ', ' F   5  ILE HD11', -0.828, (11.041, -35.614, -5.869)), (' H   1  ASP  N  ', ' H 211  HOH  O  ', -0.819, (8.92, 7.86, -32.187)), (' D  31  ILE  H  ', ' E  10  ASN HD21', -0.8, (-9.456, -27.022, 44.116)), (' C  15  GLN HE22', ' D  25  ASN  HB3', -0.754, (-1.108, -34.496, 38.091)), (' A  43  THR  O  ', ' A  47  GLN  HG3', -0.752, (12.546, -22.612, -7.059)), (' A   8  GLN  NE2', ' B  29  SER  HA ', -0.743, (5.424, -18.81, 47.823)), (' G  36  GLN HE22', ' H   8  SER  H  ', -0.739, (6.498, 6.197, -11.725)), (' C  11  LYS  NZ ', ' D  28  GLU  OE1', -0.73, (-3.681, -35.675, 43.168)), (' A   1  ASN  HB3', ' C   2  GLN  OE1', -0.719, (-3.756, -19.231, 57.678)), (' B  13  GLN  CB ', ' B  13  GLN  CD ', -0.709, (18.625, -21.259, 23.552)), (' E  15  GLN HE22', ' F  25  ASN  HB3', -0.691, (-8.162, -16.423, 32.739)), (' E  18  GLU  CD ', ' F  18  ARG  HE ', -0.684, (-7.906, -22.352, 26.641)), (' G  18  GLU  OE2', ' H  18  ARG  HD3', -0.678, (1.813, 10.581, 13.746)), (' B  25  ASN  O  ', ' B  28  GLU  HG3', -0.67, (10.815, -18.378, 43.512)), (' E  18  GLU  OE1', ' F  18  ARG  NE ', -0.668, (-8.902, -21.372, 26.393)), (' G  36  GLN  NE2', ' G  37  ASN  OD1', -0.658, (4.907, 5.83, -12.066)), (' G  36  GLN  NE2', ' H   8  SER  H  ', -0.652, (5.647, 6.211, -11.694)), (' D  32  ASP  OD2', ' D  38  HOH  O  ', -0.637, (-15.644, -33.892, 47.136)), (' A  36  GLN  OE1', ' A  37  ASN  ND2', -0.628, (13.802, -20.919, 6.238)), (' D  14  LYS  HZ1', ' D  18  ARG HH22', -0.621, (10.846, -36.392, 29.041)), (' D  14  LYS  NZ ', ' D  18  ARG HH22', -0.603, (11.022, -37.095, 28.982)), (' K 205   NA NA  ', ' K 220  HOH  O  ', -0.602, (-5.204, -11.319, -4.162)), (' G  36  GLN HE22', ' H   8  SER  N  ', -0.594, (6.471, 6.94, -11.469)), (' E  47  GLN HE22', ' F   5  ILE  CD1', -0.582, (9.727, -35.717, -5.142)), (' A  37  ASN HD21', ' B   8  SER  H  ', -0.578, (14.878, -20.356, 7.032)), (' E  47  GLN  NE2', ' F   5  ILE  CG1', -0.576, (9.517, -35.584, -4.257)), (' H  24  LYS  HE3', ' H 213  HOH  O  ', -0.575, (9.573, 2.359, 17.035)), (' A  20  LEU  CD2', ' E  19  SER  HB2', -0.567, (-0.648, -21.702, 29.313)), (' A  15  GLN  HB3', ' B  22  VAL HG13', -0.563, (7.554, -18.135, 36.868)), (' I  35  ASN  O  ', ' I  39  GLN  HG3', -0.556, (12.471, 0.278, -8.589)), (' D  14  LYS  NZ ', ' D  18  ARG  NH2', -0.549, (10.312, -37.344, 29.249)), (' E  36  GLN  O  ', ' E  39  GLN  HG3', -0.543, (7.663, -34.387, 5.059)), (' G   3  LYS  O  ', ' G   7  ASN  HB2', -0.532, (-7.954, 8.77, 34.012)), (' E  47  GLN HE22', ' F   5  ILE  CG1', -0.524, (9.338, -35.203, -4.892)), (' K  15  GLN  NE2', ' L  26  LEU HD23', -0.509, (-14.536, 4.91, 17.967)), (' I  15  GLN  NE2', ' J  25  ASN  HB3', -0.504, (-7.75, -10.454, 20.308)), (' A  35  ASN  O  ', ' A  39  GLN  CG ', -0.5, (6.915, -20.568, 4.201)), (' I  15  GLN  OE1', ' J  26  LEU HD23', -0.498, (-7.885, -7.106, 21.212)), (' E  11  LYS  O  ', ' E  15  GLN  HG3', -0.483, (-8.959, -20.613, 35.506)), (' H  24  LYS  CE ', ' H 213  HOH  O  ', -0.479, (10.132, 2.343, 17.408)), (' E  47  GLN HE22', ' F   5  ILE HG13', -0.476, (9.101, -35.301, -4.896)), (' D  33  LEU HD11', ' E  10  ASN  OD1', -0.476, (-13.364, -25.457, 44.199)), (' A  20  LEU HD22', ' E  19  SER  HB2', -0.473, (-0.86, -21.566, 29.397)), (' D  31  ILE  H  ', ' E  10  ASN  ND2', -0.472, (-9.706, -26.546, 43.9)), (' K  12  ALA  HB2', ' L  29  SER  OG ', -0.47, (-14.13, 5.075, 21.639)), (' E  18  GLU  OE2', ' E  55  HOH  O  ', -0.468, (-8.036, -24.105, 25.045)), (' A  43  THR HG22', ' A  47  GLN HE21', -0.466, (12.855, -20.39, -5.702)), (' E  47  GLN HE21', ' F   5  ILE HD11', -0.465, (10.709, -36.514, -4.103)), (' C  43  THR HG22', ' C  47  GLN HE21', -0.455, (26.752, -27.992, 0.665)), (' I   8  GLN  HB3', ' J  29  SER  O  ', -0.454, (-11.991, -5.776, 27.406)), (' G  18  GLU  OE1', ' H  18  ARG  NH1', -0.449, (1.977, 11.071, 16.474)), (' B  30  LEU  C  ', ' B  31  ILE HG13', -0.448, (3.975, -22.324, 49.711)), (' C  43  THR HG22', ' C  47  GLN  NE2', -0.445, (26.881, -28.406, 0.945)), (' I  36  GLN  HB3', ' J 208  HOH  O  ', -0.444, (11.654, -4.951, -8.174)), (' E  15  GLN HE22', ' F  25  ASN  CB ', -0.439, (-8.175, -16.042, 32.399)), (' K  39  GLN  O  ', ' K  43  THR HG23', -0.436, (3.575, -10.899, -17.224)), (' D  24  LYS  HB3', ' D  24  LYS  HE3', -0.433, (-3.702, -36.634, 33.646)), (' J  19  LEU  HA ', ' J  19  LEU HD23', -0.427, (-3.816, -6.805, 12.067)), (' B  13  GLN  CA ', ' B  13  GLN  CD ', -0.427, (17.91, -21.031, 24.132)), (' H  24  LYS  CD ', ' H  24  LYS  NZ ', -0.425, (10.768, 1.479, 19.151)), (' E  15  GLN  NE2', ' F  25  ASN  HB3', -0.425, (-8.462, -16.65, 32.495)), (' A  36  GLN  NE2', ' B   8  SER  OG ', -0.422, (14.669, -17.817, 6.361)), (' C  11  LYS  NZ ', ' D  28  GLU  HB3', -0.42, (-3.716, -34.998, 42.97)), (' H   9  VAL HG12', ' H 228  HOH  O  ', -0.42, (10.057, 8.967, -7.473)), (' B  10  VAL HG13', ' C  31  GLN  HG3', -0.419, (15.76, -22.956, 17.612)), (' C  15  GLN  NE2', ' D  25  ASN  HB3', -0.418, (-0.57, -34.412, 38.392)), (' H   9  VAL HG23', ' I  35  ASN  CG ', -0.414, (10.346, 3.53, -4.713)), (' C  45  VAL  O  ', ' C  46  LYS  C  ', -0.412, (24.144, -25.224, -3.824)), (' A   8  GLN  NE2', ' B  29  SER  CA ', -0.412, (6.066, -19.371, 47.53)), (' I  33  VAL HG21', ' J  10  VAL  HB ', -0.412, (6.376, -6.845, -2.89)), (' C  39  GLN  HB3', ' C  39  GLN HE21', -0.41, (24.07, -27.437, 8.187)), (' A  20  LEU  CD2', ' E  19  SER  CB ', -0.406, (-1.016, -21.679, 30.038)), (' D  31  ILE HD12', ' E   9  PHE  CD1', -0.404, (-7.039, -24.623, 45.465)), (' G  36  GLN  CD ', ' H   8  SER  OG ', -0.401, (5.285, 8.428, -11.233)), (' A  30  LEU HD11', ' B  12  ILE HD13', -0.401, (10.985, -22.857, 20.183)), (' E  47  GLN  CD ', ' F   5  ILE  CD1', -0.4, (10.785, -35.188, -5.854))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
