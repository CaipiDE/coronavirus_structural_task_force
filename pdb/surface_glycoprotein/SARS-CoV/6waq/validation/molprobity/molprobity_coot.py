# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 470 ', 'PRO', None, (55.834999999999994, 6.9049999999999985, -23.157000000000004)), ('D', ' 470 ', 'PRO', None, (58.33500000000001, 31.329, -24.431))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  51  ILE HD12', ' A  57  THR HG22', -1.159, (34.413, 56.697, -28.467)), (' A  51  ILE  CD1', ' A  57  THR HG22', -0.952, (34.052, 57.981, -28.756)), (' D 335  PRO  HG3', ' D 341  GLU  HG3', -0.894, (40.812, 15.762, -5.396)), (' D 467  CYS  SG ', ' D 468  THR  N  ', -0.799, (62.347, 28.216, -20.607)), (' A  54  GLY  O  ', ' A 201  HOH  O  ', -0.787, (31.353, 60.116, -30.258)), (' A  51  ILE HD12', ' A  57  THR  CG2', -0.769, (33.712, 57.436, -28.434)), (' D 346  SER  OG ', ' D 381  ASN  ND2', -0.746, (40.571, 8.529, 12.174)), (' D 487  THR HG21', ' D 491  TYR  HB2', -0.738, (39.665, 6.086, -25.884)), (' C  41  PRO  O  ', ' C 202  HOH  O  ', -0.668, (33.998, -10.955, -36.162)), (' A  75  LYS  HE3', ' A  79  TYR  OH ', -0.666, (37.034, 71.411, -28.62)), (' A  51  ILE  CD1', ' A  57  THR  CG2', -0.659, (33.687, 57.612, -28.217)), (' A  84  PRO  HA ', ' A 111  VAL HG13', -0.636, (43.021, 60.748, -6.331)), (' A  76  ASN  ND2', ' A  76  ASN  O  ', -0.636, (42.919, 69.368, -33.395)), (' B 329  PHE  HB2', ' B 601  NAG  H82', -0.636, (28.393, 40.13, -32.847)), (' D 343  LYS  NZ ', ' D 704  HOH  O  ', -0.621, (38.639, 12.087, -1.626)), (' A  56  SER  HB3', ' B 357  ASN  HA ', -0.614, (31.224, 52.655, -33.107)), (' A  32  TYR  HE1', ' A  97  LEU HD13', -0.6, (46.039, 57.716, -40.74)), (' A  87  THR HG22', ' A 110  THR  HA ', -0.57, (46.364, 63.497, -8.454)), (' D 345  ILE  HB ', ' D 382  VAL HG23', -0.568, (39.062, 6.263, 6.892)), (' A  24  ALA  O  ', ' A  76  ASN  ND2', -0.567, (44.956, 69.649, -34.175)), (' C  18  LEU  HB3', ' C  82  MET  HE3', -0.549, (23.764, -18.391, -23.352)), (' D 377  LEU HD22', ' D 501  PHE  CG ', -0.547, (44.249, -1.283, 7.098)), (' D 345  ILE  HB ', ' D 382  VAL  CG2', -0.535, (38.203, 6.224, 6.962)), (' D 469  PRO  HA ', ' D 471  ALA  H  ', -0.534, (60.118, 30.098, -24.071)), (' D 356  TYR  OH ', ' D 371  ALA  O  ', -0.533, (37.855, -7.419, 2.172)), (' B 503  GLY  O  ', ' B 702  HOH  O  ', -0.525, (36.37, 38.423, -55.81)), (' A  52A TRP  CZ2', ' B 372  THR HG23', -0.525, (34.345, 56.483, -40.999)), (' C  75  LYS  O  ', ' C  77  THR HG23', -0.523, (31.89, -27.421, -9.97)), (' C  51  ILE HD11', ' C  54  GLY  HA2', -0.521, (29.43, -14.645, -6.886)), (' D 418  GLY  HA2', ' D 501  PHE  HE1', -0.52, (43.801, -1.384, 3.177)), (' A  12  VAL HG11', ' A  82C LEU HD22', -0.52, (39.675, 65.671, -9.74)), (' B 345  ILE  HB ', ' B 382  VAL HG13', -0.519, (30.514, 36.664, -44.054)), (' D 322  LEU HD12', ' D 349  VAL HG23', -0.519, (28.283, 1.963, 10.496)), (' D 354  VAL HG23', ' D 355  LEU HD13', -0.516, (32.32, -0.067, 0.659)), (' D 487  THR  CG2', ' D 491  TYR  HB2', -0.508, (39.483, 5.409, -25.913)), (' D 439  LYS  NZ ', ' D 480  ASP  OD1', -0.499, (43.792, 20.152, -19.6)), (' B 329  PHE  CB ', ' B 601  NAG  H82', -0.498, (29.111, 40.421, -32.835)), (' C  12  VAL HG11', ' C  82C LEU HD13', -0.493, (21.533, -17.893, -27.026)), (' C  82  MET  HB3', ' C  82C LEU HD21', -0.489, (23.291, -15.416, -23.7)), (' B 390  LYS  HG3', ' B 491  TYR  HA ', -0.488, (47.083, 36.952, -21.181)), (' A  34  MET  HG2', ' A  71  ARG  NH1', -0.486, (41.114, 60.986, -32.452)), (' B 380  SER  O  ', ' B 703  HOH  O  ', -0.484, (28.048, 37.58, -51.045)), (' D 425  THR HG21', ' D 495  ARG  HD2', -0.478, (33.453, 8.603, -11.283)), (' D 469  PRO  HA ', ' D 471  ALA  N  ', -0.472, (60.048, 29.91, -24.25)), (' C  29  PHE  CD2', ' C  76  ASN  HA ', -0.472, (34.565, -23.674, -7.125)), (' D 382  VAL HG12', ' D 501  PHE  CD2', -0.469, (42.13, 1.454, 6.796)), (' B 351  ASP  OD1', ' B 353  SER  OG ', -0.448, (23.859, 49.592, -39.971)), (' B 390  LYS  HG2', ' B 391  GLY  N  ', -0.444, (46.602, 37.676, -23.265)), (' C  45  ARG  N  ', ' C 201  HOH  O  ', -0.444, (40.69, -9.466, -28.228)), (' B 367  TYR  CE2', ' B 399  PRO  HD2', -0.441, (47.487, 43.988, -40.047)), (' D 346  SER  HG ', ' D 381  ASN  ND2', -0.44, (40.936, 9.314, 12.717)), (' D 385  ASP  O  ', ' D 497  VAL  HA ', -0.439, (40.736, 6.702, -4.163)), (' C  43  LYS  HA ', ' C  43  LYS  HD2', -0.437, (37.283, -7.48, -34.027)), (' A  30  SER  O  ', ' A  52A TRP  HD1', -0.436, (37.478, 60.702, -39.218)), (' B 337  VAL  HA ', ' B 387  PHE  HB2', -0.435, (41.397, 30.532, -31.513)), (' D 369  VAL HG21', ' D 377  LEU HD11', -0.434, (43.219, -5.069, 5.791)), (' B 326  GLY  O  ', ' B 330  ASN  HB2', -0.434, (25.757, 37.384, -31.638)), (' B 412  LEU  HA ', ' B 412  LEU HD12', -0.434, (45.838, 35.49, -41.925)), (' A  71  ARG  HD3', ' A  73  ASN  OD1', -0.431, (36.983, 63.734, -33.844)), (' C  27  ARG  NH2', ' C  95  ALA  O  ', -0.43, (42.556, -17.45, -9.147)), (' B 373  LYS  HA ', ' B 373  LYS  HD2', -0.43, (32.593, 54.097, -46.042)), (' B 502  GLU  HG2', ' B 503  GLY  N  ', -0.427, (38.173, 37.287, -52.902)), (' A  87  THR HG22', ' A 111  VAL  H  ', -0.425, (45.55, 62.929, -7.501)), (' D 404  VAL  CG2', ' D 442  TYR  HA ', -0.421, (54.04, 11.781, -17.458)), (' D 337  VAL  HA ', ' D 387  PHE  HB2', -0.421, (43.885, 11.369, -9.7)), (' D 476  TRP  HB3', ' D 738  HOH  O  ', -0.417, (52.137, 22.111, -19.011)), (' C  45  ARG  HB3', ' C 207  HOH  O  ', -0.409, (40.868, -10.445, -24.256)), (' C  64  LYS  HB3', ' C  64  LYS  HE2', -0.409, (24.287, -2.461, -17.634)), (' C 100D TRP  HB3', ' C 100F TYR  CE2', -0.408, (43.622, -4.887, -16.607)), (' D 412  LEU  O  ', ' D 703  HOH  O  ', -0.402, (54.999, 1.196, -4.663)), (' A  83  LYS  HG2', ' A  84  PRO  HD2', -0.4, (39.744, 58.252, -4.544))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
