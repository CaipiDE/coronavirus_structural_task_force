# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 118 ', 'GLY', 0.053968647438962944, (36.117, 82.849, 23.219)), ('D', ' 209 ', 'ARG', 0.022127255025948374, (-62.67900000000001, -9.589, -1.5650000000000004)), ('D', ' 243 ', 'VAL', 0.019069881128659632, (-80.39299999999997, -18.782999999999998, -8.112)), ('D', ' 244 ', 'PRO', 0.04768299067063689, (-83.484, -16.517, -7.615000000000002))]
data['omega'] = [('A', ' 470 ', 'PRO', None, (38.558, 36.29499999999999, 17.485)), ('B', ' 103 ', 'TYR', None, (21.946999999999996, 50.198, 18.688)), ('B', ' 119 ', 'GLY', None, (37.756, 81.093, 23.489000000000008)), ('B', ' 140 ', 'PRO', None, (44.95699999999999, 48.986, 13.349)), ('B', ' 227 ', 'PRO', None, (27.410999999999994, 54.53000000000002, 29.012000000000008)), ('C', ' 470 ', 'PRO', None, (-62.29399999999999, -3.819000000000001, 17.65)), ('D', ' 103 ', 'TYR', None, (-45.56999999999999, -17.839, 18.684)), ('D', ' 140 ', 'PRO', None, (-68.612, -16.743999999999996, 13.629)), ('D', ' 227 ', 'PRO', None, (-51.043, -21.984, 29.115))]
data['rota'] = [('A', ' 353 ', 'SER', 0.08973377473788462, (-10.093999999999996, 28.95, 28.83)), ('A', ' 374 ', 'LEU', 0.15245941138502028, (-10.608, 25.891, 23.932000000000006)), ('B', '   3 ', 'GLN', 0.18588639152782385, (15.309, 59.30400000000001, 5.325)), ('B', '  30 ', 'SER', 0.23600936425650332, (6.449999999999999, 57.13700000000001, 16.213)), ('B', '  43 ', 'LYS', 0.07032910239908922, (37.955, 62.986, 16.007)), ('B', '  89 ', 'GLU', 0.007045001324569468, (33.794000000000004, 71.309, 23.996000000000006)), ('B', ' 156 ', 'ARG', 0.0, (39.701999999999984, 45.896, 21.749)), ('B', ' 180 ', 'ILE', 0.03810646655068058, (27.669000000000004, 45.109, 11.098)), ('B', ' 211 ', 'GLU', 0.08696590400623518, (36.688, 47.796, -3.633000000000001)), ('B', ' 213 ', 'GLU', 0.027627243855792086, (34.18799999999998, 52.477, -2.347000000000001)), ('B', ' 239 ', 'LYS', 0.0, (48.06399999999999, 52.70700000000001, -0.7850000000000001)), ('B', ' 242 ', 'LEU', 0.0, (53.704, 51.02799999999999, -5.392000000000002)), ('C', ' 319 ', 'ILE', 0.01719768303208956, (-9.527000000000001, 11.429, 40.158)), ('C', ' 321 ', 'ASN', 0.13017243527607017, (-16.011, 12.574, 40.758)), ('C', ' 353 ', 'SER', 0.09763294991135577, (-13.344, 3.266, 29.057)), ('C', ' 378 ', 'CYS', 0.21802284871679295, (-13.301000000000002, 14.429, 30.47800000000001)), ('C', ' 505 ', 'ASN', 0.10826396753086008, (-18.416000000000004, 25.161999999999992, 28.03600000000001)), ('D', '   3 ', 'GLN', 0.21866338836583615, (-39.221999999999994, -26.938, 5.289)), ('D', '  18 ', 'LEU', 0.023229010975561282, (-44.46799999999999, -44.076, 19.709)), ('D', '  57 ', 'ASN', 0.12370114096800784, (-35.016, -26.781, 28.822)), ('D', '  58 ', 'LYS', 0.15565549790332345, (-38.37700000000001, -28.186000000000007, 27.715)), ('D', ' 165 ', 'LEU', 0.2374208402912712, (-53.169000000000004, -13.066, 19.044)), ('D', ' 180 ', 'ILE', 0.17319650141468232, (-51.24399999999999, -12.654000000000002, 11.127)), ('D', ' 213 ', 'GLU', 0.10453894137559495, (-57.878, -20.075, -2.295)), ('D', ' 245 ', 'ARG', 0.025087707416320194, (-82.901, -13.160000000000005, -5.8020000000000005))]
data['cbeta'] = [('B', ' 102 ', 'TYR', ' ', 0.26183189314605376, (21.379000000000005, 51.03500000000002, 22.242000000000008))]
data['probe'] = [(' C 369  VAL HG22', ' C 417  MET  HE3', -0.811, (-17.608, 14.095, 18.39)), (' B  39  GLN HE22', ' B 170  GLN HE22', -0.765, (31.885, 61.992, 11.016)), (' A 472  LEU HD13', ' B 206  THR HG21', -0.748, (38.125, 38.627, 5.976)), (' A  88   CL CL  ', ' B 411  HOH  O  ', -0.746, (12.846, 51.288, 18.042)), (' B  40  ALA  HB3', ' B  43  LYS  HG2', -0.724, (36.382, 65.357, 18.165)), (' A 322  LEU HD12', ' A 349  VAL  CG2', -0.721, (-10.051, 21.906, 36.505)), (' D  35  HIS  HD2', ' D  47  TRP  HE1', -0.718, (-45.267, -25.093, 21.766)), (' D  83  MET  HE1', ' D 113  VAL HG21', -0.687, (-48.178, -39.146, 17.118)), (' A 246   CL CL  ', ' A 596  HOH  O  ', -0.687, (14.611, 46.302, 12.307)), (' A 517   CL CL  ', ' A 567  HOH  O  ', -0.686, (1.089, 44.431, 23.897)), (' D 243  VAL  HB ', ' D 244  PRO  HD3', -0.682, (-82.16, -19.928, -7.716)), (' C  20   CL CL  ', ' D 291  HOH  O  ', -0.679, (-34.393, -17.78, 17.055)), (' B  20  LEU  HG ', ' B  83  MET  HE2', -0.676, (21.573, 72.046, 17.749)), (' A 347  ASN HD22', ' A 504  LEU HD11', -0.632, (-1.908, 12.851, 34.581)), (' A 329  PHE  CZ ', ' A 421  LEU HD22', -0.609, (-0.17, 30.143, 28.592)), (' B  39  GLN  NE2', ' B 170  GLN HE22', -0.599, (31.563, 61.961, 11.514)), (' B   2  VAL HG13', ' B  27  PHE  CD2', -0.574, (13.473, 56.243, 8.194)), (' D  20  LEU  CD1', ' D  83  MET  HE2', -0.568, (-45.908, -38.019, 17.955)), (' C 319  ILE  CD1', ' C 377  LEU HD13', -0.564, (-9.847, 10.553, 35.084)), (' A 319  ILE  HA ', ' A 322  LEU HD13', -0.562, (-11.602, 22.827, 38.687)), (' B  39  GLN HE22', ' B 170  GLN  NE2', -0.555, (32.032, 61.445, 10.617)), (' D  12  VAL HG21', ' D  86  LEU HD23', -0.554, (-49.631, -44.247, 20.1)), (' C 472  LEU HD13', ' D 206  THR HG21', -0.551, (-61.885, -5.554, 6.117)), (' A 363  THR  HB ', ' A 422  ALA  HB3', -0.55, (2.331, 36.485, 22.396)), (' A  88   CL CL  ', ' B  31  SER  O  ', -0.542, (10.432, 51.535, 17.718)), (' D  83  MET  HB2', ' D  86  LEU HD11', -0.542, (-47.273, -41.872, 22.239)), (' C 369  VAL  H  ', ' C 417  MET  HE3', -0.541, (-18.188, 13.177, 17.423)), (' D  12  VAL HG11', ' D  18  LEU HD23', -0.539, (-47.206, -46.164, 17.986)), (' C 425  THR HG21', ' C 495  ARG  HD2', -0.537, (-30.881, -5.87, 30.852)), (' B 136  LEU HD22', ' B 155  CYS  SG ', -0.532, (35.296, 48.353, 19.787)), (' A 517   CL CL  ', ' A 595  HOH  O  ', -0.527, (1.208, 46.021, 24.708)), (' D 103  TYR  CD2', ' D 166  ALA  HB2', -0.524, (-49.119, -15.586, 16.834)), (' B  83  MET  HE1', ' B 113  VAL HG21', -0.517, (24.407, 72.217, 17.014)), (' B 156  ARG  HG2', ' B 156  ARG HH11', -0.512, (43.252, 44.866, 22.833)), (' A 374  LEU  O  ', ' A 374  LEU HD12', -0.51, (-10.091, 26.924, 25.604)), (' D 182  ASP  O  ', ' D 183  ALA  HB3', -0.507, (-51.981, -7.522, 16.451)), (' A 351  ASP  OD2', ' A 354  VAL HG23', -0.506, (-10.628, 28.036, 33.23)), (' B  37  VAL HG13', ' B  46  GLU  O  ', -0.502, (27.772, 60.48, 19.006)), (' D  83  MET  CB ', ' D  86  LEU HD11', -0.5, (-47.144, -41.153, 22.282)), (' A 349  VAL  HB ', ' A 377  LEU HD23', -0.5, (-10.481, 19.727, 33.392)), (' A 349  VAL HG21', ' A 377  LEU HD21', -0.494, (-11.35, 20.336, 35.034)), (' D 179  LEU HD11', ' D 218  TYR  CE2', -0.49, (-56.753, -17.433, 6.708)), (' C 425  THR HG21', ' C 495  ARG  HG3', -0.49, (-31.142, -5.917, 30.276)), (' A 319  ILE  O  ', ' A 319  ILE HG22', -0.487, (-11.554, 23.176, 41.644)), (' A 425  THR HG21', ' A 495  ARG  HG3', -0.486, (8.146, 38.325, 29.787)), (' B  40  ALA  HB3', ' B  43  LYS  CG ', -0.485, (35.978, 65.035, 18.151)), (' C 329  PHE  CZ ', ' C 421  LEU HD22', -0.483, (-23.499, 1.959, 28.928)), (' C 322  LEU HD23', ' C 349  VAL  HB ', -0.476, (-13.799, 10.885, 36.04)), (' A 442  TYR  HD2', ' A 526  HOH  O  ', -0.475, (23.069, 34.72, 17.465)), (' C 404  VAL HG23', ' C 405  ILE HD13', -0.473, (-39.835, -1.492, 16.255)), (' A 425  THR HG21', ' A 495  ARG  CG ', -0.471, (7.873, 37.987, 30.006)), (' B  34  MET  HB3', ' B  79  LEU HD22', -0.471, (16.044, 60.806, 16.918)), (' D 104  LEU HD12', ' D 107  TRP  CZ2', -0.469, (-48.788, -23.271, 15.135)), (' D  20  LEU HD11', ' D  83  MET  CE ', -0.468, (-46.742, -37.615, 17.505)), (' B 211  GLU  HG3', ' B 212  PRO  HD2', -0.464, (35.847, 47.98, -6.086)), (' B   2  VAL HG13', ' B  27  PHE  CE2', -0.464, (13.333, 56.869, 8.834)), (' B 179  LEU HD11', ' B 218  TYR  CE2', -0.46, (33.176, 49.751, 6.679)), (' D 179  LEU HD11', ' D 218  TYR  HE2', -0.459, (-56.289, -17.108, 6.702)), (' D 105  ASP  HA ', ' D 178  PRO  HG3', -0.459, (-45.991, -18.923, 10.573)), (' C 363  THR  HB ', ' C 422  ALA  HB3', -0.456, (-25.859, -3.759, 22.306)), (' D 215  PHE  HD2', ' D 236  VAL HG12', -0.454, (-64.715, -18.83, 2.332)), (' A 329  PHE  CE1', ' A 421  LEU HD22', -0.451, (0.305, 30.97, 28.904)), (' A 470  PRO  HB2', ' B 204  THR HG23', -0.451, (38.996, 39.345, 15.474)), (' C 443  LEU HD13', ' C 460  PHE  CD2', -0.451, (-52.091, 1.564, 12.255)), (' D  51  ILE  HB ', ' D  70  ILE HD13', -0.451, (-39.176, -29.543, 22.622)), (' C 442  TYR  CE1', ' C 443  LEU  HG ', -0.45, (-49.366, -1.41, 13.524)), (' C 442  TYR  CD1', ' C 443  LEU  HG ', -0.448, (-48.948, -1.481, 13.476)), (' A 349  VAL  O  ', ' A 349  VAL HG23', -0.448, (-8.604, 21.355, 34.854)), (' A 319  ILE  HA ', ' A 322  LEU  CD1', -0.447, (-11.576, 22.998, 38.666)), (' B 118  GLY  HA3', ' B 119  GLY  HA3', -0.446, (35.387, 81.252, 24.259)), (' C 337  VAL HG22', ' C 409  ASN  HB3', -0.443, (-38.271, 2.095, 20.812)), (' C 425  THR HG21', ' C 495  ARG  CD ', -0.442, (-31.336, -5.47, 30.835)), (' B 107  TRP  CE3', ' B 176  PRO  HD2', -0.442, (26.348, 59.124, 11.341)), (' A 388  VAL HG22', ' A 495  ARG  HG2', -0.441, (9.915, 36.149, 29.271)), (' D  20  LEU  HG ', ' D  83  MET  CE ', -0.438, (-45.662, -38.751, 17.642)), (' D  12  VAL HG21', ' D  86  LEU  CD2', -0.437, (-49.315, -44.497, 20.322)), (' C 347  ASN  ND2', ' C 504  LEU HD13', -0.435, (-20.264, 20.855, 35.22)), (' A 322  LEU HD12', ' A 349  VAL HG22', -0.434, (-9.161, 21.087, 36.826)), (' B 156  ARG  CG ', ' B 156  ARG HH11', -0.434, (42.537, 44.809, 22.928)), (' B  48  VAL HG13', ' B  64  VAL HG21', -0.433, (24.095, 65.517, 24.731)), (' C 425  THR HG21', ' C 495  ARG  CG ', -0.43, (-31.39, -5.53, 30.327)), (' B  83  MET  HB3', ' B  86  LEU HD21', -0.428, (24.556, 73.265, 22.17)), (' B 103  TYR  CD2', ' B 166  ALA  HB2', -0.428, (25.635, 47.734, 16.969)), (' D  20  LEU  HG ', ' D  83  MET  HE2', -0.426, (-45.473, -38.3, 17.79)), (' D 157  ALA  HB3', ' D 201  THR  HA ', -0.426, (-59.631, -11.838, 24.741)), (' D 208  SER  O  ', ' D 209  ARG  C  ', -0.424, (-61.378, -10.426, -0.762)), (' D 208  SER  C  ', ' D 209  ARG  HG2', -0.418, (-60.991, -8.44, -0.672)), (' B 201  THR HG21', ' B 426  HOH  O  ', -0.415, (37.702, 42.067, 28.114)), (' A 390  LYS  HB2', ' A 481  TYR  CE2', -0.414, (14.204, 39.737, 20.183)), (' A 425  THR HG21', ' A 495  ARG  HD2', -0.412, (7.507, 38.084, 31.204)), (' A 375  ASN  O  ', ' C 505  ASN  HB3', -0.412, (-15.947, 24.869, 27.392)), (' D   2  VAL HG13', ' D  27  PHE  CD2', -0.409, (-36.861, -23.984, 8.661)), (' A 352  TYR  CE2', ' A 374  LEU HD13', -0.408, (-7.883, 27.156, 24.519)), (' B  39  GLN  HB2', ' B  45  LEU HD23', -0.406, (30.835, 61.979, 14.834)), (' A 378  CYS  SG ', ' C 378  CYS  SG ', -0.403, (-11.588, 14.517, 28.028)), (' D  87  ARG  O  ', ' D 115  VAL HG21', -0.403, (-54.005, -42.114, 22.495)), (' B  52  SER  HB3', ' B  57  ASN  HB2', -0.402, (11.804, 56.587, 26.241)), (' C 412  LEU HD21', ' C 498  VAL HG11', -0.401, (-28.896, 6.763, 20.9)), (' D  20  LEU  CD1', ' D  83  MET  CE ', -0.4, (-46.572, -37.961, 17.799)), (' B  24  ALA  CB ', ' B  29  PHE  CD1', -0.4, (10.86, 60.042, 11.585)), (' A 351  ASP  OD2', ' A 354  VAL  CG2', -0.4, (-10.685, 28.291, 33.956))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
