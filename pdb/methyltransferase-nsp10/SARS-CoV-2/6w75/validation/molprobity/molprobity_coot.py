# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A6892 BLEU HD11', ' C7094  VAL HG12', -0.835, (87.235, 10.24, -16.992)), (' A6812 BLEU HD12', ' A6815  MET  HE3', -0.587, (104.522, 38.485, 7.9)), (' C6834  LEU HD21', ' C6995 BVAL  CG2', -0.584, (72.862, -32.124, -18.648)), (' A6892 BLEU HD21', ' A7086  VAL HG11', -0.57, (90.608, 10.2, -15.663)), (' A7094  VAL  HB ', ' C6892 BLEU HD11', -0.562, (84.412, -11.073, -0.567)), (' C6820  LEU HD11', ' C7027 BILE HD12', -0.56, (93.54, -28.811, -31.278)), (' A6892 BLEU  CD1', ' C7094  VAL HG12', -0.56, (87.414, 11.062, -17.29)), (' A6892 BLEU HD11', ' C7094  VAL  CG1', -0.552, (87.908, 9.904, -16.567)), (' B4328  LEU HD22', ' B4365  LEU HD11', -0.521, (60.41, 9.704, -14.227)), (' C6820  LEU  CD1', ' C7027 BILE HD12', -0.518, (93.818, -29.135, -31.17)), (' A6884 AARG HH22', ' A6906  ASP  CG ', -0.51, (83.682, 14.105, -16.797)), (' A6917  HIS  O  ', ' A7088 AILE HG13', -0.51, (91.784, 5.383, -8.742)), (' A6812 ALEU HD23', ' A6815  MET  CE ', -0.509, (104.389, 39.209, 7.312)), (' C6884 AARG HH22', ' C6906  ASP  CG ', -0.503, (79.696, -14.65, -0.055)), (' C6884 BARG  HB3', ' D4349  TYR  OH ', -0.498, (75.282, -20.903, -3.804)), (' A6823  CYS  HB2', ' A7027 AILE HD12', -0.494, (89.665, 28.528, 15.09)), (' C6961  LEU  HB2', ' C7080  ILE  HB ', -0.494, (101.871, -21.18, 0.4)), (' A7094  VAL HG21', ' C6892 BLEU HD21', -0.492, (86.987, -11.856, -0.643)), (' A6884 BARG  HB3', ' B4349  TYR  OH ', -0.489, (79.306, 20.765, -13.942)), (' C6892 BLEU HD21', ' C7086  VAL HG11', -0.478, (88.076, -11.765, -0.322)), (' A6892 BLEU  CD2', ' A7086  VAL HG11', -0.471, (90.798, 10.744, -15.433)), (' C6818  MET  HE3', ' C7028  PHE  CE2', -0.47, (97.751, -39.384, -29.696)), (' A7009  TYR  CZ ', ' A7011  GLY  HA2', -0.468, (105.718, 17.476, -4.66)), (' A6884 AARG  NH2', ' A6906  ASP  OD2', -0.467, (84.015, 15.18, -16.429)), (' B4280  TYR  CE2', ' B4284  LEU HD11', -0.467, (57.095, 14.057, -11.376)), (' A6961  LEU  HB2', ' A7080  ILE  HB ', -0.467, (105.834, 18.277, -12.87)), (' A7087  VAL HG13', ' C7091  ASP  HB3', -0.465, (91.376, 1.187, -14.336)), (' C7009  TYR  CZ ', ' C7011  GLY  HA2', -0.45, (103.049, -20.745, -7.884)), (' A7094  VAL HG12', ' C6907  SER  OG ', -0.448, (83.329, -8.609, -1.992)), (' A7094  VAL  CG2', ' C6892 BLEU HD21', -0.443, (86.964, -11.753, -0.142)), (' A6988  TRP  HE1', ' A7111  FMT  C  ', -0.436, (103.498, 29.46, 3.488)), (' B4274  VAL HG21', ' D4334 BILE HD11', -0.436, (61.627, -2.03, -11.131)), (' C6884 AARG  NH2', ' C6906  ASP  OD2', -0.434, (80.289, -15.923, -0.187)), (' C6801  GLN  NE2', ' C7211  HOH  O  ', -0.431, (88.338, -42.842, -19.408)), (' A6920  ASN  ND2', ' A7086  VAL  HA ', -0.418, (94.85, 7.594, -15.805)), (' C6909  LEU HD11', ' C7088 AILE HG12', -0.417, (87.812, -7.528, -7.092)), (' D4280  TYR  CE2', ' D4284  LEU HD11', -0.415, (54.95, -12.178, -10.165)), (' B4274  VAL HG21', ' D4334 BILE  CD1', -0.407, (61.511, -2.042, -10.898)), (' A6812 ALEU HD23', ' A6815  MET  HE3', -0.405, (104.707, 38.693, 7.8)), (' D4291  ILE HD12', ' D4361  VAL HG11', -0.404, (60.051, -11.143, -10.602)), (' A6918  THR  HB ', ' A7088 AILE HG13', -0.403, (92.157, 6.468, -8.821)), (' C6892 BLEU  CD2', ' C7086  VAL HG11', -0.4, (88.405, -12.741, -0.404))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
