# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = [('C', '6841 ', 'ASN', ' ', 0.32798588208132573, (75.517, -23.42, -16.514)), ('C', '7061 ', 'LYS', ' ', 0.30191178086023274, (108.80700000000002, -15.378000000000004, 3.5390000000000006))]
data['probe'] = [(' C6800  SER  HA ', ' C6803  TRP  CH2', -0.753, (79.928, -48.85, -16.134)), (' A6830  ASP  CB ', ' A7037  LEU HD12', -0.703, (76.623, 36.875, 8.957)), (' A6892 ALEU HD21', ' C7094  VAL HG11', -0.676, (87.963, 10.458, -15.192)), (' A6830  ASP  HB2', ' A7037  LEU HD12', -0.64, (76.71, 36.762, 9.711)), (' B4388  GLU  O  ', ' B4389  PRO  C  ', -0.64, (60.297, 37.332, -43.835)), (' A7091  ASP  HB3', ' C7087 BVAL HG13', -0.598, (89.67, -3.221, -1.345)), (' C6834  LEU HD21', ' C6995 BVAL  CG2', -0.548, (72.942, -32.144, -18.527)), (' A6902  VAL HG11', ' B4330  CYS  HB3', -0.544, (71.462, 11.186, -10.699)), (' A6830  ASP  HB3', ' A7037  LEU HD12', -0.537, (76.045, 37.102, 9.221)), (' B4328  LEU HD22', ' B4365  LEU HD11', -0.518, (60.153, 10.416, -14.303)), (' C6961  LEU  HB2', ' C7080  ILE  HB ', -0.507, (101.908, -21.341, 0.438)), (' C7016 BGLN  HA ', ' C7016 BGLN  OE1', -0.484, (108.495, -26.569, -17.364)), (' B4280  TYR  CE2', ' B4284  LEU HD11', -0.466, (57.11, 14.272, -11.742)), (' D4291  ILE HD12', ' D4361  VAL HG11', -0.459, (60.246, -11.533, -10.019)), (' A6940 AGLU  N  ', ' A6940 AGLU  OE1', -0.458, (90.863, 17.27, 23.627)), (' A6892 ALEU HD11', ' C7094  VAL HG12', -0.457, (88.258, 10.458, -16.886)), (' A6902  VAL  CG1', ' B4330  CYS  HB3', -0.457, (71.633, 10.993, -10.708)), (' A6831  SER  CA ', ' A7037  LEU HD13', -0.455, (75.151, 34.857, 7.34)), (' C7009  TYR  CZ ', ' C7011  GLY  HA2', -0.447, (103.124, -20.974, -7.893)), (' A6955  ILE  CG2', ' A6981 BLEU HD21', -0.435, (100.579, 16.681, -0.533)), (' A6961  LEU  HB2', ' A7080 BILE  HB ', -0.435, (105.728, 18.207, -12.396)), (' A6985  PHE  O  ', ' A7014  ARG  HD3', -0.434, (106.152, 27.012, -2.069)), (' D4280  TYR  CE2', ' D4284  LEU HD11', -0.434, (54.951, -12.193, -10.003)), (' A6915  THR  HB ', ' A7091  ASP  HB2', -0.432, (88.937, 0.207, -1.151)), (' A6982  MET  HA ', ' A6982  MET  HE2', -0.431, (100.41, 22.797, 1.065)), (' A6931  ASP  CG ', ' A6933  LYS  HG2', -0.421, (84.447, 12.08, 12.79)), (' A7087  VAL HG13', ' C7091  ASP  HB3', -0.415, (91.069, 0.769, -14.037)), (' A6955  ILE  HB ', ' A6981 BLEU HD21', -0.414, (99.951, 15.949, -0.428)), (' A7091  ASP  HB3', ' C7087 BVAL  CG1', -0.414, (90.122, -2.99, -1.08)), (' C6834  LEU HD21', ' C6995 BVAL HG21', -0.414, (73.498, -31.718, -17.917)), (' A7033  ASN  HB3', ' A7388  HOH  O  ', -0.413, (90.192, 39.756, 8.535)), (' C7048  PHE  N  ', ' C7049  PRO  CD ', -0.403, (77.389, -33.361, -0.718)), (' A7094 AVAL  CG2', ' C7086  VAL  CG1', -0.403, (88.053, -10.826, -0.002)), (' A7066  ASN  OD1', ' A7069  ILE HG12', -0.402, (114.556, 22.735, -15.243)), (' A7009  TYR  CZ ', ' A7011  GLY  HA2', -0.401, (105.727, 17.294, -4.626))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
