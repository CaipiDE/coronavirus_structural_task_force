# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  30 ', 'TYR', 0.0187592284725139, (68.476, 62.22, 50.066)), ('A', '  33 ', 'ASN', 0.013216260979120122, (71.614, 58.74099999999999, 56.511999999999986)), ('A', ' 139 ', 'VAL', 0.0034124611190619056, (58.222, 72.712, 49.303)), ('A', ' 141 ', 'LYS', 0.0009551048617802581, (52.967, 77.545, 47.528)), ('A', ' 192 ', 'ALA', 0.0013009525763523389, (69.099, 77.51300000000002, 66.473))]
data['omega'] = [('A', '  32 ', 'GLU', None, (71.108, 57.31, 52.064)), ('A', ' 192 ', 'ALA', None, (68.247, 77.39800000000001, 67.615)), ('A', ' 278 ', 'GLY', None, (72.522, 78.78600000000003, 85.106)), ('A', ' 294 ', 'ILE', None, (39.942, 65.083, 77.53))]
data['rota'] = [('A', '  28 ', 'GLN', 0.19749227082221454, (67.268, 68.50800000000001, 50.347999999999985)), ('A', '  36 ', 'ILE', 0.10677748501153343, (74.53200000000001, 56.668, 61.177)), ('A', '  38 ', 'LYS', 0.0, (75.185, 50.355, 61.204)), ('A', '  42 ', 'MET', 0.0, (68.71900000000001, 57.958, 63.15999999999998)), ('A', '  50 ', 'LEU', 0.0, (70.96, 67.04700000000001, 70.955)), ('A', '  61 ', 'VAL', 0.06422082400164471, (69.194, 70.10200000000002, 87.015)), ('A', ' 100 ', 'LEU', 0.028070509678292516, (49.063, 61.17600000000002, 69.091)), ('A', ' 123 ', 'LYS', 0.08009420826737058, (55.506000000000014, 72.909, 86.249)), ('A', ' 126 ', 'LEU', 0.0, (62.757, 70.67, 80.67399999999998)), ('A', ' 137 ', 'LYS', 0.0, (53.344, 69.599, 52.089)), ('A', ' 160 ', 'LYS', 0.04428307031692483, (53.833, 75.09600000000003, 82.698)), ('A', ' 170 ', 'LYS', 0.0006119125463426676, (61.935, 70.492, 66.576)), ('A', ' 191 ', 'THR', 0.09860335112379949, (69.34100000000002, 79.016, 69.35499999999998)), ('A', ' 196 ', 'ASN', 0.025570843690960646, (75.60700000000003, 66.902, 62.648)), ('A', ' 206 ', 'LEU', 0.018461325956113793, (64.86199999999997, 75.661, 68.73299999999998)), ('A', ' 239 ', 'LEU', 0.0005777823713210808, (77.23000000000003, 65.179, 57.765)), ('A', ' 268 ', 'ASN', 0.05123347085828492, (64.51299999999998, 90.57, 92.134)), ('A', ' 271 ', 'ILE', 0.0034031610085342684, (67.472, 86.00000000000003, 91.551)), ('A', ' 279 ', 'ARG', 0.0010634694585228797, (71.53200000000002, 78.05500000000002, 89.289)), ('A', ' 283 ', 'ARG', 0.06374416899822426, (58.27, 76.12500000000001, 90.864)), ('A', ' 290 ', 'VAL', 0.24336720532138445, (49.604, 64.42400000000002, 84.21299999999997)), ('B', '  43 ', 'LYS', 0.15410723877078203, (70.13, 50.035000000000004, 70.423)), ('B', '  45 ', 'LEU', 0.0, (75.156, 54.498000000000005, 71.923)), ('B', '  85 ', 'ASN', 0.10204043049907735, (54.448, 38.663, 86.073)), ('B', ' 120 ', 'CYS', 0.19766165989840467, (75.601, 37.756, 89.585))]
data['cbeta'] = [('A', '  61 ', 'VAL', ' ', 0.3671800886106184, (70.131, 69.10800000000002, 86.22599999999997))]
data['probe'] = [(' A  11  MET  HB3', ' A 192  ALA  HB1', -1.11, (70.07, 79.18, 65.24)), (' A 191  THR  OG1', ' A 192  ALA  HB3', -1.028, (70.992, 79.477, 68.169)), (' A  33  ASN  HB2', ' A  36  ILE HD13', -1.015, (71.916, 58.378, 58.222)), (' A  11  MET  CB ', ' A 192  ALA  HB1', -0.903, (70.554, 79.139, 64.558)), (' A 104  VAL HG21', ' B  77  CYS  HB3', -0.822, (56.726, 47.568, 75.184)), (' B  13  VAL HG22', ' B  30  TYR  CZ ', -0.817, (57.218, 37.085, 61.628)), (' A  33  ASN  HB2', ' A  36  ILE  CD1', -0.806, (72.429, 59.203, 58.969)), (' A  11  MET  HB3', ' A 192  ALA  CB ', -0.798, (69.981, 79.528, 65.505)), (' B  92  LEU HD22', ' B  97  VAL  CG2', -0.796, (65.505, 44.724, 78.566)), (' A 263  LYS  H  ', ' A 266  GLN HE21', -0.772, (58.449, 84.643, 96.595)), (' B   9  HIS  O  ', ' B  13  VAL HG23', -0.74, (56.546, 39.708, 61.15)), (' A 177  ASN HD22', ' A 180  LEU  H  ', -0.732, (55.816, 80.608, 67.452)), (' B  92  LEU HD22', ' B  97  VAL HG21', -0.716, (65.341, 44.3, 78.249)), (' A  36  ILE  N  ', ' A  36  ILE HD12', -0.704, (74.694, 58.275, 59.748)), (' B 117  CYS  SG ', ' B 119  VAL HG12', -0.681, (74.523, 34.363, 90.206)), (' A 177  ASN HD21', ' A 179  ASP  HB2', -0.679, (52.983, 81.076, 67.914)), (' B  85  ASN  H  ', ' B  85  ASN HD22', -0.662, (54.762, 39.049, 83.753)), (' A 268  ASN  ND2', ' A 271  ILE HG23', -0.661, (66.146, 88.355, 93.33)), (' A 167  ILE HD11', ' A 184  MET  HE1', -0.649, (61.301, 77.533, 72.634)), (' A 136  THR  HB ', ' A 328  HOH  O  ', -0.643, (54.439, 69.861, 56.249)), (' A  55  ASN HD21', ' A  88  TRP  HE1', -0.642, (74.191, 66.099, 79.03)), (' A  42  MET  HE2', ' A  42  MET  O  ', -0.641, (69.531, 59.422, 64.063)), (' A  35  VAL HG23', ' A 197  VAL HG23', -0.632, (74.816, 60.422, 61.217)), (' A  32  GLU  HA ', ' A  32  GLU  OE2', -0.631, (68.562, 58.267, 53.108)), (' A 191  THR  CB ', ' A 192  ALA  HB3', -0.629, (70.66, 78.349, 68.418)), (' A  42  MET  HA ', ' A  42  MET  HE3', -0.608, (70.202, 58.207, 62.48)), (' A 263  LYS  H  ', ' A 266  GLN  NE2', -0.607, (58.322, 84.373, 96.773)), (' A 191  THR  CA ', ' A 192  ALA  HB3', -0.606, (69.842, 79.087, 67.732)), (' B  92  LEU HD22', ' B  97  VAL HG22', -0.597, (65.877, 44.732, 79.511)), (' A  42  MET  HE1', ' A 197  VAL  CG2', -0.594, (72.571, 60.913, 62.08)), (' A  55  ASN  ND2', ' A  88  TRP  HE1', -0.593, (73.9, 66.51, 78.549)), (' A  42  MET  HE1', ' A 197  VAL HG22', -0.585, (72.497, 60.674, 61.836)), (' A  21  LEU  N  ', ' A  21  LEU HD12', -0.582, (64.365, 89.898, 53.513)), (' A 232  ARG HH12', ' A 237  ILE HD12', -0.581, (73.802, 73.216, 58.476)), (' B  13  VAL HG22', ' B  30  TYR  OH ', -0.572, (56.653, 37.225, 61.464)), (' A 271  ILE HD13', ' A 282  ILE HD11', -0.567, (63.853, 82.79, 91.25)), (' A 232  ARG  NH1', ' A 356  HOH  O  ', -0.565, (72.691, 73.728, 56.618)), (' A  42  MET  CE ', ' A  42  MET  HA ', -0.56, (69.997, 59.083, 62.49)), (' A  36  ILE  CG1', ' A  42  MET  HE3', -0.557, (71.195, 59.106, 61.568)), (' A  13  ASN  O  ', ' A  17  MET  HG3', -0.556, (73.265, 87.884, 65.103)), (' A 137  LYS  HB3', ' A 140  THR HG21', -0.555, (53.248, 70.826, 49.584)), (' A 267  ILE  HA ', ' A 271  ILE HG12', -0.554, (63.764, 86.652, 92.048)), (' A  56  THR  O  ', ' A  56  THR HG22', -0.547, (77.532, 74.952, 76.044)), (' B  91  ASP  O  ', ' B  95  LYS  HE3', -0.547, (63.955, 45.731, 83.864)), (' A  36  ILE  CD1', ' A  36  ILE  N  ', -0.545, (73.792, 58.165, 59.693)), (' A 268  ASN HD21', ' A 271  ILE HG23', -0.542, (66.713, 87.688, 93.671)), (' A 141  LYS  HG3', ' A 142  GLU  H  ', -0.539, (52.093, 77.919, 49.678)), (' A 271  ILE  CD1', ' A 282  ILE HD11', -0.539, (63.585, 83.066, 90.792)), (' B  85  ASN  H  ', ' B  85  ASN  ND2', -0.534, (55.36, 39.23, 83.759)), (' A  14  LEU  HA ', ' A  17  MET  HE2', -0.529, (75.076, 89.103, 63.849)), (' A  36  ILE HG12', ' A  42  MET  HE3', -0.527, (70.893, 58.882, 61.495)), (' B  57  VAL HG23', ' B  58  THR HG23', -0.526, (71.158, 53.635, 85.411)), (' A 173  GLU  O  ', ' A 225  HIS  HE1', -0.524, (60.24, 76.995, 57.348)), (' A 191  THR  HA ', ' A 192  ALA  HB3', -0.519, (69.638, 79.27, 68.16)), (' B  53  GLN  HA ', ' B 122  MET  HG2', -0.518, (75.767, 40.995, 83.963)), (' B  13  VAL HG22', ' B  30  TYR  CE2', -0.517, (57.633, 36.96, 62.312)), (' A 283  ARG  NH2', ' A 325  HOH  O  ', -0.516, (60.896, 69.504, 92.726)), (' A  61  VAL HG23', ' A  65  MET  HE1', -0.512, (69.397, 67.201, 86.731)), (' A 232  ARG  NH1', ' A 237  ILE HD12', -0.511, (72.998, 73.149, 58.493)), (' A  61  VAL HG23', ' A  65  MET  CE ', -0.51, (69.185, 67.403, 86.764)), (' B  52  GLY  O  ', ' B 122  MET  HE3', -0.509, (76.807, 41.093, 81.878)), (' A 191  THR  HA ', ' A 192  ALA  CB ', -0.495, (69.58, 79.569, 67.507)), (' A 191  THR  CA ', ' A 192  ALA  CB ', -0.495, (69.341, 79.09, 67.657)), (' A 159  GLN  O  ', ' A 160  LYS  HD2', -0.494, (52.058, 76.25, 83.647)), (' A 163  LEU  HB2', ' A 282  ILE  HB ', -0.489, (61.188, 80.118, 88.619)), (' A  33  ASN  HA ', ' A 358  HOH  O  ', -0.489, (71.364, 60.816, 56.373)), (' A 136  THR  HB ', ' A 431  HOH  O  ', -0.486, (54.181, 69.571, 57.664)), (' A  17  MET  HE1', ' A 448  HOH  O  ', -0.485, (77.136, 90.655, 64.964)), (' A 268  ASN  C  ', ' A 268  ASN HD22', -0.477, (66.555, 89.593, 92.268)), (' A 293  ASP  HA ', ' A 294  ILE  HA ', -0.475, (41.033, 62.633, 77.668)), (' A  31  GLY  HA2', ' A  32  GLU  OE2', -0.464, (68.314, 58.815, 52.881)), (' A  21  LEU HD13', ' A 317  HOH  O  ', -0.462, (65.98, 89.586, 52.035)), (' A  26  ASP  HB2', ' A 349  HOH  O  ', -0.457, (70.226, 76.674, 48.687)), (' A  24  LYS  HG2', ' A 566  HOH  O  ', -0.456, (59.975, 76.489, 49.665)), (' A   3  GLN  N  ', ' A 521  HOH  O  ', -0.455, (85.901, 71.42, 63.974)), (' A 181  TYR  OH ', ' A 225  HIS  HD2', -0.455, (62.865, 79.327, 62.073)), (' A  65  MET  HB2', ' A  65  MET  HE2', -0.453, (66.643, 67.121, 87.71)), (' A  28  GLN  HG2', ' A  29  ASN  H  ', -0.453, (66.2, 66.521, 50.636)), (' A 268  ASN  ND2', ' A 271  ILE  H  ', -0.445, (66.952, 88.582, 92.866)), (' A  38  LYS  HG3', ' A  39  GLY  N  ', -0.442, (74.905, 48.758, 62.504)), (' A 267  ILE HG23', ' A 271  ILE HD11', -0.44, (63.422, 85.354, 90.358)), (' A 253  LYS  HE3', ' A 255  ARG  NE ', -0.436, (76.181, 71.505, 85.481)), (' A  42  MET  CA ', ' A  42  MET  CE ', -0.43, (69.433, 58.967, 62.867)), (' B 106  ASP  OD2', ' B 113  ARG  NH2', -0.43, (65.45, 34.646, 69.217)), (' A 277  LYS  HB3', ' A 277  LYS  HE2', -0.428, (75.518, 80.649, 87.309)), (' A  19  ARG  NH1', ' A 536  HOH  O  ', -0.428, (67.044, 94.548, 63.887)), (' A 263  LYS  HE2', ' A 265  ASN  OD1', -0.425, (55.942, 87.78, 97.317)), (' A 160  LYS  HA ', ' A 160  LYS  HD2', -0.42, (52.523, 75.318, 84.24)), (' A 232  ARG  NH1', ' A 544  HOH  O  ', -0.42, (73.269, 75.085, 58.017)), (' A 302  SAM  H2 ', ' A 483  HOH  O  ', -0.419, (50.502, 64.068, 71.791)), (' A 263  LYS  HB2', ' A 263  LYS  HE2', -0.417, (56.183, 87.179, 97.133)), (' A 259  VAL HG22', ' A 281  ILE  HB ', -0.414, (64.289, 74.167, 90.463)), (' A  31  GLY  HA2', ' A  32  GLU  HA ', -0.41, (69.094, 58.587, 53.249)), (' A 170  LYS  NZ ', ' A 302  SAM  HE3', -0.408, (60.14, 64.413, 63.976)), (' A  21  LEU  CD1', ' A  21  LEU  N  ', -0.405, (64.356, 89.749, 53.304)), (' A  21  LEU  H  ', ' A  21  LEU HD12', -0.404, (64.848, 89.385, 53.503)), (' A  60  ALA  HB1', ' A 257  THR HG21', -0.403, (68.3, 74.466, 87.809)), (' A 140  THR  HB ', ' A 141  LYS  H  ', -0.403, (52.692, 74.554, 47.624)), (' A  32  GLU  O  ', ' A  33  ASN  C  ', -0.402, (72.522, 57.316, 55.744)), (' A 281  ILE HG22', ' A 283  ARG  HG2', -0.402, (61.208, 74.703, 89.679))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
