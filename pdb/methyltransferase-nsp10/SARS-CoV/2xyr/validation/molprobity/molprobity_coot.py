# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  28 ', 'GLN', 0.0, (35.157, 67.729, 13.141)), ('A', '  59 ', 'LEU', 0.2529568569129288, (30.468, 73.434, -18.02)), ('A', ' 111 ', 'LEU', 0.016459105130685048, (51.15300000000001, 59.82299999999999, -13.240000000000004)), ('A', ' 140 ', 'THR', 0.2916029187525446, (51.653, 74.85699999999999, 14.675000000000004)), ('A', ' 153 ', 'LEU', 0.09694405531414178, (48.007, 74.08899999999998, -8.842)), ('A', ' 238 ', 'GLN', 0.010931365190939306, (22.568, 67.851, 8.078)), ('A', ' 254 ', 'LEU', 0.031556530608966245, (27.28099999999999, 66.033, -24.534)), ('A', ' 270 ', 'MET', 0.04310052557098902, (31.557000000000006, 88.736, -27.873000000000008)), ('A', ' 290 ', 'VAL', 0.009067681096653667, (52.142, 64.215, -20.09)), ('B', '  12 ', 'THR', 0.0722604452126165, (49.134, 40.411, 2.678)), ('B', ' 118 ', 'THR', 0.07390467972734449, (31.762, 35.96999999999999, -26.814)), ('B', ' 119 ', 'VAL', 0.001050177525030449, (28.302, 36.089999999999996, -28.483000000000008))]
data['cbeta'] = [('B', ' 119 ', 'VAL', ' ', 0.29088458274204804, (27.414999999999992, 34.91899999999999, -29.08))]
data['probe'] = [(' B  99  ILE HD13', ' B 107  PRO  HB3', -0.699, (33.792, 42.615, -8.804)), (' A 279  ARG  NH2', ' A1294   CL CL  ', -0.676, (26.332, 78.569, -30.172)), (' A 277  LYS  HD3', ' A2094  HOH  O  ', -0.669, (24.956, 82.053, -23.758)), (' A  62  PRO  HD2', ' A  65  MET  HG3', -0.637, (35.906, 68.686, -22.926)), (' A  42  MET  HE1', ' A 197  VAL HG23', -0.573, (30.478, 61.851, 1.299)), (' A 120  THR  HB ', ' A 290  VAL HG13', -0.563, (50.866, 66.303, -19.143)), (' B  67  SER  OG ', ' B  98  GLN  NE2', -0.551, (27.903, 48.082, -14.273)), (' B  60  GLU  H  ', ' B  98  GLN  NE2', -0.539, (27.922, 47.933, -15.53)), (' A  14  LEU  HA ', ' A  17  MET  HE2', -0.53, (25.637, 88.426, -0.124)), (' A  42  MET  HE1', ' A 197  VAL  CG2', -0.517, (29.888, 61.797, 0.968)), (' A  28  GLN  HB2', ' A2016  HOH  O  ', -0.512, (34.978, 64.747, 13.796)), (' B 130  CYS  SG ', ' B2031  HOH  O  ', -0.489, (24.363, 33.214, -26.748)), (' A 201  SER  O  ', ' A 232 AARG  NH2', -0.477, (32.305, 70.945, 6.176)), (' A 184  MET  HE1', ' A 208  GLY  N  ', -0.476, (36.464, 77.717, -8.915)), (' B  56  THR HG21', ' B  60  GLU  HG3', -0.476, (26.968, 47.747, -19.99)), (' B 117  CYS  SG ', ' B 119  VAL HG23', -0.465, (27.969, 33.713, -26.956)), (' A  65  MET  HB3', ' A  93  THR HG23', -0.443, (36.864, 64.607, -21.75)), (' A 264  GLU  HA ', ' A 267  ILE HD12', -0.442, (43.365, 85.929, -26.692)), (' A 163  LEU  HB2', ' A 282  ILE  HB ', -0.435, (40.107, 80.202, -24.605)), (' A 232 AARG  NH1', ' A2084  HOH  O  ', -0.435, (28.751, 73.584, 7.659)), (' A 184  MET  HE3', ' A 190  TRP  HB2', -0.431, (35.862, 79.748, -7.97)), (' A 255  ARG  HD3', ' A2089  HOH  O  ', -0.423, (24.753, 72.598, -23.08)), (' A 126  LEU  HA ', ' A 166  SER  O  ', -0.418, (38.245, 72.2, -15.286)), (' A 180  LEU  O  ', ' A 184  MET  HG2', -0.416, (40.638, 80.753, -6.18)), (' A 278  GLY  HA2', ' A2065  HOH  O  ', -0.413, (32.229, 78.128, -21.533)), (' A 177  ASN  OD1', ' A 179  ASP  N  ', -0.411, (46.411, 81.221, -2.944)), (' B  58  THR  O  ', ' B  60  GLU  HG2', -0.408, (27.643, 49.912, -18.403)), (' A 260  MET  O  ', ' A 282  ILE  HA ', -0.405, (40.112, 77.993, -28.454)), (' A  38  LYS  HA ', ' A  38  LYS  HD3', -0.404, (27.058, 50.166, 3.604)), (' A 199  ALA  HB1', ' A 237  ILE  HB ', -0.402, (26.419, 70.143, 5.884)), (' A  20  MET  HE3', ' A 230  PHE  CE2', -0.4, (29.376, 86.354, 9.041))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
