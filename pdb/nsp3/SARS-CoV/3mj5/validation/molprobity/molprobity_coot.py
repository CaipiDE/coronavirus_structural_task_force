# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  52 ', 'GLU', 0.04884786160408355, (8.087000000000002, 64.472, -3.827)), ('A', '  60 ', 'PRO', 0.09182450230293789, (4.808, 45.524, -11.391)), ('A', ' 226 ', 'VAL', 0.01629392772524235, (-22.797999999999995, 19.723000000000006, -42.532)), ('B', '  60 ', 'PRO', 0.02895560539001323, (-13.289, 23.893, -8.219)), ('B', ' 226 ', 'VAL', 0.00512602, (-7.2330000000000005, 62.637, -38.526))]
data['omega'] = [('B', ' 316 ', 'LYS', None, (15.166, 57.62, -42.150000000000006))]
data['rota'] = [('A', '  51 ', 'HIS', 0.023478129436251015, (8.477000000000004, 66.166, -7.212000000000001)), ('A', '  71 ', 'GLU', 0.21195006186113174, (-6.327000000000003, 41.842, -7.9780000000000015)), ('A', ' 125 ', 'GLU', 0.12282696475254982, (-27.815999999999995, 45.848, -16.215000000000003)), ('A', ' 126 ', 'VAL', 0.17574722186434838, (-24.356999999999996, 44.4, -16.298)), ('A', ' 141 ', 'ARG', 0.2294644924460886, (-21.914, 56.732, -15.805)), ('A', ' 188 ', 'VAL', 0.16550149658194754, (-30.555999999999997, 22.889999999999997, -33.99900000000001)), ('A', ' 197 ', 'THR', 0.03225118721323999, (-29.003, 20.874, -28.328000000000003)), ('A', ' 227 ', 'CYS', 0.05632079970632832, (-25.434999999999995, 17.664, -44.397000000000006)), ('A', ' 236 ', 'VAL', 0.05082856389582433, (-35.299, 27.07, -26.205)), ('A', ' 307 ', 'LYS', 0.0, (-33.765, 43.42499999999998, -22.456)), ('A', ' 312 ', 'THR', 0.12074552302887642, (-38.49000000000001, 29.597, -22.313)), ('B', '  71 ', 'GLU', 0.29587802905171434, (-2.6899999999999995, 28.604999999999993, -11.912)), ('B', ' 114 ', 'LEU', 0.16534431657312681, (-9.04700000000001, 26.071999999999992, -36.066)), ('B', ' 147 ', 'ASN', 0.0510036617732754, (-6.960999999999997, 19.164, -25.945)), ('B', ' 181 ', 'SER', 0.293596512728728, (9.830999999999998, 41.236999999999995, -24.997000000000003)), ('B', ' 192 ', 'HIS', 0.0, (0.02999999999999936, 69.594, -41.454)), ('B', ' 193 ', 'CYS', 0.0, (0.1269999999999989, 67.881, -38.025000000000006)), ('B', ' 225 ', 'CYS', 0.0, (-5.397999999999996, 60.245, -40.891)), ('B', ' 236 ', 'VAL', 0.003150532575091347, (10.739999999999998, 51.9, -37.57500000000001)), ('B', ' 270 ', 'GLN', 0.009841868228964922, (-21.051999999999996, 34.447, -43.254)), ('B', ' 292 ', 'THR', 0.0749932087197764, (-1.6660000000000004, 20.591, -52.759)), ('B', ' 309 ', 'THR', 0.0756921003866056, (13.966000000000001, 38.537, -34.617)), ('B', ' 314 ', 'THR', 0.06497815311434713, (16.664, 52.132000000000005, -42.576))]
data['cbeta'] = []
data['probe'] = [(' B  57  PHE  CD2', ' B  85  MET  HE1', -1.338, (-11.028, 16.558, -18.056)), (' B 302  THR HG21', ' B 801  GRM  H2B', -1.188, (-10.809, 36.581, -44.279)), (' A   6  ILE HD11', ' A  52  GLU  OE1', -1.166, (9.814, 65.014, -1.028)), (' B  57  PHE  CG ', ' B  85  MET  HE1', -1.151, (-11.05, 17.281, -17.036)), (' A 203  VAL HG13', ' A 207  MET  HE2', -1.142, (-20.153, 37.311, -25.436)), (' A   4  LYS  O  ', ' A  24  MET  HB2', -1.117, (17.977, 64.407, -5.32)), (' A   6  ILE  CD1', ' A  52  GLU  OE1', -1.105, (10.651, 64.845, -1.242)), (' A   6  ILE HG12', ' A  52  GLU  HB3', -1.084, (11.019, 64.47, -3.249)), (' B  84  TYR  OH ', ' B 147  ASN  ND2', -1.054, (-8.225, 20.164, -22.539)), (' B  57  PHE  CG ', ' B  85  MET  CE ', -1.044, (-11.661, 17.727, -17.633)), (' A 203  VAL  CG1', ' A 207  MET  HE2', -1.035, (-18.568, 37.418, -25.665)), (' B  57  PHE  CD2', ' B  85  MET  CE ', -0.993, (-12.587, 16.51, -17.874)), (' B  57  PHE  CB ', ' B  85  MET  HE2', -0.99, (-11.824, 17.958, -16.021)), (' B  57  PHE  HB2', ' B  85  MET  CE ', -0.99, (-12.878, 17.387, -16.844)), (' A 107  TRP  HB2', ' A 352  HOH  O  ', -0.989, (-17.828, 61.753, -34.115)), (' A 203  VAL HG13', ' A 207  MET  CE ', -0.966, (-19.711, 37.534, -26.472)), (' A 203  VAL  CG1', ' A 207  MET  CE ', -0.952, (-19.006, 37.054, -26.928)), (' A   6  ILE  CG1', ' A  52  GLU  HB3', -0.95, (10.993, 64.216, -3.01)), (' A 227  CYS  SG ', ' A 229  ARG  HB2', -0.942, (-28.61, 19.05, -45.634)), (' A   6  ILE HD11', ' A  52  GLU  CD ', -0.936, (10.1, 65.388, -1.218)), (' B  57  PHE  CB ', ' B  85  MET  CE ', -0.921, (-11.941, 17.278, -16.132)), (' B 298  LYS  HE2', ' B 335  HOH  O  ', -0.915, (-3.999, 36.959, -61.657)), (' A  48  HIS  N  ', ' A  51  HIS  ND1', -0.91, (10.922, 66.356, -10.486)), (' B  57  PHE  HB2', ' B  85  MET  HE2', -0.906, (-13.082, 18.064, -16.581)), (' A 314  THR  O  ', ' A 315  ILE  HB ', -0.9, (-41.929, 25.913, -29.631)), (' A  34  PRO  HG2', ' A  59  LEU HD22', -0.898, (7.859, 48.993, -18.269)), (' B 281  GLU  N  ', ' B 281  GLU  OE1', -0.897, (9.776, 22.349, -50.039)), (' B 190  CYS  SG ', ' B 192  HIS  HD2', -0.894, (-1.426, 66.581, -42.195)), (' A 159  THR HG23', ' B 204  GLU  OE1', -0.891, (-2.413, 49.012, -30.269)), (' A 314  THR  O  ', ' A 315  ILE  CB ', -0.883, (-41.221, 26.164, -29.62)), (' B 192  HIS  CD2', ' B 192  HIS  H  ', -0.879, (-0.854, 67.791, -42.106)), (' A 189  VAL HG22', ' A 195  GLN  HG2', -0.837, (-33.892, 18.859, -33.951)), (' B 227  CYS  SG ', ' B 229  ARG  HB2', -0.829, (-5.688, 65.86, -43.94)), (' A 165  ASP  OD1', ' A 801  GRM  H9 ', -0.814, (-16.559, 45.137, -36.737)), (' B 185  VAL HG12', ' B 236  VAL  CG1', -0.802, (8.421, 53.12, -34.585)), (' B 190  CYS  SG ', ' B 192  HIS  CD2', -0.794, (-2.359, 66.892, -42.42)), (' A   8  VAL HG22', ' A  22  VAL  CG2', -0.786, (10.45, 59.088, -5.584)), (' B 221  VAL HG23', ' B 223  ILE HG23', -0.781, (-1.773, 53.106, -43.602)), (' A 314  THR  O  ', ' A 315  ILE  CG2', -0.772, (-41.211, 26.617, -28.936)), (' A 270  GLN  HG3', ' A 801  GRM  H21', -0.768, (-9.864, 47.804, -45.334)), (' A 314  THR  O  ', ' A 315  ILE HG22', -0.762, (-40.562, 26.307, -28.449)), (' A  27  THR  HA ', ' A  45  ILE  O  ', -0.759, (14.912, 60.357, -14.525)), (' A  48  HIS  O  ', ' A  51  HIS  HB2', -0.74, (10.605, 66.25, -8.354)), (' A 209  MET  HE1', ' A 248  PRO  HD3', -0.739, (-23.145, 38.904, -39.592)), (' B 214  TYR  O  ', ' B 218  LYS  HG3', -0.738, (7.526, 46.178, -44.286)), (' B 302  THR HG21', ' B 801  GRM  C2 ', -0.725, (-10.19, 35.73, -43.627)), (' A 209  MET  HE1', ' A 247  ALA  HA ', -0.724, (-24.19, 39.37, -38.728)), (' B 225  CYS  SG ', ' B 226  VAL  N  ', -0.719, (-5.638, 62.469, -40.372)), (' A  48  HIS  O  ', ' A  51  HIS  N  ', -0.717, (9.785, 67.589, -7.541)), (' B 255  GLN  O  ', ' B 258  THR  OG1', -0.716, (6.852, 34.712, -51.182)), (' B 165  ASP  OD1', ' B 801  GRM  H5A', -0.714, (-12.791, 36.041, -40.152)), (' A 162  GLU  OE2', ' B 204  GLU  OE2', -0.711, (-3.608, 48.376, -32.626)), (' B 185  VAL HG12', ' B 236  VAL HG11', -0.71, (9.004, 54.134, -34.886)), (' A 251  GLU  HG3', ' A 298  LYS  NZ ', -0.71, (-33.161, 49.701, -45.807)), (' A 209  MET  HE2', ' B 801  GRM  O20', -0.703, (-23.06, 37.404, -39.194)), (' B 279  ALA  O  ', ' B 280  LYS  HD3', -0.698, (7.48, 25.223, -46.105)), (' A   4  LYS  O  ', ' A  24  MET  CB ', -0.684, (18.098, 64.635, -5.334)), (' B 280  LYS  HG3', ' B 361  HOH  O  ', -0.682, (7.739, 20.251, -45.891)), (' A 158  LYS  HE3', ' A 162  GLU  OE1', -0.681, (-7.216, 49.313, -32.602)), (' A 137  TYR  CZ ', ' A 141  ARG  HD3', -0.679, (-22.672, 52.3, -16.491)), (' A   4  LYS  O  ', ' A  24  MET  HE2', -0.677, (16.902, 64.976, -4.542)), (' A 281  GLU  HG2', ' A 282  THR  N  ', -0.677, (-39.804, 59.901, -27.944)), (' B  64  THR  O  ', ' B  68  GLU  HG3', -0.677, (-6.849, 24.117, -6.22)), (' A 302  THR HG23', ' A 303  ASP  OD2', -0.668, (-22.229, 46.231, -34.538)), (' A  73  TYR  O  ', ' A  74  HIS  HB2', -0.66, (-9.209, 41.914, -14.593)), (' A  34  PRO  HB2', ' A  59  LEU HD13', -0.652, (6.6, 50.693, -17.321)), (' A 313  THR  OG1', ' A 315  ILE HG22', -0.651, (-40.313, 27.036, -28.143)), (' B 212  LEU HD22', ' B 304  VAL HG23', -0.645, (-1.706, 38.007, -46.257)), (' A 209  MET  HE2', ' B 801  GRM  C16', -0.643, (-22.991, 36.839, -39.04)), (' B 235  LEU HD21', ' B 238  GLN  HB2', -0.637, (9.391, 45.537, -37.154)), (' B  57  PHE  CG ', ' B  85  MET  HE2', -0.632, (-12.116, 18.147, -16.807)), (' A   6  ILE  CG1', ' A  52  GLU  CB ', -0.631, (9.938, 64.055, -2.559)), (' A  29  GLY  N  ', ' A  43  THR  O  ', -0.628, (13.279, 56.043, -15.53)), (' B 274  TYR  OH ', ' B 801  GRM  H9 ', -0.627, (-12.085, 33.685, -41.435)), (' B 114  LEU HD11', ' B 153  LEU HD21', -0.623, (-13.443, 25.639, -32.568)), (' B 165  ASP  OD2', ' B 168  GLU  HG3', -0.615, (-11.261, 37.574, -36.625)), (' B 190  CYS  CB ', ' B 193  CYS  SG ', -0.613, (-1.466, 65.084, -39.763)), (' A  45  ILE HG22', ' A  46  LYS  N  ', -0.612, (13.179, 63.443, -14.908)), (' B 225  CYS  HB3', ' B 231  ALA  HB2', -0.612, (-3.162, 60.833, -42.311)), (' A   6  ILE HG13', ' A   7  LYS  N  ', -0.611, (11.393, 62.702, -2.112)), (' A 251  GLU  CG ', ' A 298  LYS  NZ ', -0.601, (-32.231, 49.835, -46.641)), (' B 192  HIS  CE1', ' B 229  ARG  HD2', -0.598, (-4.734, 68.58, -44.294)), (' A 270  GLN  CG ', ' A 801  GRM  H21', -0.597, (-9.521, 47.819, -45.711)), (' B 221  VAL HG22', ' B 233  GLN  HB3', -0.597, (1.073, 52.989, -42.644)), (' B 202  GLY  HA3', ' B 338  HOH  O  ', -0.591, (-0.319, 42.583, -25.933)), (' B 223  ILE  O  ', ' B 223  ILE HG13', -0.589, (-2.825, 57.044, -42.618)), (' B  62  ASP  C  ', ' B  62  ASP  OD1', -0.588, (-11.012, 24.211, -3.069)), (' A 269  TYR  HE2', ' B 209  MET  CE ', -0.588, (-10.326, 43.577, -41.626)), (' B 292  THR  CG2', ' B 294  MET  HE2', -0.587, (-1.538, 23.363, -55.016)), (' A 281  GLU  OE2', ' A 284  TYR  OH ', -0.584, (-36.582, 61.774, -26.414)), (' A 212  LEU HD11', ' A 337  HOH  O  ', -0.583, (-27.865, 44.038, -39.709)), (' B 292  THR HG22', ' B 294  MET  HE2', -0.579, (-0.843, 23.724, -54.721)), (' A   8  VAL HG22', ' A  22  VAL HG22', -0.578, (10.659, 58.303, -5.385)), (' A   8  VAL HG12', ' A  52  GLU  HA ', -0.575, (8.315, 62.543, -4.8)), (' B 225  CYS  CB ', ' B 231  ALA  HB2', -0.575, (-2.644, 60.633, -41.665)), (' B 185  VAL  O  ', ' B 236  VAL  CG1', -0.574, (8.683, 52.326, -36.137)), (' B 192  HIS  H  ', ' B 192  HIS  HD2', -0.573, (-1.488, 67.548, -41.923)), (' B  57  PHE  HB2', ' B  85  MET  HE3', -0.573, (-13.641, 16.88, -16.462)), (' A 203  VAL  CG1', ' A 207  MET  HE3', -0.572, (-19.576, 37.017, -26.837)), (' A 157  ASN  ND2', ' B 175  GLN  OE1', -0.568, (-5.804, 41.029, -25.767)), (' A 203  VAL HG11', ' A 207  MET  CE ', -0.568, (-18.353, 37.447, -25.95)), (' A 251  GLU  HG3', ' A 298  LYS  HZ2', -0.567, (-32.533, 50.488, -45.773)), (' A 313  THR  OG1', ' A 315  ILE  CG2', -0.566, (-39.826, 26.599, -28.824)), (' B 209  MET  CE ', ' B 248  PRO  HD3', -0.565, (-9.601, 43.544, -42.47)), (' A   8  VAL HG22', ' A  22  VAL HG21', -0.563, (10.307, 59.48, -5.084)), (' A 172  HIS  O  ', ' A 175  GLN  HB2', -0.562, (-13.816, 40.418, -22.113)), (' A 118  LEU  O  ', ' A 122  GLN  HG3', -0.559, (-23.11, 53.586, -21.53)), (' B 314  THR  O  ', ' B 314  THR HG23', -0.558, (16.966, 53.547, -44.906)), (' B 292  THR HG22', ' B 294  MET  CE ', -0.557, (-1.478, 24.011, -54.268)), (' A 291  LEU HD12', ' A 292  THR  H  ', -0.551, (-30.155, 62.264, -32.039)), (' A   7  LYS  HG2', ' A   7  LYS  O  ', -0.551, (9.028, 61.897, -0.403)), (' B 171  THR  OG1', ' B 207  MET  HE1', -0.549, (-6.001, 39.312, -32.835)), (' A   6  ILE HG13', ' A   7  LYS  H  ', -0.545, (11.012, 63.16, -1.402)), (' A 274  TYR  OH ', ' A 801  GRM  H9A', -0.541, (-18.322, 47.635, -36.22)), (' B 185  VAL  O  ', ' B 236  VAL HG13', -0.539, (8.704, 51.695, -35.653)), (' B 209  MET  HE1', ' B 248  PRO  HD3', -0.536, (-9.294, 43.08, -42.411)), (' A 251  GLU  HG3', ' A 298  LYS  HZ3', -0.53, (-33.19, 49.443, -45.819)), (' A  45  ILE  CG2', ' A  46  LYS  N  ', -0.53, (13.585, 63.594, -15.571)), (' A 184  ARG  NH1', ' A 319  HOH  O  ', -0.528, (-25.954, 33.198, -28.755)), (' A  23  ASP  OD1', ' A  25  SER  HB2', -0.524, (20.97, 59.657, -7.894)), (' A 291  LEU HD12', ' A 292  THR  N  ', -0.522, (-29.867, 62.636, -31.425)), (' A 170  MET  HE3', ' A 174  LEU HD11', -0.519, (-21.537, 42.497, -24.787)), (' B 222  SER  N  ', ' B 323  HOH  O  ', -0.518, (-1.565, 52.506, -47.096)), (' A  13  ASP  O  ', ' A  14  ASN  CB ', -0.517, (-5.288, 53.516, -8.684)), (' A  48  HIS  H  ', ' A  51  HIS  CE1', -0.513, (10.722, 65.464, -11.363)), (' B 292  THR  CG2', ' B 293  LYS  N  ', -0.51, (-0.887, 21.707, -54.4)), (' B 223  ILE  O  ', ' B 231  ALA  HB3', -0.51, (-2.965, 57.892, -43.098)), (' A 314  THR  C  ', ' A 315  ILE HG22', -0.509, (-41.576, 25.945, -27.935)), (' A 241  SER  HA ', ' A 308  GLU  O  ', -0.506, (-32.244, 40.313, -18.48)), (' A   6  ILE  CG1', ' A   7  LYS  H  ', -0.506, (11.603, 62.673, -1.18)), (' A 225  CYS  C  ', ' A 227  CYS  N  ', -0.504, (-24.963, 20.143, -43.311)), (' A  27  THR  HB ', ' A  44  LYS  HA ', -0.503, (14.7, 58.483, -16.91)), (' A   6  ILE  CG1', ' A   7  LYS  N  ', -0.499, (11.591, 62.959, -1.673)), (' B 292  THR  CG2', ' B 294  MET  CE ', -0.498, (-1.883, 24.076, -54.411)), (' B 159  THR HG22', ' B 160  VAL  O  ', -0.497, (-20.139, 24.318, -31.395)), (' B 279  ALA  C  ', ' B 280  LYS  HD3', -0.495, (7.218, 24.872, -46.498)), (' A 218  LYS  HE2', ' A 311  TYR  CE1', -0.492, (-38.353, 33.955, -26.298)), (' B  82  GLY  O  ', ' B  86  SER  HB2', -0.49, (-18.556, 22.44, -21.845)), (' A 253  LYS  HD2', ' A 296  GLU  OE2', -0.488, (-40.281, 51.155, -40.821)), (' A 227  CYS  SG ', ' A 229  ARG  CB ', -0.485, (-29.107, 19.367, -45.617)), (' A   6  ILE HG13', ' A  52  GLU  HB3', -0.484, (10.399, 63.655, -2.53)), (' B 294  MET  SD ', ' B 297  TYR  HB2', -0.484, (-0.52, 28.062, -54.592)), (' B  96  PHE  HA ', ' B 104  SER  O  ', -0.484, (-5.397, 16.67, -37.746)), (' B 137  TYR  HB2', ' B 148  PHE  CE1', -0.482, (-0.567, 24.956, -27.644)), (' B 192  HIS  CD2', ' B 192  HIS  N  ', -0.482, (-0.835, 68.048, -41.833)), (' A 209  MET  CE ', ' A 247  ALA  HA ', -0.481, (-23.997, 38.697, -38.233)), (' B 187  ASN  O  ', ' B 233  GLN  HA ', -0.481, (3.716, 55.544, -40.394)), (' A  62  ASP  C  ', ' A  62  ASP  OD1', -0.48, (6.669, 42.748, -6.584)), (' B 190  CYS  SG ', ' B 191  LYS  N  ', -0.479, (-0.929, 65.556, -42.669)), (' B 265  TYR  CE1', ' B 801  GRM  H9A', -0.478, (-13.656, 33.346, -43.24)), (' B 190  CYS  HB3', ' B 193  CYS  SG ', -0.478, (-0.626, 65.744, -39.718)), (' A 229  ARG  HG3', ' A 229  ARG  NH1', -0.476, (-30.079, 18.227, -47.093)), (' A 236  VAL  HA ', ' A 313  THR  CG2', -0.476, (-37.308, 26.75, -26.789)), (' A   4  LYS  HD2', ' A   5  THR  H  ', -0.476, (19.241, 63.444, -0.978)), (' A 229  ARG  HG3', ' A 229  ARG HH11', -0.472, (-29.569, 17.837, -46.722)), (' A 251  GLU  CG ', ' A 298  LYS  HZ3', -0.471, (-32.961, 49.565, -46.41)), (' A 209  MET  CE ', ' A 248  PRO  HD3', -0.469, (-22.779, 38.601, -38.99)), (' B 249  PRO  HD3', ' B 302  THR  CG2', -0.468, (-10.219, 37.666, -45.548)), (' B 244  MET  HE2', ' B 303  ASP  OD1', -0.468, (-4.545, 36.411, -39.467)), (' B 249  PRO  HD3', ' B 302  THR HG22', -0.466, (-9.637, 37.942, -45.343)), (' A   7  LYS  CG ', ' A   7  LYS  O  ', -0.466, (8.723, 61.411, -0.354)), (' A 225  CYS  O  ', ' A 227  CYS  N  ', -0.464, (-24.506, 20.113, -43.822)), (' B 185  VAL  O  ', ' B 236  VAL HG12', -0.464, (8.483, 52.481, -36.13)), (' B 212  LEU  HB2', ' B 330  HOH  O  ', -0.462, (-2.106, 42.155, -48.533)), (' B 185  VAL HG12', ' B 236  VAL HG13', -0.461, (9.265, 52.586, -34.576)), (' B 184  ARG  HD2', ' B 200  LEU HD12', -0.459, (2.486, 47.977, -33.888)), (' A 225  CYS  C  ', ' A 227  CYS  H  ', -0.456, (-25.235, 20.087, -42.809)), (' A  96  PHE  CD1', ' A 145  ALA  HB3', -0.456, (-16.247, 59.683, -21.356)), (' A 313  THR  HG1', ' A 315  ILE HG22', -0.451, (-40.566, 27.011, -27.888)), (' B 188  VAL  HA ', ' B 232  THR  O  ', -0.449, (3.122, 57.584, -40.921)), (' B 252  TYR  O  ', ' B 298  LYS  HA ', -0.448, (-2.222, 34.763, -54.916)), (' A 173  LEU  HA ', ' A 173  LEU HD23', -0.447, (-14.015, 44.055, -21.219)), (' A 250  ALA  O  ', ' A 300  PRO  HA ', -0.446, (-27.949, 47.479, -42.392)), (' A 208  TYR  OH ', ' A 233  GLN  NE2', -0.445, (-27.992, 31.025, -34.797)), (' A 209  MET  HE3', ' A 210  GLY  N  ', -0.442, (-24.662, 36.951, -37.135)), (' A 238  GLN  HB3', ' A 311  TYR  HB3', -0.442, (-35.047, 33.643, -23.057)), (' A  16  ASN HD22', ' A  68  GLU  HG2', -0.44, (-2.478, 46.771, -4.135)), (' A 283  LEU  HB2', ' A 294  MET  HG2', -0.44, (-35.664, 57.657, -34.286)), (' B 173  LEU  N  ', ' B 173  LEU HD23', -0.439, (-6.102, 32.593, -28.108)), (' B 188  VAL HG12', ' B 196  LYS  O  ', -0.438, (3.774, 58.47, -35.853)), (' A  51  HIS  O  ', ' A  54  LYS  HB2', -0.438, (5.752, 63.877, -6.707)), (' A   6  ILE HG13', ' A  52  GLU  CB ', -0.438, (10.298, 63.731, -2.253)), (' A 189  VAL HG22', ' A 195  GLN  CG ', -0.437, (-34.395, 18.74, -33.956)), (' B 223  ILE HG13', ' B 231  ALA  HB3', -0.437, (-2.62, 57.799, -42.242)), (' B 280  LYS  CB ', ' B 281  GLU  OE1', -0.436, (8.819, 21.859, -48.592)), (' A 269  TYR  CD1', ' A 801  GRM  H5 ', -0.436, (-15.527, 45.337, -41.321)), (' A 190  CYS  HB3', ' A 193  CYS  HB2', -0.433, (-29.253, 17.593, -39.57)), (' B  89  ASN  O  ', ' B  92  LYS  HE2', -0.433, (-15.611, 13.194, -27.166)), (' A  57  PHE  O  ', ' A  58  VAL HG13', -0.432, (5.368, 53.995, -11.535)), (' B 236  VAL  HA ', ' B 313  THR  HB ', -0.432, (11.891, 51.653, -39.276)), (' A 269  TYR  CD2', ' B 248  PRO  HG3', -0.431, (-11.965, 44.15, -43.577)), (' A  13  ASP  O  ', ' A  14  ASN  HB3', -0.429, (-5.603, 53.14, -8.159)), (' A 269  TYR  HE2', ' B 209  MET  HE2', -0.429, (-10.508, 43.557, -40.903)), (' B 120  ALA  O  ', ' B 124  LEU  HG ', -0.429, (2.702, 29.423, -36.435)), (' A 168  GLU  O  ', ' A 171  THR  HB ', -0.428, (-14.963, 40.962, -28.589)), (' A  23  ASP  OD1', ' A  25  SER  N  ', -0.428, (20.4, 60.585, -7.583)), (' B 217  LEU  O  ', ' B 234  TYR  HA ', -0.428, (5.695, 50.857, -42.448)), (' B 283  LEU  HB2', ' B 294  MET  O  ', -0.427, (3.853, 26.296, -53.817)), (' B 191  LYS  HG2', ' B 192  HIS  N  ', -0.426, (-0.396, 69.003, -43.377)), (' A  23  ASP  N  ', ' A  31  GLN  OE1', -0.426, (16.155, 57.981, -6.289)), (' B 244  MET  HE3', ' B 305  PHE  CZ ', -0.425, (-2.436, 34.617, -38.462)), (' A 186  LEU HD12', ' A 200  LEU HD11', -0.424, (-25.958, 28.277, -29.192)), (' A  70  PHE  CZ ', ' B  70  PHE  CZ ', -0.424, (-5.525, 35.286, -11.611)), (' A 265  TYR  CZ ', ' A 272  GLY  HA3', -0.422, (-17.195, 52.198, -41.345)), (' A  60  PRO  HA ', ' A  65  LEU  HB3', -0.416, (4.311, 46.009, -9.861)), (' A 280  LYS  HB2', ' A 284  TYR  CE1', -0.415, (-35.589, 59.024, -26.964)), (' A  65  LEU  HA ', ' A  65  LEU HD23', -0.415, (2.197, 46.187, -6.445)), (' A 313  THR  HG1', ' A 314  THR  N  ', -0.415, (-41.013, 27.687, -27.279)), (' B 166  VAL HG23', ' B 274  TYR  CZ ', -0.414, (-9.608, 31.576, -40.233)), (' A  73  TYR  HB2', ' A  75  THR HG22', -0.413, (-4.842, 43.498, -14.766)), (' A 308  GLU  HG3', ' A 309  THR  N  ', -0.413, (-34.392, 38.013, -19.739)), (' A  84  TYR  CD2', ' A  85  MET  HE2', -0.412, (-3.576, 52.948, -16.75)), (' A 256  GLN  OE1', ' A 282  THR  HA ', -0.41, (-40.226, 56.561, -30.001)), (' B 158  LYS  HB3', ' B 158  LYS  HE3', -0.409, (-16.651, 29.222, -31.756)), (' A  23  ASP  OD1', ' A  25  SER  CB ', -0.409, (21.154, 59.911, -7.768)), (' B  60  PRO  HB2', ' B  66  ARG  HA ', -0.408, (-10.986, 26.23, -8.068)), (' B 221  VAL  CG2', ' B 223  ILE HG23', -0.407, (-0.9, 52.779, -42.968)), (' A  44  LYS  HB3', ' A  44  LYS  HE2', -0.406, (16.11, 59.183, -20.393)), (' B 265  TYR  OH ', ' B 268  ASN  O  ', -0.406, (-16.945, 33.774, -44.902)), (' A 158  LYS  HB3', ' A 158  LYS  HE2', -0.405, (-8.508, 49.66, -30.803)), (' A 212  LEU HD21', ' A 302  THR  O  ', -0.404, (-25.892, 43.722, -36.113)), (' A 313  THR  OG1', ' A 314  THR  O  ', -0.403, (-40.568, 27.313, -28.405)), (' A 120  ALA  O  ', ' A 124  LEU  HG ', -0.402, (-26.185, 48.786, -22.541)), (' B 203  VAL HG12', ' B 207  MET  HE2', -0.402, (-3.474, 41.076, -31.67)), (' B  81  LEU  HA ', ' B  81  LEU HD12', -0.4, (-12.691, 23.731, -18.294))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
