# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  89  ASN  OD1', ' A  90  LYS  NZ ', -1.005, (-14.656, -16.753, -37.681)), (' B  28  TYR  HH ', ' B  51  HIS  HD1', -0.738, (-1.647, 21.926, -1.372)), (' D  48  HIS  ND1', ' D  50  ASN  OD1', -0.732, (-18.496, 60.455, 8.315)), (' D 158  LYS  NZ ', ' D 163  LEU  O  ', -0.697, (-0.492, 55.104, -23.941)), (' B 253  LYS  NZ ', ' B 255  GLN  OE1', -0.655, (-2.953, -3.587, -58.46)), (' D  66  ARG  HA ', ' D  69  ALA  HB3', -0.613, (8.921, 51.554, 0.676)), (' A 153  ARG  NH1', ' B 168  GLU  HB2', -0.607, (-15.152, -1.715, -31.926)), (' A 136  PRO  HG2', ' A 139  GLU  HG3', -0.601, (-35.835, -0.117, -26.791)), (' D 127  LYS  HD3', ' D 128  PHE  N  ', -0.599, (4.622, 35.436, -10.115)), (' B   2  GLU  N  ', ' B 502  HOH  O  ', -0.599, (-7.707, 30.901, 14.484)), (' D  29  GLY  N  ', ' D  43  THR  O  ', -0.593, (-4.245, 65.269, 4.687)), (' D 152  ILE HG12', ' D 173  LEU HD11', -0.592, (0.046, 44.775, -15.259)), (' C  88  ASN HD21', ' C  92  ARG  HB3', -0.588, (12.83, 55.517, -44.509)), (' B 281  GLU  OE2', ' B 284  TYR  OH ', -0.586, (7.034, 11.241, -48.994)), (' D   5  THR HG22', ' D  24  MET  H  ', -0.581, (-8.856, 64.035, 17.25)), (' B 127  LYS  NZ ', ' B 503  HOH  O  ', -0.581, (-14.474, 25.106, -38.807)), (' D 264  GLU  HG3', ' D 297  TYR  OH ', -0.581, (-8.475, 42.105, -35.755)), (' B 114  LEU HD11', ' B 153  LEU HD21', -0.574, (-5.381, 4.303, -25.95)), (' D  23  ASP  OD2', ' D  25  SER  N  ', -0.565, (-8.572, 66.884, 15.768)), (' B 278  THR HG23', ' B 284  TYR  HB2', -0.56, (1.958, 7.499, -46.294)), (' D  23  ASP  N  ', ' D  31  GLN HE22', -0.548, (-5.359, 63.513, 14.147)), (' B  90  HIS  HB2', ' B 160  VAL HG21', -0.533, (-0.934, 5.768, -19.83)), (' D 124  LEU  HB2', ' D 126  VAL HG23', -0.531, (2.419, 33.716, -18.759)), (' C 115  GLU  HG3', ' C 150  MET  HE1', -0.525, (13.465, 57.36, -39.194)), (' D  83  ARG  NH2', ' D 154  ALA  O  ', -0.522, (5.15, 53.83, -12.093)), (' A 102  GLN HE22', ' A 110  GLN HE22', -0.516, (-32.37, -12.451, -25.003)), (' B   7  LYS  HB3', ' D 138  TYR  CZ ', -0.508, (-6.504, 32.226, -3.306)), (' D  50  ASN  O  ', ' D  52  GLU  HG2', -0.505, (-15.272, 54.487, 9.923)), (' D 128  PHE  HA ', ' D 177  ALA  HA ', -0.502, (6.494, 37.934, -12.285)), (' B  73  TYR  CZ ', ' B  81  LEU HD21', -0.499, (-12.5, 16.131, -17.918)), (' D 171  THR  O  ', ' D 175  GLN  HG2', -0.496, (9.512, 44.945, -18.691)), (' D  23  ASP  O  ', ' D  31  GLN  NE2', -0.495, (-6.794, 64.713, 13.06)), (' B 171  THR  O  ', ' B 175  GLN  HG2', -0.492, (-19.024, 7.198, -31.798)), (' D  67  SER  O  ', ' D  71  GLU  HB2', -0.488, (10.447, 45.78, 2.146)), (' B 256  GLN  HG3', ' B 283  LEU  HG ', -0.48, (0.992, 3.619, -53.02)), (' D  38  ASP  N  ', ' D  38  ASP  OD1', -0.475, (-10.012, 54.515, 0.089)), (' D  12  VAL HG21', ' D  69  ALA  HB2', -0.472, (5.887, 51.16, 1.655)), (' C 119  ASP  HA ', ' C 122  PHE  CE1', -0.47, (10.839, 60.258, -32.206)), (' A 157  AYE  H3A', ' B 112  CYS  HB3', -0.465, (1.573, -1.119, -31.972)), (' A 137  LEU  HB3', ' A 142  LEU HD12', -0.455, (-34.488, -6.869, -29.894)), (' D  59  LEU  HA ', ' D  81  LEU HD23', -0.455, (2.633, 55.73, 0.042)), (' A 119  ASP  HA ', ' A 122  PHE  CE1', -0.455, (-19.749, -10.977, -26.297)), (' D  77  ASP  OD1', ' D  83  ARG  NH1', -0.451, (6.971, 56.73, -9.808)), (' C 157  AYE  H3A', ' D 112  CYS  HB3', -0.449, (-10.957, 49.454, -25.713)), (' D  79  SER  O  ', ' D  83  ARG  HG3', -0.449, (3.954, 57.992, -8.682)), (' D  81  LEU  O  ', ' D  85  MET  HG2', -0.449, (-0.702, 55.381, -3.95)), (' D 114  LEU HD11', ' D 153  LEU HD21', -0.449, (-3.723, 51.8, -17.768)), (' D  15  THR  OG1', ' D  16  ASN  OD1', -0.443, (2.516, 44.215, 5.995)), (' D  66  ARG  HD2', ' D  66  ARG  N  ', -0.439, (10.109, 53.87, 3.554)), (' D 173  LEU  HA ', ' D 173  LEU HD23', -0.439, (5.091, 44.453, -14.908)), (' D  95  LYS  HB2', ' D 106  LYS  HD3', -0.438, (-18.209, 47.416, -16.359)), (' D 265  TYR  CZ ', ' D 272  GLY  HA3', -0.435, (-4.788, 51.974, -32.865)), (' B 148  PHE  CE2', ' B 152  ILE HD11', -0.435, (-7.208, 11.318, -30.787)), (' D 166  VAL HG11', ' D 263  ASN  ND2', -0.433, (-1.809, 42.794, -26.295)), (' B 141  ARG  HB2', ' B 141  ARG  HE ', -0.433, (-2.672, 20.182, -34.969)), (' B 256  GLN  NE2', ' B 295  SER  O  ', -0.432, (2.479, 2.262, -55.385)), (' D 148  PHE  CE2', ' D 152  ILE HD11', -0.431, (-2.175, 42.95, -14.429)), (' A 157  AYE  H3 ', ' B 110  ASN  HA ', -0.429, (1.025, -2.333, -28.691)), (' D  96  PHE  CD1', ' D 145  ALA  HB3', -0.425, (-10.289, 43.839, -13.291)), (' A 105  ALA  HB2', ' A 133  ASP  HB3', -0.417, (-25.58, -4.694, -22.645)), (' A 123  TRP  CE3', ' A 153  ARG  HG2', -0.413, (-16.329, -5.702, -32.281)), (' A 119  ASP  N  ', ' A 119  ASP  OD1', -0.412, (-19.212, -11.796, -23.447)), (' B 285  ARG  HB2', ' B 294  MET  HE1', -0.411, (4.455, 0.487, -46.006)), (' B 207  MET  HE3', ' B 244  MET  SD ', -0.409, (-14.96, 3.387, -38.761)), (' D 211  THR  O  ', ' D 245  MET  HB3', -0.407, (6.103, 37.724, -34.41)), (' D 243  VAL HG22', ' D 306  TYR  HB2', -0.404, (5.365, 31.207, -28.86)), (' B 165  ASP  HB3', ' B 168  GLU  HB3', -0.404, (-12.541, -1.526, -31.368)), (' B  12  VAL HG12', ' B  58  VAL  O  ', -0.403, (-13.148, 18.816, -11.421)), (' D 294  MET  HE1', ' D 297  TYR  HD1', -0.403, (-12.772, 37.49, -36.935)), (' D 129  ASN  OD1', ' D 178  ASN  HB2', -0.4, (9.722, 36.32, -10.646))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
