# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 491 ', 'GLY', 0.04824901619696499, (-1.7240000000000002, -2.17, -2.131)), ('A', ' 636 ', 'SER', 0.01415286987863223, (14.554999999999998, -12.945999999999998, 12.137000000000004)), ('B', ' 398 ', 'THR', 0.018791450949269893, (-25.642, 12.117, -10.298)), ('B', ' 491 ', 'GLY', 0.04682804413963705, (-35.878, 11.975999999999999, -35.934)), ('B', ' 636 ', 'SER', 0.015266445450973595, (-19.57199999999999, 22.147, -50.661)), ('C', ' 408 ', 'THR', 0.023009222452618723, (-52.52999999999998, 46.149, -58.113)), ('C', ' 409 ', 'ASN', 0.0, (-51.483000000000004, 44.034, -60.54600000000001)), ('C', ' 491 ', 'GLY', 0.07186404993169795, (-55.69099999999999, 23.23999999999999, -45.306)), ('C', ' 636 ', 'SER', 0.017274659936790757, (-71.48200000000003, 13.444000000000003, -29.97)), ('D', ' 406 ', 'PHE', 0.005081327183753868, (-24.71, -37.611, 20.139)), ('D', ' 410 ', 'LYS', 0.01303422523015179, (-15.016, -31.741, 21.081)), ('D', ' 491 ', 'GLY', 0.06694215935979016, (-21.619000000000007, -13.75, 7.006)), ('D', ' 636 ', 'SER', 0.01788237901096785, (-37.245, -3.483, -8.204))]
data['omega'] = [('A', ' 398 ', 'THR', None, (8.857999999999999, -2.792000000000001, -25.73400000000001)), ('A', ' 442 ', 'PRO', None, (-19.707, 12.874000000000004, -2.144)), ('A', ' 491 ', 'GLY', None, (-2.228, -0.806, -2.2150000000000003)), ('B', ' 442 ', 'PRO', None, (-53.92799999999998, -3.018, -35.642)), ('B', ' 491 ', 'GLY', None, (-36.399, 10.620000000000001, -35.822)), ('C', ' 409 ', 'ASN', None, (-52.727999999999994, 44.152, -59.76)), ('C', ' 442 ', 'PRO', None, (-40.66799999999999, 18.759999999999994, -63.015000000000015)), ('C', ' 491 ', 'GLY', None, (-55.425, 23.06, -46.729)), ('D', ' 407 ', 'LEU', None, (-23.344, -39.172, 18.778)), ('D', ' 442 ', 'PRO', None, (-6.561000000000003, -9.593, 24.719)), ('D', ' 491 ', 'GLY', None, (-21.362, -13.614, 8.435))]
data['rota'] = [('A', ' 396 ', 'GLU', 0.0, (10.132000000000001, 1.322, -22.056)), ('A', ' 397 ', 'VAL', 0.010821273779212947, (10.649999999999999, -1.3860000000000006, -24.741)), ('A', ' 399 ', 'THR', 0.09035409045290128, (5.886000000000001, 0.06599999999999984, -25.813)), ('A', ' 402 ', 'GLU', 0.0, (4.757000000000001, 8.651, -25.883)), ('A', ' 407 ', 'LEU', 0.1352013070913051, (-3.418, 4.936999999999999, -30.041000000000007)), ('A', ' 472 ', 'SER', 0.1773725271285537, (-14.699000000000002, -6.448, -12.342)), ('A', ' 482 ', 'GLU', 0.10725756434712393, (-8.726000000000003, 2.2939999999999996, -25.385)), ('A', ' 497 ', 'LEU', 0.09924255090155737, (-1.2930000000000001, -7.558, -9.050000000000002)), ('A', ' 502 ', 'THR', 0.24788169314503963, (-7.456000000000002, -10.494, -14.420000000000003)), ('A', ' 513 ', 'VAL', 0.2936952188592873, (-0.9359999999999986, -0.7349999999999999, -18.365)), ('A', ' 525 ', 'ILE', 0.19653154963572267, (16.859, -3.746, -0.116)), ('A', ' 544 ', 'ARG', 0.0026664993527095327, (16.016, 8.535000000000002, 18.427)), ('A', ' 554 ', 'ARG', 0.1934537428991714, (3.6409999999999982, -10.660999999999998, 25.645)), ('A', ' 593 ', 'ILE', 0.09447176154209766, (0.8850000000000007, 1.9970000000000008, 7.8610000000000015)), ('A', ' 598 ', 'SER', 0.1590167458964777, (1.376999999999999, 10.512, 8.147)), ('A', ' 599 ', 'LEU', 0.043814837524843026, (3.981, 10.817999999999996, 10.945)), ('A', ' 623 ', 'CYS', 0.0990741884331597, (1.884999999999999, -4.423, 2.982)), ('A', ' 636 ', 'SER', 0.01628928134798998, (14.554999999999998, -12.945999999999998, 12.137000000000004)), ('A', ' 643 ', 'THR', 0.03457500019470644, (13.606999999999994, -13.905999999999997, 1.15)), ('B', ' 396 ', 'GLU', 0.0, (-24.128, 8.788, -15.767)), ('B', ' 397 ', 'VAL', 0.004306347541441302, (-23.134999999999998, 11.334, -13.082000000000003)), ('B', ' 402 ', 'GLU', 0.0, (-29.537999999999986, 1.5619999999999994, -11.869)), ('B', ' 407 ', 'LEU', 0.134821960488807, (-37.74899999999999, 5.307, -7.816)), ('B', ' 472 ', 'SER', 0.18039374753756607, (-48.862, 16.449999999999992, -25.76)), ('B', ' 482 ', 'GLU', 0.10553354190373493, (-42.992, 7.9190000000000005, -12.566)), ('B', ' 497 ', 'LEU', 0.10390612829051958, (-35.404, 17.46900000000001, -29.106)), ('B', ' 502 ', 'THR', 0.24363866165167852, (-41.599, 20.516000000000002, -23.771)), ('B', ' 525 ', 'ILE', 0.18832545068225964, (-17.179, 13.322000000000001, -38.152)), ('B', ' 544 ', 'ARG', 0.001707560591061231, (-18.351000000000003, 0.5049999999999955, -56.378000000000014)), ('B', ' 554 ', 'ARG', 0.009711899895523585, (-30.533999999999992, 19.621, -64.036)), ('B', ' 593 ', 'ILE', 0.09952903345198921, (-33.33299999999999, 7.509, -45.861)), ('B', ' 598 ', 'SER', 0.15568438906808, (-32.923, -1.0160000000000018, -45.907)), ('B', ' 599 ', 'LEU', 0.04096035198523168, (-30.342, -1.437000000000002, -48.707)), ('B', ' 623 ', 'CYS', 0.10645217101005135, (-32.26, 14.05, -41.138)), ('B', ' 636 ', 'SER', 0.009908516519522991, (-19.57199999999999, 22.147, -50.661)), ('B', ' 643 ', 'THR', 0.03227787678541127, (-20.402, 23.431999999999995, -39.68500000000002)), ('C', ' 402 ', 'GLU', 0.0, (-61.86800000000001, 41.657, -59.689)), ('C', ' 407 ', 'LEU', 0.14045707732572396, (-55.28799999999999, 48.224, -56.271)), ('C', ' 450 ', 'THR', 0.2956630834050359, (-43.188, 34.155, -63.478000000000016)), ('C', ' 472 ', 'SER', 0.18868257042188566, (-40.771, 31.543999999999997, -44.676)), ('C', ' 482 ', 'GLU', 0.0845226561790625, (-46.784, 44.29799999999999, -54.05600000000001)), ('C', ' 497 ', 'LEU', 0.0843553637788115, (-54.017, 30.613000000000003, -40.833)), ('C', ' 502 ', 'THR', 0.23213254177488446, (-46.751000000000005, 35.20199999999999, -39.792)), ('C', ' 525 ', 'ILE', 0.20955757830731378, (-74.01000000000002, 24.938999999999997, -40.06000000000002)), ('C', ' 544 ', 'ARG', 0.001774290424068341, (-78.59399999999997, 5.480999999999998, -49.731)), ('C', ' 554 ', 'ARG', 0.07528150164753508, (-63.55900000000001, -1.901000000000002, -32.55700000000001)), ('C', ' 593 ', 'ILE', 0.09318069774627008, (-60.882, 13.721000000000002, -47.81000000000002)), ('C', ' 598 ', 'SER', 0.15492250148590572, (-63.322, 12.704000000000002, -55.939000000000014)), ('C', ' 599 ', 'LEU', 0.04213321536468013, (-66.355, 10.427999999999999, -55.352)), ('C', ' 623 ', 'CYS', 0.09432501671459553, (-59.68299999999999, 19.288000000000004, -41.955)), ('C', ' 636 ', 'SER', 0.01071998049155809, (-71.48200000000003, 13.444000000000003, -29.97)), ('C', ' 643 ', 'THR', 0.036055880912966416, (-68.744, 24.124, -30.722)), ('D', ' 472 ', 'SER', 0.19449492461235127, (-6.712000000000003, -22.047, 6.176000000000001)), ('D', ' 482 ', 'GLU', 0.11588370838017956, (-12.632000000000001, -35.008, 15.341000000000001)), ('D', ' 497 ', 'LEU', 0.09094098100912323, (-19.962, -21.036, 2.4040000000000004)), ('D', ' 502 ', 'THR', 0.23739337745349057, (-12.713000000000003, -25.632, 1.262)), ('D', ' 525 ', 'ILE', 0.23347723759807779, (-39.87600000000001, -15.284, 1.4950000000000003)), ('D', ' 544 ', 'ARG', 0.0019859758944728257, (-44.518, 3.826, 11.773)), ('D', ' 554 ', 'ARG', 0.0, (-29.404999999999994, 11.957999999999997, -4.904)), ('D', ' 593 ', 'ILE', 0.09288734680063106, (-26.78000000000001, -4.279, 9.699)), ('D', ' 598 ', 'SER', 0.15119403691523378, (-29.267, -3.5389999999999984, 17.845)), ('D', ' 599 ', 'LEU', 0.047643898350699765, (-32.301, -1.2499999999999991, 17.323)), ('D', ' 623 ', 'CYS', 0.09637205180084128, (-25.537, -9.673, 3.691)), ('D', ' 636 ', 'SER', 0.03218210513397128, (-37.245, -3.483, -8.204)), ('D', ' 643 ', 'THR', 0.03550018864685002, (-34.493, -14.188, -7.758))]
data['cbeta'] = [('A', ' 513 ', 'VAL', ' ', 0.29116568543799626, (-1.4520000000000004, -2.022000000000001, -17.612)), ('A', ' 600 ', 'ASN', ' ', 0.3533386686198547, (6.656000000000001, 11.351, 7.078)), ('A', ' 649 ', 'THR', ' ', 0.2706577750965794, (12.267000000000001, -6.853, -5.469000000000002)), ('B', ' 397 ', 'VAL', ' ', 0.3475934058217918, (-21.749999999999996, 12.000999999999996, -13.243000000000004)), ('B', ' 398 ', 'THR', ' ', 0.4348150840958175, (-25.776, 13.664, -10.051000000000004)), ('B', ' 513 ', 'VAL', ' ', 0.27657659916363364, (-35.658, 12.088, -20.404)), ('B', ' 600 ', 'ASN', ' ', 0.3478814253072809, (-27.65, -1.870000000000001, -44.84000000000001)), ('B', ' 649 ', 'THR', ' ', 0.2772066240268696, (-21.800000000000004, 16.626, -32.821)), ('C', ' 409 ', 'ASN', ' ', 0.4073372726263326, (-50.41899999999998, 45.13900000000001, -60.379)), ('C', ' 513 ', 'VAL', ' ', 0.272526281867953, (-53.893, 38.221, -47.429)), ('C', ' 600 ', 'ASN', ' ', 0.3450876324443758, (-68.41099999999997, 14.665000000000001, -55.81)), ('C', ' 649 ', 'THR', ' ', 0.278141428116826, (-67.859, 29.699999999999996, -38.702)), ('D', ' 406 ', 'PHE', ' ', 0.3859736440098191, (-26.015, -38.009, 20.922000000000004)), ('D', ' 408 ', 'THR', ' ', 0.25730206021799035, (-18.255, -37.331, 18.169)), ('D', ' 513 ', 'VAL', ' ', 0.27967473571384494, (-19.802000000000003, -28.827, 8.870000000000001)), ('D', ' 600 ', 'ASN', ' ', 0.33855798091668327, (-34.352, -5.5009999999999994, 17.623)), ('D', ' 649 ', 'THR', ' ', 0.27486277772223094, (-33.73, -19.958000000000006, 0.088))]
data['probe'] = [(' C 394  ILE HG12', ' C 404  THR HG21', -0.927, (-59.366, 42.154, -52.691)), (' D 497  LEU  H  ', ' D 652  SER  HB3', -0.642, (-20.923, -19.09, 1.287)), (' A 497  LEU  H  ', ' A 652  SER  HB3', -0.638, (-0.078, -7.517, -6.768)), (' C 497  LEU  H  ', ' C 652  SER  HB3', -0.633, (-55.414, 28.385, -40.5)), (' D 408  THR HG23', ' D 484  ILE HD11', -0.622, (-18.9, -34.78, 17.562)), (' D 417  ILE HD11', ' D 445  VAL HG23', -0.608, (-6.12, -11.433, 13.946)), (' C 417  ILE HD11', ' C 445  VAL HG23', -0.604, (-40.44, 21.21, -52.617)), (' B 497  LEU  H  ', ' B 652  SER  HB3', -0.603, (-34.389, 17.67, -31.798)), (' A 417  ILE HD11', ' A 445  VAL HG23', -0.598, (-18.093, 2.879, -2.995)), (' B 417  ILE HD11', ' B 445  VAL HG23', -0.588, (-52.202, 7.49, -35.584)), (' A 547  MET  HE2', ' A 549  ILE HD11', -0.586, (10.826, -2.662, 18.737)), (' D 547  MET  HE2', ' D 549  ILE HD11', -0.584, (-37.12, 4.433, 1.329)), (' B 547  MET  HE2', ' B 549  ILE HD11', -0.581, (-23.238, 12.247, -57.445)), (' C 547  MET  HE2', ' C 549  ILE HD11', -0.575, (-71.098, 5.036, -39.951)), (' C 394  ILE HG12', ' C 404  THR  CG2', -0.547, (-59.551, 42.72, -52.459)), (' C 408  THR  HA ', ' C 409  ASN  HB2', -0.538, (-51.371, 46.476, -59.757)), (' C 401  LEU HD23', ' C 430  ARG  HE ', -0.531, (-60.65, 36.212, -59.706)), (' A 545  LYS  HG2', ' A 602  PRO  HB2', -0.49, (14.686, 7.263, 12.115)), (' B 545  LYS  HG2', ' B 602  PRO  HB2', -0.484, (-19.609, 1.6, -50.22)), (' C 536  MET  HE2', ' C 547  MET  HE3', -0.48, (-72.667, 7.778, -39.707)), (' C 401  LEU HD21', ' C 428  MET  O  ', -0.478, (-58.394, 35.615, -59.67)), (' D 536  MET  HE2', ' D 547  MET  HE3', -0.475, (-38.513, 2.071, 1.289)), (' C 408  THR HG23', ' C 484  ILE HD11', -0.473, (-52.895, 43.707, -56.832)), (' A 536  MET  HE2', ' A 547  MET  HE3', -0.47, (12.555, -2.598, 17.002)), (' D 545  LYS  HG2', ' D 602  PRO  HB2', -0.47, (-42.094, -1.898, 11.157)), (' D 406  PHE  HA ', ' D 407  LEU  HA ', -0.47, (-22.706, -37.575, 20.481)), (' C 545  LYS  HG2', ' C 602  PRO  HB2', -0.465, (-76.046, 10.944, -49.526)), (' D 488  PRO  HD2', ' D 500  ALA  HB1', -0.456, (-16.297, -22.241, 6.741)), (' B 536  MET  HE2', ' B 547  MET  HE3', -0.454, (-21.487, 11.919, -55.372)), (' C 488  PRO  HD2', ' C 500  ALA  HB1', -0.453, (-50.351, 31.682, -45.209)), (' B 415  ALA  HB2', ' B 421  LEU HD23', -0.452, (-44.422, 0.959, -29.834)), (' C 408  THR  O  ', ' C 484  ILE HD11', -0.452, (-53.593, 43.61, -57.467)), (' A 415  ALA  HB2', ' A 421  LEU HD23', -0.45, (-10.141, 8.726, -8.027)), (' A 551  MET  HG3', ' A 582  PHE  HB3', -0.448, (1.41, -1.118, 22.569)), (' C 461  SER  HB3', ' C 464  ALA  HB3', -0.445, (-45.345, 17.746, -47.888)), (' C 415  ALA  HB2', ' C 421  LEU HD23', -0.445, (-48.616, 26.226, -58.312)), (' A 488  PRO  HD2', ' A 500  ALA  HB1', -0.443, (-5.464, -4.181, -11.351)), (' D 415  ALA  HB2', ' D 421  LEU HD23', -0.442, (-14.567, -17.014, 19.687)), (' B 551  MET  HG3', ' B 582  PHE  HB3', -0.441, (-32.887, 10.196, -60.604)), (' C 551  MET  HG3', ' C 582  PHE  HB3', -0.441, (-62.812, -0.269, -42.857)), (' B 573  ILE HD13', ' B 581  PHE  HD1', -0.44, (-30.731, 2.753, -55.481)), (' D 461  SER  HB3', ' D 464  ALA  HB3', -0.438, (-11.218, -8.455, 9.424)), (' B 461  SER  HB3', ' B 464  ALA  HB3', -0.438, (-47.233, 10.881, -39.343)), (' C 573  ILE HD13', ' C 581  PHE  HD1', -0.437, (-66.062, 4.336, -50.296)), (' A 573  ILE HD13', ' A 581  PHE  HD1', -0.434, (3.569, 6.454, 17.595)), (' D 573  ILE HD13', ' D 581  PHE  HD1', -0.434, (-32.003, 5.001, 12.467)), (' D 490  GLN  HA ', ' D 491  GLY  HA2', -0.434, (-20.542, -15.026, 6.622)), (' D 551  MET  HG3', ' D 582  PHE  HB3', -0.433, (-29.006, 9.796, 5.091)), (' B 490  GLN  HA ', ' B 491  GLY  HA2', -0.427, (-36.852, 12.47, -34.182)), (' B 488  PRO  HD2', ' B 500  ALA  HB1', -0.426, (-39.58, 13.993, -26.912)), (' C 589  VAL HG13', ' C 608  ILE HG22', -0.421, (-60.152, 12.563, -41.921)), (' A 461  SER  HB3', ' A 464  ALA  HB3', -0.42, (-13.015, -1.066, 1.328)), (' A 490  GLN  HA ', ' A 491  GLY  HA2', -0.418, (-2.705, -2.653, -3.894)), (' B 589  VAL HG21', ' B 615  PHE  CE2', -0.418, (-35.168, 16.769, -46.182)), (' A 579  ARG  NH1', ' A 601  GLU  OE2', -0.417, (9.343, 10.173, 16.419)), (' B 579  ARG  NH1', ' B 601  GLU  OE2', -0.413, (-24.967, -0.969, -54.238)), (' D 589  VAL HG13', ' D 608  ILE HG22', -0.412, (-26.028, -2.951, 3.829)), (' B 524  GLU  HG3', ' B 526  LEU  H  ', -0.411, (-16.834, 10.212, -38.454)), (' A 625  ARG HH12', ' A 652  SER  HB2', -0.411, (2.639, -6.595, -5.301)), (' A 524  GLU  HG3', ' A 526  LEU  H  ', -0.411, (17.233, -0.656, 0.252)), (' A 589  VAL HG13', ' A 608  ILE HG22', -0.41, (0.904, -3.908, 9.331)), (' B 620  ALA  O  ', ' B 624  MET  HG2', -0.409, (-28.945, 15.13, -43.642)), (' A 620  ALA  O  ', ' A 624  MET  HG2', -0.407, (5.162, -5.585, 5.406)), (' D 524  GLU  HG3', ' D 526  LEU  H  ', -0.407, (-41.282, -14.892, 3.982)), (' A 397  VAL  HA ', ' A 398  THR  HA ', -0.406, (10.069, -0.8, -26.657)), (' B 444  MET  HG2', ' C 612  THR  HA ', -0.404, (-58.262, 6.176, -34.282)), (' A 444  MET  HG2', ' D 612  THR  HA ', -0.404, (-24.089, 3.717, -3.609)), (' A 589  VAL HG21', ' A 615  PHE  CE2', -0.404, (-1.028, -7.266, 7.979)), (' D 620  ALA  O  ', ' D 624  MET  HG2', -0.402, (-28.536, -8.187, 1.507)), (' C 524  GLU  HG3', ' C 526  LEU  H  ', -0.402, (-75.296, 24.368, -42.549)), (' D 579  ARG  NH1', ' D 601  GLU  OE2', -0.401, (-38.132, 2.684, 14.904)), (' B 589  VAL HG13', ' B 608  ILE HG22', -0.401, (-33.263, 13.334, -47.473))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
