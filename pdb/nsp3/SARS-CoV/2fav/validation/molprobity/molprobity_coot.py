# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  48 ', 'GLY', 0.012173367880898808, (11.698000000000004, 28.702000000000005, 17.643)), ('B', '  49 ', 'GLY', 0.0, (13.444999999999997, 25.433000000000003, 18.253))]
data['omega'] = []
data['rota'] = [('A', '  72 ', 'LEU', 8.50465338862476e-05, (28.497, -20.964, 42.234)), ('A', ' 110 ', 'LEU', 0.04424368080514246, (7.359, -5.18, 43.441)), ('A', ' 138 ', 'LEU', 0.01990160968863186, (5.491, 7.2879999999999985, 43.269)), ('B', '  72 ', 'LEU', 0.23037698364840198, (3.199999999999999, 35.402, 39.28999999999999)), ('B', ' 123 ', 'LEU', 0.1389766787538546, (15.712000000000002, 13.086, 31.791999999999998)), ('B', ' 142 ', 'GLN', 0.10094845445192274, (31.171999999999997, 18.847, 26.281)), ('C', '  15 ', 'ASP', 0.16196500811998502, (9.586, 57.506, -0.5839999999999999)), ('C', ' 122 ', 'ILE', 0.09619555535179236, (19.884, 59.089999999999996, 6.226)), ('C', ' 139 ', 'GLN', 0.0, (6.675, 41.835, 9.265)), ('C', ' 157 ', 'ASN', 0.032072074347017754, (21.713, 39.34, 3.1949999999999994))]
data['cbeta'] = []
data['probe'] = [(' A 159  LYS  HE3', ' A 297W HOH  O  ', -0.908, (13.875, 20.973, 46.016)), (' B 111  LYS  O  ', ' B 115  GLU  HG3', -0.74, (25.775, 23.119, 35.699)), (' C 142  GLN  HG3', ' C 146  GLN  NE2', -0.705, (2.39, 47.379, 7.676)), (' A 102  ASN HD21', ' B   6  GLN  HG2', -0.69, (8.835, 1.463, 28.437)), (' C 157  ASN  H  ', ' C 157  ASN HD22', -0.675, (21.234, 39.583, 5.173)), (' A 142  GLN  HG3', ' A 405W HOH  O  ', -0.664, (3.353, 6.663, 46.361)), (' B 102  ASN  HB3', ' C 132  ILE HD12', -0.615, (22.477, 36.313, 17.751)), (' A  99  PRO  HD2', ' A 110  LEU HD13', -0.613, (9.652, -4.118, 40.947)), (' C  14  THR HG21', ' C 145  VAL HG13', -0.608, (6.541, 51.958, 2.343)), (' B  47 BGLY  O  ', ' B  48 BGLY  O  ', -0.565, (10.971, 27.626, 19.06)), (' A 102  ASN  ND2', ' B   6  GLN  HG2', -0.522, (9.493, 1.166, 28.534)), (' C 157  ASN  N  ', ' C 157  ASN HD22', -0.478, (21.125, 40.048, 4.811)), (' B 142  GLN  HB2', ' B 142  GLN HE21', -0.475, (32.889, 19.098, 24.246)), (' C  64  LYS  HE3', ' C  68  ASP  OD2', -0.466, (36.405, 52.996, 26.245)), (' A   2  GLU  N  ', ' A 303W HOH  O  ', -0.464, (33.975, 6.64, 62.219)), (' B 122  ILE  C  ', ' B 123  LEU HD12', -0.461, (16.546, 12.414, 33.9)), (' B 129  SER  HA ', ' B 133  PHE  HB2', -0.45, (21.295, 28.18, 23.172)), (' B  47 BGLY  O  ', ' B  52  GLY  HA3', -0.449, (9.101, 27.367, 19.115)), (' A 138  LEU HD21', ' A 164  GLN  HG2', -0.448, (3.444, 12.234, 43.179)), (' C 111  LYS  HE2', ' C 115  GLU  OE2', -0.435, (5.141, 54.702, 16.715)), (' B  64  LYS  HA ', ' B  64  LYS  HD3', -0.432, (-0.837, 31.011, 28.039)), (' B  21  CYS  HB2', ' B 162  TYR  CG ', -0.429, (22.21, 11.282, 15.404)), (' C  10  TYR  HB3', ' C  18  ALA  HB1', -0.418, (17.141, 51.282, -2.376)), (' B 123  LEU  N  ', ' B 123  LEU HD12', -0.407, (17.021, 12.871, 33.674)), (' A 107  ILE  O  ', ' A 110  LEU  HB2', -0.406, (5.638, -4.299, 41.398)), (' B  48 AGLY  O  ', ' B  49  GLY  O  ', -0.403, (11.161, 24.994, 18.199)), (' C  54  LEU HD22', ' C  89  LEU HD13', -0.401, (29.306, 47.887, 10.886))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
