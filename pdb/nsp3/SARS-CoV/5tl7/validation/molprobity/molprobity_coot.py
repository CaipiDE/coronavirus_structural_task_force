# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 226 ', 'VAL', 0.08569738850613152, (-27.164, 125.524, 21.459000000000007)), ('D', '  14 ', 'ASN', 0.019755295814797746, (11.762999999999996, 92.217, -2.081))]
data['omega'] = [('D', '   5 ', 'THR', None, (14.319999999999997, 98.444, -26.573))]
data['rota'] = [('A', '  79 ', 'PRO', 0.03454035334133034, (-41.052, 126.978, 41.394)), ('A', ' 104 ', 'THR', 0.2506017577794749, (-33.979000000000006, 113.88400000000003, 44.628)), ('A', ' 132 ', 'LYS', 0.17441222962207586, (-27.617, 115.23200000000003, 50.99)), ('B', '   5 ', 'THR', 0.2224565789093732, (-28.386999999999993, 91.20200000000001, 68.437)), ('B', '  10 ', 'THR', 0.015541384339902571, (-16.772, 100.343, 69.039)), ('B', '  58 ', 'VAL', 0.11322925665480152, (-18.866, 106.98299999999999, 67.901)), ('B', '  61 ', 'SER', 0.13314078880323718, (-23.083000000000006, 115.26999999999998, 69.894)), ('B', '  63 ', 'ASP', 0.09016750948916681, (-21.042, 121.0, 68.612)), ('B', '  64 ', 'THR', 0.22957923530785973, (-17.858, 122.44599999999998, 70.156)), ('B', '  68 ', 'GLU', 0.26389941357910096, (-13.043000000000003, 122.82800000000005, 65.128)), ('B', ' 178 ', 'ASN', 0.018559721028795665, (-5.09, 127.12700000000002, 46.296)), ('B', ' 198 ', 'THR', 0.09915080654330868, (-15.982999999999997, 132.519, 28.264)), ('B', ' 239 ', 'GLU', 0.013792794798153058, (-2.729999999999999, 131.182, 33.833)), ('B', ' 256 ', 'GLN', 0.03118501566348969, (8.004, 111.058, 27.17)), ('B', ' 296 ', 'GLU', 0.28981111055535735, (6.804000000000001, 104.506, 25.42)), ('C', '  80 ', 'LEU', 0.1822223766590183, (11.739, 137.394, -0.232)), ('C', '  86 ', 'ASN', 0.29066243350578064, (29.125999999999994, 130.567, 3.642)), ('C', ' 137 ', 'GLU', 0.12293302155334462, (8.132, 124.715, 3.7160000000000006)), ('D', '   5 ', 'THR', 0.2657882355033016, (13.508999999999997, 98.296, -25.378)), ('D', '   6 ', 'ILE', 0.06019429663771369, (15.183, 96.849, -22.248)), ('D', '   8 ', 'VAL', 0.05438833333968308, (14.304999999999994, 94.395, -16.164)), ('D', '  19 ', 'THR', 0.026836383346822958, (11.147999999999993, 89.447, -15.245)), ('D', ' 111 ', 'ASN', 0.05371501387292167, (28.69600000000001, 102.44800000000001, 2.885)), ('D', ' 156 ', 'SER', 0.22579041353097293, (18.929, 111.513, 4.078000000000001)), ('D', ' 197 ', 'THR', 0.05889459832049955, (25.148999999999994, 135.652, 24.284000000000006)), ('D', ' 211 ', 'THR', 0.13444251409358032, (36.977, 122.62299999999999, 15.976)), ('D', ' 270 ', 'GLN', 0.030514214474891103, (35.415, 114.77699999999999, -3.746))]
data['cbeta'] = []
data['probe'] = [(' D 292  THR HG22', ' D 294  MET  HE2', -0.686, (44.834, 100.394, 15.117)), (' D  83  ARG  NH2', ' D 154  ALA  O  ', -0.682, (15.304, 109.315, 1.948)), (' B  38  ASP  OD1', ' B  90  HIS  NE2', -0.642, (-14.936, 100.068, 57.042)), (' C  86  ASN  HB2', ' C  90  HIS  O  ', -0.642, (28.987, 133.254, 2.751)), (' D   6  ILE HG22', ' D  22  VAL  CG2', -0.634, (13.779, 98.793, -20.486)), (' D 315  ILE  O  ', ' D 316  LYS  CB ', -0.569, (35.538, 134.395, 34.503)), (' D 107  TRP  HA ', ' D 111  ASN HD21', -0.562, (31.374, 98.951, 3.218)), (' B  10  THR HG22', ' B  18  HIS  HB2', -0.557, (-15.918, 99.559, 72.56)), (' D 262  ALA  HB3', ' D 277  ILE  CG2', -0.535, (38.208, 108.736, 16.334)), (' B 141  ARG  NH1', ' B 505  HOH  O  ', -0.533, (6.135, 118.379, 50.228)), (' B 285  ARG  NH1', ' B 504  HOH  O  ', -0.529, (0.365, 96.989, 35.677)), (' A  79  PRO  HD2', ' A  97  PHE  CE2', -0.52, (-42.252, 124.164, 43.665)), (' B 137  TYR  OH ', ' B 501  HOH  O  ', -0.512, (1.317, 118.441, 45.813)), (' B 128  PHE  H  ', ' B 134  GLN  NE2', -0.507, (-1.971, 122.297, 50.583)), (' A  80  LEU  CD1', ' A 142  PRO  HG3', -0.495, (-36.071, 130.113, 38.357)), (' D 111  ASN  C  ', ' D 111  ASN HD22', -0.494, (30.194, 101.495, 3.344)), (' D  96  PHE  CD1', ' D 145  ALA  HB3', -0.488, (23.535, 95.99, 9.403)), (' B 180  GLU  CD ', ' B 180  GLU  H  ', -0.488, (-6.541, 130.624, 45.235)), (' D 264  GLU  O  ', ' D 274  TYR  HA ', -0.478, (36.846, 108.04, 7.441)), (' B  57  PHE  CZ ', ' B  85  MET  HG2', -0.475, (-12.84, 109.28, 65.501)), (' D   6  ILE HG22', ' D  22  VAL HG22', -0.467, (13.45, 98.432, -19.878)), (' D 139  ARG  NH2', ' D 144  ASP  OD2', -0.459, (15.367, 92.459, 11.287)), (' D 265  TYR  HA ', ' D 273  HIS  O  ', -0.445, (37.653, 109.339, 6.003)), (' D  11  THR HG22', ' D  13  ASP  H  ', -0.444, (8.689, 92.845, -3.771)), (' D  99  VAL HG11', ' D 286  ILE HG23', -0.444, (35.376, 97.162, 13.267)), (' D 254  LEU  CD1', ' D 277  ILE HG21', -0.44, (39.781, 108.591, 16.5)), (' D  11  THR HG21', ' D  14  ASN  HA ', -0.439, (11.686, 92.417, -3.657)), (' B 215  ASP  O  ', ' B 219  THR HG23', -0.438, (-4.074, 122.29, 19.784)), (' D 124  LEU HD22', ' D 242  PHE  CG ', -0.428, (26.042, 111.663, 21.621)), (' D 315  ILE  O  ', ' D 316  LYS  HB3', -0.428, (36.018, 134.564, 34.51)), (' B 127  LYS  HD2', ' B 134  GLN  OE1', -0.425, (0.477, 122.567, 51.082)), (' C  79  PRO  HD2', ' C  97  PHE  HE1', -0.417, (9.35, 137.562, -6.498)), (' D  12  VAL  O  ', ' D  12  VAL HG12', -0.409, (5.022, 94.934, -2.796)), (' D 250  ALA  O  ', ' D 300  PRO  HA ', -0.408, (43.016, 114.517, 10.418)), (' B 284  TYR  CD2', ' B 291  LEU HD11', -0.407, (8.367, 102.933, 37.61)), (' D 111  ASN  C  ', ' D 111  ASN  ND2', -0.407, (29.749, 101.564, 3.923)), (' B 223  ILE  O  ', ' B 223  ILE HG13', -0.406, (-19.24, 123.148, 20.274)), (' C 121  TRP  CE2', ' D 168  GLU  HG3', -0.405, (24.643, 118.214, 5.252)), (' B 207  MET  HE3', ' B 244  MET  SD ', -0.405, (-9.159, 116.82, 37.137))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
