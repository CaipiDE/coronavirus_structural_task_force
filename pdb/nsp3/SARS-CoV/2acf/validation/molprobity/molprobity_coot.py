# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 331 ', 'THR', 0.01318455219273617, (47.776, 32.541, 25.830000000000005))]
data['omega'] = []
data['rota'] = [('A', ' 181 ', 'HIS', 0.0, (45.624, 42.18700000000001, 22.29200000000001)), ('A', ' 313 ', 'ILE', 0.2825880709775826, (46.81, 55.858, -11.320000000000004)), ('C', ' 231 ', 'VAL', 0.00727850356947083, (63.586, 21.423000000000005, 36.13500000000001)), ('C', ' 290 ', 'LEU', 0.013089349385975588, (56.683, 38.65, 41.80300000000001)), ('D', ' 181 ', 'HIS', 0.13528840603126388, (30.665, -0.02900000000000001, -22.45)), ('D', ' 357 ', 'ARG', 0.000415668560129061, (62.687, 24.548, 3.423000000000001))]
data['cbeta'] = [('A', ' 338 ', 'ASN', ' ', 0.2598914248376976, (46.03400000000001, 60.778, -0.6100000000000002)), ('C', ' 197 ', 'ASN', ' ', 0.25189657441350954, (44.375, 30.359, 29.207))]
data['probe'] = [(' D 227  HIS  H  ', ' D 244  GLN HE22', -0.845, (23.583, 4.003, 5.481)), (' B 227  HIS  H  ', ' B 244  GLN HE22', -0.819, (35.109, 16.466, 28.651)), (' B 210  GLN  HG3', ' B1205  HOH  O  ', -0.799, (24.471, 27.318, 37.64)), (' A 227 AHIS  H  ', ' A 244  GLN HE22', -0.798, (51.748, 42.835, -6.322)), (' C 227  HIS  H  ', ' C 244  GLN HE22', -0.794, (72.907, 26.423, 33.924)), (' A 227 BHIS  H  ', ' A 244  GLN HE22', -0.793, (51.86, 42.202, -5.994)), (' C 282  LEU  HB3', ' C1011  GOL  H2 ', -0.746, (58.865, 33.028, 50.768)), (' C 286  GLU  OE2', ' C1008  GOL  H12', -0.708, (66.18, 37.312, 43.808)), (' C 289  GLN  HG2', ' C1006  GOL  H32', -0.652, (51.637, 40.028, 44.8)), (' B 318  PRO  HB2', ' B 346 AVAL HG21', -0.636, (12.474, 20.75, 19.657)), (' A 301  GLN  NE2', ' A1087  HOH  O  ', -0.631, (33.675, 39.669, 0.913)), (' A 227 AHIS  H  ', ' A 244  GLN  NE2', -0.628, (52.37, 42.517, -5.999)), (' C 292  LYS  HZ2', ' C1006  GOL  C3 ', -0.625, (50.453, 40.23, 42.879)), (' B1004  GOL  H2 ', ' B1267  HOH  O  ', -0.608, (28.003, 17.313, 23.266)), (' B 227  HIS  HE1', ' B 247  SER  OG ', -0.583, (32.3, 13.813, 32.498)), (' A 227 BHIS  H  ', ' A 244  GLN  NE2', -0.58, (52.296, 42.483, -5.981)), (' C 299  ASN  HB2', ' C1012  GOL  H2 ', -0.575, (52.293, 38.384, 27.737)), (' C 227  HIS  HE1', ' C 247  SER  OG ', -0.575, (70.533, 28.238, 30.18)), (' B 355  LYS  HE3', ' B1201  HOH  O  ', -0.567, (-2.989, 22.189, 16.956)), (' C1005  GOL  H12', ' C1181  HOH  O  ', -0.565, (61.613, 21.841, 41.045)), (' B 284  ALA  HB1', ' B1187  HOH  O  ', -0.559, (29.424, 7.264, 15.325)), (' B1004  GOL  C1 ', ' B1267  HOH  O  ', -0.551, (27.825, 17.115, 22.482)), (' C 301  GLN  NE2', ' C1147  HOH  O  ', -0.536, (58.586, 35.531, 23.744)), (' D 318  PRO  HG2', ' D 342  LEU HD21', -0.521, (37.29, 23.885, 6.2)), (' A 236  ASN HD22', ' A 243  MET  HB3', -0.51, (51.287, 42.746, 0.299)), (' D 355  LYS  O  ', ' D 357  ARG  HD3', -0.505, (59.069, 24.448, 4.054)), (' B 318  PRO  HB2', ' B 346 AVAL  CG2', -0.496, (12.311, 20.545, 19.393)), (' A 248  ASP  OD2', ' A1002  GOL  C1 ', -0.49, (55.2, 36.842, -5.962)), (' B 318  PRO  HG2', ' B 342  LEU HD11', -0.486, (14.451, 21.892, 18.12)), (' D 301  GLN  NE2', ' D1127  HOH  O  ', -0.479, (41.48, -1.863, -0.152)), (' A 253 ALEU  C  ', ' A 253 ALEU HD23', -0.477, (42.673, 28.41, -6.818)), (' D 332  GLN  NE2', ' D1166  HOH  O  ', -0.474, (49.998, 12.159, -7.782)), (' D 227  HIS  H  ', ' D 244  GLN  NE2', -0.474, (22.996, 4.47, 5.502)), (' D 245  LYS  NZ ', ' D1203  HOH  O  ', -0.473, (19.523, -8.812, 1.81)), (' C 286  GLU  OE2', ' C1008  GOL  C1 ', -0.472, (66.403, 37.896, 44.405)), (' A 226 ALYS  NZ ', ' A1002  GOL  H11', -0.471, (54.72, 37.685, -7.5)), (' C 227  HIS  H  ', ' C 244  GLN  NE2', -0.469, (72.939, 25.954, 34.048)), (' C 231 BVAL HG23', ' C 235 BLEU HD13', -0.456, (62.835, 21.413, 32.705)), (' B1004  GOL  C2 ', ' B1267  HOH  O  ', -0.454, (28.1, 17.267, 23.171)), (' D 236  ASN  ND2', ' D 244  GLN  H  ', -0.451, (22.684, 2.479, 0.478)), (' B 227  HIS  H  ', ' B 244  GLN  NE2', -0.451, (34.87, 16.695, 28.885)), (' D 237  LYS  NZ ', ' D1105  HOH  O  ', -0.436, (16.33, 12.796, -1.78)), (' C 222  ASN  ND2', ' C1009  GOL  H2 ', -0.433, (69.005, 28.122, 38.652)), (' B 313  ILE HD11', ' D 313  ILE HD12', -0.428, (28.208, 18.736, 14.056)), (' A 245 BLYS  NZ ', ' A1178  HOH  O  ', -0.428, (55.914, 31.958, -0.192)), (' C 292  LYS  HZ2', ' C1006  GOL  H31', -0.418, (50.828, 39.634, 43.08)), (' D 215 BMET  HE1', ' D 272  LYS  HD2', -0.418, (37.686, -1.672, -11.392)), (' C 235 ALEU  O  ', ' C 239  THR HG23', -0.416, (68.118, 20.34, 28.134)), (' B 314  PHE  CE1', ' B1004  GOL  H11', -0.416, (26.704, 15.323, 22.494)), (' A 245 BLYS  CE ', ' A1178  HOH  O  ', -0.408, (55.611, 32.23, -0.013)), (' A1010  GOL  H31', ' A1029  HOH  O  ', -0.402, (41.386, 57.909, -3.403)), (' C 357  ARG  HB2', ' C1164  HOH  O  ', -0.401, (35.513, 19.724, 46.663))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
