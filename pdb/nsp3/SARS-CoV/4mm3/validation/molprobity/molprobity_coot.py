# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  14 ', 'ASN', 0.011504385329523211, (-30.840000000000003, 24.502, 8.270999999999999)), ('B', '  15 ', 'THR', 0.025153261270371357, (-29.873, 21.837, 5.738)), ('B', '  41 ', 'ASP', 0.03859824028084382, (-40.69, 36.060999999999986, 15.541999999999996)), ('B', ' 315 ', 'ILE', 0.036420145053422774, (-13.591000000000001, -8.398, 44.61999999999999))]
data['omega'] = []
data['rota'] = [('B', '   8 ', 'VAL', 0.15946335536832615, (-36.231, 34.204, 0.46499999999999997)), ('B', '  17 ', 'LEU', 0.1599494113507604, (-34.27, 24.868, 2.1139999999999994)), ('B', '  62 ', 'ASP', 0.2078991321729632, (-47.425999999999995, 18.592, 4.9559999999999995)), ('B', '  78 ', 'GLU', 0.058885356298130805, (-43.94500000000001, 21.193999999999992, 17.896)), ('B', ' 193 ', 'CYS', 0.23322787143565749, (-30.359000000000005, -11.387000000000002, 51.312)), ('B', ' 206 ', 'VAL', 0.2586831080084096, (-22.341, 6.777, 33.081)), ('B', ' 221 ', 'VAL', 0.1764703592281431, (-20.965, 2.381, 48.679999999999986)), ('B', ' 226 ', 'VAL', 0.011638886417010576, (-34.88100000000001, -4.4110000000000005, 51.286)), ('B', ' 236 ', 'VAL', 0.05729526648031826, (-17.809, -4.745, 38.74099999999999)), ('B', ' 269 ', 'TYR', 0.22722959915590818, (-31.108, 25.532999999999998, 49.422)), ('B', ' 294 ', 'MET', 0.16805483842793653, (-4.028000000000003, 26.617000000000008, 41.624)), ('B', ' 302 ', 'THR', 0.008159601566148922, (-21.258, 18.398, 43.139)), ('B', ' 312 ', 'THR', 0.04041818012733154, (-13.168, -4.793, 35.77199999999999)), ('B', ' 316 ', 'LYS', 0.0280713841739839, (-16.219, -11.122, 45.41299999999998))]
data['cbeta'] = []
data['probe'] = [(' B   6  ILE HD13', ' B  47  PRO  HB3', -0.718, (-40.947, 40.418, 1.594)), (' A  73  LEU HD11', ' B 302  THR HG21', -0.682, (-24.848, 19.969, 42.526)), (' B  13  ASP  O  ', ' B  15  THR  N  ', -0.668, (-31.209, 22.298, 7.405)), (' B   1  MET  HG3', ' B   2  GLU  HG2', -0.595, (-43.341, 49.53, -9.95)), (' B 186  LEU HD13', ' B 233  GLN HE21', -0.566, (-25.356, 0.182, 41.256)), (' B  23  ASP  HB2', ' B  26  MET  HG3', -0.563, (-48.811, 39.832, -0.946)), (' B 313  THR  OG1', ' B 315  ILE HG13', -0.555, (-13.917, -5.774, 42.499)), (' B 139  ARG  HB3', ' B 144  ASP  HB3', -0.541, (-20.152, 27.782, 15.39)), (' B  42  VAL HG21', ' B  56  PHE  HE1', -0.541, (-39.669, 36.08, 8.979)), (' A  42  ARG  NH1', ' A 217  HOH  O  ', -0.524, (-31.95, 14.378, 36.045)), (' B 220  GLY  HA2', ' B 233  GLN  O  ', -0.51, (-19.857, -0.877, 46.564)), (' B   3  VAL HG13', ' B   5  THR  H  ', -0.491, (-40.86, 41.387, -6.518)), (' B 139  ARG  NH2', ' B 147  ASN  OD1', -0.49, (-25.274, 29.049, 14.84)), (' B 235  LEU HD21', ' B 238  GLN  HB2', -0.489, (-17.122, 1.111, 35.701)), (' B 133  LEU  O  ', ' B 137  TYR  HB2', -0.481, (-23.431, 19.493, 18.83)), (' B  48  HIS  CG ', ' B  49  VAL  H  ', -0.48, (-36.433, 45.603, 2.999)), (' B 171  THR  O  ', ' B 175  GLN  HG2', -0.477, (-30.301, 13.03, 28.496)), (' A  42  ARG  HD3', ' A  72  ARG  NH2', -0.469, (-35.787, 17.177, 38.776)), (' B   4  LYS  HG3', ' B  24  MET  HE2', -0.468, (-45.846, 44.151, -5.766)), (' B 131  PRO  HA ', ' B 134 AGLN  HG2', -0.467, (-25.519, 16.546, 13.859)), (' B  90  HIS  HB2', ' B 160  VAL HG21', -0.464, (-31.874, 33.929, 25.477)), (' A  41  GLN  HG2', ' A  69  LEU HD11', -0.45, (-38.436, 15.784, 46.635)), (' A  42  ARG  NH2', ' A  52  ASP  OD2', -0.447, (-36.404, 14.145, 37.503)), (' B   6  ILE HG13', ' B   8  VAL HG23', -0.44, (-37.989, 37.33, 0.138)), (' A  23  ILE HG22', ' A  27  LYS  HE3', -0.433, (-40.732, 12.113, 40.247)), (' B 170  MET  HE3', ' B 305  PHE  CZ ', -0.428, (-20.568, 17.027, 32.451)), (' B 151  LEU  HA ', ' B 151  LEU HD23', -0.42, (-31.758, 23.976, 20.485)), (' A  71  LEU  HA ', ' A  71  LEU HD23', -0.419, (-34.367, 18.132, 45.826)), (' B 130  ALA  HA ', ' B 131  PRO  HD3', -0.413, (-30.063, 13.864, 15.272)), (' B 174  LEU HD12', ' B 207  MET  HE2', -0.412, (-25.346, 12.033, 31.3)), (' A  43  LEU  HA ', ' A  43  LEU HD23', -0.412, (-35.598, 11.433, 44.887)), (' B 137  TYR  O  ', ' B 141  ARG  HG3', -0.408, (-18.336, 21.965, 19.016)), (' B 248  PRO  HA ', ' B 249  PRO  HD3', -0.407, (-25.766, 18.223, 45.704)), (' B 294  MET  HG3', ' B 296  GLU  O  ', -0.406, (-6.243, 24.919, 44.38)), (' B 105  ILE  O  ', ' B 288  GLY  HA2', -0.403, (-18.399, 32.079, 31.68)), (' B 165  ASP  O  ', ' B 169  THR  OG1', -0.402, (-29.016, 20.929, 33.962))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
