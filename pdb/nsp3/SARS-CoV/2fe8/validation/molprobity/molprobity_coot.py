# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 269 ', 'TYR', 0.01565403808874445, (-37.181, 51.971999999999994, -27.441000000000006))]
data['omega'] = []
data['rota'] = [('A', '  45 ', 'ILE', 0.03229057069566134, (8.274, 61.512, -19.601000000000003)), ('A', '  81 ', 'LEU', 0.1066568138825533, (-2.153999999999998, 45.67200000000001, -19.901)), ('A', ' 315 ', 'ILE', 0.0, (-33.565, 10.936, -10.630000000000003)), ('B', '  45 ', 'ILE', 0.1522956897068757, (-6.728999999999996, 50.12799999999999, -53.11600000000001)), ('B', ' 251 ', 'GLU', 0.07251275553456492, (-44.81199999999998, 64.493, -17.180000000000003)), ('B', ' 264 ', 'GLU', 0.15751970130809995, (-37.63600000000001, 64.989, -23.290000000000003)), ('B', ' 270 ', 'GLN', 0.007102986295141407, (-39.83299999999999, 51.406, -30.144000000000005)), ('B', ' 285 ', 'ARG', 0.08516504037115269, (-37.982, 72.885, -28.860000000000007)), ('C', '  22 ', 'VAL', 0.18615549743426413, (9.021999999999998, 27.059999999999995, -40.037000000000006)), ('C', '  46 ', 'LYS', 0.1867599534824245, (6.351000000000002, 22.057000000000002, -32.80100000000001)), ('C', ' 173 ', 'LEU', 0.09504972454365865, (-26.492, 39.519, -35.929)), ('C', ' 196 ', 'LYS', 0.0, (-46.15099999999999, 62.283999999999985, -32.678)), ('C', ' 253 ', 'LYS', 0.21950594854259942, (-52.22, 30.495, -32.744)), ('C', ' 255 ', 'GLN', 0.1250712759109283, (-52.27900000000001, 29.836999999999996, -39.111000000000004)), ('C', ' 263 ', 'ASN', 0.21156494849393984, (-40.24299999999999, 30.336, -32.88600000000001)), ('C', ' 269 ', 'TYR', 0.012272354403111157, (-34.97200000000001, 30.564000000000004, -18.377000000000002)), ('C', ' 313 ', 'THR', 0.19696410638756198, (-50.911, 53.714, -44.662))]
data['cbeta'] = []
data['probe'] = [(' C  39  GLY  HA2', ' C  85  MET  HE1', -1.053, (-9.763, 25.865, -36.604)), (' A 188  VAL HG13', ' A 223  ILE HD11', -0.877, (-40.362, 22.556, -16.293)), (' C  39  GLY  HA2', ' C  85  MET  CE ', -0.768, (-9.424, 26.672, -35.705)), (' B 249  PRO  HG3', ' B 302  THR  CG2', -0.746, (-37.43, 60.332, -20.625)), (' B 294  MET  HE2', ' B 296  GLU  O  ', -0.712, (-44.633, 74.88, -24.76)), (' A 229  ARG  HG3', ' A 230  ASP  H  ', -0.71, (-50.451, 23.534, -15.468)), (' A 203  VAL HG12', ' A 207  MET  HE2', -0.706, (-22.945, 32.347, -14.175)), (' A 130  ALA  O  ', ' A 134  GLN  HG3', -0.691, (-3.964, 31.87, -12.757)), (' A 203  VAL  CG1', ' A 207  MET  HE2', -0.689, (-22.596, 32.558, -14.198)), (' B  78  GLU  HG3', ' C  78  GLU  HG3', -0.65, (-6.91, 45.044, -31.168)), (' B 249  PRO  HG3', ' B 302  THR HG22', -0.645, (-37.252, 60.331, -19.638)), (' A  45  ILE HD11', ' A  48  HIS  NE2', -0.637, (11.061, 61.384, -15.849)), (' B 307  LYS  HE3', ' B 441  HOH  O  ', -0.636, (-24.034, 78.553, -19.472)), (' B 270  GLN  HG2', ' C 208  TYR  CE1', -0.635, (-42.68, 48.833, -31.654)), (' C 171  THR  OG1', ' C 207  MET  HE1', -0.632, (-32.988, 42.187, -31.913)), (' A  23  ASP  HB3', ' A  26  MET  CE ', -0.626, (16.174, 57.379, -27.35)), (' A 229  ARG  HG3', ' A 230  ASP  N  ', -0.622, (-49.667, 22.861, -15.242)), (' A 223  ILE HD13', ' A 233  GLN  HB2', -0.616, (-38.557, 23.86, -14.508)), (' B 268  ASN  O  ', ' B 272  GLY  N  ', -0.612, (-39.571, 54.287, -28.325)), (' C 223  ILE HD13', ' C 233  GLN  HB2', -0.593, (-47.333, 53.07, -29.711)), (' B 270  GLN  HG2', ' C 208  TYR  CD1', -0.592, (-42.021, 48.416, -31.97)), (' C 265  TYR  OH ', ' C 272  GLY  HA3', -0.591, (-35.812, 28.783, -22.326)), (' A 237  GLN  HG3', ' A 312  THR HG22', -0.59, (-26.808, 14.429, -8.567)), (' A 191  LYS  HB2', ' A 229  ARG HH12', -0.585, (-50.371, 17.176, -14.943)), (' A  23  ASP  CB ', ' A  26  MET  HE2', -0.579, (16.701, 58.066, -28.15)), (' C 191  LYS  HE3', ' C 229  ARG  HD2', -0.568, (-56.658, 59.904, -22.783)), (' A 204  GLU  HG3', ' A 486  HOH  O  ', -0.56, (-22.661, 28.747, -18.617)), (' C 265  TYR  CZ ', ' C 272  GLY  HA3', -0.555, (-36.507, 28.61, -22.541)), (' C  58  VAL HG22', ' C 386  HOH  O  ', -0.552, (-1.041, 34.322, -35.103)), (' C 191  LYS  HE3', ' C 229  ARG  CD ', -0.551, (-56.823, 60.28, -21.926)), (' B  66  ARG  HD3', ' B 376  HOH  O  ', -0.548, (-2.284, 52.915, -29.184)), (' B 249  PRO  HG3', ' B 302  THR HG21', -0.547, (-36.826, 59.842, -20.647)), (' A 315  ILE  OXT', ' A 315  ILE HD12', -0.544, (-33.006, 11.254, -13.51)), (' A 192  HIS  HB2', ' A 229  ARG HH22', -0.528, (-51.866, 16.63, -17.775)), (' A  45  ILE HG12', ' A  46  LYS  O  ', -0.527, (11.399, 61.04, -18.409)), (' A 134  GLN  HA ', ' A 318   BR BR  ', -0.524, (-5.787, 31.423, -8.971)), (' A  42  VAL  HB ', ' A  45  ILE  CG2', -0.515, (7.396, 58.537, -17.989)), (' A  23  ASP  OD2', ' A  26  MET  HE2', -0.514, (16.788, 58.419, -28.856)), (' A  23  ASP  HB3', ' A  26  MET  HE3', -0.513, (15.402, 57.673, -27.528)), (' B 204  GLU  HG3', ' B 432  HOH  O  ', -0.509, (-17.792, 60.906, -10.263)), (' B  82  GLY  HA3', ' C  76  LEU  CD1', -0.508, (-10.689, 50.246, -36.518)), (' C 157  ASN  HB3', ' C 443  HOH  O  ', -0.507, (-17.587, 38.561, -25.873)), (' C 249  PRO  HG3', ' C 302  THR  CG2', -0.507, (-41.156, 33.443, -25.539)), (' B 283  LEU HD12', ' B 296  GLU  HA ', -0.505, (-42.453, 76.672, -21.97)), (' A  23  ASP  HB3', ' A  26  MET  HE2', -0.503, (16.061, 58.115, -27.807)), (' A 188  VAL  CG1', ' A 223  ILE HD11', -0.5, (-40.266, 22.005, -16.407)), (' B  49  VAL HG13', ' B  52  GLU  OE2', -0.493, (2.665, 61.017, -58.697)), (' B   4  LYS  O  ', ' B  24  MET  HG2', -0.492, (4.524, 53.189, -57.227)), (' C 187  ASN  OD1', ' C 197  THR HG22', -0.49, (-47.88, 59.884, -36.154)), (' B 268  ASN  OD1', ' B 269  TYR  HD1', -0.488, (-37.211, 50.909, -24.485)), (' C 189  VAL HG22', ' C 195  GLN  HB3', -0.486, (-51.686, 61.225, -33.322)), (' C 223  ILE  CD1', ' C 233  GLN  HB2', -0.483, (-47.556, 53.708, -29.128)), (' B 152  ILE HG12', ' B 173  LEU HD11', -0.481, (-20.12, 63.474, -27.008)), (' A  23  ASP  CB ', ' A  26  MET  CE ', -0.478, (16.555, 57.393, -27.694)), (' B 266  THR  O  ', ' B 272  GLY  HA2', -0.476, (-39.347, 57.548, -27.552)), (' B   6  ILE HG13', ' B  22  VAL HG22', -0.471, (3.333, 56.434, -52.423)), (' B 268  ASN  OD1', ' B 269  TYR  N  ', -0.468, (-38.461, 51.937, -25.502)), (' B   4  LYS  C  ', ' B  24  MET  HG2', -0.467, (4.599, 53.589, -57.358)), (' B  78  GLU  HG3', ' C  78  GLU  CG ', -0.466, (-6.406, 44.478, -31.022)), (' B 171  THR  O  ', ' B 175  GLN  HG2', -0.465, (-18.161, 59.988, -17.987)), (' C 249  PRO  HG3', ' C 302  THR HG21', -0.464, (-41.02, 33.17, -25.06)), (' A  42  VAL  O  ', ' A  45  ILE HG22', -0.462, (6.567, 59.15, -18.849)), (' A 137  TYR  CE2', ' A 141  ARG  HD2', -0.458, (-8.726, 32.712, -3.121)), (' C  66  ARG  HD2', ' C 437  HOH  O  ', -0.455, (-1.1, 46.382, -38.537)), (' C 191  LYS  HE3', ' C 229  ARG  CG ', -0.443, (-56.281, 59.53, -21.752)), (' B 148  PHE  CE2', ' B 152  ILE HD11', -0.435, (-20.088, 65.722, -28.991)), (' A  23  ASP  CG ', ' A  26  MET  HE2', -0.435, (16.749, 58.304, -28.172)), (' C  32  PHE  HB3', ' C  58  VAL HG21', -0.435, (1.104, 33.037, -36.917)), (' A 171  THR  O  ', ' A 175  GLN  HG3', -0.435, (-18.572, 34.71, -15.767)), (' C 227  CYS  SG ', ' C 229  ARG  HB2', -0.435, (-53.18, 60.537, -21.493)), (' A 267  GLY  HA2', ' B 224  PRO  HG3', -0.432, (-32.079, 53.289, -1.928)), (' C 196  LYS  HD2', ' C 196  LYS  N  ', -0.428, (-47.628, 61.845, -31.342)), (' A 103  THR  OG1', ' A 143  GLY  HA2', -0.426, (-6.758, 40.704, 2.948)), (' C  24  MET  HE1', ' C  49  VAL HG22', -0.422, (9.475, 17.205, -39.932)), (' A 214  TYR  OH ', ' A 238  GLN  HG2', -0.411, (-26.39, 22.57, -5.603)), (' A 229  ARG  HG2', ' A 229  ARG HH11', -0.41, (-50.892, 19.88, -15.119)), (' C 172  HIS  HB2', ' C 428  HOH  O  ', -0.409, (-25.857, 38.684, -31.926)), (' A 128  PHE  O  ', ' A 134  GLN  HG2', -0.406, (-5.997, 30.124, -11.691)), (' A 197  THR HG21', ' A 315  ILE HD11', -0.406, (-33.541, 13.531, -14.79)), (' A  45  ILE HG12', ' A  46  LYS  N  ', -0.405, (10.362, 61.219, -18.715)), (' B  23  ASP  HB3', ' B  26  MET  CE ', -0.403, (5.11, 48.316, -52.121)), (' A 127  LYS  HE3', ' A 178  ASN HD22', -0.403, (-8.84, 24.246, -12.204)), (' B 121  LEU HD11', ' B 173  LEU HD13', -0.403, (-20.574, 65.774, -25.161)), (' A 283  LEU  HB2', ' A 294  MET  O  ', -0.403, (-25.832, 38.274, 12.532)), (' A 307  LYS  HE3', ' A 473  HOH  O  ', -0.402, (-17.541, 22.836, 0.54)), (' C 165  ASP  HB3', ' C 168  GLU  HB3', -0.402, (-31.204, 36.755, -26.659)), (' B  77  ASP  OD1', ' B  83  ARG  NH2', -0.401, (-12.958, 50.706, -28.471)), (' C 260  LEU  HG ', ' C 307  LYS  HG3', -0.401, (-42.22, 35.615, -45.45)), (' B 137  TYR  CE2', ' B 141  ARG  HD2', -0.401, (-17.484, 73.474, -27.141)), (' B  90  HIS  HB2', ' B 160  VAL HG21', -0.4, (-21.841, 56.093, -39.235)), (' B 270  GLN  O  ', ' C 200  LEU HD11', -0.4, (-38.961, 52.952, -32.835))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
