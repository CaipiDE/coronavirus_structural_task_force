# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  32 ', 'ASP', 0.023507329732414872, (14.422, -6.902000000000002, 51.065))]
data['omega'] = []
data['rota'] = [('A', '  78 ', 'GLU', 0.1525644993029704, (19.028, 5.894000000000002, 20.317)), ('A', '  81 ', 'LEU', 0.04973234515101366, (22.444, 0.9239999999999998, 15.918)), ('A', ' 173 ', 'LEU', 0.010699434740960438, (12.064, -11.359, 19.552)), ('A', ' 187 ', 'ASN', 0.23987740772639438, (-10.092000000000002, -21.544, 32.667))]
data['cbeta'] = []
data['probe'] = [(' A  59  LEU HD12', ' A  60  PRO  HD2', -0.994, (21.929, 6.137, 15.515)), (' A  48  HIS  HD2', ' A  50  ASN  H  ', -0.707, (41.909, 3.159, 0.236)), (' A 174  LEU HD12', ' A 207 BMET  HE2', -0.69, (8.101, -16.296, 22.561)), (' A  59  LEU HD12', ' A  60  PRO  CD ', -0.675, (22.235, 6.499, 15.324)), (' A  78  GLU  CD ', ' A  78  GLU  H  ', -0.632, (17.805, 6.222, 21.651)), (' A  27  THR  H  ', ' A  30  GLN HE21', -0.621, (38.903, 13.605, 11.885)), (' A 152  ILE HG12', ' A 173 ALEU HD21', -0.609, (16.332, -13.547, 17.3)), (' A 172  HIS  HE1', ' A 635  HOH  O  ', -0.6, (15.494, -9.054, 28.436)), (' A 229  ARG  HG3', ' A 230  ASP  N  ', -0.571, (-7.255, -26.733, 46.303)), (' B  24  GLU  HG2', ' B 101  GOL  H31', -0.561, (12.548, -1.854, 41.003)), (' A  48  HIS  CD2', ' A  50  ASN  H  ', -0.558, (42.289, 3.844, 0.898)), (' A 121  LEU  HG ', ' A 170 DMET  HE1', -0.552, (13.161, -19.062, 17.73)), (' A 284  TYR  CD2', ' A 291  LEU HD11', -0.551, (20.175, -34.721, 13.026)), (' B  68  HIS  HD2', ' B 203  HOH  O  ', -0.529, (2.217, -18.907, 40.187)), (' A 229  ARG  HG3', ' A 230  ASP  H  ', -0.514, (-6.803, -26.656, 46.307)), (' A 187 AASN  ND2', ' A 650  HOH  O  ', -0.508, (-13.642, -21.266, 29.736)), (' A 187 AASN  OD1', ' A 195  GLN  HG2', -0.507, (-13.823, -21.111, 33.789)), (' A  18  HIS  HB3', ' A 405  GOL  H32', -0.507, (22.999, 11.809, 3.423)), (' B  31 BGLN  C  ', ' B  33 BLYS  H  ', -0.502, (14.748, -9.424, 50.253)), (' B  31 BGLN  O  ', ' B  33 BLYS  N  ', -0.483, (15.362, -8.742, 50.576)), (' A 187 AASN  OD1', ' A 195  GLN  CG ', -0.479, (-13.899, -21.713, 34.175)), (' B  29  LYS  HA ', ' B  32 BASP  HB2', -0.476, (11.902, -6.421, 49.774)), (' A  27  THR  H  ', ' A  30  GLN  NE2', -0.463, (38.998, 14.053, 12.135)), (' A 158  LYS  HD3', ' A 624  HOH  O  ', -0.458, (20.344, -12.136, 24.078)), (' B  31 BGLN  C  ', ' B  33 BLYS  N  ', -0.445, (14.736, -8.958, 50.628)), (' A  90  HIS  HB2', ' A 160  VAL HG21', -0.408, (29.735, -10.177, 18.821))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
