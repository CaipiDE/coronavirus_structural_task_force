# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 228 ', 'GLY', 0.05479133486608114, (-45.221999999999994, 48.536000000000016, 30.693)), ('A', ' 229 ', 'ARG', 0.008341721794158687, (-46.48799999999999, 44.963000000000015, 30.558999999999997))]
data['omega'] = []
data['rota'] = [('A', '  50 ', 'ASN', 0.2175683628218972, (5.388, 0.556, 10.058)), ('A', '  81 ', 'LEU', 0.03403677714734712, (-6.684, 21.114000000000004, 15.943)), ('A', ' 163 ', 'LEU', 0.012763429045887866, (-23.323999999999995, 16.055, 28.638)), ('A', ' 168 ', 'GLU', 0.11690195062469726, (-26.747, 25.337, 22.47)), ('A', ' 302 ', 'THR', 0.21353582563289447, (-37.596, 20.834, 24.536)), ('A', ' 313 ', 'THR', 0.0013599335943581536, (-48.46899999999999, 37.087, 7.485))]
data['cbeta'] = []
data['probe'] = [(' A 217  LEU HD22', ' A 235  LEU  HB2', -0.784, (-43.099, 33.956, 13.35)), (' A   0  SER  O  ', ' A   4  LYS  HE2', -0.717, (20.14, 0.637, 10.323)), (' A 302  THR HG21', ' A 317  TTT  H01', -0.681, (-34.711, 20.287, 26.978)), (' A 217  LEU  CD2', ' A 235  LEU  HB2', -0.662, (-42.478, 34.346, 14.17)), (' A   6  ILE  HB ', ' A  52  GLU  OE1', -0.658, (9.808, 5.947, 5.47)), (' A 171  THR  OG1', ' A 207  MET  HE1', -0.642, (-27.98, 28.235, 18.875)), (' A 237  GLN  NE2', ' A 312  THR  OG1', -0.622, (-43.726, 37.342, 3.006)), (' A 237  GLN HE21', ' A 312  THR HG23', -0.619, (-44.627, 38.285, 3.997)), (' A 313  THR  HB ', ' A 315  ILE HG12', -0.617, (-49.519, 40.002, 8.26)), (' A  62  ASP  O  ', ' A  66  ARG  HG3', -0.613, (0.411, 28.742, 9.731)), (' A 249  PRO  HG3', ' A 302  THR HG23', -0.601, (-36.336, 19.631, 27.963)), (' A 264  GLU  CG ', ' A 275  THR  OG1', -0.599, (-37.232, 11.377, 24.215)), (' A 235  LEU HD21', ' A 238  GLN  HB2', -0.567, (-41.693, 32.68, 9.421)), (' A 234  TYR  CE2', ' A 315  ILE HG21', -0.558, (-49.401, 40.106, 11.745)), (' A  27  THR  H  ', ' A  30  GLN  NE2', -0.552, (13.08, 13.029, 19.345)), (' A 120  ALA  O  ', ' A 124  LEU  HG ', -0.548, (-32.745, 18.091, 10.34)), (' A 225  CYS  SG ', ' A 226  VAL  N  ', -0.542, (-41.052, 47.715, 26.139)), (' A 249  PRO  HG3', ' A 302  THR  CG2', -0.54, (-36.303, 20.069, 27.514)), (' A 167  ARG  CZ ', ' A 209  MET  HE2', -0.537, (-32.698, 27.949, 24.928)), (' A 159  THR  O  ', ' A 162  GLU  HG2', -0.531, (-17.17, 16.82, 26.848)), (' A 217  LEU  O  ', ' A 217  LEU HD23', -0.524, (-44.535, 34.239, 15.527)), (' A   5  THR  HA ', ' A  22  VAL  O  ', -0.52, (13.84, 9.369, 8.736)), (' A 112  OCS  OD2', ' A 163  LEU HD21', -0.512, (-27.048, 14.415, 26.605)), (' A 128  PHE  HA ', ' A 177  ALA  HA ', -0.503, (-23.002, 25.405, 6.951)), (' A  10  THR HG23', ' A  20  GLN  HG3', -0.496, (5.253, 15.594, 7.677)), (' A 264  GLU  HG2', ' A 275  THR  OG1', -0.494, (-36.708, 11.261, 23.649)), (' A 213  SER  HB3', ' A 216  ASN  ND2', -0.483, (-46.773, 27.532, 20.46)), (' A  64  THR  O  ', ' A  68  GLU  HG3', -0.475, (-1.598, 25.829, 4.436)), (' A 313  THR HG23', ' A 357  HOH  O  ', -0.471, (-47.804, 36.065, 10.902)), (' A 247  ALA  O  ', ' A 302  THR HG22', -0.47, (-37.302, 22.55, 26.27)), (' A 314  THR  O  ', ' A 314  THR HG22', -0.464, (-54.351, 38.353, 6.829)), (' A 237  GLN HE21', ' A 312  THR  CG2', -0.459, (-44.626, 38.043, 3.733)), (' A  48  HIS  HB3', ' A  50  ASN  OD1', -0.449, (7.32, 0.831, 13.011)), (' A 182  ALA  HA ', ' A 239  GLU  O  ', -0.447, (-33.461, 32.4, 5.719)), (' A 313  THR  CG2', ' A 315  ILE HG23', -0.443, (-49.952, 38.625, 10.344)), (' A 175  GLN  HG3', ' A 203  VAL HG21', -0.441, (-24.395, 30.678, 14.521)), (' A 220  GLY  HA2', ' A 233  GLN  O  ', -0.44, (-46.707, 37.065, 18.302)), (' A 203  VAL  CG1', ' A 207  MET  HE2', -0.437, (-28.469, 29.063, 15.819)), (' A 190  CYS  O  ', ' A 191  LYS  C  ', -0.437, (-48.527, 49.761, 23.374)), (' A 279  ALA  HB2', ' A 283  LEU HD23', -0.436, (-43.762, 10.697, 13.597)), (' A  90  HIS  HB2', ' A 160  VAL HG21', -0.435, (-13.908, 11.442, 22.573)), (' A 113  TYR  O  ', ' A 117  VAL HG23', -0.428, (-27.103, 16.74, 19.988)), (' A 171  THR  CA ', ' A 207  MET  HE1', -0.421, (-27.38, 27.334, 17.891)), (' A 302  THR  HB ', ' A 393  HOH  O  ', -0.419, (-34.843, 22.311, 24.74)), (' A 117  VAL  O  ', ' A 121  LEU  HG ', -0.419, (-27.963, 17.52, 13.446)), (' A  12  VAL HG22', ' A 360  HOH  O  ', -0.417, (-2.595, 21.096, 6.34)), (' A 232  THR HG22', ' A 233  GLN  N  ', -0.416, (-47.08, 40.08, 19.815)), (' A 285  ARG  HB2', ' A 294  MET  HE3', -0.416, (-40.702, 6.732, 20.322)), (' A 186  LEU HD23', ' A 235  LEU  HA ', -0.414, (-42.394, 37.2, 13.451)), (' A 171  THR  HA ', ' A 207  MET  HE1', -0.401, (-27.865, 27.609, 17.608)), (' A  95  LYS  HB2', ' A 106  LYS  HB3', -0.4, (-22.582, 2.791, 18.846))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
