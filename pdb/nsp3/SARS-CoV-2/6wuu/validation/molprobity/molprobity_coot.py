# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 315 ', 'LYS', 0.0924520118205603, (51.509, 49.04299999999999, -14.251))]
data['omega'] = []
data['rota'] = [('A', ' 233 ', 'TYR', 0.11118744663590235, (41.066, 52.257, -10.612)), ('B', ' 106 ', 'TRP', 0.004521777248389268, (46.607, 41.43999999999999, -2.31)), ('B', ' 315 ', 'LYS', 0.2467848770499836, (72.38300000000001, 53.185999999999986, 37.792)), ('B', ' 319 ', 'HIS', 0.027813253151317382, (67.504, 48.208999999999996, 47.814)), ('C', ' 106 ', 'TRP', 0.0, (26.205, 62.83799999999998, -27.817)), ('D', ' 315 ', 'LYS', 0.0, (21.583, 24.543, 4.272000000000002)), ('D', ' 317 ', 'LEU', 0.03888618125430235, (20.61799999999999, 27.108, -1.008)), ('D', ' 318 ', 'GLU', 0.004009617702384764, (16.885999999999992, 26.293, -0.86))]
data['cbeta'] = []
data['probe'] = [(' C 111  CYS  H  ', ' I   5  GVE  HB1', -0.917, (26.786, 62.976, -22.038)), (' D 111  CYS  H  ', ' J   5  GVE  HB1', -0.755, (50.496, 34.234, 36.405)), (' D 101  LEU HD23', ' D 140  ARG HH12', -0.727, (41.068, 18.047, 37.627)), (' C 101  LEU HD23', ' C 140  ARG HH12', -0.712, (16.079, 76.719, -29.711)), (' A 111  CYS  H  ', ' G   5  GVE  HB1', -0.708, (24.228, 75.052, 10.008)), (' D 267  ASN  OD1', ' D 270  CYS  N  ', -0.689, (49.685, 45.076, 31.192)), (' A 166  ARG  NH2', ' C 167  GLU  OE1', -0.684, (27.539, 67.633, -6.893)), (' B 218  LYS  HD2', ' B 218  LYS  N  ', -0.641, (64.38, 55.485, 27.62)), (' D 101  LEU  HA ', ' D 140  ARG HH12', -0.634, (42.17, 17.99, 38.093)), (' A 254  LYS  HD2', ' B 266  GLY  HA2', -0.626, (38.944, 48.971, 10.986)), (' B  33  PRO  HB2', ' B  58  LEU HD13', -0.615, (51.832, 12.409, -0.101)), (' A  33  PRO  HB2', ' A  58  LEU HD13', -0.612, (29.682, 100.944, -0.412)), (' D 189  CYS  HB3', ' D 192  CYS  HB2', -0.608, (28.809, 36.676, -1.927)), (' D 312  THR  OG1', ' D 314  ILE HG12', -0.6, (24.918, 25.102, 9.785)), (' B  61  ASP  OD2', ' B  63  THR  OG1', -0.598, (63.435, 5.64, 5.663)), (' B 188  VAL HG22', ' B 194  GLN  HG3', -0.594, (66.074, 48.643, 39.954)), (' D 101  LEU  HA ', ' D 140  ARG  NH1', -0.561, (42.433, 17.969, 38.092)), (' B  33  PRO  HG2', ' B  58  LEU HD22', -0.56, (50.51, 12.03, 2.064)), (' A  60  ASN  OD1', ' A  61  ASP  N  ', -0.555, (35.411, 105.213, -6.339)), (' C 284  CYS  HB3', ' C 291  THR  HB ', -0.554, (11.639, 62.431, -27.122)), (' C 106  TRP  CD1', ' C 106  TRP  N  ', -0.549, (24.58, 63.313, -28.702)), (' D 208  MET  HE2', ' H   1  ACE  H3 ', -0.539, (42.473, 38.939, 18.45)), (' C 106  TRP  H  ', ' C 106  TRP  HD1', -0.538, (23.889, 63.155, -29.17)), (' D 138  ARG  HD3', ' D 143  GLU  OE1', -0.535, (56.093, 12.263, 38.018)), (' B 280  GLU  OE2', ' B 283  TYR  OH ', -0.529, (61.976, 56.758, -2.611)), (' A 310  TYR  HE1', ' B 289  LEU  HB3', -0.527, (48.39, 52.253, -4.039)), (' B 189  CYS  HB3', ' B 192  CYS  HB2', -0.525, (59.905, 47.57, 44.448)), (' D 317  LEU  H  ', ' D 317  LEU HD12', -0.525, (22.212, 25.538, -0.114)), (' D 101  LEU HD23', ' D 140  ARG  NH1', -0.516, (41.748, 17.617, 37.197)), (' A 157  LYS  NZ ', ' A 162  LEU  O  ', -0.514, (22.351, 77.223, 1.17)), (' B 214  GLU  CD ', ' B 218  LYS  HZ1', -0.508, (65.388, 56.735, 23.948)), (' D 234  LEU HD21', ' D 237  GLN  HB2', -0.502, (32.61, 22.599, 13.915)), (' B 317  LEU  O  ', ' B 317  LEU HD12', -0.494, (70.823, 54.513, 45.06)), (' C 314  ILE HG22', ' C 316  PRO  HD3', -0.485, (-0.616, 83.833, 3.802)), (' C 264  TYR  CZ ', ' C 271  GLY  HA3', -0.485, (22.523, 59.845, -14.232)), (' B 283  TYR  HD2', ' B 290  LEU HD11', -0.484, (57.214, 53.734, -1.31)), (' A 315  LYS  HG2', ' A 316  PRO  HD2', -0.475, (52.358, 49.81, -16.965)), (' C 111  CYS  N  ', ' I   5  GVE  HB1', -0.475, (26.281, 64.032, -21.542)), (' B 183  ARG  HD3', ' B 185  LEU HD21', -0.474, (64.481, 43.683, 27.73)), (' C 166  ARG  HA ', ' C 243  MET  HE1', -0.471, (20.61, 72.718, -12.331)), (' C   8  PHE  HE1', ' C  18  THR  HG1', -0.469, (51.004, 95.632, -32.622)), (' A 152  LEU HD13', ' A 159  VAL HG22', -0.467, (26.302, 84.816, 6.139)), (' B 120  LEU  O  ', ' B 136  TYR  OH ', -0.466, (64.866, 38.882, 5.88)), (' A  11  VAL HG13', ' A  64  LEU HD22', -0.465, (39.114, 101.124, -1.844)), (' D 226  CYS  SG ', ' D 227  GLY  N  ', -0.464, (31.271, 42.874, -1.668)), (' C 189  CYS  HB3', ' C 192  CYS  HB2', -0.462, (6.854, 78.226, 15.007)), (' B 272  HIS  ND1', ' H   5  GVE  HG2', -0.461, (43.989, 44.408, 4.161)), (' A  33  PRO  HG2', ' A  58  LEU HD22', -0.461, (28.258, 100.939, -2.271)), (' D  11  VAL HG13', ' D  64  LEU HD22', -0.458, (71.902, 10.263, 26.388)), (' C  62  ASP  OD1', ' C  65  ARG  NH1', -0.457, (50.982, 91.241, -12.861)), (' A 222  ILE  HA ', ' A 222  ILE HD13', -0.447, (30.7, 52.808, -13.486)), (' A 166  ARG  HA ', ' A 243  MET  HE1', -0.446, (32.667, 68.939, -0.567)), (' A 157  LYS  HB3', ' A 157  LYS  HE3', -0.446, (24.762, 80.401, 1.643)), (' D 283  TYR  CE2', ' D 292  LYS  HG2', -0.445, (32.454, 26.08, 44.11)), (' B 166  ARG  HA ', ' B 243  MET  HE1', -0.444, (55.377, 40.685, 15.541)), (' B 208  MET  HE2', ' J   1  ACE  H3 ', -0.442, (49.397, 42.837, 23.922)), (' D 152  LEU HD13', ' D 159  VAL HG22', -0.442, (59.725, 28.213, 33.524)), (' A 119  THR HG21', ' A 304  PHE  CZ ', -0.438, (36.532, 68.879, 3.672)), (' A 264  TYR  CZ ', ' A 271  GLY  HA3', -0.436, (20.465, 67.574, 5.369)), (' D 213  TYR  HB2', ' D 305  TYR  CE2', -0.436, (32.134, 27.478, 22.4)), (' B  12  ASP  N  ', ' B  12  ASP  OD2', -0.434, (64.097, 15.401, 1.068)), (' C 165  VAL  O  ', ' C 169  MET  HG2', -0.432, (22.381, 72.839, -14.546)), (' D 296  TYR  CE2', ' D 300  ILE HD11', -0.432, (34.623, 34.867, 33.002)), (' A 221  GLN  HB3', ' A 229  GLN HE21', -0.431, (30.522, 48.483, -12.439)), (' B 162  LEU  HB3', ' H   3  DPP  C  ', -0.43, (42.543, 38.986, 10.625)), (' A 234  LEU HD21', ' A 237  GLN  HB2', -0.427, (45.265, 59.009, -6.515)), (' A  12  ASP  N  ', ' A  12  ASP  OD2', -0.426, (42.132, 98.074, 0.72)), (' B 128  ASN  HB2', ' B 129  PRO  HD3', -0.424, (65.702, 26.833, 11.807)), (' B 264  TYR  CZ ', ' B 271  GLY  HA3', -0.424, (42.765, 44.394, 11.833)), (' C 192  CYS  SG ', ' C 226  CYS  HB3', -0.423, (8.964, 76.158, 17.721)), (' B 147  PHE  CE2', ' B 151  ILE HD11', -0.421, (58.351, 34.306, 4.868)), (' A 164  ASP  HB3', ' A 167  GLU  HB3', -0.42, (26.874, 73.024, -1.755)), (' B  61  ASP  OD2', ' B  63  THR  N  ', -0.419, (62.726, 6.107, 7.153)), (' C 106  TRP  CD1', ' C 287  GLY  HA3', -0.418, (22.379, 63.541, -28.433)), (' A 315  LYS  CG ', ' A 316  PRO  HD2', -0.417, (52.819, 49.87, -16.387)), (' B 164  ASP  OD1', ' H   2  UB4  N  ', -0.415, (46.749, 39.491, 16.592)), (' A 165  VAL  O  ', ' A 169  MET  HG2', -0.411, (32.677, 71.776, 1.236)), (' D 283  TYR  HD2', ' D 290  LEU HD11', -0.411, (35.63, 26.02, 43.001)), (' D 157  LYS  NZ ', ' D 163  GLY  HA2', -0.41, (54.189, 34.706, 28.256)), (' A 189  CYS  HB3', ' A 192  CYS  HB2', -0.41, (36.904, 47.533, -22.966)), (' D  33  PRO  HA ', ' D  42  THR  OG1', -0.408, (77.507, 19.187, 33.926)), (' C 170  SER  O  ', ' C 174  GLN  HG2', -0.406, (26.308, 79.822, -10.133)), (' A  22  ASP  OD2', ' A  24  SER  OG ', -0.405, (29.063, 120.445, 5.158)), (' D 264  TYR  CZ ', ' D 271  GLY  HA3', -0.404, (46.555, 40.749, 32.043)), (' B  13  ASN  HB2', ' B  56  TYR  OH ', -0.403, (63.037, 18.701, -2.976)), (' C  28  GLY  HA2', ' C  32  GLY  O  ', -0.402, (55.126, 79.425, -25.25)), (' C 208  MET  HE2', ' G   1  ACE  H3 ', -0.401, (19.034, 67.918, -3.234)), (' A 208  MET  HE2', ' I   1  ACE  H3 ', -0.401, (26.117, 61.994, -6.382)), (' C 162  LEU  HB3', ' I   3  DPP  C  ', -0.401, (28.197, 61.631, -14.601))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
