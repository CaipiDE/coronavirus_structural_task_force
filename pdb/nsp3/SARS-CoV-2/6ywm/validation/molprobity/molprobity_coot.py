# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('C', '   5 ', 'SER', 0.014882265703547087, (-6.816, -6.135999999999998, 21.039))]
data['cbeta'] = []
data['probe'] = [(' B   6  PHE  CE1', ' B  30  VAL HG11', -0.689, (-5.177, 22.986, -48.003)), (' B  31  LYS  HB2', ' B 359  HOH  O  ', -0.644, (-2.263, 26.741, -54.786)), (' A  20  ASN  OD1', ' A 158  LYS  HG2', -0.642, (-17.532, 11.474, -29.461)), (' C  99  ASN  ND2', ' C 102  LYS  HE3', -0.614, (-33.233, 13.513, 15.17)), (' A 141  ARG  HB2', ' A 206  EDO  H11', -0.587, (-20.242, -2.737, -15.309)), (' C 132  PHE  CE1', ' C 201  MES  H31', -0.569, (-29.119, 11.918, 17.695)), (' B 100  VAL HG22', ' B 132  PHE  O  ', -0.563, (-13.652, 37.277, -27.565)), (' C  38  ALA  O  ', ' C 201  MES  H51', -0.558, (-24.86, 11.004, 18.627)), (' A   6  PHE  CE1', ' A  30  VAL HG11', -0.55, (-23.45, 19.802, -14.965)), (' A  40  ASN HD22', ' A 201  MES  H61', -0.545, (-0.985, 10.838, -10.545)), (' A 202  EDO  H22', ' C 115  ASN  HA ', -0.535, (-17.017, 6.548, 4.853)), (' C 201  MES  H52', ' C 318  HOH  O  ', -0.525, (-25.418, 10.141, 20.099)), (' B 154  ALA  O  ', ' B 202  EDO  H11', -0.513, (-3.837, 29.672, -37.685)), (' C 100  VAL HG22', ' C 132  PHE  O  ', -0.508, (-34.394, 7.723, 13.82)), (' C  99  ASN  ND2', ' C 102  LYS  CE ', -0.502, (-33.798, 14.043, 15.859)), (' C 100  VAL HG11', ' C 106  ILE HD13', -0.5, (-34.014, 5.425, 9.554)), (' C  80  SER  HA ', ' C  94  HIS  O  ', -0.485, (-18.243, 11.802, 11.095)), (' A 131  ILE HD11', ' A 201  MES  H51', -0.484, (-1.986, 8.697, -13.61)), (' B 101  ASN  ND2', ' B 131  ILE  O  ', -0.484, (-10.412, 40.149, -27.84)), (' A  80  SER  HA ', ' A  94  HIS  O  ', -0.479, (-10.58, 12.424, -2.911)), (' B 131  ILE  H  ', ' B 131  ILE HD12', -0.475, (-7.22, 38.005, -32.204)), (' B 131  ILE  N  ', ' B 131  ILE HD12', -0.467, (-6.822, 38.419, -32.14)), (' B  80  SER  HA ', ' B  94  HIS  O  ', -0.466, (-18.584, 35.304, -43.275)), (' B   0  GLY  HA2', ' B 326  HOH  O  ', -0.455, (0.103, 23.206, -54.558)), (' B  99  ASN  OD1', ' B 101  ASN  HB2', -0.454, (-13.193, 41.481, -27.962)), (' C 154  ALA  O  ', ' C 206  EDO  H11', -0.436, (-22.757, -0.091, 21.878)), (' C 101  ASN  ND2', ' C 131  ILE  O  ', -0.435, (-34.933, 8.99, 18.173)), (' B  44  LYS  HD3', ' B 324  HOH  O  ', -0.434, (-12.777, 49.324, -44.571)), (' C 201  MES  C5 ', ' C 318  HOH  O  ', -0.431, (-25.136, 10.316, 20.077)), (' B   6  PHE  CZ ', ' B  30  VAL HG11', -0.43, (-5.565, 22.916, -47.657)), (' B 121  VAL  HA ', ' B 150  ASN  O  ', -0.429, (-12.593, 20.832, -45.273)), (' A  25  GLU  HG3', ' B 141  ARG  HD2', -0.428, (-14.614, 20.796, -24.887)), (' C 124  ALA  O  ', ' C 153  LEU  HA ', -0.413, (-19.765, -1.577, 17.49)), (' B  31  LYS  CB ', ' B 359  HOH  O  ', -0.412, (-2.645, 26.852, -54.409)), (' C  99  ASN  ND2', ' C 132  PHE  CD1', -0.41, (-32.239, 11.902, 15.961)), (' A 171  MET  HG3', ' A 171  MET  O  ', -0.407, (-24.885, -5.719, -19.435)), (' B   9  TYR  HB3', ' B  17  TYR  HB3', -0.406, (-4.33, 18.146, -40.259)), (' C   9  TYR  HB3', ' C  17  TYR  HB3', -0.406, (-16.696, -9.058, 17.502))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
