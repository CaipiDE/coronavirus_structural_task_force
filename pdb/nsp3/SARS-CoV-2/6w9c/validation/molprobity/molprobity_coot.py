# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  39 ', 'ALA', 0.012008291210280415, (-21.329, 18.85, 11.685)), ('B', ' 209 ', 'GLY', 0.05054452902127117, (-27.488000000000003, -12.722, 39.66)), ('C', '  29 ', 'GLN', 0.047913204851877327, (-36.073, 1.95, -4.894000000000002)), ('C', '  59 ', 'PRO', 0.02036859319745684, (-49.979000000000006, 4.196, 0.643)), ('C', '  81 ', 'GLY', 0.06613618971278457, (-43.579, 6.271, 9.689))]
data['omega'] = []
data['rota'] = [('A', '   3 ', 'ARG', 0.003776102537898558, (-58.47899999999999, 23.235, -9.374)), ('A', '  20 ', 'VAL', 0.149842238437658, (-51.655, 29.84, -6.715000000000002)), ('A', '  80 ', 'LEU', 0.299677238746663, (-36.237, 27.562999999999995, 9.797)), ('A', '  88 ', 'ASN', 0.12704448513300154, (-44.99, 23.74, 16.59)), ('A', '  94 ', 'LYS', 0.21443749488185207, (-49.243, 28.279, 28.386)), ('A', ' 104 ', 'ILE', 0.08619892781462445, (-44.413, 29.672, 31.078)), ('A', ' 126 ', 'LYS', 0.15669427672908073, (-31.709, 45.546, 22.415)), ('A', ' 140 ', 'ARG', 0.05723857850648647, (-43.59100000000001, 40.666, 27.017)), ('A', ' 170 ', 'SER', 0.11565602570233742, (-24.378, 33.837, 26.215)), ('A', ' 186 ', 'ASN', 0.15908131320543367, (-6.676000000000002, 43.86, 37.592)), ('A', ' 196 ', 'GLN', 0.00041167342985299764, (-5.234, 44.195, 33.567)), ('A', ' 198 ', 'THR', 0.07592483148333164, (-10.114, 45.071000000000005, 28.856)), ('A', ' 203 ', 'GLU', 0.10695654408224903, (-17.636, 39.087, 27.622)), ('A', ' 228 ', 'LYS', 0.0, (-0.20900000000000052, 30.226, 44.87)), ('A', ' 252 ', 'GLU', 0.10924531084258444, (-29.115999999999996, 34.015, 50.875000000000014)), ('A', ' 254 ', 'LYS', 0.0, (-31.260999999999992, 39.933, 50.32800000000002)), ('A', ' 269 ', 'GLN', 0.0, (-30.898000000000003, 15.210999999999999, 34.918)), ('A', ' 294 ', 'SER', 0.09442852277628316, (-38.881000000000014, 38.714, 53.064000000000014)), ('A', ' 311 ', 'THR', 0.07310439714715032, (-14.798000000000002, 52.779, 38.857)), ('B', '  20 ', 'VAL', 0.21504660333286352, (-12.854, 18.779, -7.088)), ('B', '  30 ', 'GLN', 0.08235397565448863, (-22.427000000000007, 15.522000000000002, -5.447)), ('B', '  34 ', 'THR', 0.17323406444999598, (-21.347, 15.079, 3.958)), ('B', '  44 ', 'ILE', 0.023286015254434394, (-24.125000000000007, 23.967, 3.138)), ('B', '  49 ', 'SER', 0.002991568858064568, (-11.825000000000001, 27.723, 5.046)), ('B', '  60 ', 'ASN', 0.048564367390587455, (-22.229, 5.935000000000001, -2.515)), ('B', '  70 ', 'GLU', 0.23640238508596334, (-13.398, -3.399000000000001, 6.263)), ('B', '  80 ', 'LEU', 0.007729174104275009, (-22.163, 6.483000000000001, 9.607)), ('B', '  99 ', 'ASN', 0.18079089774843524, (-6.632, 9.965000000000003, 38.926)), ('B', ' 108 ', 'ASP', 0.04400529647945096, (-26.941000000000003, 14.391000000000005, 28.079)), ('B', ' 124 ', 'GLU', 0.0, (-7.892000000000002, -6.452, 29.173)), ('B', ' 125 ', 'LEU', 0.04271652926078633, (-9.873000000000003, -6.1709999999999985, 25.855)), ('B', ' 143 ', 'GLU', 0.08749193993922952, (-9.332, 11.795, 23.089)), ('B', ' 146 ', 'ASN', 0.08546264549141006, (-14.459000000000003, 9.466, 18.63200000000001)), ('B', ' 194 ', 'GLN', 0.11619714556309123, (-26.39300000000001, -32.403, 38.745)), ('B', ' 195 ', 'GLN', 0.0007633573838111586, (-26.155000000000012, -30.154999999999998, 35.59)), ('B', ' 245 ', 'SER', 0.14403933931357088, (-24.081999999999997, -7.746000000000001, 37.89)), ('B', ' 263 ', 'GLU', 0.010555201610554772, (-22.903000000000002, 2.354, 41.539000000000016)), ('B', ' 267 ', 'ASN', 0.05446509298387611, (-35.06000000000001, 4.496, 40.582)), ('B', ' 269 ', 'GLN', 0.0029202570911582896, (-35.92900000000001, 8.022, 34.876)), ('B', ' 270 ', 'CYS', 0.061070193361888736, (-33.407, 9.921, 37.075)), ('B', ' 291 ', 'THR', 0.2285559900773628, (-13.874000000000002, 11.142999999999999, 46.194)), ('B', ' 308 ', 'ASN', 0.01385703908532788, (-6.409, -15.712, 34.431)), ('C', '  14 ', 'ILE', 0.19127918444768044, (-54.733, -8.138, 6.933)), ('C', '  44 ', 'ILE', 0.25342027006480133, (-30.956000000000003, -2.4239999999999995, 2.738)), ('C', '  62 ', 'ASP', 0.018047356942711576, (-55.27900000000001, 3.646, -4.49)), ('C', '  75 ', 'THR', 0.014317837209991972, (-55.07300000000001, 10.087, 6.006)), ('C', ' 113 ', 'LEU', 0.28217453964406214, (-48.319, 4.106, 28.816)), ('C', ' 123 ', 'ILE', 0.028414314972653898, (-62.95000000000001, -0.159, 31.379)), ('C', ' 125 ', 'LEU', 0.07325179948432074, (-64.869, 0.43200000000000016, 25.750000000000007)), ('C', ' 126 ', 'LYS', 0.014583814745093725, (-64.266, -0.36299999999999993, 22.026000000000007)), ('C', ' 132 ', 'LEU', 0.2222208472136392, (-56.889, 0.169, 17.428)), ('C', ' 133 ', 'GLN', 0.10017762508173643, (-59.63600000000001, -2.49, 18.079)), ('C', ' 143 ', 'GLU', 0.13740358187960372, (-49.31, -9.300999999999997, 23.277)), ('C', ' 146 ', 'ASN', 0.15604707922939673, (-48.396, -2.949, 18.555)), ('C', ' 179 ', 'ASP', 0.007498788012900414, (-71.452, 9.18, 21.134)), ('C', ' 226 ', 'CYS', 0.23021757512409652, (-70.57700000000003, 38.025, 38.966)), ('C', ' 252 ', 'GLU', 0.017068359491798957, (-57.478, 8.391000000000004, 50.5)), ('C', ' 269 ', 'GLN', 0.0024921987071110526, (-39.25500000000001, 15.874, 34.28700000000001)), ('C', ' 270 ', 'CYS', 0.005223965895720859, (-38.775, 13.316, 37.216)), ('C', ' 280 ', 'GLU', 0.0018026056454160408, (-60.20200000000001, -8.462000000000003, 46.85))]
data['cbeta'] = []
data['probe'] = [(' B  83  TYR  OH ', ' B 146  ASN  ND2', -0.775, (-14.748, 8.631, 14.402)), (' C 185  LEU HD21', ' C 216  PHE  HE2', -0.751, (-70.153, 17.888, 37.545)), (' A 270  CYS  SG ', ' B 270  CYS  HB2', -0.714, (-33.172, 12.038, 38.296)), (' C 185  LEU HD21', ' C 216  PHE  CE2', -0.623, (-70.273, 17.708, 37.032)), (' A 224  CYS  SG ', ' A 225  THR  N  ', -0.621, (-0.59, 33.637, 38.324)), (' A 122  GLN  OE1', ' A 277  THR  OG1', -0.607, (-37.087, 40.415, 38.807)), (' A 224  CYS  SG ', ' A 226  CYS  SG ', -0.59, (0.742, 34.109, 40.264)), (' B 240  PRO  HA ', ' B 307  GLU  O  ', -0.586, (-7.941, -12.855, 32.966)), (' A 270  CYS  SG ', ' B 270  CYS  CB ', -0.586, (-33.545, 12.383, 37.879)), (' A 185  LEU  O  ', ' A 196  GLN  HA ', -0.579, (-6.726, 44.0, 34.084)), (' C  82  ARG  NH2', ' C 153  ALA  O  ', -0.575, (-49.264, 9.192, 15.526)), (' A 166  ARG  HA ', ' A 243  MET  HE1', -0.56, (-27.091, 32.971, 31.892)), (' C 283  TYR  HD2', ' C 290  LEU HD11', -0.548, (-51.25, -6.596, 42.746)), (' C  88  ASN  OD1', ' C  91  LYS  NZ ', -0.544, (-37.609, -2.869, 15.513)), (' A  22  ASP  N  ', ' A  30  GLN  OE1', -0.544, (-50.338, 23.764, -6.61)), (' C 269  GLN  H  ', ' C 269  GLN HE21', -0.543, (-38.823, 17.874, 34.74)), (' B 125  LEU  CD1', ' B 176  ALA  HB1', -0.543, (-13.288, -6.813, 23.942)), (' B 282  LEU HD12', ' B 295  GLU  HA ', -0.54, (-13.546, 1.06, 50.801)), (' C 283  TYR  CD2', ' C 290  LEU HD11', -0.537, (-51.323, -6.483, 43.31)), (' C 185  LEU  O  ', ' C 196  GLN  HA ', -0.527, (-75.447, 22.469, 33.749)), (' A   3  ARG  HD3', ' A   4  THR HG23', -0.521, (-55.614, 24.605, -10.988)), (' A   9  THR  HA ', ' A  55  PHE  O  ', -0.515, (-45.165, 30.653, 2.613)), (' C 185  LEU HD22', ' C 232  LYS  HG2', -0.511, (-71.038, 20.607, 37.452)), (' A 283  TYR  HD2', ' A 290  LEU HD11', -0.507, (-44.566, 37.069, 42.827)), (' A 224  CYS  SG ', ' A 226  CYS  N  ', -0.507, (1.193, 33.326, 39.007)), (' A  12  ASP  OD1', ' A  14  ILE  HB ', -0.502, (-41.008, 40.07, 6.163)), (' B 245  SER  HA ', ' B 301  THR  O  ', -0.499, (-24.244, -5.808, 38.258)), (' B 143  GLU  HA ', ' B 143  GLU  OE1', -0.499, (-10.662, 12.883, 22.592)), (' B 220  VAL HG12', ' B 221  GLN  N  ', -0.497, (-27.786, -19.146, 44.531)), (' B   4  THR HG22', ' B  22  ASP  HA ', -0.496, (-16.599, 23.158, -8.836)), (' C 174  GLN  OE1', ' C 202  VAL HG21', -0.495, (-62.632, 12.457, 22.74)), (' B 186  ASN  HB3', ' B 233  TYR  CZ ', -0.494, (-21.092, -27.565, 40.627)), (' C  10  THR HG21', ' C  13  ASN  HA ', -0.492, (-49.793, -6.69, 6.392)), (' B 264  TYR  HA ', ' B 272  HIS  O  ', -0.487, (-26.567, 5.166, 39.609)), (' B 147  PHE  CE2', ' B 151  ILE HD11', -0.484, (-15.373, 3.336, 24.074)), (' A 183  ARG  NE ', ' A 237  GLN  OE1', -0.483, (-17.411, 43.918, 34.519)), (' A 125  LEU HD12', ' A 178  LEU HD21', -0.481, (-27.691, 43.233, 26.168)), (' A 268  TYR  CZ ', ' B 272  HIS  CD2', -0.471, (-24.408, 11.699, 39.612)), (' B 151  ILE HG12', ' B 172  LEU HD21', -0.469, (-18.117, 0.663, 22.855)), (' B  60  ASN  C  ', ' B  60  ASN HD22', -0.467, (-20.574, 6.301, -3.429)), (' B 242  VAL  CG2', ' B 305  TYR  HB2', -0.466, (-14.422, -11.355, 38.231)), (' C 183  ARG  NH1', ' C 206  MET  O  ', -0.463, (-66.531, 14.697, 32.531)), (' C 234  LEU HD21', ' C 237  GLN  HB2', -0.463, (-73.271, 11.314, 36.182)), (' C 128  ASN  N  ', ' C 129  PRO  CD ', -0.463, (-62.057, 2.887, 16.855)), (' C 150  LEU  O  ', ' C 153  ALA  HB3', -0.462, (-50.9, 4.836, 17.333)), (' C  95  TYR  OH ', ' C 145  ALA  HA ', -0.461, (-45.404, -3.344, 22.859)), (' B 126  LYS  NZ ', ' B 137  TYR  OH ', -0.46, (-3.811, -3.075, 21.603)), (' C  59  PRO  HD3', ' C  80  LEU  CD2', -0.458, (-48.635, 3.528, 4.568)), (' A 280  GLU  OE2', ' A 283  TYR  OH ', -0.457, (-45.495, 42.061, 45.472)), (' C  59  PRO  HD3', ' C  80  LEU HD21', -0.456, (-49.169, 2.903, 4.257)), (' A 303  VAL HG12', ' A 305  TYR  CE2', -0.455, (-26.357, 39.9, 41.273)), (' B 185  LEU  O  ', ' B 196  GLN  HA ', -0.455, (-22.746, -26.464, 34.874)), (' C   9  THR  HA ', ' C  55  PHE  O  ', -0.453, (-45.56, -5.395, 2.726)), (' C 107  ALA  O  ', ' C 110  ASN  CG ', -0.453, (-41.056, 2.384, 28.968)), (' A 269  GLN  H  ', ' A 269  GLN  HG3', -0.448, (-29.21, 13.499, 35.835)), (' B  26  THR  HA ', ' B  45  LYS  HA ', -0.447, (-22.514, 23.79, -0.907)), (' A 121  GLN  HG2', ' A 140  ARG  HD3', -0.447, (-39.961, 40.795, 28.752)), (' B 185  LEU HD21', ' B 216  PHE  CZ ', -0.446, (-21.391, -19.464, 37.746)), (' C 169  MET  CB ', ' C 243  MET  HE1', -0.444, (-58.964, 9.13, 29.901)), (' A 143  GLU  HG2', ' A 143  GLU  O  ', -0.444, (-45.49, 36.368, 21.191)), (' C 217  LYS  O  ', ' C 233  TYR  HB2', -0.444, (-74.403, 17.184, 43.051)), (' A  73  HIS  CE1', ' A 129  PRO  HA ', -0.44, (-31.072, 41.057, 12.851)), (' B 213  TYR  CE1', ' B 242  VAL HG21', -0.44, (-15.303, -14.112, 38.443)), (' C 226  CYS  O  ', ' C 226  CYS  SG ', -0.44, (-71.302, 37.862, 41.051)), (' C  71  TYR  O  ', ' C 130  PRO  HD2', -0.437, (-59.419, 0.871, 11.305)), (' A 272  HIS  NE2', ' C 268  TYR  CZ ', -0.436, (-39.793, 22.922, 39.503)), (' B 108  ASP  N  ', ' B 108  ASP  OD1', -0.435, (-25.895, 15.803, 28.046)), (' B  72  TYR  O  ', ' B 154  TYR  OH ', -0.435, (-16.979, -1.347, 13.385)), (' B 135  ALA  O  ', ' B 139  ALA  N  ', -0.432, (-9.437, 6.47, 22.187)), (' B 234  LEU HD21', ' B 237  GLN  HB2', -0.43, (-14.802, -19.136, 37.117)), (' A  88  ASN  ND2', ' A  88  ASN  O  ', -0.428, (-46.434, 22.228, 16.826)), (' C 133  GLN  NE2', ' C 137  TYR  CE2', -0.425, (-62.23, -5.929, 19.165)), (' B 125  LEU  CD1', ' B 176  ALA  CB ', -0.425, (-13.563, -7.101, 23.669)), (' C  72  TYR  O  ', ' C 154  TYR  OH ', -0.424, (-56.286, 4.449, 12.691)), (' C 132  LEU  HA ', ' C 132  LEU HD23', -0.421, (-55.32, 0.122, 18.164)), (' A 187  VAL  HA ', ' A 231  THR  O  ', -0.42, (-5.938, 40.317, 40.571)), (' B 166  ARG  HD3', ' B 245  SER  CB ', -0.418, (-25.129, -7.072, 34.949)), (' B 186  ASN  HB3', ' B 233  TYR  CE2', -0.418, (-20.802, -27.074, 40.442)), (' C 260  CYS  HB2', ' C 275  HIS  CE1', -0.416, (-56.392, 1.042, 37.152)), (' C  36  LEU  HB2', ' C  55  PHE  CE1', -0.416, (-39.024, -6.354, 6.284)), (' B 263  GLU  O  ', ' B 273  TYR  HA ', -0.415, (-24.074, 4.542, 39.403)), (' B 275  HIS  C  ', ' B 276  ILE HD12', -0.415, (-17.509, 4.477, 41.446)), (' B 208  MET  HE3', ' B 247  PRO  HD3', -0.414, (-29.371, -8.585, 38.965)), (' B 207  TYR  CE2', ' B 209  GLY  HA3', -0.414, (-26.095, -14.139, 39.416)), (' B 287  GLY  N  ', ' B 502   CL CL  ', -0.409, (-19.019, 10.143, 36.774)), (' C   8  PHE  HE1', ' C  18  THR HG22', -0.409, (-48.453, -13.113, -1.032)), (' A 269  GLN  HG2', ' B 106  TRP  HZ2', -0.408, (-28.682, 13.128, 33.475)), (' C  21  VAL  CG1', ' C  31  PHE  CZ ', -0.408, (-41.172, -5.705, -3.507)), (' A 280  GLU  HG2', ' A 281  THR  N  ', -0.406, (-42.697, 43.676, 47.814)), (' C 239  SER  O  ', ' C 307  GLU  O  ', -0.405, (-71.72, 3.851, 33.393)), (' C  10  THR  O  ', ' C  56  TYR  HA ', -0.405, (-46.996, -3.001, 5.297)), (' A 241  PHE  HA ', ' A 305  TYR  O  ', -0.403, (-26.96, 45.048, 35.849)), (' C  50  HIS  O  ', ' C  51  GLU  C  ', -0.403, (-39.897, -14.684, 2.931)), (' C 277  THR  CG2', ' C 283  TYR  HB2', -0.402, (-54.802, -3.814, 41.791)), (' C 127  PHE  HB3', ' C 129  PRO  HD2', -0.402, (-60.591, 2.631, 17.95)), (' C 249  ALA  O  ', ' C 299  PRO  HA ', -0.401, (-52.333, 12.78, 45.815)), (' C  79  PHE  CE1', ' C 153  ALA  HB1', -0.401, (-50.094, 5.963, 14.739)), (' C   4  THR  HA ', ' C  21  VAL  O  ', -0.401, (-36.192, -10.482, -6.722))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
