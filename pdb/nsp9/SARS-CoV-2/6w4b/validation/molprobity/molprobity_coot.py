# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  19 ', 'THR', 0.08037766379472663, (61.98100000000001, -11.216000000000005, 34.908)), ('A', '  30 ', 'LEU', 0.09965491563279172, (58.166, -11.886999999999997, 19.912)), ('A', '  51 ', 'ASP', 0.0723595994364979, (59.717, -16.216, 33.79399999999998)), ('A', '  74 ', 'CYS', 0.10838806403931853, (49.166, -18.860000000000003, 28.887)), ('A', '  92 ', 'ILE', 0.29748905106021084, (49.811, -6.602, 28.116)), ('B', '   1 ', 'MET', 0.0, (48.417, -20.657, 39.179)), ('B', '  36 ', 'THR', 0.013599336671177298, (34.16200000000001, -27.654000000000007, 19.591)), ('B', '  92 ', 'ILE', 0.17053979096563718, (26.138999999999996, -13.143000000000004, 15.933))]
data['cbeta'] = []
data['probe'] = [(' A  80  THR  OG1', ' A  83  GLY  O  ', -0.671, (58.405, -28.119, 16.12)), (' B  17  ALA  O  ', ' B  28  ASN  ND2', -0.667, (20.857, -15.959, 1.609)), (' B  71  GLU  HG2', ' B  93  LYS  HA ', -0.621, (23.802, -9.602, 16.482)), (' B  81  PRO  HD3', ' B 112  ARG HH22', -0.554, (44.998, -9.892, -4.297)), (' B  16  ALA  HB3', ' B  56  ARG  HG2', -0.545, (21.659, -22.146, 5.037)), (' B  45  LEU HD12', ' B  70  LEU HD21', -0.52, (24.887, -14.078, 8.498)), (' A  34  ASN  HB2', ' A  43  LEU HD11', -0.506, (47.349, -3.752, 18.125)), (' A  52  LEU  HB2', ' A  90  TYR  CZ ', -0.486, (56.918, -14.536, 29.873)), (' B  36  THR HG22', ' B  39  GLY  O  ', -0.478, (31.211, -27.18, 19.318)), (' A  73  PRO  HB3', ' A  90  TYR  CE2', -0.477, (54.236, -15.438, 30.198)), (' B  10  LEU HD13', ' B 106  SER  HB2', -0.477, (39.629, -16.848, 13.88)), (' B  97  ASN  HA ', ' B 100  ARG  HD2', -0.477, (32.968, -8.209, 20.986)), (' A  20  THR  H  ', ' A  23  ALA  HB3', -0.471, (64.407, -9.478, 34.193)), (' A  80  THR HG21', ' A  85  LYS  HE2', -0.467, (58.348, -24.789, 16.703)), (' A   8  VAL HG11', ' A  34  ASN HD21', -0.465, (44.131, -3.548, 15.473)), (' A  73  PRO  O  ', ' B   3  ASN  HB2', -0.465, (49.236, -18.735, 31.803)), (' A  19  THR HG23', ' A  51  ASP  O  ', -0.454, (60.068, -13.872, 35.097)), (' B  61  ASP  OD1', ' B  62  GLY  N  ', -0.449, (22.91, -33.679, 13.892)), (' B  80  THR HG22', ' B  82  LYS  H  ', -0.441, (41.099, -8.941, -7.448)), (' A 102  MET  HB3', ' A 102  MET  HE2', -0.439, (43.595, -8.395, 16.506)), (' A  43  LEU HD23', ' A  99  ASN  HB3', -0.434, (44.791, -6.507, 21.149)), (' A  74  CYS  HA ', ' B   3  ASN  HB3', -0.432, (48.171, -19.381, 30.188)), (' A  61  ASP  OD1', ' A  62  GLY  N  ', -0.432, (62.982, 8.988, 21.624)), (' A  33  TYR  HA ', ' A  42  VAL  HA ', -0.426, (51.654, -4.38, 19.985)), (' B  15  CYS  SG ', ' B  45  LEU HD21', -0.426, (27.074, -17.903, 6.896)), (' B  36  THR HG23', ' B  38  GLY  H  ', -0.422, (31.64, -28.782, 21.75)), (' B  80  THR  HB ', ' B  83  GLY  O  ', -0.418, (39.536, -6.846, -5.316)), (' B  73  PRO  HB3', ' B  90  TYR  CE2', -0.411, (25.442, -7.541, 7.515)), (' B  51  ASP  N  ', ' B  51  ASP  OD1', -0.403, (21.294, -6.708, 2.297))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
