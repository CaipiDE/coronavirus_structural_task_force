# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  58 ', 'LYS', 0.004577237346033721, (44.50299999999997, 54.24699999999999, 40.042)), ('B', '   6 ', 'PRO', 0.04294313647149821, (32.08199999999999, 23.107, 40.983)), ('B', '  25 ', 'ASP', 0.005864235653501277, (45.378, 7.122, 21.324)), ('B', '  26 ', 'ASP', 0.004551639353973997, (47.12399999999998, 9.565, 23.637)), ('B', '  37 ', 'GLY', 0.034010158877522054, (25.999000000000002, 13.561000000000002, 31.726)), ('B', ' 116 ', 'HIS', 0.02379522606828957, (47.933999999999976, 12.575, 47.397)), ('B', ' 118 ', 'HIS', 0.03032393698249209, (46.58799999999998, 12.999, 40.298)), ('D', '  23 ', 'CYS', 0.020951406306429644, (74.828, 81.784, 8.479)), ('D', ' 110 ', 'VAL', 0.07378668639269255, (51.22199999999998, 70.27, 11.476))]
data['omega'] = []
data['rota'] = [('B', '  76 ', 'VAL', 0.2770996143390856, (53.17399999999999, 29.840999999999998, 22.091)), ('C', '  76 ', 'VAL', 0.23297982044001891, (45.13699999999999, 87.512, 36.065)), ('C', '  79 ', 'THR', 0.07734279357578763, (38.505, 90.39499999999998, 29.424))]
data['cbeta'] = []
data['probe'] = [(' D  41  VAL HG12', ' D  91  ILE HD11', -1.026, (66.784, 80.187, 19.209)), (' B  94  LEU HD12', ' B  99  ARG  HG3', -0.972, (34.289, 27.319, 23.886)), (' D  41  VAL  O  ', ' D  91  ILE HD12', -0.966, (65.637, 79.601, 21.277)), (' D  41  VAL  O  ', ' D  91  ILE  CD1', -0.865, (66.389, 80.487, 20.969)), (' A  75  PHE  CE1', ' A  77  THR  CG2', -0.837, (32.582, 29.753, 47.014)), (' C  79  THR HG22', ' C  81  LYS  H  ', -0.819, (35.951, 91.105, 29.888)), (' A  75  PHE  HE1', ' A  77  THR  CG2', -0.819, (33.516, 30.089, 46.938)), (' A  75  PHE  CE1', ' A  77  THR HG23', -0.779, (31.86, 30.224, 47.0)), (' A  57  PRO  HA ', ' A  64  THR HG22', -0.743, (42.815, 55.521, 43.302)), (' B  15  ALA  HA ', ' B  25  ASP  O  ', -0.737, (44.101, 9.41, 20.847)), (' D  41  VAL  CG1', ' D  91  ILE HD11', -0.733, (66.295, 80.333, 18.789)), (' C  46  SER  HA ', ' C 123  GOL  H32', -0.704, (37.001, 77.435, 35.526)), (' A  41  VAL  H  ', ' A 127  GOL  H12', -0.694, (38.918, 46.213, 35.714)), (' D  78  ASP  HB2', ' D 112  LEU HD23', -0.694, (48.264, 70.851, 7.331)), (' C  79  THR HG23', ' C  80  PRO  HD2', -0.692, (35.698, 89.252, 28.869)), (' D 111  ARG  C  ', ' D 112  LEU HD22', -0.683, (47.175, 70.303, 9.173)), (' B  79  THR  HB ', ' B  80  PRO  HD2', -0.678, (59.464, 23.345, 29.402)), (' A  18  THR HG22', ' A  50  ASP  O  ', -0.676, (25.085, 47.928, 47.986)), (' A   5  SER  HB2', ' A   6  PRO  HD2', -0.673, (46.109, 36.698, 25.324)), (' B   7  VAL HG23', ' B 101  MET  HE1', -0.663, (32.979, 25.541, 35.192)), (' D  41  VAL  C  ', ' D  91  ILE HD12', -0.651, (65.212, 80.084, 20.978)), (' A 129  GOL  H2 ', ' B  95  ASN HD22', -0.642, (26.695, 27.998, 25.509)), (' C  79  THR HG22', ' C  81  LYS  N  ', -0.639, (35.52, 91.738, 30.221)), (' A  75  PHE  HE1', ' A  77  THR HG21', -0.635, (33.686, 30.781, 47.192)), (' A 110  VAL HG12', ' A 111  ARG  N  ', -0.634, (36.697, 22.323, 48.415)), (' C  12  MET  HE2', ' C  56  PHE  HE2', -0.622, (37.261, 66.306, 30.702)), (' A  44  LEU HD11', ' A  54  ALA  HB2', -0.617, (33.931, 46.356, 43.72)), (' B   5  SER  N  ', ' B   6  PRO  CD ', -0.613, (29.143, 24.261, 42.222)), (' D  41  VAL  C  ', ' D  91  ILE  CD1', -0.598, (65.404, 80.327, 20.88)), (' C  79  THR HG23', ' C  80  PRO  CD ', -0.592, (35.676, 89.713, 28.917)), (' A  85  VAL  O  ', ' A  86  LYS  HG3', -0.576, (30.625, 34.42, 51.763)), (' C  12  MET  HE2', ' C  56  PHE  CE2', -0.576, (37.418, 65.901, 31.177)), (' A  44  LEU HD12', ' A  69  LEU HD11', -0.575, (32.335, 45.309, 43.774)), (' C  15  ALA  HA ', ' C  25  ASP  O  ', -0.573, (32.262, 69.751, 36.799)), (' D  44  LEU HD11', ' D  54  ALA  HB2', -0.567, (69.222, 78.864, 13.805)), (' D  45  LEU HD11', ' D  75  PHE  CE2', -0.561, (59.35, 71.368, 11.312)), (' D  22  ALA  O  ', ' D  24  THR HG23', -0.56, (75.605, 81.445, 4.966)), (' D  18  THR HG22', ' D  50  ASP  O  ', -0.558, (74.767, 71.792, 9.326)), (' A  51  LEU  HB2', ' A  89  TYR  CZ ', -0.557, (28.533, 43.349, 46.233)), (' A  75  PHE  CE1', ' A  77  THR HG21', -0.555, (33.344, 30.778, 47.511)), (' A  59  SER  HB3', ' A 151  HOH  O  ', -0.554, (47.339, 50.695, 37.469)), (' B  96  ASN  HA ', ' B  99  ARG  HD2', -0.548, (33.12, 31.37, 24.116)), (' A  11  GLN  HG2', ' A  29  LEU HD11', -0.545, (40.453, 37.027, 44.709)), (' D 106  LEU  HA ', ' D 109  THR HG22', -0.543, (52.838, 73.027, 14.828)), (' A  96  ASN  HA ', ' A  99  ARG  HD2', -0.539, (29.953, 36.506, 30.743)), (' A  67  THR HG21', ' A  91  ILE HD12', -0.537, (34.106, 47.347, 37.08)), (' B  25  ASP  O  ', ' B  27  ASN  N  ', -0.537, (46.055, 10.16, 21.276)), (' A  92  LYS  HD3', ' C  62  THR  HA ', -0.536, (29.108, 50.816, 34.136)), (' B  49  GLN  HB3', ' B  87  TYR  CZ ', -0.531, (49.326, 23.525, 14.173)), (' D  96  ASN  HA ', ' D  99  ARG  HD2', -0.529, (62.215, 71.135, 26.989)), (' D  59  SER  HB2', ' D 125  GOL  H2 ', -0.527, (65.816, 93.361, 18.607)), (' C  96  ASN  HA ', ' C  99  ARG  HD2', -0.526, (55.783, 71.019, 34.007)), (' B  84  LYS  HZ3', ' B 123  GOL  H11', -0.526, (57.087, 20.249, 24.847)), (' D 106  LEU  HA ', ' D 109  THR  CG2', -0.525, (53.179, 73.307, 14.463)), (' C  60  ASP  O  ', ' C  61  GLY  C  ', -0.522, (30.826, 52.195, 31.462)), (' A  95  ASN HD22', ' A 125  GOL  H32', -0.521, (34.542, 40.944, 25.383)), (' C   7  VAL HG12', ' C 101  MET  HE1', -0.518, (51.136, 67.769, 23.24)), (' A  80  PRO  HG3', ' A 111  ARG  NH1', -0.517, (42.181, 26.295, 53.708)), (' D  72  PRO  HB3', ' D  89  TYR  CE2', -0.512, (68.31, 70.645, 12.78)), (' C  79  THR  HB ', ' C  82  GLY  O  ', -0.512, (38.263, 90.577, 31.664)), (' B  35  SER  O  ', ' B  36  LYS  HB2', -0.512, (24.783, 16.912, 33.088)), (' C  55  ARG  HG2', ' C  55  ARG HH11', -0.512, (32.339, 62.773, 37.137)), (' C  72  PRO  HB3', ' C  89  TYR  CE2', -0.508, (43.863, 74.651, 41.406)), (' A  68  GLU  OE2', ' A  92  LYS  HD2', -0.505, (26.831, 50.898, 35.52)), (' A 104  GLU  HG2', ' B 101  MET  HE2', -0.502, (36.077, 26.413, 34.267)), (' D  38  GLY  HA2', ' D 125  GOL  H32', -0.501, (64.18, 92.705, 22.039)), (' C  18  THR HG22', ' C  50  ASP  O  ', -0.499, (38.229, 72.628, 46.321)), (' C  49  GLN  HB3', ' C  87  TYR  CZ ', -0.498, (41.359, 80.956, 43.522)), (' B   5  SER  O  ', ' B   7  VAL  N  ', -0.498, (31.64, 24.256, 39.042)), (' B 110  VAL  O  ', ' B 110  VAL HG23', -0.497, (43.275, 23.312, 39.95)), (' A  67  THR  CG2', ' A  91  ILE HD12', -0.494, (33.663, 47.184, 37.667)), (' B 113  GLN  OE1', ' B 117  HIS  HB3', -0.489, (43.72, 12.699, 44.121)), (' C  60  ASP  O  ', ' C  62  THR HG23', -0.486, (30.802, 50.63, 30.983)), (' A  41  VAL HG23', ' A 127  GOL  H32', -0.486, (40.437, 46.668, 38.007)), (' A 110  VAL  CG1', ' A 111  ARG  N  ', -0.484, (36.48, 22.208, 47.825)), (' D  49  GLN  H  ', ' D 127  GOL  H12', -0.483, (69.5, 69.596, 6.102)), (' B 109  THR HG23', ' B 119  HIS  NE2', -0.481, (46.442, 20.732, 36.642)), (' C  41  VAL  O  ', ' C  91  ILE HD13', -0.48, (46.392, 64.783, 33.198)), (' B  39  ARG  HG3', ' B  39  ARG HH11', -0.478, (33.879, 11.192, 33.052)), (' C   5  SER  N  ', ' C   6  PRO  CD ', -0.477, (50.956, 62.933, 16.004)), (' B  10  ARG  NH1', ' B 134  HOH  O  ', -0.473, (34.803, 18.532, 38.07)), (' B  94  LEU  CD1', ' B  99  ARG  HG3', -0.468, (33.692, 27.786, 24.894)), (' A  72  PRO  HB3', ' A  89  TYR  CE2', -0.468, (26.627, 41.18, 44.995)), (' A  45  LEU HD23', ' A  46  SER  N  ', -0.468, (33.32, 37.443, 47.822)), (' A  41  VAL  N  ', ' A 127  GOL  H12', -0.465, (39.104, 45.741, 36.117)), (' D 106  LEU  O  ', ' D 109  THR HG22', -0.465, (51.985, 72.719, 14.708)), (' B  94  LEU HD13', ' B  95  ASN  N  ', -0.465, (31.21, 27.164, 24.34)), (' B  94  LEU HD11', ' B  98  ASN  HB2', -0.463, (32.923, 26.521, 26.308)), (' D  30  ALA  HB2', ' D  44  LEU  CD2', -0.462, (65.165, 80.872, 14.333)), (' D 111  ARG  O  ', ' D 112  LEU HD22', -0.46, (46.756, 71.136, 9.899)), (' C  33  ASN  HB3', ' C  35  SER  OG ', -0.456, (47.605, 63.23, 24.814)), (' D  45  LEU HD11', ' D  75  PHE  CZ ', -0.455, (58.813, 71.967, 11.42)), (' C 111  ARG  NH2', ' C 115  GLU  O  ', -0.454, (36.082, 74.325, 12.134)), (' A  11  GLN HE21', ' A  31  TYR  HD2', -0.453, (40.998, 35.734, 40.772)), (' D  49  GLN  HA ', ' D  89  TYR  OH ', -0.451, (68.646, 70.261, 9.621)), (' B  24  THR  O  ', ' B  25  ASP  HB3', -0.449, (45.755, 5.265, 20.663)), (' D 106  LEU  CA ', ' D 109  THR HG22', -0.449, (53.086, 73.202, 15.461)), (' A  30  ALA  HB2', ' A  44  LEU  CD2', -0.448, (37.378, 43.562, 43.58)), (' D  55  ARG  HG3', ' D  66  TYR  CZ ', -0.445, (75.942, 85.66, 13.063)), (' A  11  GLN  CG ', ' A  29  LEU HD11', -0.445, (40.783, 37.374, 44.684)), (' D  57  PRO  HA ', ' D  64  THR  HA ', -0.443, (72.583, 90.603, 15.538)), (' A  44  LEU HD11', ' A  54  ALA  CB ', -0.442, (34.168, 46.848, 43.869)), (' C  42  LEU HD23', ' C  98  ASN  HB3', -0.441, (51.2, 68.136, 29.855)), (' B  94  LEU  CD1', ' B  98  ASN  HB2', -0.44, (32.483, 26.542, 26.011)), (' A 110  VAL HG12', ' A 111  ARG  H  ', -0.438, (36.457, 22.067, 48.781)), (' B  94  LEU HD13', ' B  95  ASN  O  ', -0.436, (32.2, 27.818, 24.919)), (' B  10  ARG  NH2', ' B 126  HOH  O  ', -0.435, (33.644, 16.15, 39.971)), (' D  45  LEU HD11', ' D  75  PHE  HE2', -0.43, (59.542, 71.427, 11.819)), (' A  44  LEU HD12', ' A  69  LEU  CD1', -0.429, (31.545, 45.258, 43.808)), (' B  45  LEU HD22', ' B 106  LEU HD11', -0.428, (46.337, 24.052, 27.337)), (' B  72  PRO  HB3', ' B  89  TYR  CE2', -0.425, (43.127, 22.615, 16.66)), (' A  58  LYS  H  ', ' A  64  THR  HA ', -0.424, (42.615, 55.272, 41.322)), (' D   4  LEU  N  ', ' D 157  HOH  O  ', -0.424, (61.489, 84.006, 29.378)), (' C  55  ARG  HG2', ' C  55  ARG  NH1', -0.424, (31.89, 63.097, 37.199)), (' C   5  SER  N  ', ' C   6  PRO  HD3', -0.423, (51.072, 63.138, 15.437)), (' C  20  GLN  HG2', ' C  66  TYR  CD2', -0.421, (36.414, 61.862, 43.297)), (' D  42  LEU  N  ', ' D  42  LEU HD12', -0.419, (62.738, 81.012, 22.055)), (' C 113  GLN  HB3', ' D 113  GLN  NE2', -0.419, (40.178, 68.92, 12.595)), (' B  84  LYS  NZ ', ' B 123  GOL  H31', -0.418, (56.907, 21.054, 26.0)), (' C  96  ASN HD22', ' D 128  GOL  C1 ', -0.417, (61.63, 70.257, 34.604)), (' D  95  ASN  HB2', ' D 128  GOL  O3 ', -0.416, (63.383, 73.814, 32.166)), (' D  51  LEU  HB2', ' D  89  TYR  CZ ', -0.415, (69.407, 72.732, 11.588)), (' A  55  ARG  HB3', ' A  66  TYR  CE2', -0.415, (35.563, 54.074, 44.946)), (' C  96  ASN HD22', ' D 128  GOL  H11', -0.413, (61.201, 70.254, 34.801)), (' B  19  THR  H  ', ' B  22  ALA  HB3', -0.411, (41.714, 11.171, 11.398)), (' B  84  LYS  HB2', ' B  84  LYS  HE3', -0.411, (58.083, 23.675, 24.389)), (' A  94  LEU HD23', ' A  99  ARG  HG3', -0.41, (32.0, 38.383, 33.266)), (' D  11  GLN  HB3', ' D  29  LEU HD11', -0.409, (58.581, 82.073, 12.228)), (' B  36  LYS  O  ', ' B  38  GLY  N  ', -0.403, (27.108, 12.728, 33.58)), (' D  94  LEU HD23', ' D  99  ARG  HG3', -0.403, (63.211, 73.775, 24.539)), (' B  75  PHE  CZ ', ' B  86  LYS  HB2', -0.403, (49.468, 25.694, 23.102)), (' B 111  ARG HH12', ' B 117  HIS  H  ', -0.4, (47.089, 14.04, 44.271)), (' D  45  LEU  CD1', ' D  75  PHE  HE2', -0.4, (60.031, 71.662, 11.239))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
