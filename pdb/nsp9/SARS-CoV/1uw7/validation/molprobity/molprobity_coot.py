# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  -1 ', 'PRO', 0.0, (-14.131, 32.389, 10.559)), ('A', '  36 ', 'LYS', 0.006628810829137001, (-1.5839999999999999, 31.59999999999999, 20.116)), ('A', '  59 ', 'SER', 0.033237312586335964, (8.878, 37.227, 25.074)), ('A', '  95 ', 'ASN', 0.02162596325845856, (3.352, 27.878, 5.159))]
data['omega'] = []
data['rota'] = [('A', '  -7 ', 'GLU', 0.10312780188429663, (-0.19200000000000006, 44.646, 6.81)), ('A', '  -1 ', 'PRO', 0.007046346757859659, (-14.131, 32.389, 10.559)), ('A', '   3 ', 'GLU', 0.00530125451392871, (-14.794000000000002, 37.317, 7.801)), ('A', '   4 ', 'LEU', 0.007929099932701179, (-11.456, 38.839, 6.756)), ('A', '  11 ', 'GLN', 0.22910907970232242, (8.423, 44.131, 12.336)), ('A', '  18 ', 'THR', 0.21961651803789972, (25.259, 31.972000000000005, 9.442)), ('A', '  27 ', 'ASN', 0.0029519095885182194, (21.56, 42.782, 10.869)), ('A', '  44 ', 'LEU', 0.05006011021002403, (13.63, 38.378, 7.593)), ('A', '  45 ', 'LEU', 0.12014307526357881, (14.521999999999998, 41.362, 5.444)), ('A', '  48 ', 'HIS', 0.020103267367617993, (23.094, 40.282, 3.817)), ('A', '  49 ', 'GLN', 0.0, (22.398, 37.114, 1.827)), ('A', '  50 ', 'ASP', 0.00913922312693272, (24.766, 35.305, 4.076)), ('A', '  73 ', 'CYS', 0.07333128341914422, (15.183, 36.138, -1.997)), ('A', '  74 ', 'ARG', 0.006891779172458295, (16.943, 39.034, -3.6399999999999997)), ('A', '  76 ', 'VAL', 0.04603776269971181, (16.102, 45.75399999999999, -4.86)), ('A', '  78 ', 'ASP', 0.12414229413788902, (15.112999999999998, 52.626, -3.826)), ('A', '  94 ', 'LEU', 0.0774633136341342, (6.863, 28.704, 6.28)), ('A', ' 101 ', 'MET', 0.048589798699297096, (0.6429999999999999, 36.664, 2.518)), ('A', ' 102 ', 'VAL', 0.1282162184990144, (3.956, 38.473, 2.995)), ('A', ' 109 ', 'THR', 0.028817263842301693, (6.618, 48.527, -0.814)), ('A', ' 111 ', 'ARG', 0.08755947284926925, (7.87, 49.163, -5.957)), ('A', ' 113 ', 'GLN', 0.12666920424650685, (10.502, 54.736, -7.535))]
data['cbeta'] = []
data['probe'] = [(' A  27  ASN  H  ', ' A  27  ASN HD22', -0.99, (20.37, 41.693, 11.965)), (' A  11  GLN  HB2', ' A  29  LEU HD11', -0.947, (10.249, 45.1, 10.573)), (' A   4  LEU  H  ', ' A   4  LEU HD23', -0.876, (-13.321, 38.66, 5.055)), (' A  58  LYS  HE3', ' A  63  GLY  H  ', -0.851, (13.235, 32.136, 26.939)), (' A  70  GLU  HB2', ' A  90  PHE  O  ', -0.841, (12.425, 30.61, 4.399)), (' A  16  ALA  H  ', ' A  27  ASN HD21', -0.835, (20.946, 38.895, 12.038)), (' A  58  LYS  HE3', ' A  62  THR  HB ', -0.805, (12.159, 32.293, 27.355)), (' A  27  ASN  N  ', ' A  27  ASN HD22', -0.793, (21.034, 41.85, 12.471)), (' A  27  ASN  N  ', ' A  27  ASN  ND2', -0.767, (21.328, 41.009, 12.071)), (' A  27  ASN  H  ', ' A  27  ASN  ND2', -0.765, (21.337, 40.97, 12.251)), (' A  19  THR HG22', ' A  21  THR  H  ', -0.763, (25.823, 29.868, 15.406)), (' A  49  GLN  H  ', ' A  49  GLN HE21', -0.755, (24.686, 38.64, 1.725)), (' A  74  ARG  HB2', ' A  74  ARG  NH1', -0.75, (18.849, 40.109, -6.043)), (' A 107  ALA  O  ', ' A 110  VAL HG22', -0.749, (7.102, 45.555, -4.569)), (' A   8  ALA  HB1', ' A  -9  PHE  CE2', -0.736, (1.014, 46.843, 11.863)), (' A  16  ALA  N  ', ' A  27  ASN HD21', -0.714, (21.38, 38.614, 12.772)), (' A  47  ASP  OD1', ' A  84  LYS  HE2', -0.69, (20.324, 47.558, 2.171)), (' A  16  ALA  H  ', ' A  27  ASN  ND2', -0.679, (20.952, 39.461, 11.817)), (' A   4  LEU  N  ', ' A   4  LEU HD23', -0.676, (-12.96, 38.175, 5.928)), (' A  58  LYS  HE3', ' A  63  GLY  N  ', -0.671, (13.626, 32.077, 28.056)), (' A  75  PHE  HE1', ' A  77  THR  HG1', -0.671, (13.119, 46.412, -2.415)), (' A  28  ALA  HB2', ' A  46  SER  HB2', -0.669, (18.634, 40.53, 7.427)), (' A  32  TYR  HB3', ' A  41  VAL  HA ', -0.655, (7.304, 37.601, 13.096)), (' A  95  ASN  HB3', ' A  98  ASN HD22', -0.651, (2.148, 29.457, 6.615)), (' A  -5  LEU  O  ', ' A  -5  LEU HD12', -0.645, (-6.364, 38.528, 4.933)), (' A  -8  LEU  CD2', ' A 106  LEU  HB3', -0.626, (5.58, 44.183, 3.318)), (' A  19  THR  HB ', ' A  22  ALA  H  ', -0.609, (26.77, 31.938, 14.378)), (' A  12  MET  O  ', ' A  29  LEU HD12', -0.606, (12.287, 43.36, 12.125)), (' A  11  GLN  HA ', ' A  30  ALA  O  ', -0.605, (8.831, 42.577, 11.768)), (' A  45  LEU  CD2', ' A  86  LYS  HB3', -0.6, (15.458, 43.676, 1.77)), (' A 102  VAL HG22', ' A 103  LEU  N  ', -0.59, (5.822, 37.62, 1.496)), (' A   4  LEU  HB2', ' A  -5  LEU HD13', -0.589, (-9.631, 39.255, 4.687)), (' A  -8  LEU HD21', ' A 106  LEU  HB3', -0.587, (6.175, 44.204, 2.752)), (' A  -9  PHE  HA ', ' A  11  GLN  NE2', -0.584, (6.135, 48.044, 9.069)), (' A  35  SER  O  ', ' A  37  GLY  N  ', -0.577, (0.588, 32.309, 20.256)), (' A  19  THR HG22', ' A  21  THR  N  ', -0.575, (25.89, 30.378, 15.871)), (' A  49  GLN  HB3', ' A  87  TYR  CD1', -0.574, (20.936, 37.864, -0.891)), (' A  -1  PRO  O  ', ' A  -2  GLY  O  ', -0.573, (-15.089, 34.36, 10.243)), (' A  35  SER  O  ', ' A  36  LYS  C  ', -0.554, (0.084, 32.332, 20.257)), (' A  28  ALA  CB ', ' A  46  SER  HB2', -0.553, (17.783, 40.743, 7.903)), (' A  -6  VAL HG13', ' A  -7  GLU  O  ', -0.552, (0.48, 41.773, 5.038)), (' A   8  ALA  HB1', ' A  -9  PHE  HE2', -0.551, (0.577, 46.987, 12.374)), (' A  39  ARG  HG3', ' A  39  ARG HH11', -0.549, (8.517, 38.66, 19.812)), (' A  48  HIS  CD2', ' A  48  HIS  N  ', -0.548, (22.823, 41.944, 4.687)), (' A  49  GLN  HG2', ' A  87  TYR  CZ ', -0.541, (22.467, 39.138, -1.449)), (' A  49  GLN  H  ', ' A  49  GLN  NE2', -0.535, (24.512, 38.151, 1.514)), (' A  42  LEU  HB3', ' A  94  LEU HD11', -0.535, (6.266, 34.152, 7.122)), (' A  72  PRO  HG3', ' A  89  TYR  CE1', -0.532, (19.897, 34.307, 2.778)), (' A 106  LEU  H  ', ' A 106  LEU HD23', -0.529, (5.103, 41.903, 0.219)), (' A  95  ASN  CB ', ' A  98  ASN HD22', -0.526, (1.647, 29.405, 6.613)), (' A  -9  PHE  HA ', ' A  11  GLN HE22', -0.517, (5.502, 47.623, 8.796)), (' A  49  GLN  CG ', ' A  87  TYR  CZ ', -0.515, (22.412, 39.184, -0.976)), (' A  80  PRO  O  ', ' A  81  LYS  HB2', -0.507, (21.623, 55.749, 0.956)), (' A  -8  LEU HD21', ' A 106  LEU  CB ', -0.505, (6.611, 44.471, 2.636)), (' A  52  LYS  NZ ', ' A  68  GLU  OE2', -0.505, (20.054, 25.157, 8.494)), (' A  -9  PHE  CE1', ' A  10  ARG  HA ', -0.503, (4.346, 45.726, 12.093)), (' A  18  THR HG23', ' A  50  ASP  OD1', -0.503, (26.62, 33.946, 6.472)), (' A  -8  LEU  N  ', ' A  -8  LEU HD12', -0.503, (4.67, 47.294, 6.682)), (' A 102  VAL  CG2', ' A 103  LEU  N  ', -0.501, (5.736, 38.378, 1.731)), (' A  49  GLN  HG3', ' A  87  TYR  CE2', -0.495, (23.039, 39.636, -0.036)), (' A  75  PHE  HE1', ' A  77  THR  OG1', -0.494, (12.801, 46.646, -1.991)), (' A  74  ARG  CZ ', ' A  74  ARG  HB2', -0.492, (18.579, 39.637, -6.27)), (' A  18  THR  CG2', ' A  50  ASP  OD1', -0.492, (26.622, 33.747, 6.288)), (' A  32  TYR  CB ', ' A  41  VAL  HA ', -0.483, (6.84, 37.374, 13.086)), (' A  12  MET  HE1', ' A  39  ARG  HD2', -0.481, (8.957, 38.698, 17.349)), (' A  51  LEU  HB2', ' A  89  TYR  CE1', -0.48, (20.11, 35.003, 5.39)), (' A  74  ARG  CB ', ' A  74  ARG  NH1', -0.48, (19.056, 39.207, -5.372)), (' A  58  LYS  CE ', ' A  63  GLY  H  ', -0.473, (13.475, 32.042, 26.935)), (' A  60  ASP  HB2', ' A  62  THR  OG1', -0.473, (10.488, 33.475, 29.452)), (' A  38  GLY  O  ', ' A  39  ARG  HB2', -0.465, (6.035, 35.288, 19.935)), (' A  74  ARG  CB ', ' A  74  ARG HH11', -0.464, (19.187, 39.278, -5.142)), (' A  45  LEU HD21', ' A  86  LYS  HB3', -0.461, (14.953, 43.677, 1.881)), (' A  95  ASN  HB3', ' A  98  ASN  HB2', -0.456, (2.637, 30.037, 5.945)), (' A  58  LYS  CE ', ' A  63  GLY  N  ', -0.455, (13.596, 31.866, 27.142)), (' A  30  ALA  HA ', ' A  44  LEU HD22', -0.451, (12.969, 39.048, 10.36)), (' A   4  LEU  CD2', ' A   4  LEU  N  ', -0.45, (-12.722, 38.248, 5.258)), (' A 111  ARG  HD2', ' A 111  ARG  O  ', -0.449, (5.858, 51.054, -6.376)), (' A   7  VAL HG21', ' A  -4  PHE  HB3', -0.449, (-5.947, 39.302, 10.972)), (' A  20  GLN  O  ', ' A  23  CYS  HB2', -0.449, (23.473, 33.84, 16.787)), (' A   1  ASN  CB ', ' A  -1  PRO  O  ', -0.447, (-16.811, 33.876, 10.622)), (' A  58  LYS  C  ', ' A  60  ASP  H  ', -0.444, (10.526, 36.008, 26.134)), (' A  51  LEU  HB2', ' A  89  TYR  CZ ', -0.443, (20.224, 35.651, 5.339)), (' A  35  SER  O  ', ' A  37  GLY  C  ', -0.443, (1.226, 33.224, 19.994)), (' A   7  VAL  CG2', ' A  -4  PHE  HB3', -0.442, (-5.95, 40.042, 10.884)), (' A  32  TYR  CD2', ' A  39  ARG  HD3', -0.44, (6.351, 38.915, 17.141)), (' A  71  PRO  HA ', ' A  72  PRO  HD3', -0.44, (19.057, 30.876, 1.616)), (' A  74  ARG  HB2', ' A  74  ARG HH11', -0.439, (19.508, 39.851, -5.194)), (' A  49  GLN  HA ', ' A  89  TYR  OH ', -0.438, (21.227, 36.847, 2.718)), (' A  -9  PHE  CD1', ' A  11  GLN  NE2', -0.436, (5.613, 47.597, 10.224)), (' A  40  PHE  CE2', ' A  42  LEU HD21', -0.432, (3.327, 33.588, 10.408)), (' A   9  LEU  HA ', ' A   9  LEU HD12', -0.43, (2.15, 41.14, 10.183)), (' A  43  ALA  C  ', ' A  44  LEU HD23', -0.425, (12.292, 37.422, 9.03)), (' A   5  SER  HA ', ' A   6  PRO  HD3', -0.416, (-10.539, 43.023, 7.703)), (' A  -8  LEU HD23', ' A 106  LEU  HB3', -0.416, (5.475, 43.628, 3.465)), (' A  19  THR HG22', ' A  20  GLN  N  ', -0.413, (25.209, 29.724, 14.855)), (' A   1  ASN  HB3', ' A  -1  PRO  O  ', -0.413, (-17.218, 34.189, 10.315)), (' A  10  ARG  O  ', ' A  31  TYR  HA ', -0.413, (7.479, 41.686, 10.823)), (' A  80  PRO  O  ', ' A  81  LYS  CB ', -0.407, (21.551, 55.996, 0.966)), (' A  32  TYR  CE2', ' A  39  ARG  NE ', -0.403, (6.715, 40.282, 17.751)), (' A  -5  LEU  C  ', ' A  -5  LEU HD12', -0.402, (-6.419, 39.274, 5.715)), (' A  75  PHE  C  ', ' A  75  PHE  CD1', -0.401, (14.779, 43.686, -3.855)), (' A  35  SER  C  ', ' A  37  GLY  N  ', -0.401, (0.214, 32.414, 19.482)), (' A  90  PHE  HD2', ' A  94  LEU HD13', -0.4, (7.904, 32.848, 4.892)), (' A  55  ARG  HB2', ' A  66  TYR  CE1', -0.4, (20.242, 33.554, 17.935))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
