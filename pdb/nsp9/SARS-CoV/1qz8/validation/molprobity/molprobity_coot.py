# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'PRO', 0.0, (-3.9849999999999874, 76.912, 78.855)), ('A', '   7 ', 'VAL', 0.00512602, (-1.129, 75.87799999999999, 81.33200000000002)), ('A', '  36 ', 'LYS', 0.005555153419396838, (3.458000000000025, 84.81999999999996, 87.681)), ('A', '  60 ', 'ASP', 0.047736901080984454, (17.44500000000003, 87.18799999999999, 89.77900000000002))]
data['omega'] = [('A', '   7 ', 'VAL', None, (-1.8609999999999993, 76.329, 80.071))]
data['rota'] = [('A', '   7 ', 'VAL', 0.16770525625798607, (-1.129, 75.87799999999999, 81.33200000000002)), ('A', '   9 ', 'LEU', 0.0, (3.899000000000013, 71.416, 82.91200000000003)), ('A', '  10 ', 'ARG', 0.18965149332407102, (7.676000000000014, 71.574, 82.76600000000003)), ('A', '  18 ', 'THR', 0.07420076430697543, (16.772999999999996, 66.01199999999997, 104.36700000000003)), ('A', '  24 ', 'THR', 0.023919658369448572, (23.033999999999992, 68.914, 97.105)), ('A', '  29 ', 'LEU', 0.0, (13.304000000000022, 66.195, 89.127)), ('A', '  36 ', 'LYS', 0.007411525820310772, (3.458000000000025, 84.81999999999996, 87.681)), ('A', '  45 ', 'LEU', 0.0941100976885863, (10.51500000000002, 63.06199999999998, 91.698)), ('A', '  58 ', 'LYS', 0.0, (16.994000000000007, 82.44, 91.72600000000003)), ('A', '  59 ', 'SER', 0.15134835945432856, (18.30900000000002, 83.74499999999998, 88.351)), ('A', '  60 ', 'ASP', 0.08154170147993751, (17.44500000000003, 87.18799999999999, 89.77900000000002)), ('A', '  64 ', 'THR', 0.03731273130984243, (17.790999999999997, 81.11899999999999, 96.882)), ('A', '  69 ', 'LEU', 0.0, (8.165000000000004, 68.897, 100.58100000000003)), ('A', '  74 ', 'ARG', 0.015878199378965015, (6.041000000000007, 55.266, 96.684)), ('A', '  85 ', 'VAL', 0.0662533690380831, (11.158999999999994, 52.487999999999985, 92.81)), ('A', '  91 ', 'ILE', 0.0, (5.071000000000004, 70.58599999999997, 97.643)), ('A', '  94 ', 'LEU', 0.06584543469561821, (-0.34100000000000225, 71.94699999999999, 96.84)), ('A', '  99 ', 'ARG', 0.11270236702582333, (-1.6639999999999886, 67.43399999999998, 92.51)), ('A', ' 101 ', 'MET', 0.0, (-1.7479999999999993, 67.535, 87.052)), ('A', ' 110 ', 'VAL', 0.07225804501099312, (5.578000000000015, 56.49599999999999, 82.545)), ('A', ' 112 ', 'LEU', 0.068322440583385, (3.835000000000006, 51.83299999999999, 86.232)), ('B', '   4 ', 'LEU', 0.001639661174207957, (-2.625999999999992, 58.68499999999999, 96.212)), ('B', '  11 ', 'GLN', 0.11831583456446304, (-8.464999999999991, 56.096000000000004, 76.25800000000001)), ('B', '  18 ', 'THR', 0.029427838815459, (-27.36, 65.582, 73.337)), ('B', '  24 ', 'THR', 0.19680703986121253, (-25.047000000000004, 56.823000000000015, 68.255)), ('B', '  29 ', 'LEU', 0.0014481014174752107, (-12.764999999999995, 59.597, 73.049)), ('B', '  36 ', 'LYS', 0.0, (-12.797, 47.403, 91.23800000000001)), ('B', '  42 ', 'LEU', 0.040813660109501666, (-13.221999999999985, 60.856999999999985, 83.992)), ('B', '  45 ', 'LEU', 0.14618851410800077, (-12.911, 64.477, 74.108)), ('B', '  49 ', 'GLN', 0.021977254622404883, (-19.80999999999999, 70.945, 70.686)), ('B', '  55 ', 'ARG', 0.009938113395675659, (-22.80500000000001, 55.795000000000016, 76.788)), ('B', '  62 ', 'THR', 0.024501641573503097, (-25.323999999999995, 43.07199999999999, 81.77900000000001)), ('B', '  64 ', 'THR', 0.016228633054078425, (-25.106000000000005, 49.96800000000001, 79.758)), ('B', '  69 ', 'LEU', 0.0, (-21.316000000000006, 65.346, 80.955)), ('B', '  70 ', 'GLU', 0.24130624445698978, (-20.386999999999993, 68.794, 82.166)), ('B', '  81 ', 'LYS', 0.0, (-3.3959999999999972, 70.337, 58.712)), ('B', '  86 ', 'LYS', 0.17530259919773553, (-11.768999999999995, 70.117, 70.313)), ('B', '  88 ', 'LEU', 0.001275878007949504, (-13.159999999999988, 68.548, 76.759)), ('B', '  92 ', 'LYS', 0.0, (-20.662999999999993, 65.606, 86.101)), ('B', '  94 ', 'LEU', 0.004914310176473124, (-15.60899999999999, 65.071, 88.816)), ('B', ' 106 ', 'LEU', 0.0, (-4.299000000000002, 65.699, 77.84900000000003)), ('B', ' 110 ', 'VAL', 0.13305202004820216, (-2.623999999999991, 65.481, 72.63)), ('B', ' 112 ', 'LEU', 0.07510328347137142, (-1.7399999999999833, 71.01, 72.825))]
data['cbeta'] = [('A', '  73 ', 'CYS', ' ', 0.3540094487747549, (3.736000000000003, 58.80299999999999, 96.186)), ('B', '  27 ', 'ASN', ' ', 0.2926796612500953, (-19.640999999999995, 61.03000000000001, 69.604)), ('B', '  78 ', 'ASP', ' ', 0.3298581641840551, (-1.3959999999999968, 72.785, 66.307))]
data['probe'] = [(' A  52  LYS  HE3', ' A 709  HOH  O  ', -0.931, (10.264, 69.992, 107.866)), (' A 691  SO4  O2 ', ' A 709  HOH  O  ', -0.898, (10.062, 71.123, 108.85)), (' A   4  LEU HD13', ' B  74  ARG  HB3', -0.67, (-12.261, 76.942, 73.451)), (' B  10  ARG  NH1', ' B 695  SO4  O1 ', -0.652, (-5.805, 49.854, 82.917)), (' A  41  VAL HG12', ' A  91  ILE  CD1', -0.63, (7.413, 71.723, 93.434)), (' A  74  ARG  HG2', ' A  87  TYR  CE2', -0.573, (8.884, 55.543, 98.089)), (' A  14  CYS  O  ', ' A  26  ASP  HA ', -0.561, (18.46, 68.029, 91.784)), (' B  44  LEU HD11', ' B  54  ALA  HB2', -0.534, (-19.831, 60.669, 76.75)), (' A  92  LYS  NZ ', ' A 699  HOH  O  ', -0.53, (3.972, 76.396, 107.234)), (' B  94  LEU  O  ', ' B  99  ARG  NH1', -0.518, (-14.628, 68.313, 88.792)), (' A   4  LEU  HA ', ' B  74  ARG  O  ', -0.518, (-11.083, 76.459, 75.893)), (' A  18  THR HG22', ' A  50  ASP  O  ', -0.509, (15.495, 63.333, 104.012)), (' A   6  PRO  C  ', ' A   7  VAL HG23', -0.506, (-3.75, 76.13, 80.499)), (' A  79  THR  HB ', ' A  80  PRO  HD2', -0.502, (13.729, 52.21, 82.281)), (' B  78  ASP  OD2', ' B 113  GLN  HG3', -0.489, (0.052, 74.247, 67.795)), (' B  30  ALA  HB2', ' B  44  LEU  CD2', -0.47, (-15.418, 58.977, 76.863)), (' B  77  THR  HA ', ' B 111  ARG  O  ', -0.455, (-3.325, 70.651, 70.234)), (' A   4  LEU  CD1', ' B  74  ARG  HB3', -0.449, (-12.002, 77.331, 73.584)), (' A  52  LYS  CE ', ' A  53  TRP  HE1', -0.431, (13.148, 70.906, 106.668)), (' A  18  THR  CG2', ' A  50  ASP  O  ', -0.43, (15.913, 63.282, 104.257)), (' B 107  ALA  HA ', ' B 112  LEU HD22', -0.422, (-2.066, 68.817, 76.394)), (' B  95  ASN  C  ', ' B  95  ASN  OD1', -0.418, (-11.961, 65.865, 91.407)), (' B  79  THR  CB ', ' B  80  PRO  CD ', -0.408, (-2.868, 67.463, 62.487)), (' A  52  LYS  HE2', ' A  53  TRP  NE1', -0.401, (12.785, 71.401, 105.924))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
