# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 484 ', 'VAL', 0.024785934426342523, (-33.32199999999998, 36.797, -79.874)), ('B', ' 191 ', 'SER', 0.03956750446672966, (-31.263, 10.798000000000002, -56.716))]
data['omega'] = []
data['rota'] = [('B', '  46 ', 'ASN', 0.19544240457680176, (-1.711999999999998, -4.927, -50.653)), ('B', '  69 ', 'SER', 0.07896839596569913, (0.9539999999999971, -13.689999999999998, -53.471)), ('B', '  95 ', 'ASN', 0.03951195383763881, (15.193999999999999, -4.273, -40.409)), ('B', '  96 ', 'THR', 0.0, (14.27, -0.8440000000000012, -38.99)), ('B', ' 103 ', 'VAL', 0.04135486477923506, (0.9429999999999996, -2.469000000000001, -26.452999999999996)), ('B', ' 188 ', 'THR', 0.06256000472523769, (-36.027, 13.219, -57.31999999999999)), ('B', ' 191 ', 'SER', 0.10464102368490724, (-31.263, 10.798000000000002, -56.716)), ('B', ' 192 ', 'LYS', 0.0, (-31.638000000000012, 13.387000000000004, -53.961)), ('B', ' 193 ', 'VAL', 0.18043756720745302, (-30.528999999999996, 16.871, -52.919)), ('B', ' 220 ', 'ASN', 0.12075793120402648, (-44.13400000000001, 17.95499999999999, -48.282)), ('B', ' 293 ', 'ILE', 0.198739373446648, (-10.274999999999999, 41.443000000000005, -28.90599999999999)), ('B', ' 328 ', 'ASP', 0.2814373031708965, (-11.506999999999998, 46.50400000000001, -43.239)), ('A', '  46 ', 'ASN', 0.2094159099779371, (-2.4529999999999994, 54.771, -45.845)), ('A', ' 258 ', 'ILE', 0.09885378355829257, (-0.6159999999999997, -5.32, -67.346)), ('A', ' 502 ', 'ARG', 0.0, (-37.027, 7.465, -96.609)), ('A', ' 530 ', 'THR', 0.026732261947642152, (-31.525999999999996, 16.736000000000008, -79.113))]
data['cbeta'] = []
data['probe'] = [(' A  12  THR HG22', ' A  14  LEU  H  ', -0.85, (4.502, 48.14, -52.817)), (' B  27  CYS  SG ', ' B 915  HOH  O  ', -0.786, (8.413, -5.271, -41.609)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.755, (-18.585, 8.719, -89.266)), (' B 201  GLU  OE2', ' B 801  HOH  O  ', -0.718, (-38.119, 22.029, -26.489)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.673, (-11.64, 27.393, -23.186)), (' A  12  THR HG21', ' A  25  LEU  O  ', -0.656, (5.44, 47.679, -54.844)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.64, (-34.111, 13.918, -4.385)), (' B   2  VAL  N  ', ' B 806  HOH  O  ', -0.629, (2.228, 1.784, -48.032)), (' A 534  ASP  OD2', ' A 801  HOH  O  ', -0.602, (-22.025, 24.233, -79.685)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.587, (-33.146, 34.781, -21.532)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.582, (5.562, 44.682, -64.54)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.573, (-6.507, 27.872, -20.547)), (' A 498  GLU  HB3', ' A 502  ARG HH22', -0.569, (-38.315, 14.304, -98.554)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.564, (4.506, -1.459, -42.195)), (' B  44  SER  OG ', ' B  45  VAL  N  ', -0.563, (1.571, -3.504, -48.325)), (' A 480  ILE HG12', ' A 550  THR HG22', -0.556, (-28.723, 31.129, -90.632)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.553, (3.856, -1.988, -39.336)), (' B  48  TYR  O  ', ' B 802  HOH  O  ', -0.533, (-4.287, -10.09, -43.893)), (' A 303  ARG  NH1', ' A 353  GLU  O  ', -0.525, (-7.169, 8.441, -52.825)), (' A  21  ARG  NE ', ' A 136  GLU  OE2', -0.522, (-7.872, 38.964, -58.027)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.522, (1.734, -2.218, -45.679)), (' B 516  ASN  ND2', ' B 814  HOH  O  ', -0.521, (-33.202, 16.461, -24.053)), (' B  95  ASN  N  ', ' B  95  ASN  OD1', -0.514, (14.678, -4.25, -42.033)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.506, (-27.115, 10.595, -79.711)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.505, (-40.875, 27.69, -64.842)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.499, (-12.995, 6.577, -52.305)), (' B   7  LEU HD21', ' B 130  LEU HD21', -0.494, (-0.104, 3.2, -29.932)), (' B 376  ILE HD11', ' B 384  LEU HD21', -0.492, (-8.096, 23.295, -27.474)), (' B 497  ARG  O  ', ' B 501  THR HG23', -0.485, (-48.823, 31.132, -11.084)), (' B  11  GLN  HG2', ' B  93  TYR  CD2', -0.482, (9.007, 2.586, -44.046)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.482, (-9.007, -12.184, -46.602)), (' A 152  ALA  HB1', ' A 165  LEU HD22', -0.476, (-37.622, 36.127, -64.962)), (' B  69  SER  HB2', ' B  71  TYR  CE2', -0.474, (-0.058, -16.591, -53.935)), (' B  17  GLY  HA3', ' B  41  LEU HD23', -0.474, (-7.841, -4.897, -42.365)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.469, (-1.34, -6.287, -73.417)), (' B 455  LEU  HG ', ' B 456  VAL HG13', -0.467, (-19.153, 23.864, -9.218)), (' B 158  LEU HD13', ' B 164  HIS  HB2', -0.461, (-48.459, 15.057, -39.37)), (' B 268  ASN  ND2', ' B 436  MET  HG2', -0.459, (-2.509, 36.055, -17.623)), (' A 121  ILE HG23', ' A 421  TYR  CE1', -0.457, (-2.048, 34.38, -78.573)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.456, (-32.2, 20.394, -79.425)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.455, (-36.508, 9.832, -38.192)), (' A 508  LYS  HB2', ' A 508  LYS  HE3', -0.453, (-30.68, 4.912, -81.927)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.452, (-6.08, 27.238, -20.677)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.451, (5.392, -1.729, -39.346)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.451, (2.451, 41.966, -29.212)), (' B 254  PRO  HB3', ' B 298  TYR  CE2', -0.449, (1.771, 45.527, -25.235)), (' A 705  PO4  O4 ', ' A 802  HOH  O  ', -0.449, (-14.577, 10.919, -76.152)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.449, (-34.826, 37.42, -66.329)), (' A 156  GLU  HA ', ' A 221  VAL HG22', -0.448, (-47.165, 33.93, -61.121)), (' A 343  PHE  CE2', ' A 345  LYS  HB2', -0.447, (-20.118, 4.477, -60.339)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.446, (7.661, -13.037, -48.059)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.444, (-2.915, 10.207, -76.452)), (' A 127  THR HG22', ' A 130  LEU  HB2', -0.443, (3.173, 37.455, -66.797)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.443, (-47.632, 31.41, -70.231)), (' A 420  GLU  OE1', ' A 427  ARG  NH1', -0.441, (0.334, 30.351, -79.038)), (' A  34  VAL  O  ', ' A  40  LYS  NZ ', -0.437, (0.008, 57.615, -65.008)), (' A 255  THR HG22', ' A 257  ASN  H  ', -0.434, (2.17, -6.234, -63.828)), (' A 443  ARG  HG3', ' A 569  LYS  HG2', -0.434, (-18.548, 5.888, -82.259)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.433, (-31.944, 39.42, -60.117)), (' A 544  VAL  O  ', ' A 572  ILE  HA ', -0.433, (-25.414, 11.61, -89.0)), (' A 472  PHE  HB3', ' A 590  LEU  HG ', -0.428, (-26.407, 12.459, -97.784)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.426, (1.96, -1.071, -29.617)), (' A 127  THR HG23', ' A 130  LEU  H  ', -0.425, (3.753, 36.514, -65.275)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.425, (-12.459, 30.245, -41.666)), (' B 453  SER  HA ', ' B 457  TYR  HB2', -0.425, (-15.726, 29.968, -8.004)), (' B 220  ASN  N  ', ' B 220  ASN  OD1', -0.425, (-42.814, 19.027, -49.246)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.424, (-9.406, 35.441, -18.091)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.423, (-38.853, 28.591, -2.56)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.421, (-16.266, 40.856, -61.138)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.42, (6.719, -1.758, -46.655)), (' A 376  ILE HD11', ' A 384  LEU HD21', -0.419, (-5.345, 21.858, -67.828)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.419, (-0.237, 5.713, -68.364)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.419, (-1.131, 31.006, -34.605)), (' B 368  ALA  O  ', ' B 393  ALA  HA ', -0.418, (1.46, 32.581, -35.937)), (' A 592  ILE  HA ', ' A 592  ILE HD12', -0.418, (-34.283, 16.161, -103.89)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.418, (-34.804, 8.812, -35.947)), (' B  27  CYS  HB3', ' B  88  GLN  HB3', -0.417, (7.993, -7.629, -37.896)), (' B 420  GLU  OE1', ' B 427  ARG  NH1', -0.413, (-6.452, 14.66, -15.598)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.41, (5.654, -1.425, -39.008)), (' A 480  ILE HD11', ' A 852  HOH  O  ', -0.408, (-28.758, 29.567, -93.361)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.407, (-32.927, 14.915, -40.383)), (' B 548  GLN  HG2', ' B 550  THR  O  ', -0.406, (-32.247, 17.64, -10.985)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.406, (-31.604, 20.094, -79.311)), (' B 280  LEU  HB2', ' B 436  MET  HE3', -0.405, (-5.261, 33.522, -20.914)), (' A 498  GLU  HB3', ' A 502  ARG  NH2', -0.404, (-38.148, 13.724, -97.969)), (' B 103  VAL HG12', ' B 107  ASN  ND2', -0.403, (-1.983, -4.737, -27.434)), (' B  12  THR HG22', ' B  13  SER  N  ', -0.4, (5.189, -1.509, -42.701)), (' B   7  LEU  CD2', ' B 130  LEU HD21', -0.4, (0.034, 3.419, -29.923)), (' B 585  LEU  HA ', ' B 585  LEU HD23', -0.4, (-26.594, 28.073, -4.949))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
