# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 277 ', 'ARG', 0.02084418291853045, (6.12, 6.596999999999999, -6.171)), ('B', ' 277 ', 'ARG', 0.02208529693542624, (-6.575, -18.570999999999994, -22.667)), ('C', ' 277 ', 'ARG', 0.02235432488524263, (-6.1060000000000025, -7.9079999999999995, -66.979)), ('D', ' 277 ', 'ARG', 0.013614898230939533, (6.477, -33.289999999999985, -51.213)), ('E', ' 277 ', 'ARG', 0.02576245206845708, (-15.496999999999998, 20.859, -35.168)), ('E', ' 331 ', 'LEU', 0.1729493371372472, (0.023999999999999994, 26.785999999999994, -46.522)), ('F', ' 277 ', 'ARG', 0.018148242162031827, (-3.066, 28.310999999999993, -64.047)), ('F', ' 299 ', 'LYS', 0.0, (12.159000000000006, 16.023, -59.587))]
data['cbeta'] = []
data['probe'] = [(' F 290  GLU  OE2', ' F 299 ALYS  HE3', -0.67, (12.469, 19.9, -62.515)), (' E 331  LEU  C  ', ' E 331  LEU HD23', -0.622, (-1.955, 26.418, -47.701)), (' C 269  ASN  HB2', ' C 292  ILE  O  ', -0.617, (-11.283, -2.044, -59.982)), (' D 289  GLN  HG3', ' D 363  PHE  CE1', -0.61, (13.357, -33.295, -45.515)), (' E 360  TYR  HA ', ' E 363  PHE  CE2', -0.597, (-21.465, 18.455, -34.494)), (' C 360  TYR  HA ', ' C 363  PHE  CZ ', -0.56, (-12.907, -7.658, -69.572)), (' F 299 ALYS  HE2', ' F 585  HOH  O  ', -0.542, (12.069, 18.133, -62.812)), (' A 269  ASN  HB2', ' A 292  ILE  O  ', -0.539, (11.683, 12.048, -13.501)), (' E 322  MET  HE1', ' F 353  LEU  HB2', -0.538, (5.58, 27.463, -49.933)), (' F 269  ASN  HB2', ' F 292  ILE  O  ', -0.537, (2.166, 19.996, -67.098)), (' D 269  ASN  HB2', ' D 292  ILE  O  ', -0.533, (4.023, -31.241, -41.42)), (' F 299 ALYS  HG2', ' F 300  HIS  ND1', -0.528, (13.841, 18.672, -58.311)), (' B 269  ASN  HB2', ' B 292  ILE  O  ', -0.509, (-3.864, -16.054, -33.048)), (' B 289  GLN  HG3', ' B 363  PHE  CE1', -0.502, (-13.127, -18.019, -29.008)), (' E 360  TYR  HA ', ' E 363  PHE  CZ ', -0.502, (-21.288, 18.001, -34.386)), (' B 360  TYR  HA ', ' B 363  PHE  CE2', -0.492, (-12.245, -18.877, -25.717)), (' F 290  GLU  OE2', ' F 299 ALYS  CE ', -0.489, (13.218, 19.958, -62.513)), (' A 266  LYS  HG3', ' A 297  ASP  OD2', -0.487, (15.591, 13.758, -20.192)), (' D 360  TYR  HA ', ' D 363  PHE  CE2', -0.479, (11.983, -33.555, -48.828)), (' D 322  MET  HE2', ' D 329  THR HG21', -0.477, (-15.129, -26.181, -62.889)), (' C 350  VAL HG22', ' D 322  MET  HE1', -0.475, (-16.73, -25.046, -62.041)), (' D 307  PHE  CE1', ' D 339  LEU HD22', -0.456, (9.497, -12.699, -51.028)), (' A 360  TYR  HA ', ' A 363  PHE  CZ ', -0.454, (12.405, 7.018, -4.0)), (' F 289  GLN  HG3', ' F 363  PHE  CE2', -0.452, (5.817, 29.097, -66.713)), (' C 266  LYS  HG3', ' C 297  ASP  OD2', -0.452, (-15.57, -0.969, -52.885)), (' B 264  ALA  HA ', ' B 268  TYR  O  ', -0.45, (0.996, -13.492, -32.987)), (' C 350  VAL  HA ', ' D 322  MET  HE1', -0.45, (-16.424, -23.701, -61.969)), (' E 322  MET  HE1', ' F 353  LEU  CB ', -0.449, (5.371, 27.302, -49.94)), (' E 351  ILE HD11', ' E 601  HOH  O  ', -0.443, (-31.827, 10.943, -51.492)), (' D 293  ARG  NH2', ' D 503  HOH  O  ', -0.443, (10.955, -34.192, -39.034)), (' C 325  THR  HB ', ' C 326  PRO  CD ', -0.431, (15.362, -11.363, -65.404)), (' C 338  LYS  HB2', ' D 330  TRP  CZ3', -0.423, (-7.976, -30.969, -57.346)), (' C 341  ASP  HA ', ' C 346  PHE  CD1', -0.417, (-18.675, -29.533, -58.551)), (' C 259  ARG  NE ', ' C 501  HOH  O  ', -0.414, (1.15, -5.645, -59.803)), (' D 319  ARG  HB2', ' D 334  THR HG22', -0.412, (-1.59, -18.393, -64.851)), (' D 322  MET  HE2', ' D 329  THR  CG2', -0.412, (-14.783, -26.619, -62.693)), (' F 325  THR  HB ', ' F 326  PRO  CD ', -0.41, (-25.02, 28.544, -60.512)), (' E 325  THR  HB ', ' E 326  PRO  HD2', -0.408, (-2.696, 34.284, -37.016)), (' F 341  ASP  HA ', ' F 346  PHE  CD1', -0.408, (9.309, 26.55, -40.306)), (' C 341  ASP  HA ', ' C 346  PHE  CG ', -0.408, (-19.287, -30.005, -58.505)), (' C 343  ASP  OD1', ' C 344  PRO  HD2', -0.407, (-23.493, -28.377, -52.036)), (' C 350  VAL HG22', ' D 322  MET  CE ', -0.404, (-16.579, -25.187, -62.121)), (' D 319  ARG  HB2', ' D 334  THR  CG2', -0.403, (-1.349, -18.277, -64.908)), (' E 338  LYS  HE2', ' F 327  SER  O  ', -0.4, (-21.455, 21.831, -63.112))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
