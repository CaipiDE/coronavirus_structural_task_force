# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 144  LYS  HB3', ' B 147  ILE HD12', -1.058, (18.52, -30.574, -39.764)), (' D  82  ASP  OD1', ' D 140  LEU  HB2', -0.923, (9.754, -11.676, -50.04)), (' C 162  LEU HD13', ' C 166  THR HG22', -0.878, (32.053, -21.583, -24.451)), (' B 144  LYS  HB3', ' B 147  ILE  CD1', -0.861, (19.412, -30.109, -39.489)), (' C 162  LEU HD22', ' C 166  THR HG21', -0.843, (33.07, -19.666, -25.405)), (' C  96  ARG  HG2', ' C  96  ARG HH11', -0.795, (25.403, -12.909, 8.556)), (' C 162  LEU  HB3', ' C 166  THR  HB ', -0.732, (31.204, -20.48, -26.504)), (' C 108  ARG  NH1', ' C 201  HOH  O  ', -0.729, (26.336, -14.692, -11.638)), (' A  56  ALA  HB2', ' A 110  TYR  CD1', -0.728, (15.51, -7.415, -15.367)), (' D 131  ILE  CG2', ' D 201  HOH  O  ', -0.696, (-8.979, -6.354, -48.82)), (' A  56  ALA  HB2', ' A 110  TYR  CE1', -0.686, (15.644, -7.631, -15.35)), (' D 133  TRP  NE1', ' D 201  HOH  O  ', -0.682, (-8.549, -6.523, -49.498)), (' B 113  TYR  CD2', ' B 147  ILE HG21', -0.68, (17.1, -32.337, -35.778)), (' C 162  LEU HD13', ' C 166  THR  CG2', -0.669, (32.482, -21.447, -24.962)), (' D  82  ASP  OD1', ' D 140  LEU  CB ', -0.651, (8.945, -12.314, -49.688)), (' C  58  THR  H  ', ' C 173  TYR  HB2', -0.612, (28.892, -18.628, -14.356)), (' C  96  ARG  HG2', ' C  96  ARG  NH1', -0.606, (24.665, -13.329, 9.183)), (' C  49  ASN  O  ', ' C  50  THR HG23', -0.602, (37.031, 1.786, -11.616)), (' A  75  ILE HD11', ' A 163  PRO  HG3', -0.581, (13.469, 8.921, -10.275)), (' C  59  GLN  NE2', ' C  63  GLU  O  ', -0.573, (36.578, -24.067, -11.155)), (' B 144  LYS  CB ', ' B 147  ILE HD12', -0.566, (17.931, -30.016, -39.843)), (' C  55  THR  OG1', ' C 160  LEU  N  ', -0.548, (26.948, -12.073, -20.173)), (' C  87  TYR  HB3', ' C 133  TRP  CE3', -0.544, (44.546, -12.426, -19.737)), (' B  83  ASP  HA ', ' B 144  LYS  HE3', -0.539, (21.169, -26.621, -38.32)), (' D 131  ILE  HB ', ' D 201  HOH  O  ', -0.527, (-9.775, -6.283, -49.093)), (' B 113  TYR  CE2', ' B 147  ILE HG21', -0.522, (18.078, -32.367, -35.169)), (' B  85  ILE HG22', ' B 144  LYS  HE2', -0.519, (19.356, -24.983, -37.582)), (' C  55  THR  HG1', ' C 160  LEU  H  ', -0.518, (27.052, -13.057, -19.213)), (' D  56  ALA  HB1', ' D 108  ARG  HB3', -0.518, (-9.392, 1.867, -36.176)), (' C 124  TYR  CE1', ' C 133  TRP  HB3', -0.515, (45.653, -15.272, -22.452)), (' C  49  ASN  HB2', ' C 152  PRO  HD2', -0.511, (31.264, 1.688, -12.783)), (' A  83  ASP  HA ', ' A 144  LYS  HE3', -0.508, (2.66, 6.867, -17.939)), (' C 151  ASN HD22', ' C 154  ASN  ND2', -0.506, (29.187, 6.076, -17.566)), (' D  61  GLY  HA3', ' D 171  GLY  HA3', -0.501, (-11.322, 12.69, -43.854)), (' C  53  TRP  CD2', ' C 150  ARG  HB2', -0.499, (31.553, -2.111, -20.062)), (' C  60  HIS  N  ', ' C 171  GLY  O  ', -0.494, (30.754, -23.906, -11.165)), (' A  93  ARG  HB3', ' B 167  THR  OG1', -0.493, (17.435, -19.745, -15.096)), (' B  76  ASN  O  ', ' B  79  SER  OG ', -0.493, (24.108, -32.654, -31.946)), (' B  65  LEU  O  ', ' B 132  ILE HG21', -0.48, (8.606, -21.538, -24.141)), (' A  87  TYR  HB3', ' A 133  TRP  CE3', -0.479, (2.39, -3.153, -12.356)), (' C 151  ASN  ND2', ' C 154  ASN  CG ', -0.478, (29.036, 5.775, -16.847)), (' B  50  THR HG22', ' B  51  ALA  H  ', -0.477, (8.924, -38.579, -36.056)), (' B 145  ASP  O  ', ' B 146  HIS  C  ', -0.474, (17.75, -34.383, -41.971)), (' B  53  TRP  CD2', ' B 150  ARG  HB2', -0.471, (14.396, -39.228, -34.443)), (' A  95  ILE HD11', ' B 165  GLY  HA2', -0.471, (23.504, -24.243, -15.408)), (' C  65  LEU HD11', ' C  67  PHE  CE2', -0.47, (35.972, -20.713, -19.26)), (' D  63  GLU  HB2', ' D 170  LYS  HD2', -0.467, (-11.565, 10.854, -49.914)), (' A  66  LYS  HA ', ' A  66  LYS  HD2', -0.466, (5.813, -3.729, -3.613)), (' C  76  ASN  ND2', ' C  79  SER  OG ', -0.466, (33.572, -5.735, -28.502)), (' A  83  ASP  OD1', ' A 201  HOH  O  ', -0.466, (2.104, 8.234, -20.544)), (' D  62  LYS  HB3', ' D  62  LYS  HE2', -0.462, (-15.804, 11.613, -49.226)), (' D 119  GLU  HB3', ' D 122  LEU HD22', -0.461, (-10.606, -11.625, -45.929)), (' D  63  GLU  CB ', ' D 170  LYS  HD2', -0.457, (-11.002, 11.073, -49.978)), (' D 163  PRO  O  ', ' D 166  THR  OG1', -0.453, (5.714, 7.269, -44.914)), (' C  57  LEU  HA ', ' C  57  LEU HD23', -0.452, (29.562, -17.509, -16.053)), (' D  57  LEU HD23', ' D 174  ALA  HA ', -0.452, (-3.822, 6.79, -38.009)), (' D  56  ALA  HB2', ' D 110  TYR  CZ ', -0.45, (-8.404, 0.568, -34.403)), (' C  93  ARG  CZ ', ' C 108  ARG  HE ', -0.45, (28.54, -14.354, -7.159)), (' D 115  GLY  HA2', ' D 120  ALA  O  ', -0.449, (-4.225, -14.787, -44.627)), (' D  64  ASP  HB3', ' D 109  TRP  HZ2', -0.449, (-11.65, 3.256, -46.314)), (' B  84  GLN  HB2', ' B 136  THR  OG1', -0.448, (23.253, -24.806, -31.739)), (' B 124  TYR  CE1', ' B 133  TRP  HB3', -0.448, (14.065, -20.091, -32.286)), (' C  59  GLN  HG2', ' C 107  PRO  HD2', -0.446, (33.242, -20.935, -8.236)), (' D 131  ILE HG21', ' D 201  HOH  O  ', -0.445, (-8.99, -7.337, -48.465)), (' C  68  PRO  HG2', ' C  71  GLN  OE1', -0.444, (38.004, -25.148, -26.423)), (' D  53  TRP  CD2', ' D 150  ARG  HB2', -0.444, (0.191, -8.034, -32.116)), (' D  90  ARG  HG2', ' D 109  TRP  CD2', -0.443, (-11.098, 0.727, -43.177)), (' C 146  HIS  CD2', ' C 147  ILE HG13', -0.442, (38.677, -1.501, -28.633)), (' B  56  ALA  HB2', ' B 110  TYR  CE1', -0.441, (8.067, -35.459, -25.538)), (' A 162  LEU HD13', ' A 166  THR HG21', -0.439, (13.38, 3.354, -5.473)), (' B  87  TYR  HB3', ' B 133  TRP  CE3', -0.435, (11.223, -23.03, -33.163)), (' A  95  ILE HG13', ' A  96  ARG  N  ', -0.434, (22.0, -25.587, -12.912)), (' C 145  ASP  N  ', ' C 145  ASP  OD1', -0.432, (43.43, -0.012, -25.871)), (' D  48  ASN  N  ', ' D  48  ASN  OD1', -0.432, (-9.617, -18.392, -28.832)), (' A  85  ILE HG13', ' A 135  ALA  HB2', -0.423, (1.852, 3.69, -10.824)), (' C  58  THR HG22', ' C 106  SER  HB2', -0.415, (29.164, -19.65, -8.409)), (' C  82  ASP  HB3', ' C 140  LEU HD22', -0.406, (44.445, -6.667, -33.811)), (' D  76  ASN  O  ', ' D  79  SER  HB2', -0.405, (9.0, -4.666, -39.316)), (' D  81  PRO  O  ', ' D 139  ALA  HA ', -0.405, (8.744, -7.955, -48.413)), (' C 173  TYR  HA ', ' C 222  HOH  O  ', -0.404, (26.175, -21.012, -13.699)), (' D  64  ASP  HB3', ' D 109  TRP  CZ2', -0.402, (-11.554, 3.019, -46.452)), (' A  71  GLN  HB3', ' A 166  THR HG23', -0.401, (11.351, 4.799, -4.139))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
